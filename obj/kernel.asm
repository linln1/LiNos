
bin/kernel：     文件格式 elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 b0 16 00       	mov    $0x16b000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 b0 16 c0       	mov    %eax,0xc016b000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 a0 16 c0       	mov    $0xc016a000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));

static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	55                   	push   %ebp
c0100037:	89 e5                	mov    %esp,%ebp
c0100039:	83 ec 38             	sub    $0x38,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c010003c:	ba 48 13 17 c0       	mov    $0xc0171348,%edx
c0100041:	b8 00 d0 16 c0       	mov    $0xc016d000,%eax
c0100046:	29 c2                	sub    %eax,%edx
c0100048:	89 d0                	mov    %edx,%eax
c010004a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010004e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100055:	00 
c0100056:	c7 04 24 00 d0 16 c0 	movl   $0xc016d000,(%esp)
c010005d:	e8 9d 10 02 00       	call   c01210ff <memset>

    cons_init();                // init the console
c0100062:	e8 dc 1a 00 00       	call   c0101b43 <cons_init>

    const char *message1 = "OS staring";
c0100067:	c7 45 f4 a0 12 12 c0 	movl   $0xc01212a0,-0xc(%ebp)
    const char *message2 = "OS staring.";
c010006e:	c7 45 f0 ab 12 12 c0 	movl   $0xc01212ab,-0x10(%ebp)
    const char *message3 = "OS staring..";
c0100075:	c7 45 ec b7 12 12 c0 	movl   $0xc01212b7,-0x14(%ebp)
    const char *message4 = "OS staring...";
c010007c:	c7 45 e8 c4 12 12 c0 	movl   $0xc01212c4,-0x18(%ebp)
    const char *message5 = "OS staring....";
c0100083:	c7 45 e4 d2 12 12 c0 	movl   $0xc01212d2,-0x1c(%ebp)
    const char *message6 = "OS staring.....";
c010008a:	c7 45 e0 e1 12 12 c0 	movl   $0xc01212e1,-0x20(%ebp)
    cprintf("%s\n", message1);
c0100091:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100094:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100098:	c7 04 24 f1 12 12 c0 	movl   $0xc01212f1,(%esp)
c010009f:	e8 4f 03 00 00       	call   c01003f3 <cprintf>
    cprintf("%s\n", message2);
c01000a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01000a7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01000ab:	c7 04 24 f1 12 12 c0 	movl   $0xc01212f1,(%esp)
c01000b2:	e8 3c 03 00 00       	call   c01003f3 <cprintf>
    cprintf("%s\n", message3);
c01000b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01000ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01000be:	c7 04 24 f1 12 12 c0 	movl   $0xc01212f1,(%esp)
c01000c5:	e8 29 03 00 00       	call   c01003f3 <cprintf>
    cprintf("%s\n", message4);
c01000ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01000cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01000d1:	c7 04 24 f1 12 12 c0 	movl   $0xc01212f1,(%esp)
c01000d8:	e8 16 03 00 00       	call   c01003f3 <cprintf>
    cprintf("%s\n", message5);
c01000dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01000e0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01000e4:	c7 04 24 f1 12 12 c0 	movl   $0xc01212f1,(%esp)
c01000eb:	e8 03 03 00 00       	call   c01003f3 <cprintf>
    cprintf("%s\n\n", message6);
c01000f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01000f3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01000f7:	c7 04 24 f5 12 12 c0 	movl   $0xc01212f5,(%esp)
c01000fe:	e8 f0 02 00 00       	call   c01003f3 <cprintf>

    print_kerninfo();
c0100103:	e8 f8 09 00 00       	call   c0100b00 <print_kerninfo>

    //grade_backtrace();
	idt_init();                 // init interrupt descriptor table
c0100108:	e8 77 25 00 00       	call   c0102684 <idt_init>
    pmm_init();                 // init physical memory management
c010010d:	e8 75 ca 00 00       	call   c010cb87 <pmm_init>

    pic_init();                 // init interrupt controller
c0100112:	e8 16 24 00 00       	call   c010252d <pic_init>
    

    vmm_init();                 // init virtual memory management
c0100117:	e8 b7 14 01 00       	call   c01115d3 <vmm_init>
    sched_init();               // init scheduler
c010011c:	e8 70 81 01 00       	call   c0118291 <sched_init>
    proc_init();                // init process table
c0100121:	e8 18 6f 01 00       	call   c011703e <proc_init>
    
    ide_init();                 // init ide devices
c0100126:	e8 49 1b 00 00       	call   c0101c74 <ide_init>
    swap_init();                // init swap
c010012b:	e8 3e e0 00 00       	call   c010e16e <swap_init>
    fs_init();                  // init fs
c0100130:	e8 c1 3f 01 00       	call   c01140f6 <fs_init>
    
    clock_init();               // init clock interrupt
c0100135:	e8 b3 11 00 00       	call   c01012ed <clock_init>
    intr_enable();              // enable irq interrupt
c010013a:	e8 5c 23 00 00       	call   c010249b <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    print_osinfo();
c010013f:	e8 5e 0a 00 00       	call   c0100ba2 <print_osinfo>

    cpu_idle();                 // run idle process
c0100144:	e8 d5 71 01 00       	call   c011731e <cpu_idle>

c0100149 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c0100149:	55                   	push   %ebp
c010014a:	89 e5                	mov    %esp,%ebp
c010014c:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c010014f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0100156:	00 
c0100157:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010015e:	00 
c010015f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100166:	e8 99 10 00 00       	call   c0101204 <mon_backtrace>
}
c010016b:	c9                   	leave  
c010016c:	c3                   	ret    

c010016d <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c010016d:	55                   	push   %ebp
c010016e:	89 e5                	mov    %esp,%ebp
c0100170:	53                   	push   %ebx
c0100171:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c0100174:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c0100177:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010017a:	8d 55 08             	lea    0x8(%ebp),%edx
c010017d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100180:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0100184:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100188:	89 54 24 04          	mov    %edx,0x4(%esp)
c010018c:	89 04 24             	mov    %eax,(%esp)
c010018f:	e8 b5 ff ff ff       	call   c0100149 <grade_backtrace2>
}
c0100194:	83 c4 14             	add    $0x14,%esp
c0100197:	5b                   	pop    %ebx
c0100198:	5d                   	pop    %ebp
c0100199:	c3                   	ret    

c010019a <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c010019a:	55                   	push   %ebp
c010019b:	89 e5                	mov    %esp,%ebp
c010019d:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c01001a0:	8b 45 10             	mov    0x10(%ebp),%eax
c01001a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01001aa:	89 04 24             	mov    %eax,(%esp)
c01001ad:	e8 bb ff ff ff       	call   c010016d <grade_backtrace1>
}
c01001b2:	c9                   	leave  
c01001b3:	c3                   	ret    

c01001b4 <grade_backtrace>:

void
grade_backtrace(void) {
c01001b4:	55                   	push   %ebp
c01001b5:	89 e5                	mov    %esp,%ebp
c01001b7:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c01001ba:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c01001bf:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c01001c6:	ff 
c01001c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001cb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01001d2:	e8 c3 ff ff ff       	call   c010019a <grade_backtrace0>
}
c01001d7:	c9                   	leave  
c01001d8:	c3                   	ret    

c01001d9 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c01001d9:	55                   	push   %ebp
c01001da:	89 e5                	mov    %esp,%ebp
c01001dc:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c01001df:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c01001e2:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c01001e5:	8c 45 f2             	mov    %es,-0xe(%ebp)
c01001e8:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c01001eb:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01001ef:	0f b7 c0             	movzwl %ax,%eax
c01001f2:	83 e0 03             	and    $0x3,%eax
c01001f5:	89 c2                	mov    %eax,%edx
c01001f7:	a1 00 d0 16 c0       	mov    0xc016d000,%eax
c01001fc:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100200:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100204:	c7 04 24 fa 12 12 c0 	movl   $0xc01212fa,(%esp)
c010020b:	e8 e3 01 00 00       	call   c01003f3 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c0100210:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100214:	0f b7 d0             	movzwl %ax,%edx
c0100217:	a1 00 d0 16 c0       	mov    0xc016d000,%eax
c010021c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100220:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100224:	c7 04 24 08 13 12 c0 	movl   $0xc0121308,(%esp)
c010022b:	e8 c3 01 00 00       	call   c01003f3 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c0100230:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0100234:	0f b7 d0             	movzwl %ax,%edx
c0100237:	a1 00 d0 16 c0       	mov    0xc016d000,%eax
c010023c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100240:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100244:	c7 04 24 16 13 12 c0 	movl   $0xc0121316,(%esp)
c010024b:	e8 a3 01 00 00       	call   c01003f3 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c0100250:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0100254:	0f b7 d0             	movzwl %ax,%edx
c0100257:	a1 00 d0 16 c0       	mov    0xc016d000,%eax
c010025c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100260:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100264:	c7 04 24 24 13 12 c0 	movl   $0xc0121324,(%esp)
c010026b:	e8 83 01 00 00       	call   c01003f3 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c0100270:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0100274:	0f b7 d0             	movzwl %ax,%edx
c0100277:	a1 00 d0 16 c0       	mov    0xc016d000,%eax
c010027c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100280:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100284:	c7 04 24 32 13 12 c0 	movl   $0xc0121332,(%esp)
c010028b:	e8 63 01 00 00       	call   c01003f3 <cprintf>
    round ++;
c0100290:	a1 00 d0 16 c0       	mov    0xc016d000,%eax
c0100295:	83 c0 01             	add    $0x1,%eax
c0100298:	a3 00 d0 16 c0       	mov    %eax,0xc016d000
}
c010029d:	c9                   	leave  
c010029e:	c3                   	ret    

c010029f <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c010029f:	55                   	push   %ebp
c01002a0:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c01002a2:	5d                   	pop    %ebp
c01002a3:	c3                   	ret    

c01002a4 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c01002a4:	55                   	push   %ebp
c01002a5:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c01002a7:	5d                   	pop    %ebp
c01002a8:	c3                   	ret    

c01002a9 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c01002a9:	55                   	push   %ebp
c01002aa:	89 e5                	mov    %esp,%ebp
c01002ac:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c01002af:	e8 25 ff ff ff       	call   c01001d9 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c01002b4:	c7 04 24 40 13 12 c0 	movl   $0xc0121340,(%esp)
c01002bb:	e8 33 01 00 00       	call   c01003f3 <cprintf>
    lab1_switch_to_user();
c01002c0:	e8 da ff ff ff       	call   c010029f <lab1_switch_to_user>
    lab1_print_cur_status();
c01002c5:	e8 0f ff ff ff       	call   c01001d9 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c01002ca:	c7 04 24 60 13 12 c0 	movl   $0xc0121360,(%esp)
c01002d1:	e8 1d 01 00 00       	call   c01003f3 <cprintf>
    lab1_switch_to_kernel();
c01002d6:	e8 c9 ff ff ff       	call   c01002a4 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c01002db:	e8 f9 fe ff ff       	call   c01001d9 <lab1_print_cur_status>
}
c01002e0:	c9                   	leave  
c01002e1:	c3                   	ret    

c01002e2 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c01002e2:	55                   	push   %ebp
c01002e3:	89 e5                	mov    %esp,%ebp
c01002e5:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c01002e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01002ec:	74 13                	je     c0100301 <readline+0x1f>
        cprintf("%s", prompt);
c01002ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01002f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01002f5:	c7 04 24 7f 13 12 c0 	movl   $0xc012137f,(%esp)
c01002fc:	e8 f2 00 00 00       	call   c01003f3 <cprintf>
    }
    int i = 0, c;
c0100301:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100308:	e8 6e 01 00 00       	call   c010047b <getchar>
c010030d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100310:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100314:	79 07                	jns    c010031d <readline+0x3b>
            return NULL;
c0100316:	b8 00 00 00 00       	mov    $0x0,%eax
c010031b:	eb 79                	jmp    c0100396 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010031d:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0100321:	7e 28                	jle    c010034b <readline+0x69>
c0100323:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c010032a:	7f 1f                	jg     c010034b <readline+0x69>
            cputchar(c);
c010032c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010032f:	89 04 24             	mov    %eax,(%esp)
c0100332:	e8 e2 00 00 00       	call   c0100419 <cputchar>
            buf[i ++] = c;
c0100337:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010033a:	8d 50 01             	lea    0x1(%eax),%edx
c010033d:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100340:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100343:	88 90 20 d0 16 c0    	mov    %dl,-0x3fe92fe0(%eax)
c0100349:	eb 46                	jmp    c0100391 <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c010034b:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c010034f:	75 17                	jne    c0100368 <readline+0x86>
c0100351:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100355:	7e 11                	jle    c0100368 <readline+0x86>
            cputchar(c);
c0100357:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010035a:	89 04 24             	mov    %eax,(%esp)
c010035d:	e8 b7 00 00 00       	call   c0100419 <cputchar>
            i --;
c0100362:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0100366:	eb 29                	jmp    c0100391 <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c0100368:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c010036c:	74 06                	je     c0100374 <readline+0x92>
c010036e:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c0100372:	75 1d                	jne    c0100391 <readline+0xaf>
            cputchar(c);
c0100374:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100377:	89 04 24             	mov    %eax,(%esp)
c010037a:	e8 9a 00 00 00       	call   c0100419 <cputchar>
            buf[i] = '\0';
c010037f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100382:	05 20 d0 16 c0       	add    $0xc016d020,%eax
c0100387:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c010038a:	b8 20 d0 16 c0       	mov    $0xc016d020,%eax
c010038f:	eb 05                	jmp    c0100396 <readline+0xb4>
        }
    }
c0100391:	e9 72 ff ff ff       	jmp    c0100308 <readline+0x26>
}
c0100396:	c9                   	leave  
c0100397:	c3                   	ret    

c0100398 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100398:	55                   	push   %ebp
c0100399:	89 e5                	mov    %esp,%ebp
c010039b:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c010039e:	8b 45 08             	mov    0x8(%ebp),%eax
c01003a1:	89 04 24             	mov    %eax,(%esp)
c01003a4:	e8 c6 17 00 00       	call   c0101b6f <cons_putc>
    (*cnt) ++;
c01003a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01003ac:	8b 00                	mov    (%eax),%eax
c01003ae:	8d 50 01             	lea    0x1(%eax),%edx
c01003b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01003b4:	89 10                	mov    %edx,(%eax)
}
c01003b6:	c9                   	leave  
c01003b7:	c3                   	ret    

c01003b8 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c01003b8:	55                   	push   %ebp
c01003b9:	89 e5                	mov    %esp,%ebp
c01003bb:	83 ec 38             	sub    $0x38,%esp
    int cnt = 0;
c01003be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, NO_FD, &cnt, fmt, ap);
c01003c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01003c8:	89 44 24 10          	mov    %eax,0x10(%esp)
c01003cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01003cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01003d3:	8d 45 f4             	lea    -0xc(%ebp),%eax
c01003d6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01003da:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c01003e1:	ff 
c01003e2:	c7 04 24 98 03 10 c0 	movl   $0xc0100398,(%esp)
c01003e9:	e8 c1 03 02 00       	call   c01207af <vprintfmt>
    return cnt;
c01003ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01003f1:	c9                   	leave  
c01003f2:	c3                   	ret    

c01003f3 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c01003f3:	55                   	push   %ebp
c01003f4:	89 e5                	mov    %esp,%ebp
c01003f6:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c01003f9:	8d 45 0c             	lea    0xc(%ebp),%eax
c01003fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c01003ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100402:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100406:	8b 45 08             	mov    0x8(%ebp),%eax
c0100409:	89 04 24             	mov    %eax,(%esp)
c010040c:	e8 a7 ff ff ff       	call   c01003b8 <vcprintf>
c0100411:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100414:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100417:	c9                   	leave  
c0100418:	c3                   	ret    

c0100419 <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c0100419:	55                   	push   %ebp
c010041a:	89 e5                	mov    %esp,%ebp
c010041c:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c010041f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100422:	89 04 24             	mov    %eax,(%esp)
c0100425:	e8 45 17 00 00       	call   c0101b6f <cons_putc>
}
c010042a:	c9                   	leave  
c010042b:	c3                   	ret    

c010042c <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c010042c:	55                   	push   %ebp
c010042d:	89 e5                	mov    %esp,%ebp
c010042f:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c0100432:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c0100439:	eb 13                	jmp    c010044e <cputs+0x22>
        cputch(c, &cnt);
c010043b:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c010043f:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0100442:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100446:	89 04 24             	mov    %eax,(%esp)
c0100449:	e8 4a ff ff ff       	call   c0100398 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c010044e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100451:	8d 50 01             	lea    0x1(%eax),%edx
c0100454:	89 55 08             	mov    %edx,0x8(%ebp)
c0100457:	0f b6 00             	movzbl (%eax),%eax
c010045a:	88 45 f7             	mov    %al,-0x9(%ebp)
c010045d:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c0100461:	75 d8                	jne    c010043b <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c0100463:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0100466:	89 44 24 04          	mov    %eax,0x4(%esp)
c010046a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0100471:	e8 22 ff ff ff       	call   c0100398 <cputch>
    return cnt;
c0100476:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100479:	c9                   	leave  
c010047a:	c3                   	ret    

c010047b <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c010047b:	55                   	push   %ebp
c010047c:	89 e5                	mov    %esp,%ebp
c010047e:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100481:	e8 25 17 00 00       	call   c0101bab <cons_getc>
c0100486:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100489:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010048d:	74 f2                	je     c0100481 <getchar+0x6>
        /* do nothing */;
    return c;
c010048f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100492:	c9                   	leave  
c0100493:	c3                   	ret    

c0100494 <strdup>:
#include <string.h>
#include <kmalloc.h>

char *
strdup(const char *src) {
c0100494:	55                   	push   %ebp
c0100495:	89 e5                	mov    %esp,%ebp
c0100497:	83 ec 28             	sub    $0x28,%esp
    char *dst;
    size_t len = strlen(src);
c010049a:	8b 45 08             	mov    0x8(%ebp),%eax
c010049d:	89 04 24             	mov    %eax,(%esp)
c01004a0:	e8 04 09 02 00       	call   c0120da9 <strlen>
c01004a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((dst = kmalloc(len + 1)) != NULL) {
c01004a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004ab:	83 c0 01             	add    $0x1,%eax
c01004ae:	89 04 24             	mov    %eax,(%esp)
c01004b1:	e8 fa a5 00 00       	call   c010aab0 <kmalloc>
c01004b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01004b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01004bd:	74 24                	je     c01004e3 <strdup+0x4f>
        memcpy(dst, src, len);
c01004bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004c2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01004c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d0:	89 04 24             	mov    %eax,(%esp)
c01004d3:	e8 09 0d 02 00       	call   c01211e1 <memcpy>
        dst[len] = '\0';
c01004d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004db:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004de:	01 d0                	add    %edx,%eax
c01004e0:	c6 00 00             	movb   $0x0,(%eax)
    }
    return dst;
c01004e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01004e6:	c9                   	leave  
c01004e7:	c3                   	ret    

c01004e8 <stradd>:

char *
stradd(const char *src1, const char *src2) {
c01004e8:	55                   	push   %ebp
c01004e9:	89 e5                	mov    %esp,%ebp
c01004eb:	83 ec 28             	sub    $0x28,%esp
    char *ret, *dst;
    size_t len1 = strlen(src1), len2 = strlen(src2);
c01004ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01004f1:	89 04 24             	mov    %eax,(%esp)
c01004f4:	e8 b0 08 02 00       	call   c0120da9 <strlen>
c01004f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01004fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004ff:	89 04 24             	mov    %eax,(%esp)
c0100502:	e8 a2 08 02 00       	call   c0120da9 <strlen>
c0100507:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = dst = kmalloc(len1 + len2 + 1)) != NULL) {
c010050a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010050d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100510:	01 d0                	add    %edx,%eax
c0100512:	83 c0 01             	add    $0x1,%eax
c0100515:	89 04 24             	mov    %eax,(%esp)
c0100518:	e8 93 a5 00 00       	call   c010aab0 <kmalloc>
c010051d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100520:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100523:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0100526:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010052a:	74 44                	je     c0100570 <stradd+0x88>
        memcpy(dst, src1, len1), dst += len1;
c010052c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010052f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100533:	8b 45 08             	mov    0x8(%ebp),%eax
c0100536:	89 44 24 04          	mov    %eax,0x4(%esp)
c010053a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010053d:	89 04 24             	mov    %eax,(%esp)
c0100540:	e8 9c 0c 02 00       	call   c01211e1 <memcpy>
c0100545:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100548:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(dst, src2, len2), dst += len2;
c010054b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010054e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100552:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100555:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100559:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010055c:	89 04 24             	mov    %eax,(%esp)
c010055f:	e8 7d 0c 02 00       	call   c01211e1 <memcpy>
c0100564:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100567:	01 45 ec             	add    %eax,-0x14(%ebp)
        *dst = '\0';
c010056a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010056d:	c6 00 00             	movb   $0x0,(%eax)
    }
    return ret;
c0100570:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c0100573:	c9                   	leave  
c0100574:	c3                   	ret    

c0100575 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c0100575:	55                   	push   %ebp
c0100576:	89 e5                	mov    %esp,%ebp
c0100578:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c010057b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010057e:	8b 00                	mov    (%eax),%eax
c0100580:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100583:	8b 45 10             	mov    0x10(%ebp),%eax
c0100586:	8b 00                	mov    (%eax),%eax
c0100588:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010058b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100592:	e9 d2 00 00 00       	jmp    c0100669 <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c0100597:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010059a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010059d:	01 d0                	add    %edx,%eax
c010059f:	89 c2                	mov    %eax,%edx
c01005a1:	c1 ea 1f             	shr    $0x1f,%edx
c01005a4:	01 d0                	add    %edx,%eax
c01005a6:	d1 f8                	sar    %eax
c01005a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01005ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01005ae:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c01005b1:	eb 04                	jmp    c01005b7 <stab_binsearch+0x42>
            m --;
c01005b3:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c01005b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005ba:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01005bd:	7c 1f                	jl     c01005de <stab_binsearch+0x69>
c01005bf:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005c2:	89 d0                	mov    %edx,%eax
c01005c4:	01 c0                	add    %eax,%eax
c01005c6:	01 d0                	add    %edx,%eax
c01005c8:	c1 e0 02             	shl    $0x2,%eax
c01005cb:	89 c2                	mov    %eax,%edx
c01005cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01005d0:	01 d0                	add    %edx,%eax
c01005d2:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01005d6:	0f b6 c0             	movzbl %al,%eax
c01005d9:	3b 45 14             	cmp    0x14(%ebp),%eax
c01005dc:	75 d5                	jne    c01005b3 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c01005de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005e1:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01005e4:	7d 0b                	jge    c01005f1 <stab_binsearch+0x7c>
            l = true_m + 1;
c01005e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01005e9:	83 c0 01             	add    $0x1,%eax
c01005ec:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c01005ef:	eb 78                	jmp    c0100669 <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c01005f1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c01005f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005fb:	89 d0                	mov    %edx,%eax
c01005fd:	01 c0                	add    %eax,%eax
c01005ff:	01 d0                	add    %edx,%eax
c0100601:	c1 e0 02             	shl    $0x2,%eax
c0100604:	89 c2                	mov    %eax,%edx
c0100606:	8b 45 08             	mov    0x8(%ebp),%eax
c0100609:	01 d0                	add    %edx,%eax
c010060b:	8b 40 08             	mov    0x8(%eax),%eax
c010060e:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100611:	73 13                	jae    c0100626 <stab_binsearch+0xb1>
            *region_left = m;
c0100613:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100616:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100619:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010061b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010061e:	83 c0 01             	add    $0x1,%eax
c0100621:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100624:	eb 43                	jmp    c0100669 <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0100626:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100629:	89 d0                	mov    %edx,%eax
c010062b:	01 c0                	add    %eax,%eax
c010062d:	01 d0                	add    %edx,%eax
c010062f:	c1 e0 02             	shl    $0x2,%eax
c0100632:	89 c2                	mov    %eax,%edx
c0100634:	8b 45 08             	mov    0x8(%ebp),%eax
c0100637:	01 d0                	add    %edx,%eax
c0100639:	8b 40 08             	mov    0x8(%eax),%eax
c010063c:	3b 45 18             	cmp    0x18(%ebp),%eax
c010063f:	76 16                	jbe    c0100657 <stab_binsearch+0xe2>
            *region_right = m - 1;
c0100641:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100644:	8d 50 ff             	lea    -0x1(%eax),%edx
c0100647:	8b 45 10             	mov    0x10(%ebp),%eax
c010064a:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c010064c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010064f:	83 e8 01             	sub    $0x1,%eax
c0100652:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0100655:	eb 12                	jmp    c0100669 <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c0100657:	8b 45 0c             	mov    0xc(%ebp),%eax
c010065a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010065d:	89 10                	mov    %edx,(%eax)
            l = m;
c010065f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100662:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c0100665:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c0100669:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010066c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010066f:	0f 8e 22 ff ff ff    	jle    c0100597 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c0100675:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100679:	75 0f                	jne    c010068a <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c010067b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010067e:	8b 00                	mov    (%eax),%eax
c0100680:	8d 50 ff             	lea    -0x1(%eax),%edx
c0100683:	8b 45 10             	mov    0x10(%ebp),%eax
c0100686:	89 10                	mov    %edx,(%eax)
c0100688:	eb 3f                	jmp    c01006c9 <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c010068a:	8b 45 10             	mov    0x10(%ebp),%eax
c010068d:	8b 00                	mov    (%eax),%eax
c010068f:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100692:	eb 04                	jmp    c0100698 <stab_binsearch+0x123>
c0100694:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c0100698:	8b 45 0c             	mov    0xc(%ebp),%eax
c010069b:	8b 00                	mov    (%eax),%eax
c010069d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01006a0:	7d 1f                	jge    c01006c1 <stab_binsearch+0x14c>
c01006a2:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01006a5:	89 d0                	mov    %edx,%eax
c01006a7:	01 c0                	add    %eax,%eax
c01006a9:	01 d0                	add    %edx,%eax
c01006ab:	c1 e0 02             	shl    $0x2,%eax
c01006ae:	89 c2                	mov    %eax,%edx
c01006b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01006b3:	01 d0                	add    %edx,%eax
c01006b5:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01006b9:	0f b6 c0             	movzbl %al,%eax
c01006bc:	3b 45 14             	cmp    0x14(%ebp),%eax
c01006bf:	75 d3                	jne    c0100694 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c01006c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006c4:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01006c7:	89 10                	mov    %edx,(%eax)
    }
}
c01006c9:	c9                   	leave  
c01006ca:	c3                   	ret    

c01006cb <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c01006cb:	55                   	push   %ebp
c01006cc:	89 e5                	mov    %esp,%ebp
c01006ce:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c01006d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006d4:	c7 00 84 13 12 c0    	movl   $0xc0121384,(%eax)
    info->eip_line = 0;
c01006da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006dd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c01006e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006e7:	c7 40 08 84 13 12 c0 	movl   $0xc0121384,0x8(%eax)
    info->eip_fn_namelen = 9;
c01006ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006f1:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c01006f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006fb:	8b 55 08             	mov    0x8(%ebp),%edx
c01006fe:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100701:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100704:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010070b:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100712:	76 21                	jbe    c0100735 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100714:	c7 45 f4 60 8d 12 c0 	movl   $0xc0128d60,-0xc(%ebp)
        stab_end = __STAB_END__;
c010071b:	c7 45 f0 54 99 15 c0 	movl   $0xc0159954,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c0100722:	c7 45 ec 55 99 15 c0 	movl   $0xc0159955,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c0100729:	c7 45 e8 30 7b 16 c0 	movl   $0xc0167b30,-0x18(%ebp)
c0100730:	e9 ea 00 00 00       	jmp    c010081f <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c0100735:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c010073c:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0100741:	85 c0                	test   %eax,%eax
c0100743:	74 11                	je     c0100756 <debuginfo_eip+0x8b>
c0100745:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c010074a:	8b 40 18             	mov    0x18(%eax),%eax
c010074d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0100750:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0100754:	75 0a                	jne    c0100760 <debuginfo_eip+0x95>
            return -1;
c0100756:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010075b:	e9 9e 03 00 00       	jmp    c0100afe <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c0100760:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100763:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010076a:	00 
c010076b:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0100772:	00 
c0100773:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100777:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010077a:	89 04 24             	mov    %eax,(%esp)
c010077d:	e8 ac 17 01 00       	call   c0111f2e <user_mem_check>
c0100782:	85 c0                	test   %eax,%eax
c0100784:	75 0a                	jne    c0100790 <debuginfo_eip+0xc5>
            return -1;
c0100786:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010078b:	e9 6e 03 00 00       	jmp    c0100afe <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0100790:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100793:	8b 00                	mov    (%eax),%eax
c0100795:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c0100798:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010079b:	8b 40 04             	mov    0x4(%eax),%eax
c010079e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c01007a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007a4:	8b 40 08             	mov    0x8(%eax),%eax
c01007a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c01007aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007ad:	8b 40 0c             	mov    0xc(%eax),%eax
c01007b0:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c01007b3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01007b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007b9:	29 c2                	sub    %eax,%edx
c01007bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007be:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01007c5:	00 
c01007c6:	89 54 24 08          	mov    %edx,0x8(%esp)
c01007ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c01007ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01007d1:	89 04 24             	mov    %eax,(%esp)
c01007d4:	e8 55 17 01 00       	call   c0111f2e <user_mem_check>
c01007d9:	85 c0                	test   %eax,%eax
c01007db:	75 0a                	jne    c01007e7 <debuginfo_eip+0x11c>
            return -1;
c01007dd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007e2:	e9 17 03 00 00       	jmp    c0100afe <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c01007e7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01007ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01007ed:	29 c2                	sub    %eax,%edx
c01007ef:	89 d0                	mov    %edx,%eax
c01007f1:	89 c2                	mov    %eax,%edx
c01007f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01007f6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01007fd:	00 
c01007fe:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100802:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100806:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100809:	89 04 24             	mov    %eax,(%esp)
c010080c:	e8 1d 17 01 00       	call   c0111f2e <user_mem_check>
c0100811:	85 c0                	test   %eax,%eax
c0100813:	75 0a                	jne    c010081f <debuginfo_eip+0x154>
            return -1;
c0100815:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010081a:	e9 df 02 00 00       	jmp    c0100afe <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c010081f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100822:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100825:	76 0d                	jbe    c0100834 <debuginfo_eip+0x169>
c0100827:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010082a:	83 e8 01             	sub    $0x1,%eax
c010082d:	0f b6 00             	movzbl (%eax),%eax
c0100830:	84 c0                	test   %al,%al
c0100832:	74 0a                	je     c010083e <debuginfo_eip+0x173>
        return -1;
c0100834:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100839:	e9 c0 02 00 00       	jmp    c0100afe <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c010083e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0100845:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100848:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010084b:	29 c2                	sub    %eax,%edx
c010084d:	89 d0                	mov    %edx,%eax
c010084f:	c1 f8 02             	sar    $0x2,%eax
c0100852:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c0100858:	83 e8 01             	sub    $0x1,%eax
c010085b:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c010085e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100861:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100865:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c010086c:	00 
c010086d:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0100870:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100874:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100877:	89 44 24 04          	mov    %eax,0x4(%esp)
c010087b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010087e:	89 04 24             	mov    %eax,(%esp)
c0100881:	e8 ef fc ff ff       	call   c0100575 <stab_binsearch>
    if (lfile == 0)
c0100886:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100889:	85 c0                	test   %eax,%eax
c010088b:	75 0a                	jne    c0100897 <debuginfo_eip+0x1cc>
        return -1;
c010088d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100892:	e9 67 02 00 00       	jmp    c0100afe <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0100897:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010089a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010089d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01008a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c01008a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01008a6:	89 44 24 10          	mov    %eax,0x10(%esp)
c01008aa:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c01008b1:	00 
c01008b2:	8d 45 d0             	lea    -0x30(%ebp),%eax
c01008b5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01008b9:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01008bc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01008c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008c3:	89 04 24             	mov    %eax,(%esp)
c01008c6:	e8 aa fc ff ff       	call   c0100575 <stab_binsearch>

    if (lfun <= rfun) {
c01008cb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01008ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01008d1:	39 c2                	cmp    %eax,%edx
c01008d3:	7f 7c                	jg     c0100951 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c01008d5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01008d8:	89 c2                	mov    %eax,%edx
c01008da:	89 d0                	mov    %edx,%eax
c01008dc:	01 c0                	add    %eax,%eax
c01008de:	01 d0                	add    %edx,%eax
c01008e0:	c1 e0 02             	shl    $0x2,%eax
c01008e3:	89 c2                	mov    %eax,%edx
c01008e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008e8:	01 d0                	add    %edx,%eax
c01008ea:	8b 10                	mov    (%eax),%edx
c01008ec:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01008ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01008f2:	29 c1                	sub    %eax,%ecx
c01008f4:	89 c8                	mov    %ecx,%eax
c01008f6:	39 c2                	cmp    %eax,%edx
c01008f8:	73 22                	jae    c010091c <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c01008fa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01008fd:	89 c2                	mov    %eax,%edx
c01008ff:	89 d0                	mov    %edx,%eax
c0100901:	01 c0                	add    %eax,%eax
c0100903:	01 d0                	add    %edx,%eax
c0100905:	c1 e0 02             	shl    $0x2,%eax
c0100908:	89 c2                	mov    %eax,%edx
c010090a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010090d:	01 d0                	add    %edx,%eax
c010090f:	8b 10                	mov    (%eax),%edx
c0100911:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100914:	01 c2                	add    %eax,%edx
c0100916:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100919:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c010091c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010091f:	89 c2                	mov    %eax,%edx
c0100921:	89 d0                	mov    %edx,%eax
c0100923:	01 c0                	add    %eax,%eax
c0100925:	01 d0                	add    %edx,%eax
c0100927:	c1 e0 02             	shl    $0x2,%eax
c010092a:	89 c2                	mov    %eax,%edx
c010092c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010092f:	01 d0                	add    %edx,%eax
c0100931:	8b 50 08             	mov    0x8(%eax),%edx
c0100934:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100937:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c010093a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010093d:	8b 40 10             	mov    0x10(%eax),%eax
c0100940:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c0100943:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100946:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c0100949:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010094c:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010094f:	eb 15                	jmp    c0100966 <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c0100951:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100954:	8b 55 08             	mov    0x8(%ebp),%edx
c0100957:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c010095a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010095d:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c0100960:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100963:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c0100966:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100969:	8b 40 08             	mov    0x8(%eax),%eax
c010096c:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c0100973:	00 
c0100974:	89 04 24             	mov    %eax,(%esp)
c0100977:	e8 f7 05 02 00       	call   c0120f73 <strfind>
c010097c:	89 c2                	mov    %eax,%edx
c010097e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100981:	8b 40 08             	mov    0x8(%eax),%eax
c0100984:	29 c2                	sub    %eax,%edx
c0100986:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100989:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c010098c:	8b 45 08             	mov    0x8(%ebp),%eax
c010098f:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100993:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010099a:	00 
c010099b:	8d 45 c8             	lea    -0x38(%ebp),%eax
c010099e:	89 44 24 08          	mov    %eax,0x8(%esp)
c01009a2:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01009a5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01009a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009ac:	89 04 24             	mov    %eax,(%esp)
c01009af:	e8 c1 fb ff ff       	call   c0100575 <stab_binsearch>
    if (lline <= rline) {
c01009b4:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009b7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01009ba:	39 c2                	cmp    %eax,%edx
c01009bc:	7f 24                	jg     c01009e2 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c01009be:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01009c1:	89 c2                	mov    %eax,%edx
c01009c3:	89 d0                	mov    %edx,%eax
c01009c5:	01 c0                	add    %eax,%eax
c01009c7:	01 d0                	add    %edx,%eax
c01009c9:	c1 e0 02             	shl    $0x2,%eax
c01009cc:	89 c2                	mov    %eax,%edx
c01009ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009d1:	01 d0                	add    %edx,%eax
c01009d3:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01009d7:	0f b7 d0             	movzwl %ax,%edx
c01009da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009dd:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01009e0:	eb 13                	jmp    c01009f5 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c01009e2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01009e7:	e9 12 01 00 00       	jmp    c0100afe <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c01009ec:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009ef:	83 e8 01             	sub    $0x1,%eax
c01009f2:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01009f5:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01009fb:	39 c2                	cmp    %eax,%edx
c01009fd:	7c 56                	jl     c0100a55 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c01009ff:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a02:	89 c2                	mov    %eax,%edx
c0100a04:	89 d0                	mov    %edx,%eax
c0100a06:	01 c0                	add    %eax,%eax
c0100a08:	01 d0                	add    %edx,%eax
c0100a0a:	c1 e0 02             	shl    $0x2,%eax
c0100a0d:	89 c2                	mov    %eax,%edx
c0100a0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a12:	01 d0                	add    %edx,%eax
c0100a14:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a18:	3c 84                	cmp    $0x84,%al
c0100a1a:	74 39                	je     c0100a55 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0100a1c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a1f:	89 c2                	mov    %eax,%edx
c0100a21:	89 d0                	mov    %edx,%eax
c0100a23:	01 c0                	add    %eax,%eax
c0100a25:	01 d0                	add    %edx,%eax
c0100a27:	c1 e0 02             	shl    $0x2,%eax
c0100a2a:	89 c2                	mov    %eax,%edx
c0100a2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a2f:	01 d0                	add    %edx,%eax
c0100a31:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a35:	3c 64                	cmp    $0x64,%al
c0100a37:	75 b3                	jne    c01009ec <debuginfo_eip+0x321>
c0100a39:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a3c:	89 c2                	mov    %eax,%edx
c0100a3e:	89 d0                	mov    %edx,%eax
c0100a40:	01 c0                	add    %eax,%eax
c0100a42:	01 d0                	add    %edx,%eax
c0100a44:	c1 e0 02             	shl    $0x2,%eax
c0100a47:	89 c2                	mov    %eax,%edx
c0100a49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a4c:	01 d0                	add    %edx,%eax
c0100a4e:	8b 40 08             	mov    0x8(%eax),%eax
c0100a51:	85 c0                	test   %eax,%eax
c0100a53:	74 97                	je     c01009ec <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c0100a55:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100a58:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100a5b:	39 c2                	cmp    %eax,%edx
c0100a5d:	7c 46                	jl     c0100aa5 <debuginfo_eip+0x3da>
c0100a5f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a62:	89 c2                	mov    %eax,%edx
c0100a64:	89 d0                	mov    %edx,%eax
c0100a66:	01 c0                	add    %eax,%eax
c0100a68:	01 d0                	add    %edx,%eax
c0100a6a:	c1 e0 02             	shl    $0x2,%eax
c0100a6d:	89 c2                	mov    %eax,%edx
c0100a6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a72:	01 d0                	add    %edx,%eax
c0100a74:	8b 10                	mov    (%eax),%edx
c0100a76:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100a79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a7c:	29 c1                	sub    %eax,%ecx
c0100a7e:	89 c8                	mov    %ecx,%eax
c0100a80:	39 c2                	cmp    %eax,%edx
c0100a82:	73 21                	jae    c0100aa5 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100a84:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a87:	89 c2                	mov    %eax,%edx
c0100a89:	89 d0                	mov    %edx,%eax
c0100a8b:	01 c0                	add    %eax,%eax
c0100a8d:	01 d0                	add    %edx,%eax
c0100a8f:	c1 e0 02             	shl    $0x2,%eax
c0100a92:	89 c2                	mov    %eax,%edx
c0100a94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a97:	01 d0                	add    %edx,%eax
c0100a99:	8b 10                	mov    (%eax),%edx
c0100a9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a9e:	01 c2                	add    %eax,%edx
c0100aa0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100aa3:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100aa5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100aa8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100aab:	39 c2                	cmp    %eax,%edx
c0100aad:	7d 4a                	jge    c0100af9 <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100aaf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100ab2:	83 c0 01             	add    $0x1,%eax
c0100ab5:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100ab8:	eb 18                	jmp    c0100ad2 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100aba:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100abd:	8b 40 14             	mov    0x14(%eax),%eax
c0100ac0:	8d 50 01             	lea    0x1(%eax),%edx
c0100ac3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ac6:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100ac9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100acc:	83 c0 01             	add    $0x1,%eax
c0100acf:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100ad2:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100ad5:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100ad8:	39 c2                	cmp    %eax,%edx
c0100ada:	7d 1d                	jge    c0100af9 <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100adc:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100adf:	89 c2                	mov    %eax,%edx
c0100ae1:	89 d0                	mov    %edx,%eax
c0100ae3:	01 c0                	add    %eax,%eax
c0100ae5:	01 d0                	add    %edx,%eax
c0100ae7:	c1 e0 02             	shl    $0x2,%eax
c0100aea:	89 c2                	mov    %eax,%edx
c0100aec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100aef:	01 d0                	add    %edx,%eax
c0100af1:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100af5:	3c a0                	cmp    $0xa0,%al
c0100af7:	74 c1                	je     c0100aba <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100af9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100afe:	c9                   	leave  
c0100aff:	c3                   	ret    

c0100b00 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100b00:	55                   	push   %ebp
c0100b01:	89 e5                	mov    %esp,%ebp
c0100b03:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("1. 打印内核镜像信息 \n");
c0100b06:	c7 04 24 8e 13 12 c0 	movl   $0xc012138e,(%esp)
c0100b0d:	e8 e1 f8 ff ff       	call   c01003f3 <cprintf>
    cprintf("Special kernel symbols:\n");
c0100b12:	c7 04 24 ac 13 12 c0 	movl   $0xc01213ac,(%esp)
c0100b19:	e8 d5 f8 ff ff       	call   c01003f3 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100b1e:	c7 44 24 04 36 00 10 	movl   $0xc0100036,0x4(%esp)
c0100b25:	c0 
c0100b26:	c7 04 24 c5 13 12 c0 	movl   $0xc01213c5,(%esp)
c0100b2d:	e8 c1 f8 ff ff       	call   c01003f3 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100b32:	c7 44 24 04 88 12 12 	movl   $0xc0121288,0x4(%esp)
c0100b39:	c0 
c0100b3a:	c7 04 24 dd 13 12 c0 	movl   $0xc01213dd,(%esp)
c0100b41:	e8 ad f8 ff ff       	call   c01003f3 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100b46:	c7 44 24 04 00 d0 16 	movl   $0xc016d000,0x4(%esp)
c0100b4d:	c0 
c0100b4e:	c7 04 24 f5 13 12 c0 	movl   $0xc01213f5,(%esp)
c0100b55:	e8 99 f8 ff ff       	call   c01003f3 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c0100b5a:	c7 44 24 04 48 13 17 	movl   $0xc0171348,0x4(%esp)
c0100b61:	c0 
c0100b62:	c7 04 24 0d 14 12 c0 	movl   $0xc012140d,(%esp)
c0100b69:	e8 85 f8 ff ff       	call   c01003f3 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100b6e:	b8 48 13 17 c0       	mov    $0xc0171348,%eax
c0100b73:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100b79:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c0100b7e:	29 c2                	sub    %eax,%edx
c0100b80:	89 d0                	mov    %edx,%eax
c0100b82:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100b88:	85 c0                	test   %eax,%eax
c0100b8a:	0f 48 c2             	cmovs  %edx,%eax
c0100b8d:	c1 f8 0a             	sar    $0xa,%eax
c0100b90:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b94:	c7 04 24 28 14 12 c0 	movl   $0xc0121428,(%esp)
c0100b9b:	e8 53 f8 ff ff       	call   c01003f3 <cprintf>
}
c0100ba0:	c9                   	leave  
c0100ba1:	c3                   	ret    

c0100ba2 <print_osinfo>:


void
print_osinfo(void){
c0100ba2:	55                   	push   %ebp
c0100ba3:	89 e5                	mov    %esp,%ebp
c0100ba5:	83 ec 18             	sub    $0x18,%esp

	cprintf("         _______                   _____          \n");
c0100ba8:	c7 04 24 54 14 12 c0 	movl   $0xc0121454,(%esp)
c0100baf:	e8 3f f8 ff ff       	call   c01003f3 <cprintf>
	cprintf("        /::\\    \\                 /\\    \\         \n");
c0100bb4:	c7 04 24 88 14 12 c0 	movl   $0xc0121488,(%esp)
c0100bbb:	e8 33 f8 ff ff       	call   c01003f3 <cprintf>
	cprintf("       /::::\\    \\               /::\\    \\        \n");
c0100bc0:	c7 04 24 bc 14 12 c0 	movl   $0xc01214bc,(%esp)
c0100bc7:	e8 27 f8 ff ff       	call   c01003f3 <cprintf>
	cprintf("      /::::::\\    \\             /::::\\    \\       \n");
c0100bcc:	c7 04 24 f0 14 12 c0 	movl   $0xc01214f0,(%esp)
c0100bd3:	e8 1b f8 ff ff       	call   c01003f3 <cprintf>
	cprintf("     /::::::::\\    \\           /::::::\\    \\      \n");
c0100bd8:	c7 04 24 24 15 12 c0 	movl   $0xc0121524,(%esp)
c0100bdf:	e8 0f f8 ff ff       	call   c01003f3 <cprintf>
	cprintf("    /:::/~~\\:::\\    \\         /:::/\\:::\\    \\     \n");
c0100be4:	c7 04 24 58 15 12 c0 	movl   $0xc0121558,(%esp)
c0100beb:	e8 03 f8 ff ff       	call   c01003f3 <cprintf>
	cprintf("   /:::/    \\:::\\    \\       /:::/__\\:::\\    \\    \n");
c0100bf0:	c7 04 24 8c 15 12 c0 	movl   $0xc012158c,(%esp)
c0100bf7:	e8 f7 f7 ff ff       	call   c01003f3 <cprintf>
	cprintf("  /:::/    / \\:::\\    \\      \\:::\\   \\:::\\    \\   \n");
c0100bfc:	c7 04 24 c0 15 12 c0 	movl   $0xc01215c0,(%esp)
c0100c03:	e8 eb f7 ff ff       	call   c01003f3 <cprintf>
	cprintf(" /:::/____/   \\:::\\____\\   ___\\:::\\   \\:::\\    \\  \n");
c0100c08:	c7 04 24 f4 15 12 c0 	movl   $0xc01215f4,(%esp)
c0100c0f:	e8 df f7 ff ff       	call   c01003f3 <cprintf>
	cprintf("|:::|    |     |:::|    | /\\   \\:::\\   \\:::\\    \\ \n");
c0100c14:	c7 04 24 28 16 12 c0 	movl   $0xc0121628,(%esp)
c0100c1b:	e8 d3 f7 ff ff       	call   c01003f3 <cprintf>
	cprintf("|:::|____|     |:::|    |/::\\   \\:::\\   \\:::\\____\\ \n");
c0100c20:	c7 04 24 5c 16 12 c0 	movl   $0xc012165c,(%esp)
c0100c27:	e8 c7 f7 ff ff       	call   c01003f3 <cprintf>
	cprintf(" \\:::\\    \\   /:::/    / \\:::\\   \\:::\\   \\::/    /\n");
c0100c2c:	c7 04 24 94 16 12 c0 	movl   $0xc0121694,(%esp)
c0100c33:	e8 bb f7 ff ff       	call   c01003f3 <cprintf>
	cprintf("  \\:::\\    \\ /:::/    /   \\:::\\   \\:::\\   \\/____/ \n");
c0100c38:	c7 04 24 c8 16 12 c0 	movl   $0xc01216c8,(%esp)
c0100c3f:	e8 af f7 ff ff       	call   c01003f3 <cprintf>
	cprintf("   \\:::\\    /:::/    /     \\:::\\   \\:::\\    \\     \n");
c0100c44:	c7 04 24 fc 16 12 c0 	movl   $0xc01216fc,(%esp)
c0100c4b:	e8 a3 f7 ff ff       	call   c01003f3 <cprintf>
	cprintf("    \\:::\\__/:::/    /       \\:::\\   \\:::\\____\\    \n");
c0100c50:	c7 04 24 30 17 12 c0 	movl   $0xc0121730,(%esp)
c0100c57:	e8 97 f7 ff ff       	call   c01003f3 <cprintf>
	cprintf("     \\::::::::/    /         \\:::\\  /:::/    /    \n");
c0100c5c:	c7 04 24 64 17 12 c0 	movl   $0xc0121764,(%esp)
c0100c63:	e8 8b f7 ff ff       	call   c01003f3 <cprintf>
	cprintf("      \\::::::/    /           \\:::\\/:::/    /     \n");
c0100c68:	c7 04 24 98 17 12 c0 	movl   $0xc0121798,(%esp)
c0100c6f:	e8 7f f7 ff ff       	call   c01003f3 <cprintf>
	cprintf("       \\::::/    /             \\::::::/    /      \n");
c0100c74:	c7 04 24 cc 17 12 c0 	movl   $0xc01217cc,(%esp)
c0100c7b:	e8 73 f7 ff ff       	call   c01003f3 <cprintf>
	cprintf("        \\::/____/               \\::::/    /       \n");
c0100c80:	c7 04 24 00 18 12 c0 	movl   $0xc0121800,(%esp)
c0100c87:	e8 67 f7 ff ff       	call   c01003f3 <cprintf>
	cprintf("         ~~                      \\::/    /        \n");
c0100c8c:	c7 04 24 34 18 12 c0 	movl   $0xc0121834,(%esp)
c0100c93:	e8 5b f7 ff ff       	call   c01003f3 <cprintf>
	cprintf("                                  \\/____/     \n");
c0100c98:	c7 04 24 68 18 12 c0 	movl   $0xc0121868,(%esp)
c0100c9f:	e8 4f f7 ff ff       	call   c01003f3 <cprintf>
	cprintf("           @Copyright is based on ucore            \n");
c0100ca4:	c7 04 24 98 18 12 c0 	movl   $0xc0121898,(%esp)
c0100cab:	e8 43 f7 ff ff       	call   c01003f3 <cprintf>

	cprintf(" * Virtual memory map:                                          Permissions\n");
c0100cb0:	c7 04 24 d0 18 12 c0 	movl   $0xc01218d0,(%esp)
c0100cb7:	e8 37 f7 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                                                              kernel/user\n");
c0100cbc:	c7 04 24 20 19 12 c0 	movl   $0xc0121920,(%esp)
c0100cc3:	e8 2b f7 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *\n");
c0100cc8:	c7 04 24 6d 19 12 c0 	movl   $0xc012196d,(%esp)
c0100ccf:	e8 1f f7 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *     4G ------------------> +---------------------------------+\n");
c0100cd4:	c7 04 24 74 19 12 c0 	movl   $0xc0121974,(%esp)
c0100cdb:	e8 13 f7 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |                                 |\n");
c0100ce0:	c7 04 24 b8 19 12 c0 	movl   $0xc01219b8,(%esp)
c0100ce7:	e8 07 f7 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |         Empty Memory (*)        |\n");
c0100cec:	c7 04 24 fc 19 12 c0 	movl   $0xc01219fc,(%esp)
c0100cf3:	e8 fb f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |                                 |\n");
c0100cf8:	c7 04 24 b8 19 12 c0 	movl   $0xc01219b8,(%esp)
c0100cff:	e8 ef f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            +---------------------------------+ 0xFB000000\n");
c0100d04:	c7 04 24 40 1a 12 c0 	movl   $0xc0121a40,(%esp)
c0100d0b:	e8 e3 f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |   Cur. Page Table (Kern, RW)    | RW/-- PTSIZE\n");
c0100d10:	c7 04 24 90 1a 12 c0 	movl   $0xc0121a90,(%esp)
c0100d17:	e8 d7 f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *     VPT -----------------> +---------------------------------+ 0xFAC00000\n");
c0100d1c:	c7 04 24 e0 1a 12 c0 	movl   $0xc0121ae0,(%esp)
c0100d23:	e8 cb f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |        Invalid Memory (*)       | --/--\n");
c0100d28:	c7 04 24 30 1b 12 c0 	movl   $0xc0121b30,(%esp)
c0100d2f:	e8 bf f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *     KERNTOP -------------> +---------------------------------+ 0xF8000000\n");
c0100d34:	c7 04 24 7c 1b 12 c0 	movl   $0xc0121b7c,(%esp)
c0100d3b:	e8 b3 f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |                                 |\n");
c0100d40:	c7 04 24 b8 19 12 c0 	movl   $0xc01219b8,(%esp)
c0100d47:	e8 a7 f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |    Remapped Physical Memory     | RW/-- KMEMSIZE\n");
c0100d4c:	c7 04 24 cc 1b 12 c0 	movl   $0xc0121bcc,(%esp)
c0100d53:	e8 9b f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |                                 |\n");
c0100d58:	c7 04 24 b8 19 12 c0 	movl   $0xc01219b8,(%esp)
c0100d5f:	e8 8f f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *     KERNBASE ------------> +---------------------------------+ 0xC0000000\n");
c0100d64:	c7 04 24 20 1c 12 c0 	movl   $0xc0121c20,(%esp)
c0100d6b:	e8 83 f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |        Invalid Memory (*)       | --/--\n");
c0100d70:	c7 04 24 30 1b 12 c0 	movl   $0xc0121b30,(%esp)
c0100d77:	e8 77 f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *     USERTOP -------------> +---------------------------------+ 0xB0000000\n");
c0100d7c:	c7 04 24 70 1c 12 c0 	movl   $0xc0121c70,(%esp)
c0100d83:	e8 6b f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |           User stack            |\n");
c0100d88:	c7 04 24 c0 1c 12 c0 	movl   $0xc0121cc0,(%esp)
c0100d8f:	e8 5f f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            +---------------------------------+\n");
c0100d94:	c7 04 24 04 1d 12 c0 	movl   $0xc0121d04,(%esp)
c0100d9b:	e8 53 f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |                                 |\n");
c0100da0:	c7 04 24 b8 19 12 c0 	movl   $0xc01219b8,(%esp)
c0100da7:	e8 47 f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            :                                 :\n");
c0100dac:	c7 04 24 48 1d 12 c0 	movl   $0xc0121d48,(%esp)
c0100db3:	e8 3b f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |         ~~~~~~~~~~~~~~~~        |\n");
c0100db8:	c7 04 24 8c 1d 12 c0 	movl   $0xc0121d8c,(%esp)
c0100dbf:	e8 2f f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            :                                 :\n");
c0100dc4:	c7 04 24 48 1d 12 c0 	movl   $0xc0121d48,(%esp)
c0100dcb:	e8 23 f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |                                 |\n");
c0100dd0:	c7 04 24 b8 19 12 c0 	movl   $0xc01219b8,(%esp)
c0100dd7:	e8 17 f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
c0100ddc:	c7 04 24 d0 1d 12 c0 	movl   $0xc0121dd0,(%esp)
c0100de3:	e8 0b f6 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |       User Program & Heap       |\n");
c0100de8:	c7 04 24 14 1e 12 c0 	movl   $0xc0121e14,(%esp)
c0100def:	e8 ff f5 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *     UTEXT ---------------> +---------------------------------+ 0x00800000\n");
c0100df4:	c7 04 24 58 1e 12 c0 	movl   $0xc0121e58,(%esp)
c0100dfb:	e8 f3 f5 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |        Invalid Memory (*)       | --/--\n");
c0100e00:	c7 04 24 30 1b 12 c0 	movl   $0xc0121b30,(%esp)
c0100e07:	e8 e7 f5 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |  - - - - - - - - - - - - - - -  |\n");
c0100e0c:	c7 04 24 a8 1e 12 c0 	movl   $0xc0121ea8,(%esp)
c0100e13:	e8 db f5 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |    User STAB Data (optional)    |\n");
c0100e18:	c7 04 24 ec 1e 12 c0 	movl   $0xc0121eec,(%esp)
c0100e1f:	e8 cf f5 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *     USERBASE, USTAB------> +---------------------------------+ 0x00200000\n");
c0100e24:	c7 04 24 30 1f 12 c0 	movl   $0xc0121f30,(%esp)
c0100e2b:	e8 c3 f5 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *                            |        Invalid Memory (*)       | --/--\n");
c0100e30:	c7 04 24 30 1b 12 c0 	movl   $0xc0121b30,(%esp)
c0100e37:	e8 b7 f5 ff ff       	call   c01003f3 <cprintf>
	cprintf(" *     0 -------------------> +---------------------------------+ 0x00000000\n");
c0100e3c:	c7 04 24 80 1f 12 c0 	movl   $0xc0121f80,(%esp)
c0100e43:	e8 ab f5 ff ff       	call   c01003f3 <cprintf>

	cprintf("Co-Author : GCW GPF HHY LZY WYF YZJ \n");
c0100e48:	c7 04 24 d0 1f 12 c0 	movl   $0xc0121fd0,(%esp)
c0100e4f:	e8 9f f5 ff ff       	call   c01003f3 <cprintf>

}
c0100e54:	c9                   	leave  
c0100e55:	c3                   	ret    

c0100e56 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100e56:	55                   	push   %ebp
c0100e57:	89 e5                	mov    %esp,%ebp
c0100e59:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100e5f:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100e62:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e66:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e69:	89 04 24             	mov    %eax,(%esp)
c0100e6c:	e8 5a f8 ff ff       	call   c01006cb <debuginfo_eip>
c0100e71:	85 c0                	test   %eax,%eax
c0100e73:	74 15                	je     c0100e8a <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100e75:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e78:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e7c:	c7 04 24 f6 1f 12 c0 	movl   $0xc0121ff6,(%esp)
c0100e83:	e8 6b f5 ff ff       	call   c01003f3 <cprintf>
c0100e88:	eb 6d                	jmp    c0100ef7 <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100e8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e91:	eb 1c                	jmp    c0100eaf <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100e93:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100e96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e99:	01 d0                	add    %edx,%eax
c0100e9b:	0f b6 00             	movzbl (%eax),%eax
c0100e9e:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100ea4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100ea7:	01 ca                	add    %ecx,%edx
c0100ea9:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100eab:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100eaf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100eb2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100eb5:	7f dc                	jg     c0100e93 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100eb7:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100ebd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ec0:	01 d0                	add    %edx,%eax
c0100ec2:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100ec5:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100ec8:	8b 55 08             	mov    0x8(%ebp),%edx
c0100ecb:	89 d1                	mov    %edx,%ecx
c0100ecd:	29 c1                	sub    %eax,%ecx
c0100ecf:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100ed2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100ed5:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100ed9:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100edf:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100ee3:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100ee7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100eeb:	c7 04 24 12 20 12 c0 	movl   $0xc0122012,(%esp)
c0100ef2:	e8 fc f4 ff ff       	call   c01003f3 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100ef7:	c9                   	leave  
c0100ef8:	c3                   	ret    

c0100ef9 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100ef9:	55                   	push   %ebp
c0100efa:	89 e5                	mov    %esp,%ebp
c0100efc:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100eff:	8b 45 04             	mov    0x4(%ebp),%eax
c0100f02:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100f05:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100f08:	c9                   	leave  
c0100f09:	c3                   	ret    

c0100f0a <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100f0a:	55                   	push   %ebp
c0100f0b:	89 e5                	mov    %esp,%ebp
c0100f0d:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100f10:	89 e8                	mov    %ebp,%eax
c0100f12:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0100f15:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();
c0100f18:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100f1b:	e8 d9 ff ff ff       	call   c0100ef9 <read_eip>
c0100f20:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100f23:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100f2a:	e9 88 00 00 00       	jmp    c0100fb7 <print_stackframe+0xad>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100f2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100f32:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100f36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f39:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f3d:	c7 04 24 24 20 12 c0 	movl   $0xc0122024,(%esp)
c0100f44:	e8 aa f4 ff ff       	call   c01003f3 <cprintf>
        uint32_t *args = (uint32_t *)ebp + 2;
c0100f49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f4c:	83 c0 08             	add    $0x8,%eax
c0100f4f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for (j = 0; j < 4; j ++) {
c0100f52:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100f59:	eb 25                	jmp    c0100f80 <print_stackframe+0x76>
            cprintf("0x%08x ", args[j]);
c0100f5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100f5e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100f65:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100f68:	01 d0                	add    %edx,%eax
c0100f6a:	8b 00                	mov    (%eax),%eax
c0100f6c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f70:	c7 04 24 40 20 12 c0 	movl   $0xc0122040,(%esp)
c0100f77:	e8 77 f4 ff ff       	call   c01003f3 <cprintf>

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        uint32_t *args = (uint32_t *)ebp + 2;
        for (j = 0; j < 4; j ++) {
c0100f7c:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100f80:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100f84:	7e d5                	jle    c0100f5b <print_stackframe+0x51>
            cprintf("0x%08x ", args[j]);
        }
        cprintf("\n");
c0100f86:	c7 04 24 48 20 12 c0 	movl   $0xc0122048,(%esp)
c0100f8d:	e8 61 f4 ff ff       	call   c01003f3 <cprintf>
        print_debuginfo(eip - 1);
c0100f92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100f95:	83 e8 01             	sub    $0x1,%eax
c0100f98:	89 04 24             	mov    %eax,(%esp)
c0100f9b:	e8 b6 fe ff ff       	call   c0100e56 <print_debuginfo>
        eip = ((uint32_t *)ebp)[1];
c0100fa0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100fa3:	83 c0 04             	add    $0x4,%eax
c0100fa6:	8b 00                	mov    (%eax),%eax
c0100fa8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0100fab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100fae:	8b 00                	mov    (%eax),%eax
c0100fb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100fb3:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100fb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100fbb:	74 0a                	je     c0100fc7 <print_stackframe+0xbd>
c0100fbd:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100fc1:	0f 8e 68 ff ff ff    	jle    c0100f2f <print_stackframe+0x25>
        cprintf("\n");
        print_debuginfo(eip - 1);
        eip = ((uint32_t *)ebp)[1];
        ebp = ((uint32_t *)ebp)[0];
    }
}
c0100fc7:	c9                   	leave  
c0100fc8:	c3                   	ret    

c0100fc9 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100fc9:	55                   	push   %ebp
c0100fca:	89 e5                	mov    %esp,%ebp
c0100fcc:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100fcf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100fd6:	eb 0c                	jmp    c0100fe4 <parse+0x1b>
            *buf ++ = '\0';
c0100fd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100fdb:	8d 50 01             	lea    0x1(%eax),%edx
c0100fde:	89 55 08             	mov    %edx,0x8(%ebp)
c0100fe1:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100fe4:	8b 45 08             	mov    0x8(%ebp),%eax
c0100fe7:	0f b6 00             	movzbl (%eax),%eax
c0100fea:	84 c0                	test   %al,%al
c0100fec:	74 1d                	je     c010100b <parse+0x42>
c0100fee:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ff1:	0f b6 00             	movzbl (%eax),%eax
c0100ff4:	0f be c0             	movsbl %al,%eax
c0100ff7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ffb:	c7 04 24 cc 20 12 c0 	movl   $0xc01220cc,(%esp)
c0101002:	e8 39 ff 01 00       	call   c0120f40 <strchr>
c0101007:	85 c0                	test   %eax,%eax
c0101009:	75 cd                	jne    c0100fd8 <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c010100b:	8b 45 08             	mov    0x8(%ebp),%eax
c010100e:	0f b6 00             	movzbl (%eax),%eax
c0101011:	84 c0                	test   %al,%al
c0101013:	75 02                	jne    c0101017 <parse+0x4e>
            break;
c0101015:	eb 67                	jmp    c010107e <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0101017:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c010101b:	75 14                	jne    c0101031 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c010101d:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0101024:	00 
c0101025:	c7 04 24 d1 20 12 c0 	movl   $0xc01220d1,(%esp)
c010102c:	e8 c2 f3 ff ff       	call   c01003f3 <cprintf>
        }
        argv[argc ++] = buf;
c0101031:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101034:	8d 50 01             	lea    0x1(%eax),%edx
c0101037:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010103a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101041:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101044:	01 c2                	add    %eax,%edx
c0101046:	8b 45 08             	mov    0x8(%ebp),%eax
c0101049:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c010104b:	eb 04                	jmp    c0101051 <parse+0x88>
            buf ++;
c010104d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0101051:	8b 45 08             	mov    0x8(%ebp),%eax
c0101054:	0f b6 00             	movzbl (%eax),%eax
c0101057:	84 c0                	test   %al,%al
c0101059:	74 1d                	je     c0101078 <parse+0xaf>
c010105b:	8b 45 08             	mov    0x8(%ebp),%eax
c010105e:	0f b6 00             	movzbl (%eax),%eax
c0101061:	0f be c0             	movsbl %al,%eax
c0101064:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101068:	c7 04 24 cc 20 12 c0 	movl   $0xc01220cc,(%esp)
c010106f:	e8 cc fe 01 00       	call   c0120f40 <strchr>
c0101074:	85 c0                	test   %eax,%eax
c0101076:	74 d5                	je     c010104d <parse+0x84>
            buf ++;
        }
    }
c0101078:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0101079:	e9 66 ff ff ff       	jmp    c0100fe4 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c010107e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101081:	c9                   	leave  
c0101082:	c3                   	ret    

c0101083 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0101083:	55                   	push   %ebp
c0101084:	89 e5                	mov    %esp,%ebp
c0101086:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0101089:	8d 45 b0             	lea    -0x50(%ebp),%eax
c010108c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101090:	8b 45 08             	mov    0x8(%ebp),%eax
c0101093:	89 04 24             	mov    %eax,(%esp)
c0101096:	e8 2e ff ff ff       	call   c0100fc9 <parse>
c010109b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c010109e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01010a2:	75 0a                	jne    c01010ae <runcmd+0x2b>
        return 0;
c01010a4:	b8 00 00 00 00       	mov    $0x0,%eax
c01010a9:	e9 85 00 00 00       	jmp    c0101133 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c01010ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01010b5:	eb 5c                	jmp    c0101113 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c01010b7:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c01010ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01010bd:	89 d0                	mov    %edx,%eax
c01010bf:	01 c0                	add    %eax,%eax
c01010c1:	01 d0                	add    %edx,%eax
c01010c3:	c1 e0 02             	shl    $0x2,%eax
c01010c6:	05 00 a0 16 c0       	add    $0xc016a000,%eax
c01010cb:	8b 00                	mov    (%eax),%eax
c01010cd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01010d1:	89 04 24             	mov    %eax,(%esp)
c01010d4:	e8 c8 fd 01 00       	call   c0120ea1 <strcmp>
c01010d9:	85 c0                	test   %eax,%eax
c01010db:	75 32                	jne    c010110f <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c01010dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01010e0:	89 d0                	mov    %edx,%eax
c01010e2:	01 c0                	add    %eax,%eax
c01010e4:	01 d0                	add    %edx,%eax
c01010e6:	c1 e0 02             	shl    $0x2,%eax
c01010e9:	05 00 a0 16 c0       	add    $0xc016a000,%eax
c01010ee:	8b 40 08             	mov    0x8(%eax),%eax
c01010f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01010f4:	8d 4a ff             	lea    -0x1(%edx),%ecx
c01010f7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01010fa:	89 54 24 08          	mov    %edx,0x8(%esp)
c01010fe:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0101101:	83 c2 04             	add    $0x4,%edx
c0101104:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101108:	89 0c 24             	mov    %ecx,(%esp)
c010110b:	ff d0                	call   *%eax
c010110d:	eb 24                	jmp    c0101133 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c010110f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101113:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101116:	83 f8 02             	cmp    $0x2,%eax
c0101119:	76 9c                	jbe    c01010b7 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c010111b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010111e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101122:	c7 04 24 ef 20 12 c0 	movl   $0xc01220ef,(%esp)
c0101129:	e8 c5 f2 ff ff       	call   c01003f3 <cprintf>
    return 0;
c010112e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101133:	c9                   	leave  
c0101134:	c3                   	ret    

c0101135 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0101135:	55                   	push   %ebp
c0101136:	89 e5                	mov    %esp,%ebp
c0101138:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c010113b:	c7 04 24 08 21 12 c0 	movl   $0xc0122108,(%esp)
c0101142:	e8 ac f2 ff ff       	call   c01003f3 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0101147:	c7 04 24 30 21 12 c0 	movl   $0xc0122130,(%esp)
c010114e:	e8 a0 f2 ff ff       	call   c01003f3 <cprintf>

    if (tf != NULL) {
c0101153:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0101157:	74 0b                	je     c0101164 <kmonitor+0x2f>
        print_trapframe(tf);
c0101159:	8b 45 08             	mov    0x8(%ebp),%eax
c010115c:	89 04 24             	mov    %eax,(%esp)
c010115f:	e8 d5 16 00 00       	call   c0102839 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0101164:	c7 04 24 55 21 12 c0 	movl   $0xc0122155,(%esp)
c010116b:	e8 72 f1 ff ff       	call   c01002e2 <readline>
c0101170:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101173:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101177:	74 18                	je     c0101191 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0101179:	8b 45 08             	mov    0x8(%ebp),%eax
c010117c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101180:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101183:	89 04 24             	mov    %eax,(%esp)
c0101186:	e8 f8 fe ff ff       	call   c0101083 <runcmd>
c010118b:	85 c0                	test   %eax,%eax
c010118d:	79 02                	jns    c0101191 <kmonitor+0x5c>
                break;
c010118f:	eb 02                	jmp    c0101193 <kmonitor+0x5e>
            }
        }
    }
c0101191:	eb d1                	jmp    c0101164 <kmonitor+0x2f>
}
c0101193:	c9                   	leave  
c0101194:	c3                   	ret    

c0101195 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0101195:	55                   	push   %ebp
c0101196:	89 e5                	mov    %esp,%ebp
c0101198:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c010119b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01011a2:	eb 3f                	jmp    c01011e3 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c01011a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01011a7:	89 d0                	mov    %edx,%eax
c01011a9:	01 c0                	add    %eax,%eax
c01011ab:	01 d0                	add    %edx,%eax
c01011ad:	c1 e0 02             	shl    $0x2,%eax
c01011b0:	05 00 a0 16 c0       	add    $0xc016a000,%eax
c01011b5:	8b 48 04             	mov    0x4(%eax),%ecx
c01011b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01011bb:	89 d0                	mov    %edx,%eax
c01011bd:	01 c0                	add    %eax,%eax
c01011bf:	01 d0                	add    %edx,%eax
c01011c1:	c1 e0 02             	shl    $0x2,%eax
c01011c4:	05 00 a0 16 c0       	add    $0xc016a000,%eax
c01011c9:	8b 00                	mov    (%eax),%eax
c01011cb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01011cf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01011d3:	c7 04 24 59 21 12 c0 	movl   $0xc0122159,(%esp)
c01011da:	e8 14 f2 ff ff       	call   c01003f3 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c01011df:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01011e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01011e6:	83 f8 02             	cmp    $0x2,%eax
c01011e9:	76 b9                	jbe    c01011a4 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c01011eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01011f0:	c9                   	leave  
c01011f1:	c3                   	ret    

c01011f2 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c01011f2:	55                   	push   %ebp
c01011f3:	89 e5                	mov    %esp,%ebp
c01011f5:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c01011f8:	e8 03 f9 ff ff       	call   c0100b00 <print_kerninfo>
    return 0;
c01011fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101202:	c9                   	leave  
c0101203:	c3                   	ret    

c0101204 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0101204:	55                   	push   %ebp
c0101205:	89 e5                	mov    %esp,%ebp
c0101207:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c010120a:	e8 fb fc ff ff       	call   c0100f0a <print_stackframe>
    return 0;
c010120f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101214:	c9                   	leave  
c0101215:	c3                   	ret    

c0101216 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0101216:	55                   	push   %ebp
c0101217:	89 e5                	mov    %esp,%ebp
c0101219:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c010121c:	a1 20 d4 16 c0       	mov    0xc016d420,%eax
c0101221:	85 c0                	test   %eax,%eax
c0101223:	74 02                	je     c0101227 <__panic+0x11>
        goto panic_dead;
c0101225:	eb 59                	jmp    c0101280 <__panic+0x6a>
    }
    is_panic = 1;
c0101227:	c7 05 20 d4 16 c0 01 	movl   $0x1,0xc016d420
c010122e:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0101231:	8d 45 14             	lea    0x14(%ebp),%eax
c0101234:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0101237:	8b 45 0c             	mov    0xc(%ebp),%eax
c010123a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010123e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101241:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101245:	c7 04 24 62 21 12 c0 	movl   $0xc0122162,(%esp)
c010124c:	e8 a2 f1 ff ff       	call   c01003f3 <cprintf>
    vcprintf(fmt, ap);
c0101251:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101254:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101258:	8b 45 10             	mov    0x10(%ebp),%eax
c010125b:	89 04 24             	mov    %eax,(%esp)
c010125e:	e8 55 f1 ff ff       	call   c01003b8 <vcprintf>
    cprintf("\n");
c0101263:	c7 04 24 7e 21 12 c0 	movl   $0xc012217e,(%esp)
c010126a:	e8 84 f1 ff ff       	call   c01003f3 <cprintf>
    
    cprintf("stack trackback:\n");
c010126f:	c7 04 24 80 21 12 c0 	movl   $0xc0122180,(%esp)
c0101276:	e8 78 f1 ff ff       	call   c01003f3 <cprintf>
    print_stackframe();
c010127b:	e8 8a fc ff ff       	call   c0100f0a <print_stackframe>
    
    va_end(ap);

panic_dead:
    intr_disable();
c0101280:	e8 1c 12 00 00       	call   c01024a1 <intr_disable>
    while (1) {
        kmonitor(NULL);
c0101285:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010128c:	e8 a4 fe ff ff       	call   c0101135 <kmonitor>
    }
c0101291:	eb f2                	jmp    c0101285 <__panic+0x6f>

c0101293 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0101293:	55                   	push   %ebp
c0101294:	89 e5                	mov    %esp,%ebp
c0101296:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0101299:	8d 45 14             	lea    0x14(%ebp),%eax
c010129c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c010129f:	8b 45 0c             	mov    0xc(%ebp),%eax
c01012a2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01012a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01012a9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01012ad:	c7 04 24 92 21 12 c0 	movl   $0xc0122192,(%esp)
c01012b4:	e8 3a f1 ff ff       	call   c01003f3 <cprintf>
    vcprintf(fmt, ap);
c01012b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012bc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01012c0:	8b 45 10             	mov    0x10(%ebp),%eax
c01012c3:	89 04 24             	mov    %eax,(%esp)
c01012c6:	e8 ed f0 ff ff       	call   c01003b8 <vcprintf>
    cprintf("\n");
c01012cb:	c7 04 24 7e 21 12 c0 	movl   $0xc012217e,(%esp)
c01012d2:	e8 1c f1 ff ff       	call   c01003f3 <cprintf>
    va_end(ap);
}
c01012d7:	c9                   	leave  
c01012d8:	c3                   	ret    

c01012d9 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c01012d9:	55                   	push   %ebp
c01012da:	89 e5                	mov    %esp,%ebp
    return is_panic;
c01012dc:	a1 20 d4 16 c0       	mov    0xc016d420,%eax
}
c01012e1:	5d                   	pop    %ebp
c01012e2:	c3                   	ret    

c01012e3 <SYSTEM_READ_TIMER>:
#define TIMER_RATEGEN   0x04                    // mode 2, rate generator
#define TIMER_16BIT     0x30                    // r/w counter 16 bits, LSB first

volatile size_t ticks;

long SYSTEM_READ_TIMER( void ){
c01012e3:	55                   	push   %ebp
c01012e4:	89 e5                	mov    %esp,%ebp
    return ticks;
c01012e6:	a1 50 11 17 c0       	mov    0xc0171150,%eax
}
c01012eb:	5d                   	pop    %ebp
c01012ec:	c3                   	ret    

c01012ed <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c01012ed:	55                   	push   %ebp
c01012ee:	89 e5                	mov    %esp,%ebp
c01012f0:	83 ec 28             	sub    $0x28,%esp
c01012f3:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c01012f9:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01012fd:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101301:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101305:	ee                   	out    %al,(%dx)
c0101306:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c010130c:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0101310:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101314:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101318:	ee                   	out    %al,(%dx)
c0101319:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c010131f:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0101323:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101327:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010132b:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c010132c:	c7 05 50 11 17 c0 00 	movl   $0x0,0xc0171150
c0101333:	00 00 00 
    cprintf("\n10.启动计时器\n");
c0101336:	c7 04 24 b0 21 12 c0 	movl   $0xc01221b0,(%esp)
c010133d:	e8 b1 f0 ff ff       	call   c01003f3 <cprintf>
    cprintf("timer start\n");
c0101342:	c7 04 24 c5 21 12 c0 	movl   $0xc01221c5,(%esp)
c0101349:	e8 a5 f0 ff ff       	call   c01003f3 <cprintf>
    pic_enable(IRQ_TIMER);
c010134e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0101355:	e8 a5 11 00 00       	call   c01024ff <pic_enable>
}
c010135a:	c9                   	leave  
c010135b:	c3                   	ret    

c010135c <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010135c:	55                   	push   %ebp
c010135d:	89 e5                	mov    %esp,%ebp
c010135f:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0101362:	9c                   	pushf  
c0101363:	58                   	pop    %eax
c0101364:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0101367:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010136a:	25 00 02 00 00       	and    $0x200,%eax
c010136f:	85 c0                	test   %eax,%eax
c0101371:	74 0c                	je     c010137f <__intr_save+0x23>
        intr_disable();
c0101373:	e8 29 11 00 00       	call   c01024a1 <intr_disable>
        return 1;
c0101378:	b8 01 00 00 00       	mov    $0x1,%eax
c010137d:	eb 05                	jmp    c0101384 <__intr_save+0x28>
    }
    return 0;
c010137f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101384:	c9                   	leave  
c0101385:	c3                   	ret    

c0101386 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0101386:	55                   	push   %ebp
c0101387:	89 e5                	mov    %esp,%ebp
c0101389:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010138c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0101390:	74 05                	je     c0101397 <__intr_restore+0x11>
        intr_enable();
c0101392:	e8 04 11 00 00       	call   c010249b <intr_enable>
    }
}
c0101397:	c9                   	leave  
c0101398:	c3                   	ret    

c0101399 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0101399:	55                   	push   %ebp
c010139a:	89 e5                	mov    %esp,%ebp
c010139c:	83 ec 10             	sub    $0x10,%esp
c010139f:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01013a5:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01013a9:	89 c2                	mov    %eax,%edx
c01013ab:	ec                   	in     (%dx),%al
c01013ac:	88 45 fd             	mov    %al,-0x3(%ebp)
c01013af:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c01013b5:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01013b9:	89 c2                	mov    %eax,%edx
c01013bb:	ec                   	in     (%dx),%al
c01013bc:	88 45 f9             	mov    %al,-0x7(%ebp)
c01013bf:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c01013c5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01013c9:	89 c2                	mov    %eax,%edx
c01013cb:	ec                   	in     (%dx),%al
c01013cc:	88 45 f5             	mov    %al,-0xb(%ebp)
c01013cf:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c01013d5:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01013d9:	89 c2                	mov    %eax,%edx
c01013db:	ec                   	in     (%dx),%al
c01013dc:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c01013df:	c9                   	leave  
c01013e0:	c3                   	ret    

c01013e1 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c01013e1:	55                   	push   %ebp
c01013e2:	89 e5                	mov    %esp,%ebp
c01013e4:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c01013e7:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c01013ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01013f1:	0f b7 00             	movzwl (%eax),%eax
c01013f4:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c01013f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01013fb:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0101400:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101403:	0f b7 00             	movzwl (%eax),%eax
c0101406:	66 3d 5a a5          	cmp    $0xa55a,%ax
c010140a:	74 12                	je     c010141e <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c010140c:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c0101413:	66 c7 05 46 d4 16 c0 	movw   $0x3b4,0xc016d446
c010141a:	b4 03 
c010141c:	eb 13                	jmp    c0101431 <cga_init+0x50>
    } else {
        *cp = was;
c010141e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101421:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0101425:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0101428:	66 c7 05 46 d4 16 c0 	movw   $0x3d4,0xc016d446
c010142f:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0101431:	0f b7 05 46 d4 16 c0 	movzwl 0xc016d446,%eax
c0101438:	0f b7 c0             	movzwl %ax,%eax
c010143b:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010143f:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101443:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101447:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010144b:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c010144c:	0f b7 05 46 d4 16 c0 	movzwl 0xc016d446,%eax
c0101453:	83 c0 01             	add    $0x1,%eax
c0101456:	0f b7 c0             	movzwl %ax,%eax
c0101459:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010145d:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0101461:	89 c2                	mov    %eax,%edx
c0101463:	ec                   	in     (%dx),%al
c0101464:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101467:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010146b:	0f b6 c0             	movzbl %al,%eax
c010146e:	c1 e0 08             	shl    $0x8,%eax
c0101471:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101474:	0f b7 05 46 d4 16 c0 	movzwl 0xc016d446,%eax
c010147b:	0f b7 c0             	movzwl %ax,%eax
c010147e:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101482:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101486:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010148a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010148e:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c010148f:	0f b7 05 46 d4 16 c0 	movzwl 0xc016d446,%eax
c0101496:	83 c0 01             	add    $0x1,%eax
c0101499:	0f b7 c0             	movzwl %ax,%eax
c010149c:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014a0:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c01014a4:	89 c2                	mov    %eax,%edx
c01014a6:	ec                   	in     (%dx),%al
c01014a7:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c01014aa:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01014ae:	0f b6 c0             	movzbl %al,%eax
c01014b1:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c01014b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01014b7:	a3 40 d4 16 c0       	mov    %eax,0xc016d440
    crt_pos = pos;
c01014bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01014bf:	66 a3 44 d4 16 c0    	mov    %ax,0xc016d444
}
c01014c5:	c9                   	leave  
c01014c6:	c3                   	ret    

c01014c7 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c01014c7:	55                   	push   %ebp
c01014c8:	89 e5                	mov    %esp,%ebp
c01014ca:	83 ec 48             	sub    $0x48,%esp
c01014cd:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c01014d3:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01014d7:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01014db:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01014df:	ee                   	out    %al,(%dx)
c01014e0:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c01014e6:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c01014ea:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01014ee:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01014f2:	ee                   	out    %al,(%dx)
c01014f3:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c01014f9:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c01014fd:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101501:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101505:	ee                   	out    %al,(%dx)
c0101506:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c010150c:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c0101510:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101514:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101518:	ee                   	out    %al,(%dx)
c0101519:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c010151f:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c0101523:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101527:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010152b:	ee                   	out    %al,(%dx)
c010152c:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c0101532:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c0101536:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c010153a:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010153e:	ee                   	out    %al,(%dx)
c010153f:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c0101545:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c0101549:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010154d:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101551:	ee                   	out    %al,(%dx)
c0101552:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101558:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c010155c:	89 c2                	mov    %eax,%edx
c010155e:	ec                   	in     (%dx),%al
c010155f:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c0101562:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101566:	3c ff                	cmp    $0xff,%al
c0101568:	0f 95 c0             	setne  %al
c010156b:	0f b6 c0             	movzbl %al,%eax
c010156e:	a3 48 d4 16 c0       	mov    %eax,0xc016d448
c0101573:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101579:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c010157d:	89 c2                	mov    %eax,%edx
c010157f:	ec                   	in     (%dx),%al
c0101580:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101583:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c0101589:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c010158d:	89 c2                	mov    %eax,%edx
c010158f:	ec                   	in     (%dx),%al
c0101590:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101593:	a1 48 d4 16 c0       	mov    0xc016d448,%eax
c0101598:	85 c0                	test   %eax,%eax
c010159a:	74 0c                	je     c01015a8 <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c010159c:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01015a3:	e8 57 0f 00 00       	call   c01024ff <pic_enable>
    }
}
c01015a8:	c9                   	leave  
c01015a9:	c3                   	ret    

c01015aa <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c01015aa:	55                   	push   %ebp
c01015ab:	89 e5                	mov    %esp,%ebp
c01015ad:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01015b0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01015b7:	eb 09                	jmp    c01015c2 <lpt_putc_sub+0x18>
        delay();
c01015b9:	e8 db fd ff ff       	call   c0101399 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01015be:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01015c2:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c01015c8:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01015cc:	89 c2                	mov    %eax,%edx
c01015ce:	ec                   	in     (%dx),%al
c01015cf:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01015d2:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01015d6:	84 c0                	test   %al,%al
c01015d8:	78 09                	js     c01015e3 <lpt_putc_sub+0x39>
c01015da:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c01015e1:	7e d6                	jle    c01015b9 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c01015e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01015e6:	0f b6 c0             	movzbl %al,%eax
c01015e9:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c01015ef:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01015f2:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01015f6:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01015fa:	ee                   	out    %al,(%dx)
c01015fb:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c0101601:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c0101605:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101609:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010160d:	ee                   	out    %al,(%dx)
c010160e:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c0101614:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c0101618:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010161c:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101620:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c0101621:	c9                   	leave  
c0101622:	c3                   	ret    

c0101623 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c0101623:	55                   	push   %ebp
c0101624:	89 e5                	mov    %esp,%ebp
c0101626:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101629:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010162d:	74 0d                	je     c010163c <lpt_putc+0x19>
        lpt_putc_sub(c);
c010162f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101632:	89 04 24             	mov    %eax,(%esp)
c0101635:	e8 70 ff ff ff       	call   c01015aa <lpt_putc_sub>
c010163a:	eb 24                	jmp    c0101660 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c010163c:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101643:	e8 62 ff ff ff       	call   c01015aa <lpt_putc_sub>
        lpt_putc_sub(' ');
c0101648:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010164f:	e8 56 ff ff ff       	call   c01015aa <lpt_putc_sub>
        lpt_putc_sub('\b');
c0101654:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010165b:	e8 4a ff ff ff       	call   c01015aa <lpt_putc_sub>
    }
}
c0101660:	c9                   	leave  
c0101661:	c3                   	ret    

c0101662 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101662:	55                   	push   %ebp
c0101663:	89 e5                	mov    %esp,%ebp
c0101665:	53                   	push   %ebx
c0101666:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101669:	8b 45 08             	mov    0x8(%ebp),%eax
c010166c:	b0 00                	mov    $0x0,%al
c010166e:	85 c0                	test   %eax,%eax
c0101670:	75 07                	jne    c0101679 <cga_putc+0x17>
        c |= 0x0700;
c0101672:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101679:	8b 45 08             	mov    0x8(%ebp),%eax
c010167c:	0f b6 c0             	movzbl %al,%eax
c010167f:	83 f8 0a             	cmp    $0xa,%eax
c0101682:	74 4c                	je     c01016d0 <cga_putc+0x6e>
c0101684:	83 f8 0d             	cmp    $0xd,%eax
c0101687:	74 57                	je     c01016e0 <cga_putc+0x7e>
c0101689:	83 f8 08             	cmp    $0x8,%eax
c010168c:	0f 85 88 00 00 00    	jne    c010171a <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c0101692:	0f b7 05 44 d4 16 c0 	movzwl 0xc016d444,%eax
c0101699:	66 85 c0             	test   %ax,%ax
c010169c:	74 30                	je     c01016ce <cga_putc+0x6c>
            crt_pos --;
c010169e:	0f b7 05 44 d4 16 c0 	movzwl 0xc016d444,%eax
c01016a5:	83 e8 01             	sub    $0x1,%eax
c01016a8:	66 a3 44 d4 16 c0    	mov    %ax,0xc016d444
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c01016ae:	a1 40 d4 16 c0       	mov    0xc016d440,%eax
c01016b3:	0f b7 15 44 d4 16 c0 	movzwl 0xc016d444,%edx
c01016ba:	0f b7 d2             	movzwl %dx,%edx
c01016bd:	01 d2                	add    %edx,%edx
c01016bf:	01 c2                	add    %eax,%edx
c01016c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01016c4:	b0 00                	mov    $0x0,%al
c01016c6:	83 c8 20             	or     $0x20,%eax
c01016c9:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c01016cc:	eb 72                	jmp    c0101740 <cga_putc+0xde>
c01016ce:	eb 70                	jmp    c0101740 <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c01016d0:	0f b7 05 44 d4 16 c0 	movzwl 0xc016d444,%eax
c01016d7:	83 c0 50             	add    $0x50,%eax
c01016da:	66 a3 44 d4 16 c0    	mov    %ax,0xc016d444
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c01016e0:	0f b7 1d 44 d4 16 c0 	movzwl 0xc016d444,%ebx
c01016e7:	0f b7 0d 44 d4 16 c0 	movzwl 0xc016d444,%ecx
c01016ee:	0f b7 c1             	movzwl %cx,%eax
c01016f1:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c01016f7:	c1 e8 10             	shr    $0x10,%eax
c01016fa:	89 c2                	mov    %eax,%edx
c01016fc:	66 c1 ea 06          	shr    $0x6,%dx
c0101700:	89 d0                	mov    %edx,%eax
c0101702:	c1 e0 02             	shl    $0x2,%eax
c0101705:	01 d0                	add    %edx,%eax
c0101707:	c1 e0 04             	shl    $0x4,%eax
c010170a:	29 c1                	sub    %eax,%ecx
c010170c:	89 ca                	mov    %ecx,%edx
c010170e:	89 d8                	mov    %ebx,%eax
c0101710:	29 d0                	sub    %edx,%eax
c0101712:	66 a3 44 d4 16 c0    	mov    %ax,0xc016d444
        break;
c0101718:	eb 26                	jmp    c0101740 <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c010171a:	8b 0d 40 d4 16 c0    	mov    0xc016d440,%ecx
c0101720:	0f b7 05 44 d4 16 c0 	movzwl 0xc016d444,%eax
c0101727:	8d 50 01             	lea    0x1(%eax),%edx
c010172a:	66 89 15 44 d4 16 c0 	mov    %dx,0xc016d444
c0101731:	0f b7 c0             	movzwl %ax,%eax
c0101734:	01 c0                	add    %eax,%eax
c0101736:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0101739:	8b 45 08             	mov    0x8(%ebp),%eax
c010173c:	66 89 02             	mov    %ax,(%edx)
        break;
c010173f:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101740:	0f b7 05 44 d4 16 c0 	movzwl 0xc016d444,%eax
c0101747:	66 3d cf 07          	cmp    $0x7cf,%ax
c010174b:	76 5b                	jbe    c01017a8 <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c010174d:	a1 40 d4 16 c0       	mov    0xc016d440,%eax
c0101752:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101758:	a1 40 d4 16 c0       	mov    0xc016d440,%eax
c010175d:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c0101764:	00 
c0101765:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101769:	89 04 24             	mov    %eax,(%esp)
c010176c:	e8 cd f9 01 00       	call   c012113e <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101771:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101778:	eb 15                	jmp    c010178f <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c010177a:	a1 40 d4 16 c0       	mov    0xc016d440,%eax
c010177f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101782:	01 d2                	add    %edx,%edx
c0101784:	01 d0                	add    %edx,%eax
c0101786:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c010178b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010178f:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101796:	7e e2                	jle    c010177a <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101798:	0f b7 05 44 d4 16 c0 	movzwl 0xc016d444,%eax
c010179f:	83 e8 50             	sub    $0x50,%eax
c01017a2:	66 a3 44 d4 16 c0    	mov    %ax,0xc016d444
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c01017a8:	0f b7 05 46 d4 16 c0 	movzwl 0xc016d446,%eax
c01017af:	0f b7 c0             	movzwl %ax,%eax
c01017b2:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01017b6:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c01017ba:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01017be:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01017c2:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c01017c3:	0f b7 05 44 d4 16 c0 	movzwl 0xc016d444,%eax
c01017ca:	66 c1 e8 08          	shr    $0x8,%ax
c01017ce:	0f b6 c0             	movzbl %al,%eax
c01017d1:	0f b7 15 46 d4 16 c0 	movzwl 0xc016d446,%edx
c01017d8:	83 c2 01             	add    $0x1,%edx
c01017db:	0f b7 d2             	movzwl %dx,%edx
c01017de:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c01017e2:	88 45 ed             	mov    %al,-0x13(%ebp)
c01017e5:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01017e9:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01017ed:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c01017ee:	0f b7 05 46 d4 16 c0 	movzwl 0xc016d446,%eax
c01017f5:	0f b7 c0             	movzwl %ax,%eax
c01017f8:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c01017fc:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c0101800:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101804:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101808:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0101809:	0f b7 05 44 d4 16 c0 	movzwl 0xc016d444,%eax
c0101810:	0f b6 c0             	movzbl %al,%eax
c0101813:	0f b7 15 46 d4 16 c0 	movzwl 0xc016d446,%edx
c010181a:	83 c2 01             	add    $0x1,%edx
c010181d:	0f b7 d2             	movzwl %dx,%edx
c0101820:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101824:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101827:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010182b:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010182f:	ee                   	out    %al,(%dx)
}
c0101830:	83 c4 34             	add    $0x34,%esp
c0101833:	5b                   	pop    %ebx
c0101834:	5d                   	pop    %ebp
c0101835:	c3                   	ret    

c0101836 <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0101836:	55                   	push   %ebp
c0101837:	89 e5                	mov    %esp,%ebp
c0101839:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c010183c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101843:	eb 09                	jmp    c010184e <serial_putc_sub+0x18>
        delay();
c0101845:	e8 4f fb ff ff       	call   c0101399 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c010184a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010184e:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101854:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101858:	89 c2                	mov    %eax,%edx
c010185a:	ec                   	in     (%dx),%al
c010185b:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c010185e:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0101862:	0f b6 c0             	movzbl %al,%eax
c0101865:	83 e0 20             	and    $0x20,%eax
c0101868:	85 c0                	test   %eax,%eax
c010186a:	75 09                	jne    c0101875 <serial_putc_sub+0x3f>
c010186c:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101873:	7e d0                	jle    c0101845 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101875:	8b 45 08             	mov    0x8(%ebp),%eax
c0101878:	0f b6 c0             	movzbl %al,%eax
c010187b:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c0101881:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101884:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101888:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010188c:	ee                   	out    %al,(%dx)
}
c010188d:	c9                   	leave  
c010188e:	c3                   	ret    

c010188f <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c010188f:	55                   	push   %ebp
c0101890:	89 e5                	mov    %esp,%ebp
c0101892:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101895:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101899:	74 0d                	je     c01018a8 <serial_putc+0x19>
        serial_putc_sub(c);
c010189b:	8b 45 08             	mov    0x8(%ebp),%eax
c010189e:	89 04 24             	mov    %eax,(%esp)
c01018a1:	e8 90 ff ff ff       	call   c0101836 <serial_putc_sub>
c01018a6:	eb 24                	jmp    c01018cc <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c01018a8:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01018af:	e8 82 ff ff ff       	call   c0101836 <serial_putc_sub>
        serial_putc_sub(' ');
c01018b4:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01018bb:	e8 76 ff ff ff       	call   c0101836 <serial_putc_sub>
        serial_putc_sub('\b');
c01018c0:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01018c7:	e8 6a ff ff ff       	call   c0101836 <serial_putc_sub>
    }
}
c01018cc:	c9                   	leave  
c01018cd:	c3                   	ret    

c01018ce <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c01018ce:	55                   	push   %ebp
c01018cf:	89 e5                	mov    %esp,%ebp
c01018d1:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c01018d4:	eb 33                	jmp    c0101909 <cons_intr+0x3b>
        if (c != 0) {
c01018d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01018da:	74 2d                	je     c0101909 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c01018dc:	a1 64 d6 16 c0       	mov    0xc016d664,%eax
c01018e1:	8d 50 01             	lea    0x1(%eax),%edx
c01018e4:	89 15 64 d6 16 c0    	mov    %edx,0xc016d664
c01018ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01018ed:	88 90 60 d4 16 c0    	mov    %dl,-0x3fe92ba0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c01018f3:	a1 64 d6 16 c0       	mov    0xc016d664,%eax
c01018f8:	3d 00 02 00 00       	cmp    $0x200,%eax
c01018fd:	75 0a                	jne    c0101909 <cons_intr+0x3b>
                cons.wpos = 0;
c01018ff:	c7 05 64 d6 16 c0 00 	movl   $0x0,0xc016d664
c0101906:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c0101909:	8b 45 08             	mov    0x8(%ebp),%eax
c010190c:	ff d0                	call   *%eax
c010190e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101911:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101915:	75 bf                	jne    c01018d6 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0101917:	c9                   	leave  
c0101918:	c3                   	ret    

c0101919 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0101919:	55                   	push   %ebp
c010191a:	89 e5                	mov    %esp,%ebp
c010191c:	83 ec 10             	sub    $0x10,%esp
c010191f:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101925:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101929:	89 c2                	mov    %eax,%edx
c010192b:	ec                   	in     (%dx),%al
c010192c:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c010192f:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101933:	0f b6 c0             	movzbl %al,%eax
c0101936:	83 e0 01             	and    $0x1,%eax
c0101939:	85 c0                	test   %eax,%eax
c010193b:	75 07                	jne    c0101944 <serial_proc_data+0x2b>
        return -1;
c010193d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101942:	eb 2a                	jmp    c010196e <serial_proc_data+0x55>
c0101944:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010194a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010194e:	89 c2                	mov    %eax,%edx
c0101950:	ec                   	in     (%dx),%al
c0101951:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c0101954:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101958:	0f b6 c0             	movzbl %al,%eax
c010195b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c010195e:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c0101962:	75 07                	jne    c010196b <serial_proc_data+0x52>
        c = '\b';
c0101964:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c010196b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010196e:	c9                   	leave  
c010196f:	c3                   	ret    

c0101970 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101970:	55                   	push   %ebp
c0101971:	89 e5                	mov    %esp,%ebp
c0101973:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c0101976:	a1 48 d4 16 c0       	mov    0xc016d448,%eax
c010197b:	85 c0                	test   %eax,%eax
c010197d:	74 0c                	je     c010198b <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c010197f:	c7 04 24 19 19 10 c0 	movl   $0xc0101919,(%esp)
c0101986:	e8 43 ff ff ff       	call   c01018ce <cons_intr>
    }
}
c010198b:	c9                   	leave  
c010198c:	c3                   	ret    

c010198d <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c010198d:	55                   	push   %ebp
c010198e:	89 e5                	mov    %esp,%ebp
c0101990:	83 ec 38             	sub    $0x38,%esp
c0101993:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101999:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010199d:	89 c2                	mov    %eax,%edx
c010199f:	ec                   	in     (%dx),%al
c01019a0:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c01019a3:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c01019a7:	0f b6 c0             	movzbl %al,%eax
c01019aa:	83 e0 01             	and    $0x1,%eax
c01019ad:	85 c0                	test   %eax,%eax
c01019af:	75 0a                	jne    c01019bb <kbd_proc_data+0x2e>
        return -1;
c01019b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01019b6:	e9 59 01 00 00       	jmp    c0101b14 <kbd_proc_data+0x187>
c01019bb:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01019c1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01019c5:	89 c2                	mov    %eax,%edx
c01019c7:	ec                   	in     (%dx),%al
c01019c8:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c01019cb:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c01019cf:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c01019d2:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c01019d6:	75 17                	jne    c01019ef <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c01019d8:	a1 68 d6 16 c0       	mov    0xc016d668,%eax
c01019dd:	83 c8 40             	or     $0x40,%eax
c01019e0:	a3 68 d6 16 c0       	mov    %eax,0xc016d668
        return 0;
c01019e5:	b8 00 00 00 00       	mov    $0x0,%eax
c01019ea:	e9 25 01 00 00       	jmp    c0101b14 <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c01019ef:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01019f3:	84 c0                	test   %al,%al
c01019f5:	79 47                	jns    c0101a3e <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c01019f7:	a1 68 d6 16 c0       	mov    0xc016d668,%eax
c01019fc:	83 e0 40             	and    $0x40,%eax
c01019ff:	85 c0                	test   %eax,%eax
c0101a01:	75 09                	jne    c0101a0c <kbd_proc_data+0x7f>
c0101a03:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101a07:	83 e0 7f             	and    $0x7f,%eax
c0101a0a:	eb 04                	jmp    c0101a10 <kbd_proc_data+0x83>
c0101a0c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101a10:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101a13:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101a17:	0f b6 80 40 a0 16 c0 	movzbl -0x3fe95fc0(%eax),%eax
c0101a1e:	83 c8 40             	or     $0x40,%eax
c0101a21:	0f b6 c0             	movzbl %al,%eax
c0101a24:	f7 d0                	not    %eax
c0101a26:	89 c2                	mov    %eax,%edx
c0101a28:	a1 68 d6 16 c0       	mov    0xc016d668,%eax
c0101a2d:	21 d0                	and    %edx,%eax
c0101a2f:	a3 68 d6 16 c0       	mov    %eax,0xc016d668
        return 0;
c0101a34:	b8 00 00 00 00       	mov    $0x0,%eax
c0101a39:	e9 d6 00 00 00       	jmp    c0101b14 <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c0101a3e:	a1 68 d6 16 c0       	mov    0xc016d668,%eax
c0101a43:	83 e0 40             	and    $0x40,%eax
c0101a46:	85 c0                	test   %eax,%eax
c0101a48:	74 11                	je     c0101a5b <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101a4a:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101a4e:	a1 68 d6 16 c0       	mov    0xc016d668,%eax
c0101a53:	83 e0 bf             	and    $0xffffffbf,%eax
c0101a56:	a3 68 d6 16 c0       	mov    %eax,0xc016d668
    }

    shift |= shiftcode[data];
c0101a5b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101a5f:	0f b6 80 40 a0 16 c0 	movzbl -0x3fe95fc0(%eax),%eax
c0101a66:	0f b6 d0             	movzbl %al,%edx
c0101a69:	a1 68 d6 16 c0       	mov    0xc016d668,%eax
c0101a6e:	09 d0                	or     %edx,%eax
c0101a70:	a3 68 d6 16 c0       	mov    %eax,0xc016d668
    shift ^= togglecode[data];
c0101a75:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101a79:	0f b6 80 40 a1 16 c0 	movzbl -0x3fe95ec0(%eax),%eax
c0101a80:	0f b6 d0             	movzbl %al,%edx
c0101a83:	a1 68 d6 16 c0       	mov    0xc016d668,%eax
c0101a88:	31 d0                	xor    %edx,%eax
c0101a8a:	a3 68 d6 16 c0       	mov    %eax,0xc016d668

    c = charcode[shift & (CTL | SHIFT)][data];
c0101a8f:	a1 68 d6 16 c0       	mov    0xc016d668,%eax
c0101a94:	83 e0 03             	and    $0x3,%eax
c0101a97:	8b 14 85 40 a5 16 c0 	mov    -0x3fe95ac0(,%eax,4),%edx
c0101a9e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101aa2:	01 d0                	add    %edx,%eax
c0101aa4:	0f b6 00             	movzbl (%eax),%eax
c0101aa7:	0f b6 c0             	movzbl %al,%eax
c0101aaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101aad:	a1 68 d6 16 c0       	mov    0xc016d668,%eax
c0101ab2:	83 e0 08             	and    $0x8,%eax
c0101ab5:	85 c0                	test   %eax,%eax
c0101ab7:	74 22                	je     c0101adb <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101ab9:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101abd:	7e 0c                	jle    c0101acb <kbd_proc_data+0x13e>
c0101abf:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101ac3:	7f 06                	jg     c0101acb <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101ac5:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101ac9:	eb 10                	jmp    c0101adb <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101acb:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101acf:	7e 0a                	jle    c0101adb <kbd_proc_data+0x14e>
c0101ad1:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101ad5:	7f 04                	jg     c0101adb <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101ad7:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101adb:	a1 68 d6 16 c0       	mov    0xc016d668,%eax
c0101ae0:	f7 d0                	not    %eax
c0101ae2:	83 e0 06             	and    $0x6,%eax
c0101ae5:	85 c0                	test   %eax,%eax
c0101ae7:	75 28                	jne    c0101b11 <kbd_proc_data+0x184>
c0101ae9:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101af0:	75 1f                	jne    c0101b11 <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c0101af2:	c7 04 24 d2 21 12 c0 	movl   $0xc01221d2,(%esp)
c0101af9:	e8 f5 e8 ff ff       	call   c01003f3 <cprintf>
c0101afe:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c0101b04:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101b08:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0101b0c:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101b10:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0101b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101b14:	c9                   	leave  
c0101b15:	c3                   	ret    

c0101b16 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101b16:	55                   	push   %ebp
c0101b17:	89 e5                	mov    %esp,%ebp
c0101b19:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c0101b1c:	c7 04 24 8d 19 10 c0 	movl   $0xc010198d,(%esp)
c0101b23:	e8 a6 fd ff ff       	call   c01018ce <cons_intr>
}
c0101b28:	c9                   	leave  
c0101b29:	c3                   	ret    

c0101b2a <kbd_init>:

static void
kbd_init(void) {
c0101b2a:	55                   	push   %ebp
c0101b2b:	89 e5                	mov    %esp,%ebp
c0101b2d:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c0101b30:	e8 e1 ff ff ff       	call   c0101b16 <kbd_intr>
    pic_enable(IRQ_KBD);
c0101b35:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0101b3c:	e8 be 09 00 00       	call   c01024ff <pic_enable>
}
c0101b41:	c9                   	leave  
c0101b42:	c3                   	ret    

c0101b43 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0101b43:	55                   	push   %ebp
c0101b44:	89 e5                	mov    %esp,%ebp
c0101b46:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c0101b49:	e8 93 f8 ff ff       	call   c01013e1 <cga_init>
    serial_init();
c0101b4e:	e8 74 f9 ff ff       	call   c01014c7 <serial_init>
    kbd_init();
c0101b53:	e8 d2 ff ff ff       	call   c0101b2a <kbd_init>
    if (!serial_exists) {
c0101b58:	a1 48 d4 16 c0       	mov    0xc016d448,%eax
c0101b5d:	85 c0                	test   %eax,%eax
c0101b5f:	75 0c                	jne    c0101b6d <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c0101b61:	c7 04 24 de 21 12 c0 	movl   $0xc01221de,(%esp)
c0101b68:	e8 86 e8 ff ff       	call   c01003f3 <cprintf>
    }
}
c0101b6d:	c9                   	leave  
c0101b6e:	c3                   	ret    

c0101b6f <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101b6f:	55                   	push   %ebp
c0101b70:	89 e5                	mov    %esp,%ebp
c0101b72:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101b75:	e8 e2 f7 ff ff       	call   c010135c <__intr_save>
c0101b7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101b7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b80:	89 04 24             	mov    %eax,(%esp)
c0101b83:	e8 9b fa ff ff       	call   c0101623 <lpt_putc>
        cga_putc(c);
c0101b88:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b8b:	89 04 24             	mov    %eax,(%esp)
c0101b8e:	e8 cf fa ff ff       	call   c0101662 <cga_putc>
        serial_putc(c);
c0101b93:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b96:	89 04 24             	mov    %eax,(%esp)
c0101b99:	e8 f1 fc ff ff       	call   c010188f <serial_putc>
    }
    local_intr_restore(intr_flag);
c0101b9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ba1:	89 04 24             	mov    %eax,(%esp)
c0101ba4:	e8 dd f7 ff ff       	call   c0101386 <__intr_restore>
}
c0101ba9:	c9                   	leave  
c0101baa:	c3                   	ret    

c0101bab <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101bab:	55                   	push   %ebp
c0101bac:	89 e5                	mov    %esp,%ebp
c0101bae:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c0101bb1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101bb8:	e8 9f f7 ff ff       	call   c010135c <__intr_save>
c0101bbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101bc0:	e8 ab fd ff ff       	call   c0101970 <serial_intr>
        kbd_intr();
c0101bc5:	e8 4c ff ff ff       	call   c0101b16 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101bca:	8b 15 60 d6 16 c0    	mov    0xc016d660,%edx
c0101bd0:	a1 64 d6 16 c0       	mov    0xc016d664,%eax
c0101bd5:	39 c2                	cmp    %eax,%edx
c0101bd7:	74 31                	je     c0101c0a <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0101bd9:	a1 60 d6 16 c0       	mov    0xc016d660,%eax
c0101bde:	8d 50 01             	lea    0x1(%eax),%edx
c0101be1:	89 15 60 d6 16 c0    	mov    %edx,0xc016d660
c0101be7:	0f b6 80 60 d4 16 c0 	movzbl -0x3fe92ba0(%eax),%eax
c0101bee:	0f b6 c0             	movzbl %al,%eax
c0101bf1:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101bf4:	a1 60 d6 16 c0       	mov    0xc016d660,%eax
c0101bf9:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101bfe:	75 0a                	jne    c0101c0a <cons_getc+0x5f>
                cons.rpos = 0;
c0101c00:	c7 05 60 d6 16 c0 00 	movl   $0x0,0xc016d660
c0101c07:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0101c0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101c0d:	89 04 24             	mov    %eax,(%esp)
c0101c10:	e8 71 f7 ff ff       	call   c0101386 <__intr_restore>
    return c;
c0101c15:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101c18:	c9                   	leave  
c0101c19:	c3                   	ret    

c0101c1a <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0101c1a:	55                   	push   %ebp
c0101c1b:	89 e5                	mov    %esp,%ebp
c0101c1d:	83 ec 14             	sub    $0x14,%esp
c0101c20:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c23:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0101c27:	90                   	nop
c0101c28:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101c2c:	83 c0 07             	add    $0x7,%eax
c0101c2f:	0f b7 c0             	movzwl %ax,%eax
c0101c32:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101c36:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101c3a:	89 c2                	mov    %eax,%edx
c0101c3c:	ec                   	in     (%dx),%al
c0101c3d:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101c40:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0101c44:	0f b6 c0             	movzbl %al,%eax
c0101c47:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0101c4a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101c4d:	25 80 00 00 00       	and    $0x80,%eax
c0101c52:	85 c0                	test   %eax,%eax
c0101c54:	75 d2                	jne    c0101c28 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0101c56:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0101c5a:	74 11                	je     c0101c6d <ide_wait_ready+0x53>
c0101c5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101c5f:	83 e0 21             	and    $0x21,%eax
c0101c62:	85 c0                	test   %eax,%eax
c0101c64:	74 07                	je     c0101c6d <ide_wait_ready+0x53>
        return -1;
c0101c66:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101c6b:	eb 05                	jmp    c0101c72 <ide_wait_ready+0x58>
    }
    return 0;
c0101c6d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c72:	c9                   	leave  
c0101c73:	c3                   	ret    

c0101c74 <ide_init>:

void
ide_init(void) {
c0101c74:	55                   	push   %ebp
c0101c75:	89 e5                	mov    %esp,%ebp
c0101c77:	57                   	push   %edi
c0101c78:	53                   	push   %ebx
c0101c79:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    cprintf("\n6.磁盘驱动\n");
c0101c7f:	c7 04 24 04 22 12 c0 	movl   $0xc0122204,(%esp)
c0101c86:	e8 68 e7 ff ff       	call   c01003f3 <cprintf>
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101c8b:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0101c91:	e9 d6 02 00 00       	jmp    c0101f6c <ide_init+0x2f8>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0101c96:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101c9a:	c1 e0 03             	shl    $0x3,%eax
c0101c9d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ca4:	29 c2                	sub    %eax,%edx
c0101ca6:	8d 82 80 d6 16 c0    	lea    -0x3fe92980(%edx),%eax
c0101cac:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0101caf:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101cb3:	66 d1 e8             	shr    %ax
c0101cb6:	0f b7 c0             	movzwl %ax,%eax
c0101cb9:	0f b7 04 85 fc 21 12 	movzwl -0x3fedde04(,%eax,4),%eax
c0101cc0:	c0 
c0101cc1:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0101cc5:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101cc9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101cd0:	00 
c0101cd1:	89 04 24             	mov    %eax,(%esp)
c0101cd4:	e8 41 ff ff ff       	call   c0101c1a <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101cd9:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101cdd:	83 e0 01             	and    $0x1,%eax
c0101ce0:	c1 e0 04             	shl    $0x4,%eax
c0101ce3:	83 c8 e0             	or     $0xffffffe0,%eax
c0101ce6:	0f b6 c0             	movzbl %al,%eax
c0101ce9:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101ced:	83 c2 06             	add    $0x6,%edx
c0101cf0:	0f b7 d2             	movzwl %dx,%edx
c0101cf3:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101cf7:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101cfa:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0101cfe:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0101d02:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101d03:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101d07:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101d0e:	00 
c0101d0f:	89 04 24             	mov    %eax,(%esp)
c0101d12:	e8 03 ff ff ff       	call   c0101c1a <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0101d17:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101d1b:	83 c0 07             	add    $0x7,%eax
c0101d1e:	0f b7 c0             	movzwl %ax,%eax
c0101d21:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c0101d25:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c0101d29:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c0101d2d:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0101d31:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101d32:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101d36:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101d3d:	00 
c0101d3e:	89 04 24             	mov    %eax,(%esp)
c0101d41:	e8 d4 fe ff ff       	call   c0101c1a <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c0101d46:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101d4a:	83 c0 07             	add    $0x7,%eax
c0101d4d:	0f b7 c0             	movzwl %ax,%eax
c0101d50:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d54:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c0101d58:	89 c2                	mov    %eax,%edx
c0101d5a:	ec                   	in     (%dx),%al
c0101d5b:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0101d5e:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0101d62:	84 c0                	test   %al,%al
c0101d64:	0f 84 f7 01 00 00    	je     c0101f61 <ide_init+0x2ed>
c0101d6a:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101d6e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101d75:	00 
c0101d76:	89 04 24             	mov    %eax,(%esp)
c0101d79:	e8 9c fe ff ff       	call   c0101c1a <ide_wait_ready>
c0101d7e:	85 c0                	test   %eax,%eax
c0101d80:	0f 85 db 01 00 00    	jne    c0101f61 <ide_init+0x2ed>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101d86:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101d8a:	c1 e0 03             	shl    $0x3,%eax
c0101d8d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101d94:	29 c2                	sub    %eax,%edx
c0101d96:	8d 82 80 d6 16 c0    	lea    -0x3fe92980(%edx),%eax
c0101d9c:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101d9f:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101da3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101da6:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101dac:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101daf:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101db6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0101db9:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0101dbc:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101dbf:	89 cb                	mov    %ecx,%ebx
c0101dc1:	89 df                	mov    %ebx,%edi
c0101dc3:	89 c1                	mov    %eax,%ecx
c0101dc5:	fc                   	cld    
c0101dc6:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101dc8:	89 c8                	mov    %ecx,%eax
c0101dca:	89 fb                	mov    %edi,%ebx
c0101dcc:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101dcf:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101dd2:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101dd8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101ddb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101dde:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101de4:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101de7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101dea:	25 00 00 00 04       	and    $0x4000000,%eax
c0101def:	85 c0                	test   %eax,%eax
c0101df1:	74 0e                	je     c0101e01 <ide_init+0x18d>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101df3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101df6:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101dfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101dff:	eb 09                	jmp    c0101e0a <ide_init+0x196>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101e01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101e04:	8b 40 78             	mov    0x78(%eax),%eax
c0101e07:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101e0a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101e0e:	c1 e0 03             	shl    $0x3,%eax
c0101e11:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101e18:	29 c2                	sub    %eax,%edx
c0101e1a:	81 c2 80 d6 16 c0    	add    $0xc016d680,%edx
c0101e20:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101e23:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c0101e26:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101e2a:	c1 e0 03             	shl    $0x3,%eax
c0101e2d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101e34:	29 c2                	sub    %eax,%edx
c0101e36:	81 c2 80 d6 16 c0    	add    $0xc016d680,%edx
c0101e3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101e3f:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101e42:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101e45:	83 c0 62             	add    $0x62,%eax
c0101e48:	0f b7 00             	movzwl (%eax),%eax
c0101e4b:	0f b7 c0             	movzwl %ax,%eax
c0101e4e:	25 00 02 00 00       	and    $0x200,%eax
c0101e53:	85 c0                	test   %eax,%eax
c0101e55:	75 24                	jne    c0101e7b <ide_init+0x207>
c0101e57:	c7 44 24 0c 18 22 12 	movl   $0xc0122218,0xc(%esp)
c0101e5e:	c0 
c0101e5f:	c7 44 24 08 5b 22 12 	movl   $0xc012225b,0x8(%esp)
c0101e66:	c0 
c0101e67:	c7 44 24 04 7e 00 00 	movl   $0x7e,0x4(%esp)
c0101e6e:	00 
c0101e6f:	c7 04 24 70 22 12 c0 	movl   $0xc0122270,(%esp)
c0101e76:	e8 9b f3 ff ff       	call   c0101216 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101e7b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101e7f:	c1 e0 03             	shl    $0x3,%eax
c0101e82:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101e89:	29 c2                	sub    %eax,%edx
c0101e8b:	8d 82 80 d6 16 c0    	lea    -0x3fe92980(%edx),%eax
c0101e91:	83 c0 0c             	add    $0xc,%eax
c0101e94:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101e97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101e9a:	83 c0 36             	add    $0x36,%eax
c0101e9d:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101ea0:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101ea7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101eae:	eb 34                	jmp    c0101ee4 <ide_init+0x270>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101eb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101eb3:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101eb6:	01 c2                	add    %eax,%edx
c0101eb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101ebb:	8d 48 01             	lea    0x1(%eax),%ecx
c0101ebe:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101ec1:	01 c8                	add    %ecx,%eax
c0101ec3:	0f b6 00             	movzbl (%eax),%eax
c0101ec6:	88 02                	mov    %al,(%edx)
c0101ec8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101ecb:	8d 50 01             	lea    0x1(%eax),%edx
c0101ece:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101ed1:	01 c2                	add    %eax,%edx
c0101ed3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101ed6:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101ed9:	01 c8                	add    %ecx,%eax
c0101edb:	0f b6 00             	movzbl (%eax),%eax
c0101ede:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101ee0:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101ee4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101ee7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101eea:	72 c4                	jb     c0101eb0 <ide_init+0x23c>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101eec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101eef:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101ef2:	01 d0                	add    %edx,%eax
c0101ef4:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101ef7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101efa:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101efd:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101f00:	85 c0                	test   %eax,%eax
c0101f02:	74 0f                	je     c0101f13 <ide_init+0x29f>
c0101f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101f07:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101f0a:	01 d0                	add    %edx,%eax
c0101f0c:	0f b6 00             	movzbl (%eax),%eax
c0101f0f:	3c 20                	cmp    $0x20,%al
c0101f11:	74 d9                	je     c0101eec <ide_init+0x278>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101f13:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101f17:	c1 e0 03             	shl    $0x3,%eax
c0101f1a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101f21:	29 c2                	sub    %eax,%edx
c0101f23:	8d 82 80 d6 16 c0    	lea    -0x3fe92980(%edx),%eax
c0101f29:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101f2c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101f30:	c1 e0 03             	shl    $0x3,%eax
c0101f33:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101f3a:	29 c2                	sub    %eax,%edx
c0101f3c:	8d 82 80 d6 16 c0    	lea    -0x3fe92980(%edx),%eax
c0101f42:	8b 50 08             	mov    0x8(%eax),%edx
c0101f45:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101f49:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101f4d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101f51:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101f55:	c7 04 24 82 22 12 c0 	movl   $0xc0122282,(%esp)
c0101f5c:	e8 92 e4 ff ff       	call   c01003f3 <cprintf>
void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    cprintf("\n6.磁盘驱动\n");
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101f61:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101f65:	83 c0 01             	add    $0x1,%eax
c0101f68:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101f6c:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101f71:	0f 86 1f fd ff ff    	jbe    c0101c96 <ide_init+0x22>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101f77:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101f7e:	e8 7c 05 00 00       	call   c01024ff <pic_enable>
    pic_enable(IRQ_IDE2);
c0101f83:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101f8a:	e8 70 05 00 00       	call   c01024ff <pic_enable>
}
c0101f8f:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101f95:	5b                   	pop    %ebx
c0101f96:	5f                   	pop    %edi
c0101f97:	5d                   	pop    %ebp
c0101f98:	c3                   	ret    

c0101f99 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101f99:	55                   	push   %ebp
c0101f9a:	89 e5                	mov    %esp,%ebp
c0101f9c:	83 ec 04             	sub    $0x4,%esp
c0101f9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101fa2:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101fa6:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101fab:	77 24                	ja     c0101fd1 <ide_device_valid+0x38>
c0101fad:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101fb1:	c1 e0 03             	shl    $0x3,%eax
c0101fb4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101fbb:	29 c2                	sub    %eax,%edx
c0101fbd:	8d 82 80 d6 16 c0    	lea    -0x3fe92980(%edx),%eax
c0101fc3:	0f b6 00             	movzbl (%eax),%eax
c0101fc6:	84 c0                	test   %al,%al
c0101fc8:	74 07                	je     c0101fd1 <ide_device_valid+0x38>
c0101fca:	b8 01 00 00 00       	mov    $0x1,%eax
c0101fcf:	eb 05                	jmp    c0101fd6 <ide_device_valid+0x3d>
c0101fd1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101fd6:	c9                   	leave  
c0101fd7:	c3                   	ret    

c0101fd8 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101fd8:	55                   	push   %ebp
c0101fd9:	89 e5                	mov    %esp,%ebp
c0101fdb:	83 ec 08             	sub    $0x8,%esp
c0101fde:	8b 45 08             	mov    0x8(%ebp),%eax
c0101fe1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101fe5:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101fe9:	89 04 24             	mov    %eax,(%esp)
c0101fec:	e8 a8 ff ff ff       	call   c0101f99 <ide_device_valid>
c0101ff1:	85 c0                	test   %eax,%eax
c0101ff3:	74 1b                	je     c0102010 <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101ff5:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101ff9:	c1 e0 03             	shl    $0x3,%eax
c0101ffc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102003:	29 c2                	sub    %eax,%edx
c0102005:	8d 82 80 d6 16 c0    	lea    -0x3fe92980(%edx),%eax
c010200b:	8b 40 08             	mov    0x8(%eax),%eax
c010200e:	eb 05                	jmp    c0102015 <ide_device_size+0x3d>
    }
    return 0;
c0102010:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102015:	c9                   	leave  
c0102016:	c3                   	ret    

c0102017 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0102017:	55                   	push   %ebp
c0102018:	89 e5                	mov    %esp,%ebp
c010201a:	57                   	push   %edi
c010201b:	53                   	push   %ebx
c010201c:	83 ec 50             	sub    $0x50,%esp
c010201f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102022:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0102026:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c010202d:	77 24                	ja     c0102053 <ide_read_secs+0x3c>
c010202f:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0102034:	77 1d                	ja     c0102053 <ide_read_secs+0x3c>
c0102036:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010203a:	c1 e0 03             	shl    $0x3,%eax
c010203d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102044:	29 c2                	sub    %eax,%edx
c0102046:	8d 82 80 d6 16 c0    	lea    -0x3fe92980(%edx),%eax
c010204c:	0f b6 00             	movzbl (%eax),%eax
c010204f:	84 c0                	test   %al,%al
c0102051:	75 24                	jne    c0102077 <ide_read_secs+0x60>
c0102053:	c7 44 24 0c a0 22 12 	movl   $0xc01222a0,0xc(%esp)
c010205a:	c0 
c010205b:	c7 44 24 08 5b 22 12 	movl   $0xc012225b,0x8(%esp)
c0102062:	c0 
c0102063:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010206a:	00 
c010206b:	c7 04 24 70 22 12 c0 	movl   $0xc0122270,(%esp)
c0102072:	e8 9f f1 ff ff       	call   c0101216 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0102077:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c010207e:	77 0f                	ja     c010208f <ide_read_secs+0x78>
c0102080:	8b 45 14             	mov    0x14(%ebp),%eax
c0102083:	8b 55 0c             	mov    0xc(%ebp),%edx
c0102086:	01 d0                	add    %edx,%eax
c0102088:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c010208d:	76 24                	jbe    c01020b3 <ide_read_secs+0x9c>
c010208f:	c7 44 24 0c c8 22 12 	movl   $0xc01222c8,0xc(%esp)
c0102096:	c0 
c0102097:	c7 44 24 08 5b 22 12 	movl   $0xc012225b,0x8(%esp)
c010209e:	c0 
c010209f:	c7 44 24 04 a1 00 00 	movl   $0xa1,0x4(%esp)
c01020a6:	00 
c01020a7:	c7 04 24 70 22 12 c0 	movl   $0xc0122270,(%esp)
c01020ae:	e8 63 f1 ff ff       	call   c0101216 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01020b3:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01020b7:	66 d1 e8             	shr    %ax
c01020ba:	0f b7 c0             	movzwl %ax,%eax
c01020bd:	0f b7 04 85 fc 21 12 	movzwl -0x3fedde04(,%eax,4),%eax
c01020c4:	c0 
c01020c5:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01020c9:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01020cd:	66 d1 e8             	shr    %ax
c01020d0:	0f b7 c0             	movzwl %ax,%eax
c01020d3:	0f b7 04 85 fe 21 12 	movzwl -0x3fedde02(,%eax,4),%eax
c01020da:	c0 
c01020db:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c01020df:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020e3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01020ea:	00 
c01020eb:	89 04 24             	mov    %eax,(%esp)
c01020ee:	e8 27 fb ff ff       	call   c0101c1a <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c01020f3:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01020f7:	83 c0 02             	add    $0x2,%eax
c01020fa:	0f b7 c0             	movzwl %ax,%eax
c01020fd:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0102101:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102105:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102109:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010210d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c010210e:	8b 45 14             	mov    0x14(%ebp),%eax
c0102111:	0f b6 c0             	movzbl %al,%eax
c0102114:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102118:	83 c2 02             	add    $0x2,%edx
c010211b:	0f b7 d2             	movzwl %dx,%edx
c010211e:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0102122:	88 45 e9             	mov    %al,-0x17(%ebp)
c0102125:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102129:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010212d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c010212e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102131:	0f b6 c0             	movzbl %al,%eax
c0102134:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102138:	83 c2 03             	add    $0x3,%edx
c010213b:	0f b7 d2             	movzwl %dx,%edx
c010213e:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0102142:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0102145:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102149:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010214d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c010214e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102151:	c1 e8 08             	shr    $0x8,%eax
c0102154:	0f b6 c0             	movzbl %al,%eax
c0102157:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010215b:	83 c2 04             	add    $0x4,%edx
c010215e:	0f b7 d2             	movzwl %dx,%edx
c0102161:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0102165:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0102168:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c010216c:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102170:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0102171:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102174:	c1 e8 10             	shr    $0x10,%eax
c0102177:	0f b6 c0             	movzbl %al,%eax
c010217a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010217e:	83 c2 05             	add    $0x5,%edx
c0102181:	0f b7 d2             	movzwl %dx,%edx
c0102184:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0102188:	88 45 dd             	mov    %al,-0x23(%ebp)
c010218b:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010218f:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102193:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0102194:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0102198:	83 e0 01             	and    $0x1,%eax
c010219b:	c1 e0 04             	shl    $0x4,%eax
c010219e:	89 c2                	mov    %eax,%edx
c01021a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01021a3:	c1 e8 18             	shr    $0x18,%eax
c01021a6:	83 e0 0f             	and    $0xf,%eax
c01021a9:	09 d0                	or     %edx,%eax
c01021ab:	83 c8 e0             	or     $0xffffffe0,%eax
c01021ae:	0f b6 c0             	movzbl %al,%eax
c01021b1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01021b5:	83 c2 06             	add    $0x6,%edx
c01021b8:	0f b7 d2             	movzwl %dx,%edx
c01021bb:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c01021bf:	88 45 d9             	mov    %al,-0x27(%ebp)
c01021c2:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01021c6:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01021ca:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c01021cb:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01021cf:	83 c0 07             	add    $0x7,%eax
c01021d2:	0f b7 c0             	movzwl %ax,%eax
c01021d5:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c01021d9:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c01021dd:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01021e1:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01021e5:	ee                   	out    %al,(%dx)

    int ret = 0;
c01021e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c01021ed:	eb 5a                	jmp    c0102249 <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01021ef:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01021f3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01021fa:	00 
c01021fb:	89 04 24             	mov    %eax,(%esp)
c01021fe:	e8 17 fa ff ff       	call   c0101c1a <ide_wait_ready>
c0102203:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102206:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010220a:	74 02                	je     c010220e <ide_read_secs+0x1f7>
            goto out;
c010220c:	eb 41                	jmp    c010224f <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c010220e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102212:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0102215:	8b 45 10             	mov    0x10(%ebp),%eax
c0102218:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010221b:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0102222:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0102225:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0102228:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010222b:	89 cb                	mov    %ecx,%ebx
c010222d:	89 df                	mov    %ebx,%edi
c010222f:	89 c1                	mov    %eax,%ecx
c0102231:	fc                   	cld    
c0102232:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0102234:	89 c8                	mov    %ecx,%eax
c0102236:	89 fb                	mov    %edi,%ebx
c0102238:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c010223b:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c010223e:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0102242:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0102249:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010224d:	75 a0                	jne    c01021ef <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c010224f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102252:	83 c4 50             	add    $0x50,%esp
c0102255:	5b                   	pop    %ebx
c0102256:	5f                   	pop    %edi
c0102257:	5d                   	pop    %ebp
c0102258:	c3                   	ret    

c0102259 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0102259:	55                   	push   %ebp
c010225a:	89 e5                	mov    %esp,%ebp
c010225c:	56                   	push   %esi
c010225d:	53                   	push   %ebx
c010225e:	83 ec 50             	sub    $0x50,%esp
c0102261:	8b 45 08             	mov    0x8(%ebp),%eax
c0102264:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0102268:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c010226f:	77 24                	ja     c0102295 <ide_write_secs+0x3c>
c0102271:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0102276:	77 1d                	ja     c0102295 <ide_write_secs+0x3c>
c0102278:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010227c:	c1 e0 03             	shl    $0x3,%eax
c010227f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102286:	29 c2                	sub    %eax,%edx
c0102288:	8d 82 80 d6 16 c0    	lea    -0x3fe92980(%edx),%eax
c010228e:	0f b6 00             	movzbl (%eax),%eax
c0102291:	84 c0                	test   %al,%al
c0102293:	75 24                	jne    c01022b9 <ide_write_secs+0x60>
c0102295:	c7 44 24 0c a0 22 12 	movl   $0xc01222a0,0xc(%esp)
c010229c:	c0 
c010229d:	c7 44 24 08 5b 22 12 	movl   $0xc012225b,0x8(%esp)
c01022a4:	c0 
c01022a5:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c01022ac:	00 
c01022ad:	c7 04 24 70 22 12 c0 	movl   $0xc0122270,(%esp)
c01022b4:	e8 5d ef ff ff       	call   c0101216 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01022b9:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01022c0:	77 0f                	ja     c01022d1 <ide_write_secs+0x78>
c01022c2:	8b 45 14             	mov    0x14(%ebp),%eax
c01022c5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01022c8:	01 d0                	add    %edx,%eax
c01022ca:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01022cf:	76 24                	jbe    c01022f5 <ide_write_secs+0x9c>
c01022d1:	c7 44 24 0c c8 22 12 	movl   $0xc01222c8,0xc(%esp)
c01022d8:	c0 
c01022d9:	c7 44 24 08 5b 22 12 	movl   $0xc012225b,0x8(%esp)
c01022e0:	c0 
c01022e1:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c01022e8:	00 
c01022e9:	c7 04 24 70 22 12 c0 	movl   $0xc0122270,(%esp)
c01022f0:	e8 21 ef ff ff       	call   c0101216 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01022f5:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01022f9:	66 d1 e8             	shr    %ax
c01022fc:	0f b7 c0             	movzwl %ax,%eax
c01022ff:	0f b7 04 85 fc 21 12 	movzwl -0x3fedde04(,%eax,4),%eax
c0102306:	c0 
c0102307:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010230b:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010230f:	66 d1 e8             	shr    %ax
c0102312:	0f b7 c0             	movzwl %ax,%eax
c0102315:	0f b7 04 85 fe 21 12 	movzwl -0x3fedde02(,%eax,4),%eax
c010231c:	c0 
c010231d:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0102321:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102325:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010232c:	00 
c010232d:	89 04 24             	mov    %eax,(%esp)
c0102330:	e8 e5 f8 ff ff       	call   c0101c1a <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0102335:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0102339:	83 c0 02             	add    $0x2,%eax
c010233c:	0f b7 c0             	movzwl %ax,%eax
c010233f:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0102343:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102347:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010234b:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010234f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0102350:	8b 45 14             	mov    0x14(%ebp),%eax
c0102353:	0f b6 c0             	movzbl %al,%eax
c0102356:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010235a:	83 c2 02             	add    $0x2,%edx
c010235d:	0f b7 d2             	movzwl %dx,%edx
c0102360:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0102364:	88 45 e9             	mov    %al,-0x17(%ebp)
c0102367:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010236b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010236f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0102370:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102373:	0f b6 c0             	movzbl %al,%eax
c0102376:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010237a:	83 c2 03             	add    $0x3,%edx
c010237d:	0f b7 d2             	movzwl %dx,%edx
c0102380:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0102384:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0102387:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010238b:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010238f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0102390:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102393:	c1 e8 08             	shr    $0x8,%eax
c0102396:	0f b6 c0             	movzbl %al,%eax
c0102399:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010239d:	83 c2 04             	add    $0x4,%edx
c01023a0:	0f b7 d2             	movzwl %dx,%edx
c01023a3:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01023a7:	88 45 e1             	mov    %al,-0x1f(%ebp)
c01023aa:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01023ae:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01023b2:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01023b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01023b6:	c1 e8 10             	shr    $0x10,%eax
c01023b9:	0f b6 c0             	movzbl %al,%eax
c01023bc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01023c0:	83 c2 05             	add    $0x5,%edx
c01023c3:	0f b7 d2             	movzwl %dx,%edx
c01023c6:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c01023ca:	88 45 dd             	mov    %al,-0x23(%ebp)
c01023cd:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01023d1:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01023d5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01023d6:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01023da:	83 e0 01             	and    $0x1,%eax
c01023dd:	c1 e0 04             	shl    $0x4,%eax
c01023e0:	89 c2                	mov    %eax,%edx
c01023e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01023e5:	c1 e8 18             	shr    $0x18,%eax
c01023e8:	83 e0 0f             	and    $0xf,%eax
c01023eb:	09 d0                	or     %edx,%eax
c01023ed:	83 c8 e0             	or     $0xffffffe0,%eax
c01023f0:	0f b6 c0             	movzbl %al,%eax
c01023f3:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01023f7:	83 c2 06             	add    $0x6,%edx
c01023fa:	0f b7 d2             	movzwl %dx,%edx
c01023fd:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0102401:	88 45 d9             	mov    %al,-0x27(%ebp)
c0102404:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102408:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010240c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c010240d:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102411:	83 c0 07             	add    $0x7,%eax
c0102414:	0f b7 c0             	movzwl %ax,%eax
c0102417:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c010241b:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c010241f:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102423:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0102427:	ee                   	out    %al,(%dx)

    int ret = 0;
c0102428:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010242f:	eb 5a                	jmp    c010248b <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0102431:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102435:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010243c:	00 
c010243d:	89 04 24             	mov    %eax,(%esp)
c0102440:	e8 d5 f7 ff ff       	call   c0101c1a <ide_wait_ready>
c0102445:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102448:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010244c:	74 02                	je     c0102450 <ide_write_secs+0x1f7>
            goto out;
c010244e:	eb 41                	jmp    c0102491 <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0102450:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102454:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0102457:	8b 45 10             	mov    0x10(%ebp),%eax
c010245a:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010245d:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0102464:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0102467:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010246a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010246d:	89 cb                	mov    %ecx,%ebx
c010246f:	89 de                	mov    %ebx,%esi
c0102471:	89 c1                	mov    %eax,%ecx
c0102473:	fc                   	cld    
c0102474:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0102476:	89 c8                	mov    %ecx,%eax
c0102478:	89 f3                	mov    %esi,%ebx
c010247a:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c010247d:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102480:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0102484:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010248b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010248f:	75 a0                	jne    c0102431 <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0102491:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102494:	83 c4 50             	add    $0x50,%esp
c0102497:	5b                   	pop    %ebx
c0102498:	5e                   	pop    %esi
c0102499:	5d                   	pop    %ebp
c010249a:	c3                   	ret    

c010249b <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c010249b:	55                   	push   %ebp
c010249c:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c010249e:	fb                   	sti    
    sti();
}
c010249f:	5d                   	pop    %ebp
c01024a0:	c3                   	ret    

c01024a1 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01024a1:	55                   	push   %ebp
c01024a2:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01024a4:	fa                   	cli    
    cli();
}
c01024a5:	5d                   	pop    %ebp
c01024a6:	c3                   	ret    

c01024a7 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c01024a7:	55                   	push   %ebp
c01024a8:	89 e5                	mov    %esp,%ebp
c01024aa:	83 ec 14             	sub    $0x14,%esp
c01024ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01024b0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c01024b4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01024b8:	66 a3 50 a5 16 c0    	mov    %ax,0xc016a550
    if (did_init) {
c01024be:	a1 60 d7 16 c0       	mov    0xc016d760,%eax
c01024c3:	85 c0                	test   %eax,%eax
c01024c5:	74 36                	je     c01024fd <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c01024c7:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01024cb:	0f b6 c0             	movzbl %al,%eax
c01024ce:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01024d4:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01024d7:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01024db:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01024df:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c01024e0:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01024e4:	66 c1 e8 08          	shr    $0x8,%ax
c01024e8:	0f b6 c0             	movzbl %al,%eax
c01024eb:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01024f1:	88 45 f9             	mov    %al,-0x7(%ebp)
c01024f4:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01024f8:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01024fc:	ee                   	out    %al,(%dx)
    }
}
c01024fd:	c9                   	leave  
c01024fe:	c3                   	ret    

c01024ff <pic_enable>:

void
pic_enable(unsigned int irq) {
c01024ff:	55                   	push   %ebp
c0102500:	89 e5                	mov    %esp,%ebp
c0102502:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c0102505:	8b 45 08             	mov    0x8(%ebp),%eax
c0102508:	ba 01 00 00 00       	mov    $0x1,%edx
c010250d:	89 c1                	mov    %eax,%ecx
c010250f:	d3 e2                	shl    %cl,%edx
c0102511:	89 d0                	mov    %edx,%eax
c0102513:	f7 d0                	not    %eax
c0102515:	89 c2                	mov    %eax,%edx
c0102517:	0f b7 05 50 a5 16 c0 	movzwl 0xc016a550,%eax
c010251e:	21 d0                	and    %edx,%eax
c0102520:	0f b7 c0             	movzwl %ax,%eax
c0102523:	89 04 24             	mov    %eax,(%esp)
c0102526:	e8 7c ff ff ff       	call   c01024a7 <pic_setmask>
}
c010252b:	c9                   	leave  
c010252c:	c3                   	ret    

c010252d <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c010252d:	55                   	push   %ebp
c010252e:	89 e5                	mov    %esp,%ebp
c0102530:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c0102533:	c7 05 60 d7 16 c0 01 	movl   $0x1,0xc016d760
c010253a:	00 00 00 
c010253d:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102543:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c0102547:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c010254b:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010254f:	ee                   	out    %al,(%dx)
c0102550:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c0102556:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c010255a:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010255e:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102562:	ee                   	out    %al,(%dx)
c0102563:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c0102569:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c010256d:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0102571:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102575:	ee                   	out    %al,(%dx)
c0102576:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c010257c:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c0102580:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102584:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102588:	ee                   	out    %al,(%dx)
c0102589:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c010258f:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c0102593:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102597:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010259b:	ee                   	out    %al,(%dx)
c010259c:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c01025a2:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c01025a6:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01025aa:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01025ae:	ee                   	out    %al,(%dx)
c01025af:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c01025b5:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c01025b9:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01025bd:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01025c1:	ee                   	out    %al,(%dx)
c01025c2:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c01025c8:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c01025cc:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01025d0:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01025d4:	ee                   	out    %al,(%dx)
c01025d5:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c01025db:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c01025df:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01025e3:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01025e7:	ee                   	out    %al,(%dx)
c01025e8:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c01025ee:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c01025f2:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01025f6:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01025fa:	ee                   	out    %al,(%dx)
c01025fb:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c0102601:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c0102605:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102609:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010260d:	ee                   	out    %al,(%dx)
c010260e:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c0102614:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c0102618:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c010261c:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0102620:	ee                   	out    %al,(%dx)
c0102621:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c0102627:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c010262b:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c010262f:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0102633:	ee                   	out    %al,(%dx)
c0102634:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c010263a:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c010263e:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0102642:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c0102646:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c0102647:	0f b7 05 50 a5 16 c0 	movzwl 0xc016a550,%eax
c010264e:	66 83 f8 ff          	cmp    $0xffff,%ax
c0102652:	74 12                	je     c0102666 <pic_init+0x139>
        pic_setmask(irq_mask);
c0102654:	0f b7 05 50 a5 16 c0 	movzwl 0xc016a550,%eax
c010265b:	0f b7 c0             	movzwl %ax,%eax
c010265e:	89 04 24             	mov    %eax,(%esp)
c0102661:	e8 41 fe ff ff       	call   c01024a7 <pic_setmask>
    }
}
c0102666:	c9                   	leave  
c0102667:	c3                   	ret    

c0102668 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c0102668:	55                   	push   %ebp
c0102669:	89 e5                	mov    %esp,%ebp
c010266b:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c010266e:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0102675:	00 
c0102676:	c7 04 24 20 23 12 c0 	movl   $0xc0122320,(%esp)
c010267d:	e8 71 dd ff ff       	call   c01003f3 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
    panic("EOT: kernel seems ok.");
#endif
}
c0102682:	c9                   	leave  
c0102683:	c3                   	ret    

c0102684 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c0102684:	55                   	push   %ebp
c0102685:	89 e5                	mov    %esp,%ebp
c0102687:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c010268a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102691:	e9 c3 00 00 00       	jmp    c0102759 <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0102696:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102699:	8b 04 85 e0 a5 16 c0 	mov    -0x3fe95a20(,%eax,4),%eax
c01026a0:	89 c2                	mov    %eax,%edx
c01026a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01026a5:	66 89 14 c5 80 d7 16 	mov    %dx,-0x3fe92880(,%eax,8)
c01026ac:	c0 
c01026ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01026b0:	66 c7 04 c5 82 d7 16 	movw   $0x8,-0x3fe9287e(,%eax,8)
c01026b7:	c0 08 00 
c01026ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01026bd:	0f b6 14 c5 84 d7 16 	movzbl -0x3fe9287c(,%eax,8),%edx
c01026c4:	c0 
c01026c5:	83 e2 e0             	and    $0xffffffe0,%edx
c01026c8:	88 14 c5 84 d7 16 c0 	mov    %dl,-0x3fe9287c(,%eax,8)
c01026cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01026d2:	0f b6 14 c5 84 d7 16 	movzbl -0x3fe9287c(,%eax,8),%edx
c01026d9:	c0 
c01026da:	83 e2 1f             	and    $0x1f,%edx
c01026dd:	88 14 c5 84 d7 16 c0 	mov    %dl,-0x3fe9287c(,%eax,8)
c01026e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01026e7:	0f b6 14 c5 85 d7 16 	movzbl -0x3fe9287b(,%eax,8),%edx
c01026ee:	c0 
c01026ef:	83 e2 f0             	and    $0xfffffff0,%edx
c01026f2:	83 ca 0e             	or     $0xe,%edx
c01026f5:	88 14 c5 85 d7 16 c0 	mov    %dl,-0x3fe9287b(,%eax,8)
c01026fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01026ff:	0f b6 14 c5 85 d7 16 	movzbl -0x3fe9287b(,%eax,8),%edx
c0102706:	c0 
c0102707:	83 e2 ef             	and    $0xffffffef,%edx
c010270a:	88 14 c5 85 d7 16 c0 	mov    %dl,-0x3fe9287b(,%eax,8)
c0102711:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102714:	0f b6 14 c5 85 d7 16 	movzbl -0x3fe9287b(,%eax,8),%edx
c010271b:	c0 
c010271c:	83 e2 9f             	and    $0xffffff9f,%edx
c010271f:	88 14 c5 85 d7 16 c0 	mov    %dl,-0x3fe9287b(,%eax,8)
c0102726:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102729:	0f b6 14 c5 85 d7 16 	movzbl -0x3fe9287b(,%eax,8),%edx
c0102730:	c0 
c0102731:	83 ca 80             	or     $0xffffff80,%edx
c0102734:	88 14 c5 85 d7 16 c0 	mov    %dl,-0x3fe9287b(,%eax,8)
c010273b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010273e:	8b 04 85 e0 a5 16 c0 	mov    -0x3fe95a20(,%eax,4),%eax
c0102745:	c1 e8 10             	shr    $0x10,%eax
c0102748:	89 c2                	mov    %eax,%edx
c010274a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010274d:	66 89 14 c5 86 d7 16 	mov    %dx,-0x3fe9287a(,%eax,8)
c0102754:	c0 
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c0102755:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102759:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010275c:	3d ff 00 00 00       	cmp    $0xff,%eax
c0102761:	0f 86 2f ff ff ff    	jbe    c0102696 <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c0102767:	a1 e0 a7 16 c0       	mov    0xc016a7e0,%eax
c010276c:	66 a3 80 db 16 c0    	mov    %ax,0xc016db80
c0102772:	66 c7 05 82 db 16 c0 	movw   $0x8,0xc016db82
c0102779:	08 00 
c010277b:	0f b6 05 84 db 16 c0 	movzbl 0xc016db84,%eax
c0102782:	83 e0 e0             	and    $0xffffffe0,%eax
c0102785:	a2 84 db 16 c0       	mov    %al,0xc016db84
c010278a:	0f b6 05 84 db 16 c0 	movzbl 0xc016db84,%eax
c0102791:	83 e0 1f             	and    $0x1f,%eax
c0102794:	a2 84 db 16 c0       	mov    %al,0xc016db84
c0102799:	0f b6 05 85 db 16 c0 	movzbl 0xc016db85,%eax
c01027a0:	83 c8 0f             	or     $0xf,%eax
c01027a3:	a2 85 db 16 c0       	mov    %al,0xc016db85
c01027a8:	0f b6 05 85 db 16 c0 	movzbl 0xc016db85,%eax
c01027af:	83 e0 ef             	and    $0xffffffef,%eax
c01027b2:	a2 85 db 16 c0       	mov    %al,0xc016db85
c01027b7:	0f b6 05 85 db 16 c0 	movzbl 0xc016db85,%eax
c01027be:	83 c8 60             	or     $0x60,%eax
c01027c1:	a2 85 db 16 c0       	mov    %al,0xc016db85
c01027c6:	0f b6 05 85 db 16 c0 	movzbl 0xc016db85,%eax
c01027cd:	83 c8 80             	or     $0xffffff80,%eax
c01027d0:	a2 85 db 16 c0       	mov    %al,0xc016db85
c01027d5:	a1 e0 a7 16 c0       	mov    0xc016a7e0,%eax
c01027da:	c1 e8 10             	shr    $0x10,%eax
c01027dd:	66 a3 86 db 16 c0    	mov    %ax,0xc016db86
c01027e3:	c7 45 f8 60 a5 16 c0 	movl   $0xc016a560,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c01027ea:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01027ed:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c01027f0:	c9                   	leave  
c01027f1:	c3                   	ret    

c01027f2 <trapname>:

static const char *
trapname(int trapno) {
c01027f2:	55                   	push   %ebp
c01027f3:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01027f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01027f8:	83 f8 13             	cmp    $0x13,%eax
c01027fb:	77 0c                	ja     c0102809 <trapname+0x17>
        return excnames[trapno];
c01027fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0102800:	8b 04 85 a0 27 12 c0 	mov    -0x3fedd860(,%eax,4),%eax
c0102807:	eb 18                	jmp    c0102821 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c0102809:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c010280d:	7e 0d                	jle    c010281c <trapname+0x2a>
c010280f:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0102813:	7f 07                	jg     c010281c <trapname+0x2a>
        return "Hardware Interrupt";
c0102815:	b8 2a 23 12 c0       	mov    $0xc012232a,%eax
c010281a:	eb 05                	jmp    c0102821 <trapname+0x2f>
    }
    return "(unknown trap)";
c010281c:	b8 3d 23 12 c0       	mov    $0xc012233d,%eax
}
c0102821:	5d                   	pop    %ebp
c0102822:	c3                   	ret    

c0102823 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c0102823:	55                   	push   %ebp
c0102824:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c0102826:	8b 45 08             	mov    0x8(%ebp),%eax
c0102829:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010282d:	66 83 f8 08          	cmp    $0x8,%ax
c0102831:	0f 94 c0             	sete   %al
c0102834:	0f b6 c0             	movzbl %al,%eax
}
c0102837:	5d                   	pop    %ebp
c0102838:	c3                   	ret    

c0102839 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c0102839:	55                   	push   %ebp
c010283a:	89 e5                	mov    %esp,%ebp
c010283c:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c010283f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102842:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102846:	c7 04 24 7e 23 12 c0 	movl   $0xc012237e,(%esp)
c010284d:	e8 a1 db ff ff       	call   c01003f3 <cprintf>
    print_regs(&tf->tf_regs);
c0102852:	8b 45 08             	mov    0x8(%ebp),%eax
c0102855:	89 04 24             	mov    %eax,(%esp)
c0102858:	e8 a1 01 00 00       	call   c01029fe <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c010285d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102860:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0102864:	0f b7 c0             	movzwl %ax,%eax
c0102867:	89 44 24 04          	mov    %eax,0x4(%esp)
c010286b:	c7 04 24 8f 23 12 c0 	movl   $0xc012238f,(%esp)
c0102872:	e8 7c db ff ff       	call   c01003f3 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102877:	8b 45 08             	mov    0x8(%ebp),%eax
c010287a:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c010287e:	0f b7 c0             	movzwl %ax,%eax
c0102881:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102885:	c7 04 24 a2 23 12 c0 	movl   $0xc01223a2,(%esp)
c010288c:	e8 62 db ff ff       	call   c01003f3 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102891:	8b 45 08             	mov    0x8(%ebp),%eax
c0102894:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102898:	0f b7 c0             	movzwl %ax,%eax
c010289b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010289f:	c7 04 24 b5 23 12 c0 	movl   $0xc01223b5,(%esp)
c01028a6:	e8 48 db ff ff       	call   c01003f3 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c01028ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01028ae:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c01028b2:	0f b7 c0             	movzwl %ax,%eax
c01028b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01028b9:	c7 04 24 c8 23 12 c0 	movl   $0xc01223c8,(%esp)
c01028c0:	e8 2e db ff ff       	call   c01003f3 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c01028c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01028c8:	8b 40 30             	mov    0x30(%eax),%eax
c01028cb:	89 04 24             	mov    %eax,(%esp)
c01028ce:	e8 1f ff ff ff       	call   c01027f2 <trapname>
c01028d3:	8b 55 08             	mov    0x8(%ebp),%edx
c01028d6:	8b 52 30             	mov    0x30(%edx),%edx
c01028d9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01028dd:	89 54 24 04          	mov    %edx,0x4(%esp)
c01028e1:	c7 04 24 db 23 12 c0 	movl   $0xc01223db,(%esp)
c01028e8:	e8 06 db ff ff       	call   c01003f3 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c01028ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01028f0:	8b 40 34             	mov    0x34(%eax),%eax
c01028f3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01028f7:	c7 04 24 ed 23 12 c0 	movl   $0xc01223ed,(%esp)
c01028fe:	e8 f0 da ff ff       	call   c01003f3 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c0102903:	8b 45 08             	mov    0x8(%ebp),%eax
c0102906:	8b 40 38             	mov    0x38(%eax),%eax
c0102909:	89 44 24 04          	mov    %eax,0x4(%esp)
c010290d:	c7 04 24 fc 23 12 c0 	movl   $0xc01223fc,(%esp)
c0102914:	e8 da da ff ff       	call   c01003f3 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c0102919:	8b 45 08             	mov    0x8(%ebp),%eax
c010291c:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102920:	0f b7 c0             	movzwl %ax,%eax
c0102923:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102927:	c7 04 24 0b 24 12 c0 	movl   $0xc012240b,(%esp)
c010292e:	e8 c0 da ff ff       	call   c01003f3 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c0102933:	8b 45 08             	mov    0x8(%ebp),%eax
c0102936:	8b 40 40             	mov    0x40(%eax),%eax
c0102939:	89 44 24 04          	mov    %eax,0x4(%esp)
c010293d:	c7 04 24 1e 24 12 c0 	movl   $0xc012241e,(%esp)
c0102944:	e8 aa da ff ff       	call   c01003f3 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102949:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0102950:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0102957:	eb 3e                	jmp    c0102997 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0102959:	8b 45 08             	mov    0x8(%ebp),%eax
c010295c:	8b 50 40             	mov    0x40(%eax),%edx
c010295f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102962:	21 d0                	and    %edx,%eax
c0102964:	85 c0                	test   %eax,%eax
c0102966:	74 28                	je     c0102990 <print_trapframe+0x157>
c0102968:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010296b:	8b 04 85 80 a5 16 c0 	mov    -0x3fe95a80(,%eax,4),%eax
c0102972:	85 c0                	test   %eax,%eax
c0102974:	74 1a                	je     c0102990 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c0102976:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102979:	8b 04 85 80 a5 16 c0 	mov    -0x3fe95a80(,%eax,4),%eax
c0102980:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102984:	c7 04 24 2d 24 12 c0 	movl   $0xc012242d,(%esp)
c010298b:	e8 63 da ff ff       	call   c01003f3 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102990:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102994:	d1 65 f0             	shll   -0x10(%ebp)
c0102997:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010299a:	83 f8 17             	cmp    $0x17,%eax
c010299d:	76 ba                	jbe    c0102959 <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c010299f:	8b 45 08             	mov    0x8(%ebp),%eax
c01029a2:	8b 40 40             	mov    0x40(%eax),%eax
c01029a5:	25 00 30 00 00       	and    $0x3000,%eax
c01029aa:	c1 e8 0c             	shr    $0xc,%eax
c01029ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01029b1:	c7 04 24 31 24 12 c0 	movl   $0xc0122431,(%esp)
c01029b8:	e8 36 da ff ff       	call   c01003f3 <cprintf>

    if (!trap_in_kernel(tf)) {
c01029bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01029c0:	89 04 24             	mov    %eax,(%esp)
c01029c3:	e8 5b fe ff ff       	call   c0102823 <trap_in_kernel>
c01029c8:	85 c0                	test   %eax,%eax
c01029ca:	75 30                	jne    c01029fc <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c01029cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01029cf:	8b 40 44             	mov    0x44(%eax),%eax
c01029d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01029d6:	c7 04 24 3a 24 12 c0 	movl   $0xc012243a,(%esp)
c01029dd:	e8 11 da ff ff       	call   c01003f3 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c01029e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01029e5:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c01029e9:	0f b7 c0             	movzwl %ax,%eax
c01029ec:	89 44 24 04          	mov    %eax,0x4(%esp)
c01029f0:	c7 04 24 49 24 12 c0 	movl   $0xc0122449,(%esp)
c01029f7:	e8 f7 d9 ff ff       	call   c01003f3 <cprintf>
    }
}
c01029fc:	c9                   	leave  
c01029fd:	c3                   	ret    

c01029fe <print_regs>:

void
print_regs(struct pushregs *regs) {
c01029fe:	55                   	push   %ebp
c01029ff:	89 e5                	mov    %esp,%ebp
c0102a01:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102a04:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a07:	8b 00                	mov    (%eax),%eax
c0102a09:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102a0d:	c7 04 24 5c 24 12 c0 	movl   $0xc012245c,(%esp)
c0102a14:	e8 da d9 ff ff       	call   c01003f3 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c0102a19:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a1c:	8b 40 04             	mov    0x4(%eax),%eax
c0102a1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102a23:	c7 04 24 6b 24 12 c0 	movl   $0xc012246b,(%esp)
c0102a2a:	e8 c4 d9 ff ff       	call   c01003f3 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c0102a2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a32:	8b 40 08             	mov    0x8(%eax),%eax
c0102a35:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102a39:	c7 04 24 7a 24 12 c0 	movl   $0xc012247a,(%esp)
c0102a40:	e8 ae d9 ff ff       	call   c01003f3 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c0102a45:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a48:	8b 40 0c             	mov    0xc(%eax),%eax
c0102a4b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102a4f:	c7 04 24 89 24 12 c0 	movl   $0xc0122489,(%esp)
c0102a56:	e8 98 d9 ff ff       	call   c01003f3 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0102a5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a5e:	8b 40 10             	mov    0x10(%eax),%eax
c0102a61:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102a65:	c7 04 24 98 24 12 c0 	movl   $0xc0122498,(%esp)
c0102a6c:	e8 82 d9 ff ff       	call   c01003f3 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102a71:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a74:	8b 40 14             	mov    0x14(%eax),%eax
c0102a77:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102a7b:	c7 04 24 a7 24 12 c0 	movl   $0xc01224a7,(%esp)
c0102a82:	e8 6c d9 ff ff       	call   c01003f3 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0102a87:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a8a:	8b 40 18             	mov    0x18(%eax),%eax
c0102a8d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102a91:	c7 04 24 b6 24 12 c0 	movl   $0xc01224b6,(%esp)
c0102a98:	e8 56 d9 ff ff       	call   c01003f3 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0102a9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102aa0:	8b 40 1c             	mov    0x1c(%eax),%eax
c0102aa3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102aa7:	c7 04 24 c5 24 12 c0 	movl   $0xc01224c5,(%esp)
c0102aae:	e8 40 d9 ff ff       	call   c01003f3 <cprintf>
}
c0102ab3:	c9                   	leave  
c0102ab4:	c3                   	ret    

c0102ab5 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0102ab5:	55                   	push   %ebp
c0102ab6:	89 e5                	mov    %esp,%ebp
c0102ab8:	53                   	push   %ebx
c0102ab9:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102abc:	8b 45 08             	mov    0x8(%ebp),%eax
c0102abf:	8b 40 34             	mov    0x34(%eax),%eax
c0102ac2:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102ac5:	85 c0                	test   %eax,%eax
c0102ac7:	74 07                	je     c0102ad0 <print_pgfault+0x1b>
c0102ac9:	b9 d4 24 12 c0       	mov    $0xc01224d4,%ecx
c0102ace:	eb 05                	jmp    c0102ad5 <print_pgfault+0x20>
c0102ad0:	b9 e5 24 12 c0       	mov    $0xc01224e5,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c0102ad5:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ad8:	8b 40 34             	mov    0x34(%eax),%eax
c0102adb:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102ade:	85 c0                	test   %eax,%eax
c0102ae0:	74 07                	je     c0102ae9 <print_pgfault+0x34>
c0102ae2:	ba 57 00 00 00       	mov    $0x57,%edx
c0102ae7:	eb 05                	jmp    c0102aee <print_pgfault+0x39>
c0102ae9:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102aee:	8b 45 08             	mov    0x8(%ebp),%eax
c0102af1:	8b 40 34             	mov    0x34(%eax),%eax
c0102af4:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102af7:	85 c0                	test   %eax,%eax
c0102af9:	74 07                	je     c0102b02 <print_pgfault+0x4d>
c0102afb:	b8 55 00 00 00       	mov    $0x55,%eax
c0102b00:	eb 05                	jmp    c0102b07 <print_pgfault+0x52>
c0102b02:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102b07:	0f 20 d3             	mov    %cr2,%ebx
c0102b0a:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c0102b0d:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c0102b10:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0102b14:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0102b18:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102b1c:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0102b20:	c7 04 24 f4 24 12 c0 	movl   $0xc01224f4,(%esp)
c0102b27:	e8 c7 d8 ff ff       	call   c01003f3 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c0102b2c:	83 c4 34             	add    $0x34,%esp
c0102b2f:	5b                   	pop    %ebx
c0102b30:	5d                   	pop    %ebp
c0102b31:	c3                   	ret    

c0102b32 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c0102b32:	55                   	push   %ebp
c0102b33:	89 e5                	mov    %esp,%ebp
c0102b35:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c0102b38:	a1 50 12 17 c0       	mov    0xc0171250,%eax
c0102b3d:	85 c0                	test   %eax,%eax
c0102b3f:	74 0b                	je     c0102b4c <pgfault_handler+0x1a>
            print_pgfault(tf);
c0102b41:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b44:	89 04 24             	mov    %eax,(%esp)
c0102b47:	e8 69 ff ff ff       	call   c0102ab5 <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0102b4c:	a1 50 12 17 c0       	mov    0xc0171250,%eax
c0102b51:	85 c0                	test   %eax,%eax
c0102b53:	74 3d                	je     c0102b92 <pgfault_handler+0x60>
        assert(current == idleproc);
c0102b55:	8b 15 68 e0 16 c0    	mov    0xc016e068,%edx
c0102b5b:	a1 60 e0 16 c0       	mov    0xc016e060,%eax
c0102b60:	39 c2                	cmp    %eax,%edx
c0102b62:	74 24                	je     c0102b88 <pgfault_handler+0x56>
c0102b64:	c7 44 24 0c 17 25 12 	movl   $0xc0122517,0xc(%esp)
c0102b6b:	c0 
c0102b6c:	c7 44 24 08 2b 25 12 	movl   $0xc012252b,0x8(%esp)
c0102b73:	c0 
c0102b74:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c0102b7b:	00 
c0102b7c:	c7 04 24 40 25 12 c0 	movl   $0xc0122540,(%esp)
c0102b83:	e8 8e e6 ff ff       	call   c0101216 <__panic>
        mm = check_mm_struct;
c0102b88:	a1 50 12 17 c0       	mov    0xc0171250,%eax
c0102b8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102b90:	eb 46                	jmp    c0102bd8 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c0102b92:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0102b97:	85 c0                	test   %eax,%eax
c0102b99:	75 32                	jne    c0102bcd <pgfault_handler+0x9b>
            print_trapframe(tf);
c0102b9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b9e:	89 04 24             	mov    %eax,(%esp)
c0102ba1:	e8 93 fc ff ff       	call   c0102839 <print_trapframe>
            print_pgfault(tf);
c0102ba6:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ba9:	89 04 24             	mov    %eax,(%esp)
c0102bac:	e8 04 ff ff ff       	call   c0102ab5 <print_pgfault>
            panic("unhandled page fault.\n");
c0102bb1:	c7 44 24 08 51 25 12 	movl   $0xc0122551,0x8(%esp)
c0102bb8:	c0 
c0102bb9:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0102bc0:	00 
c0102bc1:	c7 04 24 40 25 12 c0 	movl   $0xc0122540,(%esp)
c0102bc8:	e8 49 e6 ff ff       	call   c0101216 <__panic>
        }
        mm = current->mm;
c0102bcd:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0102bd2:	8b 40 18             	mov    0x18(%eax),%eax
c0102bd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102bd8:	0f 20 d0             	mov    %cr2,%eax
c0102bdb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c0102bde:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0102be1:	89 c2                	mov    %eax,%edx
c0102be3:	8b 45 08             	mov    0x8(%ebp),%eax
c0102be6:	8b 40 34             	mov    0x34(%eax),%eax
c0102be9:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102bed:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102bf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102bf4:	89 04 24             	mov    %eax,(%esp)
c0102bf7:	e8 c4 f0 00 00       	call   c0111cc0 <do_pgfault>
}
c0102bfc:	c9                   	leave  
c0102bfd:	c3                   	ret    

c0102bfe <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0102bfe:	55                   	push   %ebp
c0102bff:	89 e5                	mov    %esp,%ebp
c0102c01:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c0102c04:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c0102c0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c0e:	8b 40 30             	mov    0x30(%eax),%eax
c0102c11:	83 f8 2f             	cmp    $0x2f,%eax
c0102c14:	77 38                	ja     c0102c4e <trap_dispatch+0x50>
c0102c16:	83 f8 2e             	cmp    $0x2e,%eax
c0102c19:	0f 83 cb 01 00 00    	jae    c0102dea <trap_dispatch+0x1ec>
c0102c1f:	83 f8 20             	cmp    $0x20,%eax
c0102c22:	0f 84 07 01 00 00    	je     c0102d2f <trap_dispatch+0x131>
c0102c28:	83 f8 20             	cmp    $0x20,%eax
c0102c2b:	77 0a                	ja     c0102c37 <trap_dispatch+0x39>
c0102c2d:	83 f8 0e             	cmp    $0xe,%eax
c0102c30:	74 3e                	je     c0102c70 <trap_dispatch+0x72>
c0102c32:	e9 6b 01 00 00       	jmp    c0102da2 <trap_dispatch+0x1a4>
c0102c37:	83 f8 21             	cmp    $0x21,%eax
c0102c3a:	0f 84 30 01 00 00    	je     c0102d70 <trap_dispatch+0x172>
c0102c40:	83 f8 24             	cmp    $0x24,%eax
c0102c43:	0f 84 27 01 00 00    	je     c0102d70 <trap_dispatch+0x172>
c0102c49:	e9 54 01 00 00       	jmp    c0102da2 <trap_dispatch+0x1a4>
c0102c4e:	83 f8 78             	cmp    $0x78,%eax
c0102c51:	0f 82 4b 01 00 00    	jb     c0102da2 <trap_dispatch+0x1a4>
c0102c57:	83 f8 79             	cmp    $0x79,%eax
c0102c5a:	0f 86 26 01 00 00    	jbe    c0102d86 <trap_dispatch+0x188>
c0102c60:	3d 80 00 00 00       	cmp    $0x80,%eax
c0102c65:	0f 84 ba 00 00 00    	je     c0102d25 <trap_dispatch+0x127>
c0102c6b:	e9 32 01 00 00       	jmp    c0102da2 <trap_dispatch+0x1a4>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0102c70:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c73:	89 04 24             	mov    %eax,(%esp)
c0102c76:	e8 b7 fe ff ff       	call   c0102b32 <pgfault_handler>
c0102c7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102c7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102c82:	0f 84 98 00 00 00    	je     c0102d20 <trap_dispatch+0x122>
            print_trapframe(tf);
c0102c88:	8b 45 08             	mov    0x8(%ebp),%eax
c0102c8b:	89 04 24             	mov    %eax,(%esp)
c0102c8e:	e8 a6 fb ff ff       	call   c0102839 <print_trapframe>
            if (current == NULL) {
c0102c93:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0102c98:	85 c0                	test   %eax,%eax
c0102c9a:	75 23                	jne    c0102cbf <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c0102c9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102c9f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102ca3:	c7 44 24 08 68 25 12 	movl   $0xc0122568,0x8(%esp)
c0102caa:	c0 
c0102cab:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c0102cb2:	00 
c0102cb3:	c7 04 24 40 25 12 c0 	movl   $0xc0122540,(%esp)
c0102cba:	e8 57 e5 ff ff       	call   c0101216 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102cbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0102cc2:	89 04 24             	mov    %eax,(%esp)
c0102cc5:	e8 59 fb ff ff       	call   c0102823 <trap_in_kernel>
c0102cca:	85 c0                	test   %eax,%eax
c0102ccc:	74 23                	je     c0102cf1 <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0102cce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102cd1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102cd5:	c7 44 24 08 88 25 12 	movl   $0xc0122588,0x8(%esp)
c0102cdc:	c0 
c0102cdd:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0102ce4:	00 
c0102ce5:	c7 04 24 40 25 12 c0 	movl   $0xc0122540,(%esp)
c0102cec:	e8 25 e5 ff ff       	call   c0101216 <__panic>
                }
                cprintf("killed by kernel.\n");
c0102cf1:	c7 04 24 b6 25 12 c0 	movl   $0xc01225b6,(%esp)
c0102cf8:	e8 f6 d6 ff ff       	call   c01003f3 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c0102cfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102d00:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102d04:	c7 44 24 08 cc 25 12 	movl   $0xc01225cc,0x8(%esp)
c0102d0b:	c0 
c0102d0c:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c0102d13:	00 
c0102d14:	c7 04 24 40 25 12 c0 	movl   $0xc0122540,(%esp)
c0102d1b:	e8 f6 e4 ff ff       	call   c0101216 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c0102d20:	e9 c6 00 00 00       	jmp    c0102deb <trap_dispatch+0x1ed>
    case T_SYSCALL:
        syscall();
c0102d25:	e8 3b 66 01 00       	call   c0119365 <syscall>
        break;
c0102d2a:	e9 bc 00 00 00       	jmp    c0102deb <trap_dispatch+0x1ed>
	     *----------------------
	     * you should update your lab5 code (just add ONE or TWO lines of code):
         *    Every tick, you should update the system time, iterate the timers, and trigger the timers which are end to call scheduler.
         *    You can use one funcitons to finish all these things.
         */
        ticks ++;
c0102d2f:	a1 50 11 17 c0       	mov    0xc0171150,%eax
c0102d34:	83 c0 01             	add    $0x1,%eax
c0102d37:	a3 50 11 17 c0       	mov    %eax,0xc0171150
        assert(current != NULL);
c0102d3c:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0102d41:	85 c0                	test   %eax,%eax
c0102d43:	75 24                	jne    c0102d69 <trap_dispatch+0x16b>
c0102d45:	c7 44 24 0c f5 25 12 	movl   $0xc01225f5,0xc(%esp)
c0102d4c:	c0 
c0102d4d:	c7 44 24 08 2b 25 12 	movl   $0xc012252b,0x8(%esp)
c0102d54:	c0 
c0102d55:	c7 44 24 04 f3 00 00 	movl   $0xf3,0x4(%esp)
c0102d5c:	00 
c0102d5d:	c7 04 24 40 25 12 c0 	movl   $0xc0122540,(%esp)
c0102d64:	e8 ad e4 ff ff       	call   c0101216 <__panic>
        run_timer_list();
c0102d69:	e8 c5 58 01 00       	call   c0118633 <run_timer_list>
        break;
c0102d6e:	eb 7b                	jmp    c0102deb <trap_dispatch+0x1ed>
    case IRQ_OFFSET + IRQ_COM1:
        //c = cons_getc();
        //cprintf("serial [%03d] %c\n", c, c);
        //break;
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0102d70:	e8 36 ee ff ff       	call   c0101bab <cons_getc>
c0102d75:	88 45 f3             	mov    %al,-0xd(%ebp)
        //cprintf("kbd [%03d] %c\n", c, c);
        {
          extern void dev_stdin_write(char c);
          dev_stdin_write(c);
c0102d78:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102d7c:	89 04 24             	mov    %eax,(%esp)
c0102d7f:	e8 46 8d 01 00       	call   c011baca <dev_stdin_write>
        }
        break;
c0102d84:	eb 65                	jmp    c0102deb <trap_dispatch+0x1ed>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102d86:	c7 44 24 08 05 26 12 	movl   $0xc0122605,0x8(%esp)
c0102d8d:	c0 
c0102d8e:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c0102d95:	00 
c0102d96:	c7 04 24 40 25 12 c0 	movl   $0xc0122540,(%esp)
c0102d9d:	e8 74 e4 ff ff       	call   c0101216 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102da2:	8b 45 08             	mov    0x8(%ebp),%eax
c0102da5:	89 04 24             	mov    %eax,(%esp)
c0102da8:	e8 8c fa ff ff       	call   c0102839 <print_trapframe>
        if (current != NULL) {
c0102dad:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0102db2:	85 c0                	test   %eax,%eax
c0102db4:	74 18                	je     c0102dce <trap_dispatch+0x1d0>
            cprintf("unhandled trap.\n");
c0102db6:	c7 04 24 15 26 12 c0 	movl   $0xc0122615,(%esp)
c0102dbd:	e8 31 d6 ff ff       	call   c01003f3 <cprintf>
            do_exit(-E_KILLED);
c0102dc2:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102dc9:	e8 43 2f 01 00       	call   c0115d11 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102dce:	c7 44 24 08 26 26 12 	movl   $0xc0122626,0x8(%esp)
c0102dd5:	c0 
c0102dd6:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0102ddd:	00 
c0102dde:	c7 04 24 40 25 12 c0 	movl   $0xc0122540,(%esp)
c0102de5:	e8 2c e4 ff ff       	call   c0101216 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102dea:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102deb:	c9                   	leave  
c0102dec:	c3                   	ret    

c0102ded <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102ded:	55                   	push   %ebp
c0102dee:	89 e5                	mov    %esp,%ebp
c0102df0:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102df3:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0102df8:	85 c0                	test   %eax,%eax
c0102dfa:	75 0d                	jne    c0102e09 <trap+0x1c>
        trap_dispatch(tf);
c0102dfc:	8b 45 08             	mov    0x8(%ebp),%eax
c0102dff:	89 04 24             	mov    %eax,(%esp)
c0102e02:	e8 f7 fd ff ff       	call   c0102bfe <trap_dispatch>
c0102e07:	eb 6c                	jmp    c0102e75 <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102e09:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0102e0e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102e11:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102e14:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0102e19:	8b 55 08             	mov    0x8(%ebp),%edx
c0102e1c:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102e1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102e22:	89 04 24             	mov    %eax,(%esp)
c0102e25:	e8 f9 f9 ff ff       	call   c0102823 <trap_in_kernel>
c0102e2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102e2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102e30:	89 04 24             	mov    %eax,(%esp)
c0102e33:	e8 c6 fd ff ff       	call   c0102bfe <trap_dispatch>
    
        current->tf = otf;
c0102e38:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0102e3d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102e40:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102e43:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102e47:	75 2c                	jne    c0102e75 <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102e49:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0102e4e:	8b 40 44             	mov    0x44(%eax),%eax
c0102e51:	83 e0 01             	and    $0x1,%eax
c0102e54:	85 c0                	test   %eax,%eax
c0102e56:	74 0c                	je     c0102e64 <trap+0x77>
                do_exit(-E_KILLED);
c0102e58:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102e5f:	e8 ad 2e 01 00       	call   c0115d11 <do_exit>
            }
            if (current->need_resched) {
c0102e64:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0102e69:	8b 40 10             	mov    0x10(%eax),%eax
c0102e6c:	85 c0                	test   %eax,%eax
c0102e6e:	74 05                	je     c0102e75 <trap+0x88>
                schedule();
c0102e70:	e8 31 55 01 00       	call   c01183a6 <schedule>
            }
        }
    }
}
c0102e75:	c9                   	leave  
c0102e76:	c3                   	ret    

c0102e77 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102e77:	1e                   	push   %ds
    pushl %es
c0102e78:	06                   	push   %es
    pushl %fs
c0102e79:	0f a0                	push   %fs
    pushl %gs
c0102e7b:	0f a8                	push   %gs
    pushal
c0102e7d:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102e7e:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102e83:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102e85:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102e87:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102e88:	e8 60 ff ff ff       	call   c0102ded <trap>

    # pop the pushed stack pointer
    popl %esp
c0102e8d:	5c                   	pop    %esp

c0102e8e <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102e8e:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102e8f:	0f a9                	pop    %gs
    popl %fs
c0102e91:	0f a1                	pop    %fs
    popl %es
c0102e93:	07                   	pop    %es
    popl %ds
c0102e94:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102e95:	83 c4 08             	add    $0x8,%esp
    iret
c0102e98:	cf                   	iret   

c0102e99 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102e99:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102e9d:	e9 ec ff ff ff       	jmp    c0102e8e <__trapret>

c0102ea2 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102ea2:	6a 00                	push   $0x0
  pushl $0
c0102ea4:	6a 00                	push   $0x0
  jmp __alltraps
c0102ea6:	e9 cc ff ff ff       	jmp    c0102e77 <__alltraps>

c0102eab <vector1>:
.globl vector1
vector1:
  pushl $0
c0102eab:	6a 00                	push   $0x0
  pushl $1
c0102ead:	6a 01                	push   $0x1
  jmp __alltraps
c0102eaf:	e9 c3 ff ff ff       	jmp    c0102e77 <__alltraps>

c0102eb4 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102eb4:	6a 00                	push   $0x0
  pushl $2
c0102eb6:	6a 02                	push   $0x2
  jmp __alltraps
c0102eb8:	e9 ba ff ff ff       	jmp    c0102e77 <__alltraps>

c0102ebd <vector3>:
.globl vector3
vector3:
  pushl $0
c0102ebd:	6a 00                	push   $0x0
  pushl $3
c0102ebf:	6a 03                	push   $0x3
  jmp __alltraps
c0102ec1:	e9 b1 ff ff ff       	jmp    c0102e77 <__alltraps>

c0102ec6 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102ec6:	6a 00                	push   $0x0
  pushl $4
c0102ec8:	6a 04                	push   $0x4
  jmp __alltraps
c0102eca:	e9 a8 ff ff ff       	jmp    c0102e77 <__alltraps>

c0102ecf <vector5>:
.globl vector5
vector5:
  pushl $0
c0102ecf:	6a 00                	push   $0x0
  pushl $5
c0102ed1:	6a 05                	push   $0x5
  jmp __alltraps
c0102ed3:	e9 9f ff ff ff       	jmp    c0102e77 <__alltraps>

c0102ed8 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102ed8:	6a 00                	push   $0x0
  pushl $6
c0102eda:	6a 06                	push   $0x6
  jmp __alltraps
c0102edc:	e9 96 ff ff ff       	jmp    c0102e77 <__alltraps>

c0102ee1 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102ee1:	6a 00                	push   $0x0
  pushl $7
c0102ee3:	6a 07                	push   $0x7
  jmp __alltraps
c0102ee5:	e9 8d ff ff ff       	jmp    c0102e77 <__alltraps>

c0102eea <vector8>:
.globl vector8
vector8:
  pushl $8
c0102eea:	6a 08                	push   $0x8
  jmp __alltraps
c0102eec:	e9 86 ff ff ff       	jmp    c0102e77 <__alltraps>

c0102ef1 <vector9>:
.globl vector9
vector9:
  pushl $9
c0102ef1:	6a 09                	push   $0x9
  jmp __alltraps
c0102ef3:	e9 7f ff ff ff       	jmp    c0102e77 <__alltraps>

c0102ef8 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102ef8:	6a 0a                	push   $0xa
  jmp __alltraps
c0102efa:	e9 78 ff ff ff       	jmp    c0102e77 <__alltraps>

c0102eff <vector11>:
.globl vector11
vector11:
  pushl $11
c0102eff:	6a 0b                	push   $0xb
  jmp __alltraps
c0102f01:	e9 71 ff ff ff       	jmp    c0102e77 <__alltraps>

c0102f06 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102f06:	6a 0c                	push   $0xc
  jmp __alltraps
c0102f08:	e9 6a ff ff ff       	jmp    c0102e77 <__alltraps>

c0102f0d <vector13>:
.globl vector13
vector13:
  pushl $13
c0102f0d:	6a 0d                	push   $0xd
  jmp __alltraps
c0102f0f:	e9 63 ff ff ff       	jmp    c0102e77 <__alltraps>

c0102f14 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102f14:	6a 0e                	push   $0xe
  jmp __alltraps
c0102f16:	e9 5c ff ff ff       	jmp    c0102e77 <__alltraps>

c0102f1b <vector15>:
.globl vector15
vector15:
  pushl $0
c0102f1b:	6a 00                	push   $0x0
  pushl $15
c0102f1d:	6a 0f                	push   $0xf
  jmp __alltraps
c0102f1f:	e9 53 ff ff ff       	jmp    c0102e77 <__alltraps>

c0102f24 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102f24:	6a 00                	push   $0x0
  pushl $16
c0102f26:	6a 10                	push   $0x10
  jmp __alltraps
c0102f28:	e9 4a ff ff ff       	jmp    c0102e77 <__alltraps>

c0102f2d <vector17>:
.globl vector17
vector17:
  pushl $17
c0102f2d:	6a 11                	push   $0x11
  jmp __alltraps
c0102f2f:	e9 43 ff ff ff       	jmp    c0102e77 <__alltraps>

c0102f34 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102f34:	6a 00                	push   $0x0
  pushl $18
c0102f36:	6a 12                	push   $0x12
  jmp __alltraps
c0102f38:	e9 3a ff ff ff       	jmp    c0102e77 <__alltraps>

c0102f3d <vector19>:
.globl vector19
vector19:
  pushl $0
c0102f3d:	6a 00                	push   $0x0
  pushl $19
c0102f3f:	6a 13                	push   $0x13
  jmp __alltraps
c0102f41:	e9 31 ff ff ff       	jmp    c0102e77 <__alltraps>

c0102f46 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102f46:	6a 00                	push   $0x0
  pushl $20
c0102f48:	6a 14                	push   $0x14
  jmp __alltraps
c0102f4a:	e9 28 ff ff ff       	jmp    c0102e77 <__alltraps>

c0102f4f <vector21>:
.globl vector21
vector21:
  pushl $0
c0102f4f:	6a 00                	push   $0x0
  pushl $21
c0102f51:	6a 15                	push   $0x15
  jmp __alltraps
c0102f53:	e9 1f ff ff ff       	jmp    c0102e77 <__alltraps>

c0102f58 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102f58:	6a 00                	push   $0x0
  pushl $22
c0102f5a:	6a 16                	push   $0x16
  jmp __alltraps
c0102f5c:	e9 16 ff ff ff       	jmp    c0102e77 <__alltraps>

c0102f61 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102f61:	6a 00                	push   $0x0
  pushl $23
c0102f63:	6a 17                	push   $0x17
  jmp __alltraps
c0102f65:	e9 0d ff ff ff       	jmp    c0102e77 <__alltraps>

c0102f6a <vector24>:
.globl vector24
vector24:
  pushl $0
c0102f6a:	6a 00                	push   $0x0
  pushl $24
c0102f6c:	6a 18                	push   $0x18
  jmp __alltraps
c0102f6e:	e9 04 ff ff ff       	jmp    c0102e77 <__alltraps>

c0102f73 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102f73:	6a 00                	push   $0x0
  pushl $25
c0102f75:	6a 19                	push   $0x19
  jmp __alltraps
c0102f77:	e9 fb fe ff ff       	jmp    c0102e77 <__alltraps>

c0102f7c <vector26>:
.globl vector26
vector26:
  pushl $0
c0102f7c:	6a 00                	push   $0x0
  pushl $26
c0102f7e:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102f80:	e9 f2 fe ff ff       	jmp    c0102e77 <__alltraps>

c0102f85 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102f85:	6a 00                	push   $0x0
  pushl $27
c0102f87:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102f89:	e9 e9 fe ff ff       	jmp    c0102e77 <__alltraps>

c0102f8e <vector28>:
.globl vector28
vector28:
  pushl $0
c0102f8e:	6a 00                	push   $0x0
  pushl $28
c0102f90:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102f92:	e9 e0 fe ff ff       	jmp    c0102e77 <__alltraps>

c0102f97 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102f97:	6a 00                	push   $0x0
  pushl $29
c0102f99:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102f9b:	e9 d7 fe ff ff       	jmp    c0102e77 <__alltraps>

c0102fa0 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102fa0:	6a 00                	push   $0x0
  pushl $30
c0102fa2:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102fa4:	e9 ce fe ff ff       	jmp    c0102e77 <__alltraps>

c0102fa9 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102fa9:	6a 00                	push   $0x0
  pushl $31
c0102fab:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102fad:	e9 c5 fe ff ff       	jmp    c0102e77 <__alltraps>

c0102fb2 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102fb2:	6a 00                	push   $0x0
  pushl $32
c0102fb4:	6a 20                	push   $0x20
  jmp __alltraps
c0102fb6:	e9 bc fe ff ff       	jmp    c0102e77 <__alltraps>

c0102fbb <vector33>:
.globl vector33
vector33:
  pushl $0
c0102fbb:	6a 00                	push   $0x0
  pushl $33
c0102fbd:	6a 21                	push   $0x21
  jmp __alltraps
c0102fbf:	e9 b3 fe ff ff       	jmp    c0102e77 <__alltraps>

c0102fc4 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102fc4:	6a 00                	push   $0x0
  pushl $34
c0102fc6:	6a 22                	push   $0x22
  jmp __alltraps
c0102fc8:	e9 aa fe ff ff       	jmp    c0102e77 <__alltraps>

c0102fcd <vector35>:
.globl vector35
vector35:
  pushl $0
c0102fcd:	6a 00                	push   $0x0
  pushl $35
c0102fcf:	6a 23                	push   $0x23
  jmp __alltraps
c0102fd1:	e9 a1 fe ff ff       	jmp    c0102e77 <__alltraps>

c0102fd6 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102fd6:	6a 00                	push   $0x0
  pushl $36
c0102fd8:	6a 24                	push   $0x24
  jmp __alltraps
c0102fda:	e9 98 fe ff ff       	jmp    c0102e77 <__alltraps>

c0102fdf <vector37>:
.globl vector37
vector37:
  pushl $0
c0102fdf:	6a 00                	push   $0x0
  pushl $37
c0102fe1:	6a 25                	push   $0x25
  jmp __alltraps
c0102fe3:	e9 8f fe ff ff       	jmp    c0102e77 <__alltraps>

c0102fe8 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102fe8:	6a 00                	push   $0x0
  pushl $38
c0102fea:	6a 26                	push   $0x26
  jmp __alltraps
c0102fec:	e9 86 fe ff ff       	jmp    c0102e77 <__alltraps>

c0102ff1 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102ff1:	6a 00                	push   $0x0
  pushl $39
c0102ff3:	6a 27                	push   $0x27
  jmp __alltraps
c0102ff5:	e9 7d fe ff ff       	jmp    c0102e77 <__alltraps>

c0102ffa <vector40>:
.globl vector40
vector40:
  pushl $0
c0102ffa:	6a 00                	push   $0x0
  pushl $40
c0102ffc:	6a 28                	push   $0x28
  jmp __alltraps
c0102ffe:	e9 74 fe ff ff       	jmp    c0102e77 <__alltraps>

c0103003 <vector41>:
.globl vector41
vector41:
  pushl $0
c0103003:	6a 00                	push   $0x0
  pushl $41
c0103005:	6a 29                	push   $0x29
  jmp __alltraps
c0103007:	e9 6b fe ff ff       	jmp    c0102e77 <__alltraps>

c010300c <vector42>:
.globl vector42
vector42:
  pushl $0
c010300c:	6a 00                	push   $0x0
  pushl $42
c010300e:	6a 2a                	push   $0x2a
  jmp __alltraps
c0103010:	e9 62 fe ff ff       	jmp    c0102e77 <__alltraps>

c0103015 <vector43>:
.globl vector43
vector43:
  pushl $0
c0103015:	6a 00                	push   $0x0
  pushl $43
c0103017:	6a 2b                	push   $0x2b
  jmp __alltraps
c0103019:	e9 59 fe ff ff       	jmp    c0102e77 <__alltraps>

c010301e <vector44>:
.globl vector44
vector44:
  pushl $0
c010301e:	6a 00                	push   $0x0
  pushl $44
c0103020:	6a 2c                	push   $0x2c
  jmp __alltraps
c0103022:	e9 50 fe ff ff       	jmp    c0102e77 <__alltraps>

c0103027 <vector45>:
.globl vector45
vector45:
  pushl $0
c0103027:	6a 00                	push   $0x0
  pushl $45
c0103029:	6a 2d                	push   $0x2d
  jmp __alltraps
c010302b:	e9 47 fe ff ff       	jmp    c0102e77 <__alltraps>

c0103030 <vector46>:
.globl vector46
vector46:
  pushl $0
c0103030:	6a 00                	push   $0x0
  pushl $46
c0103032:	6a 2e                	push   $0x2e
  jmp __alltraps
c0103034:	e9 3e fe ff ff       	jmp    c0102e77 <__alltraps>

c0103039 <vector47>:
.globl vector47
vector47:
  pushl $0
c0103039:	6a 00                	push   $0x0
  pushl $47
c010303b:	6a 2f                	push   $0x2f
  jmp __alltraps
c010303d:	e9 35 fe ff ff       	jmp    c0102e77 <__alltraps>

c0103042 <vector48>:
.globl vector48
vector48:
  pushl $0
c0103042:	6a 00                	push   $0x0
  pushl $48
c0103044:	6a 30                	push   $0x30
  jmp __alltraps
c0103046:	e9 2c fe ff ff       	jmp    c0102e77 <__alltraps>

c010304b <vector49>:
.globl vector49
vector49:
  pushl $0
c010304b:	6a 00                	push   $0x0
  pushl $49
c010304d:	6a 31                	push   $0x31
  jmp __alltraps
c010304f:	e9 23 fe ff ff       	jmp    c0102e77 <__alltraps>

c0103054 <vector50>:
.globl vector50
vector50:
  pushl $0
c0103054:	6a 00                	push   $0x0
  pushl $50
c0103056:	6a 32                	push   $0x32
  jmp __alltraps
c0103058:	e9 1a fe ff ff       	jmp    c0102e77 <__alltraps>

c010305d <vector51>:
.globl vector51
vector51:
  pushl $0
c010305d:	6a 00                	push   $0x0
  pushl $51
c010305f:	6a 33                	push   $0x33
  jmp __alltraps
c0103061:	e9 11 fe ff ff       	jmp    c0102e77 <__alltraps>

c0103066 <vector52>:
.globl vector52
vector52:
  pushl $0
c0103066:	6a 00                	push   $0x0
  pushl $52
c0103068:	6a 34                	push   $0x34
  jmp __alltraps
c010306a:	e9 08 fe ff ff       	jmp    c0102e77 <__alltraps>

c010306f <vector53>:
.globl vector53
vector53:
  pushl $0
c010306f:	6a 00                	push   $0x0
  pushl $53
c0103071:	6a 35                	push   $0x35
  jmp __alltraps
c0103073:	e9 ff fd ff ff       	jmp    c0102e77 <__alltraps>

c0103078 <vector54>:
.globl vector54
vector54:
  pushl $0
c0103078:	6a 00                	push   $0x0
  pushl $54
c010307a:	6a 36                	push   $0x36
  jmp __alltraps
c010307c:	e9 f6 fd ff ff       	jmp    c0102e77 <__alltraps>

c0103081 <vector55>:
.globl vector55
vector55:
  pushl $0
c0103081:	6a 00                	push   $0x0
  pushl $55
c0103083:	6a 37                	push   $0x37
  jmp __alltraps
c0103085:	e9 ed fd ff ff       	jmp    c0102e77 <__alltraps>

c010308a <vector56>:
.globl vector56
vector56:
  pushl $0
c010308a:	6a 00                	push   $0x0
  pushl $56
c010308c:	6a 38                	push   $0x38
  jmp __alltraps
c010308e:	e9 e4 fd ff ff       	jmp    c0102e77 <__alltraps>

c0103093 <vector57>:
.globl vector57
vector57:
  pushl $0
c0103093:	6a 00                	push   $0x0
  pushl $57
c0103095:	6a 39                	push   $0x39
  jmp __alltraps
c0103097:	e9 db fd ff ff       	jmp    c0102e77 <__alltraps>

c010309c <vector58>:
.globl vector58
vector58:
  pushl $0
c010309c:	6a 00                	push   $0x0
  pushl $58
c010309e:	6a 3a                	push   $0x3a
  jmp __alltraps
c01030a0:	e9 d2 fd ff ff       	jmp    c0102e77 <__alltraps>

c01030a5 <vector59>:
.globl vector59
vector59:
  pushl $0
c01030a5:	6a 00                	push   $0x0
  pushl $59
c01030a7:	6a 3b                	push   $0x3b
  jmp __alltraps
c01030a9:	e9 c9 fd ff ff       	jmp    c0102e77 <__alltraps>

c01030ae <vector60>:
.globl vector60
vector60:
  pushl $0
c01030ae:	6a 00                	push   $0x0
  pushl $60
c01030b0:	6a 3c                	push   $0x3c
  jmp __alltraps
c01030b2:	e9 c0 fd ff ff       	jmp    c0102e77 <__alltraps>

c01030b7 <vector61>:
.globl vector61
vector61:
  pushl $0
c01030b7:	6a 00                	push   $0x0
  pushl $61
c01030b9:	6a 3d                	push   $0x3d
  jmp __alltraps
c01030bb:	e9 b7 fd ff ff       	jmp    c0102e77 <__alltraps>

c01030c0 <vector62>:
.globl vector62
vector62:
  pushl $0
c01030c0:	6a 00                	push   $0x0
  pushl $62
c01030c2:	6a 3e                	push   $0x3e
  jmp __alltraps
c01030c4:	e9 ae fd ff ff       	jmp    c0102e77 <__alltraps>

c01030c9 <vector63>:
.globl vector63
vector63:
  pushl $0
c01030c9:	6a 00                	push   $0x0
  pushl $63
c01030cb:	6a 3f                	push   $0x3f
  jmp __alltraps
c01030cd:	e9 a5 fd ff ff       	jmp    c0102e77 <__alltraps>

c01030d2 <vector64>:
.globl vector64
vector64:
  pushl $0
c01030d2:	6a 00                	push   $0x0
  pushl $64
c01030d4:	6a 40                	push   $0x40
  jmp __alltraps
c01030d6:	e9 9c fd ff ff       	jmp    c0102e77 <__alltraps>

c01030db <vector65>:
.globl vector65
vector65:
  pushl $0
c01030db:	6a 00                	push   $0x0
  pushl $65
c01030dd:	6a 41                	push   $0x41
  jmp __alltraps
c01030df:	e9 93 fd ff ff       	jmp    c0102e77 <__alltraps>

c01030e4 <vector66>:
.globl vector66
vector66:
  pushl $0
c01030e4:	6a 00                	push   $0x0
  pushl $66
c01030e6:	6a 42                	push   $0x42
  jmp __alltraps
c01030e8:	e9 8a fd ff ff       	jmp    c0102e77 <__alltraps>

c01030ed <vector67>:
.globl vector67
vector67:
  pushl $0
c01030ed:	6a 00                	push   $0x0
  pushl $67
c01030ef:	6a 43                	push   $0x43
  jmp __alltraps
c01030f1:	e9 81 fd ff ff       	jmp    c0102e77 <__alltraps>

c01030f6 <vector68>:
.globl vector68
vector68:
  pushl $0
c01030f6:	6a 00                	push   $0x0
  pushl $68
c01030f8:	6a 44                	push   $0x44
  jmp __alltraps
c01030fa:	e9 78 fd ff ff       	jmp    c0102e77 <__alltraps>

c01030ff <vector69>:
.globl vector69
vector69:
  pushl $0
c01030ff:	6a 00                	push   $0x0
  pushl $69
c0103101:	6a 45                	push   $0x45
  jmp __alltraps
c0103103:	e9 6f fd ff ff       	jmp    c0102e77 <__alltraps>

c0103108 <vector70>:
.globl vector70
vector70:
  pushl $0
c0103108:	6a 00                	push   $0x0
  pushl $70
c010310a:	6a 46                	push   $0x46
  jmp __alltraps
c010310c:	e9 66 fd ff ff       	jmp    c0102e77 <__alltraps>

c0103111 <vector71>:
.globl vector71
vector71:
  pushl $0
c0103111:	6a 00                	push   $0x0
  pushl $71
c0103113:	6a 47                	push   $0x47
  jmp __alltraps
c0103115:	e9 5d fd ff ff       	jmp    c0102e77 <__alltraps>

c010311a <vector72>:
.globl vector72
vector72:
  pushl $0
c010311a:	6a 00                	push   $0x0
  pushl $72
c010311c:	6a 48                	push   $0x48
  jmp __alltraps
c010311e:	e9 54 fd ff ff       	jmp    c0102e77 <__alltraps>

c0103123 <vector73>:
.globl vector73
vector73:
  pushl $0
c0103123:	6a 00                	push   $0x0
  pushl $73
c0103125:	6a 49                	push   $0x49
  jmp __alltraps
c0103127:	e9 4b fd ff ff       	jmp    c0102e77 <__alltraps>

c010312c <vector74>:
.globl vector74
vector74:
  pushl $0
c010312c:	6a 00                	push   $0x0
  pushl $74
c010312e:	6a 4a                	push   $0x4a
  jmp __alltraps
c0103130:	e9 42 fd ff ff       	jmp    c0102e77 <__alltraps>

c0103135 <vector75>:
.globl vector75
vector75:
  pushl $0
c0103135:	6a 00                	push   $0x0
  pushl $75
c0103137:	6a 4b                	push   $0x4b
  jmp __alltraps
c0103139:	e9 39 fd ff ff       	jmp    c0102e77 <__alltraps>

c010313e <vector76>:
.globl vector76
vector76:
  pushl $0
c010313e:	6a 00                	push   $0x0
  pushl $76
c0103140:	6a 4c                	push   $0x4c
  jmp __alltraps
c0103142:	e9 30 fd ff ff       	jmp    c0102e77 <__alltraps>

c0103147 <vector77>:
.globl vector77
vector77:
  pushl $0
c0103147:	6a 00                	push   $0x0
  pushl $77
c0103149:	6a 4d                	push   $0x4d
  jmp __alltraps
c010314b:	e9 27 fd ff ff       	jmp    c0102e77 <__alltraps>

c0103150 <vector78>:
.globl vector78
vector78:
  pushl $0
c0103150:	6a 00                	push   $0x0
  pushl $78
c0103152:	6a 4e                	push   $0x4e
  jmp __alltraps
c0103154:	e9 1e fd ff ff       	jmp    c0102e77 <__alltraps>

c0103159 <vector79>:
.globl vector79
vector79:
  pushl $0
c0103159:	6a 00                	push   $0x0
  pushl $79
c010315b:	6a 4f                	push   $0x4f
  jmp __alltraps
c010315d:	e9 15 fd ff ff       	jmp    c0102e77 <__alltraps>

c0103162 <vector80>:
.globl vector80
vector80:
  pushl $0
c0103162:	6a 00                	push   $0x0
  pushl $80
c0103164:	6a 50                	push   $0x50
  jmp __alltraps
c0103166:	e9 0c fd ff ff       	jmp    c0102e77 <__alltraps>

c010316b <vector81>:
.globl vector81
vector81:
  pushl $0
c010316b:	6a 00                	push   $0x0
  pushl $81
c010316d:	6a 51                	push   $0x51
  jmp __alltraps
c010316f:	e9 03 fd ff ff       	jmp    c0102e77 <__alltraps>

c0103174 <vector82>:
.globl vector82
vector82:
  pushl $0
c0103174:	6a 00                	push   $0x0
  pushl $82
c0103176:	6a 52                	push   $0x52
  jmp __alltraps
c0103178:	e9 fa fc ff ff       	jmp    c0102e77 <__alltraps>

c010317d <vector83>:
.globl vector83
vector83:
  pushl $0
c010317d:	6a 00                	push   $0x0
  pushl $83
c010317f:	6a 53                	push   $0x53
  jmp __alltraps
c0103181:	e9 f1 fc ff ff       	jmp    c0102e77 <__alltraps>

c0103186 <vector84>:
.globl vector84
vector84:
  pushl $0
c0103186:	6a 00                	push   $0x0
  pushl $84
c0103188:	6a 54                	push   $0x54
  jmp __alltraps
c010318a:	e9 e8 fc ff ff       	jmp    c0102e77 <__alltraps>

c010318f <vector85>:
.globl vector85
vector85:
  pushl $0
c010318f:	6a 00                	push   $0x0
  pushl $85
c0103191:	6a 55                	push   $0x55
  jmp __alltraps
c0103193:	e9 df fc ff ff       	jmp    c0102e77 <__alltraps>

c0103198 <vector86>:
.globl vector86
vector86:
  pushl $0
c0103198:	6a 00                	push   $0x0
  pushl $86
c010319a:	6a 56                	push   $0x56
  jmp __alltraps
c010319c:	e9 d6 fc ff ff       	jmp    c0102e77 <__alltraps>

c01031a1 <vector87>:
.globl vector87
vector87:
  pushl $0
c01031a1:	6a 00                	push   $0x0
  pushl $87
c01031a3:	6a 57                	push   $0x57
  jmp __alltraps
c01031a5:	e9 cd fc ff ff       	jmp    c0102e77 <__alltraps>

c01031aa <vector88>:
.globl vector88
vector88:
  pushl $0
c01031aa:	6a 00                	push   $0x0
  pushl $88
c01031ac:	6a 58                	push   $0x58
  jmp __alltraps
c01031ae:	e9 c4 fc ff ff       	jmp    c0102e77 <__alltraps>

c01031b3 <vector89>:
.globl vector89
vector89:
  pushl $0
c01031b3:	6a 00                	push   $0x0
  pushl $89
c01031b5:	6a 59                	push   $0x59
  jmp __alltraps
c01031b7:	e9 bb fc ff ff       	jmp    c0102e77 <__alltraps>

c01031bc <vector90>:
.globl vector90
vector90:
  pushl $0
c01031bc:	6a 00                	push   $0x0
  pushl $90
c01031be:	6a 5a                	push   $0x5a
  jmp __alltraps
c01031c0:	e9 b2 fc ff ff       	jmp    c0102e77 <__alltraps>

c01031c5 <vector91>:
.globl vector91
vector91:
  pushl $0
c01031c5:	6a 00                	push   $0x0
  pushl $91
c01031c7:	6a 5b                	push   $0x5b
  jmp __alltraps
c01031c9:	e9 a9 fc ff ff       	jmp    c0102e77 <__alltraps>

c01031ce <vector92>:
.globl vector92
vector92:
  pushl $0
c01031ce:	6a 00                	push   $0x0
  pushl $92
c01031d0:	6a 5c                	push   $0x5c
  jmp __alltraps
c01031d2:	e9 a0 fc ff ff       	jmp    c0102e77 <__alltraps>

c01031d7 <vector93>:
.globl vector93
vector93:
  pushl $0
c01031d7:	6a 00                	push   $0x0
  pushl $93
c01031d9:	6a 5d                	push   $0x5d
  jmp __alltraps
c01031db:	e9 97 fc ff ff       	jmp    c0102e77 <__alltraps>

c01031e0 <vector94>:
.globl vector94
vector94:
  pushl $0
c01031e0:	6a 00                	push   $0x0
  pushl $94
c01031e2:	6a 5e                	push   $0x5e
  jmp __alltraps
c01031e4:	e9 8e fc ff ff       	jmp    c0102e77 <__alltraps>

c01031e9 <vector95>:
.globl vector95
vector95:
  pushl $0
c01031e9:	6a 00                	push   $0x0
  pushl $95
c01031eb:	6a 5f                	push   $0x5f
  jmp __alltraps
c01031ed:	e9 85 fc ff ff       	jmp    c0102e77 <__alltraps>

c01031f2 <vector96>:
.globl vector96
vector96:
  pushl $0
c01031f2:	6a 00                	push   $0x0
  pushl $96
c01031f4:	6a 60                	push   $0x60
  jmp __alltraps
c01031f6:	e9 7c fc ff ff       	jmp    c0102e77 <__alltraps>

c01031fb <vector97>:
.globl vector97
vector97:
  pushl $0
c01031fb:	6a 00                	push   $0x0
  pushl $97
c01031fd:	6a 61                	push   $0x61
  jmp __alltraps
c01031ff:	e9 73 fc ff ff       	jmp    c0102e77 <__alltraps>

c0103204 <vector98>:
.globl vector98
vector98:
  pushl $0
c0103204:	6a 00                	push   $0x0
  pushl $98
c0103206:	6a 62                	push   $0x62
  jmp __alltraps
c0103208:	e9 6a fc ff ff       	jmp    c0102e77 <__alltraps>

c010320d <vector99>:
.globl vector99
vector99:
  pushl $0
c010320d:	6a 00                	push   $0x0
  pushl $99
c010320f:	6a 63                	push   $0x63
  jmp __alltraps
c0103211:	e9 61 fc ff ff       	jmp    c0102e77 <__alltraps>

c0103216 <vector100>:
.globl vector100
vector100:
  pushl $0
c0103216:	6a 00                	push   $0x0
  pushl $100
c0103218:	6a 64                	push   $0x64
  jmp __alltraps
c010321a:	e9 58 fc ff ff       	jmp    c0102e77 <__alltraps>

c010321f <vector101>:
.globl vector101
vector101:
  pushl $0
c010321f:	6a 00                	push   $0x0
  pushl $101
c0103221:	6a 65                	push   $0x65
  jmp __alltraps
c0103223:	e9 4f fc ff ff       	jmp    c0102e77 <__alltraps>

c0103228 <vector102>:
.globl vector102
vector102:
  pushl $0
c0103228:	6a 00                	push   $0x0
  pushl $102
c010322a:	6a 66                	push   $0x66
  jmp __alltraps
c010322c:	e9 46 fc ff ff       	jmp    c0102e77 <__alltraps>

c0103231 <vector103>:
.globl vector103
vector103:
  pushl $0
c0103231:	6a 00                	push   $0x0
  pushl $103
c0103233:	6a 67                	push   $0x67
  jmp __alltraps
c0103235:	e9 3d fc ff ff       	jmp    c0102e77 <__alltraps>

c010323a <vector104>:
.globl vector104
vector104:
  pushl $0
c010323a:	6a 00                	push   $0x0
  pushl $104
c010323c:	6a 68                	push   $0x68
  jmp __alltraps
c010323e:	e9 34 fc ff ff       	jmp    c0102e77 <__alltraps>

c0103243 <vector105>:
.globl vector105
vector105:
  pushl $0
c0103243:	6a 00                	push   $0x0
  pushl $105
c0103245:	6a 69                	push   $0x69
  jmp __alltraps
c0103247:	e9 2b fc ff ff       	jmp    c0102e77 <__alltraps>

c010324c <vector106>:
.globl vector106
vector106:
  pushl $0
c010324c:	6a 00                	push   $0x0
  pushl $106
c010324e:	6a 6a                	push   $0x6a
  jmp __alltraps
c0103250:	e9 22 fc ff ff       	jmp    c0102e77 <__alltraps>

c0103255 <vector107>:
.globl vector107
vector107:
  pushl $0
c0103255:	6a 00                	push   $0x0
  pushl $107
c0103257:	6a 6b                	push   $0x6b
  jmp __alltraps
c0103259:	e9 19 fc ff ff       	jmp    c0102e77 <__alltraps>

c010325e <vector108>:
.globl vector108
vector108:
  pushl $0
c010325e:	6a 00                	push   $0x0
  pushl $108
c0103260:	6a 6c                	push   $0x6c
  jmp __alltraps
c0103262:	e9 10 fc ff ff       	jmp    c0102e77 <__alltraps>

c0103267 <vector109>:
.globl vector109
vector109:
  pushl $0
c0103267:	6a 00                	push   $0x0
  pushl $109
c0103269:	6a 6d                	push   $0x6d
  jmp __alltraps
c010326b:	e9 07 fc ff ff       	jmp    c0102e77 <__alltraps>

c0103270 <vector110>:
.globl vector110
vector110:
  pushl $0
c0103270:	6a 00                	push   $0x0
  pushl $110
c0103272:	6a 6e                	push   $0x6e
  jmp __alltraps
c0103274:	e9 fe fb ff ff       	jmp    c0102e77 <__alltraps>

c0103279 <vector111>:
.globl vector111
vector111:
  pushl $0
c0103279:	6a 00                	push   $0x0
  pushl $111
c010327b:	6a 6f                	push   $0x6f
  jmp __alltraps
c010327d:	e9 f5 fb ff ff       	jmp    c0102e77 <__alltraps>

c0103282 <vector112>:
.globl vector112
vector112:
  pushl $0
c0103282:	6a 00                	push   $0x0
  pushl $112
c0103284:	6a 70                	push   $0x70
  jmp __alltraps
c0103286:	e9 ec fb ff ff       	jmp    c0102e77 <__alltraps>

c010328b <vector113>:
.globl vector113
vector113:
  pushl $0
c010328b:	6a 00                	push   $0x0
  pushl $113
c010328d:	6a 71                	push   $0x71
  jmp __alltraps
c010328f:	e9 e3 fb ff ff       	jmp    c0102e77 <__alltraps>

c0103294 <vector114>:
.globl vector114
vector114:
  pushl $0
c0103294:	6a 00                	push   $0x0
  pushl $114
c0103296:	6a 72                	push   $0x72
  jmp __alltraps
c0103298:	e9 da fb ff ff       	jmp    c0102e77 <__alltraps>

c010329d <vector115>:
.globl vector115
vector115:
  pushl $0
c010329d:	6a 00                	push   $0x0
  pushl $115
c010329f:	6a 73                	push   $0x73
  jmp __alltraps
c01032a1:	e9 d1 fb ff ff       	jmp    c0102e77 <__alltraps>

c01032a6 <vector116>:
.globl vector116
vector116:
  pushl $0
c01032a6:	6a 00                	push   $0x0
  pushl $116
c01032a8:	6a 74                	push   $0x74
  jmp __alltraps
c01032aa:	e9 c8 fb ff ff       	jmp    c0102e77 <__alltraps>

c01032af <vector117>:
.globl vector117
vector117:
  pushl $0
c01032af:	6a 00                	push   $0x0
  pushl $117
c01032b1:	6a 75                	push   $0x75
  jmp __alltraps
c01032b3:	e9 bf fb ff ff       	jmp    c0102e77 <__alltraps>

c01032b8 <vector118>:
.globl vector118
vector118:
  pushl $0
c01032b8:	6a 00                	push   $0x0
  pushl $118
c01032ba:	6a 76                	push   $0x76
  jmp __alltraps
c01032bc:	e9 b6 fb ff ff       	jmp    c0102e77 <__alltraps>

c01032c1 <vector119>:
.globl vector119
vector119:
  pushl $0
c01032c1:	6a 00                	push   $0x0
  pushl $119
c01032c3:	6a 77                	push   $0x77
  jmp __alltraps
c01032c5:	e9 ad fb ff ff       	jmp    c0102e77 <__alltraps>

c01032ca <vector120>:
.globl vector120
vector120:
  pushl $0
c01032ca:	6a 00                	push   $0x0
  pushl $120
c01032cc:	6a 78                	push   $0x78
  jmp __alltraps
c01032ce:	e9 a4 fb ff ff       	jmp    c0102e77 <__alltraps>

c01032d3 <vector121>:
.globl vector121
vector121:
  pushl $0
c01032d3:	6a 00                	push   $0x0
  pushl $121
c01032d5:	6a 79                	push   $0x79
  jmp __alltraps
c01032d7:	e9 9b fb ff ff       	jmp    c0102e77 <__alltraps>

c01032dc <vector122>:
.globl vector122
vector122:
  pushl $0
c01032dc:	6a 00                	push   $0x0
  pushl $122
c01032de:	6a 7a                	push   $0x7a
  jmp __alltraps
c01032e0:	e9 92 fb ff ff       	jmp    c0102e77 <__alltraps>

c01032e5 <vector123>:
.globl vector123
vector123:
  pushl $0
c01032e5:	6a 00                	push   $0x0
  pushl $123
c01032e7:	6a 7b                	push   $0x7b
  jmp __alltraps
c01032e9:	e9 89 fb ff ff       	jmp    c0102e77 <__alltraps>

c01032ee <vector124>:
.globl vector124
vector124:
  pushl $0
c01032ee:	6a 00                	push   $0x0
  pushl $124
c01032f0:	6a 7c                	push   $0x7c
  jmp __alltraps
c01032f2:	e9 80 fb ff ff       	jmp    c0102e77 <__alltraps>

c01032f7 <vector125>:
.globl vector125
vector125:
  pushl $0
c01032f7:	6a 00                	push   $0x0
  pushl $125
c01032f9:	6a 7d                	push   $0x7d
  jmp __alltraps
c01032fb:	e9 77 fb ff ff       	jmp    c0102e77 <__alltraps>

c0103300 <vector126>:
.globl vector126
vector126:
  pushl $0
c0103300:	6a 00                	push   $0x0
  pushl $126
c0103302:	6a 7e                	push   $0x7e
  jmp __alltraps
c0103304:	e9 6e fb ff ff       	jmp    c0102e77 <__alltraps>

c0103309 <vector127>:
.globl vector127
vector127:
  pushl $0
c0103309:	6a 00                	push   $0x0
  pushl $127
c010330b:	6a 7f                	push   $0x7f
  jmp __alltraps
c010330d:	e9 65 fb ff ff       	jmp    c0102e77 <__alltraps>

c0103312 <vector128>:
.globl vector128
vector128:
  pushl $0
c0103312:	6a 00                	push   $0x0
  pushl $128
c0103314:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0103319:	e9 59 fb ff ff       	jmp    c0102e77 <__alltraps>

c010331e <vector129>:
.globl vector129
vector129:
  pushl $0
c010331e:	6a 00                	push   $0x0
  pushl $129
c0103320:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0103325:	e9 4d fb ff ff       	jmp    c0102e77 <__alltraps>

c010332a <vector130>:
.globl vector130
vector130:
  pushl $0
c010332a:	6a 00                	push   $0x0
  pushl $130
c010332c:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0103331:	e9 41 fb ff ff       	jmp    c0102e77 <__alltraps>

c0103336 <vector131>:
.globl vector131
vector131:
  pushl $0
c0103336:	6a 00                	push   $0x0
  pushl $131
c0103338:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c010333d:	e9 35 fb ff ff       	jmp    c0102e77 <__alltraps>

c0103342 <vector132>:
.globl vector132
vector132:
  pushl $0
c0103342:	6a 00                	push   $0x0
  pushl $132
c0103344:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0103349:	e9 29 fb ff ff       	jmp    c0102e77 <__alltraps>

c010334e <vector133>:
.globl vector133
vector133:
  pushl $0
c010334e:	6a 00                	push   $0x0
  pushl $133
c0103350:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0103355:	e9 1d fb ff ff       	jmp    c0102e77 <__alltraps>

c010335a <vector134>:
.globl vector134
vector134:
  pushl $0
c010335a:	6a 00                	push   $0x0
  pushl $134
c010335c:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0103361:	e9 11 fb ff ff       	jmp    c0102e77 <__alltraps>

c0103366 <vector135>:
.globl vector135
vector135:
  pushl $0
c0103366:	6a 00                	push   $0x0
  pushl $135
c0103368:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c010336d:	e9 05 fb ff ff       	jmp    c0102e77 <__alltraps>

c0103372 <vector136>:
.globl vector136
vector136:
  pushl $0
c0103372:	6a 00                	push   $0x0
  pushl $136
c0103374:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0103379:	e9 f9 fa ff ff       	jmp    c0102e77 <__alltraps>

c010337e <vector137>:
.globl vector137
vector137:
  pushl $0
c010337e:	6a 00                	push   $0x0
  pushl $137
c0103380:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0103385:	e9 ed fa ff ff       	jmp    c0102e77 <__alltraps>

c010338a <vector138>:
.globl vector138
vector138:
  pushl $0
c010338a:	6a 00                	push   $0x0
  pushl $138
c010338c:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0103391:	e9 e1 fa ff ff       	jmp    c0102e77 <__alltraps>

c0103396 <vector139>:
.globl vector139
vector139:
  pushl $0
c0103396:	6a 00                	push   $0x0
  pushl $139
c0103398:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c010339d:	e9 d5 fa ff ff       	jmp    c0102e77 <__alltraps>

c01033a2 <vector140>:
.globl vector140
vector140:
  pushl $0
c01033a2:	6a 00                	push   $0x0
  pushl $140
c01033a4:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c01033a9:	e9 c9 fa ff ff       	jmp    c0102e77 <__alltraps>

c01033ae <vector141>:
.globl vector141
vector141:
  pushl $0
c01033ae:	6a 00                	push   $0x0
  pushl $141
c01033b0:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c01033b5:	e9 bd fa ff ff       	jmp    c0102e77 <__alltraps>

c01033ba <vector142>:
.globl vector142
vector142:
  pushl $0
c01033ba:	6a 00                	push   $0x0
  pushl $142
c01033bc:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c01033c1:	e9 b1 fa ff ff       	jmp    c0102e77 <__alltraps>

c01033c6 <vector143>:
.globl vector143
vector143:
  pushl $0
c01033c6:	6a 00                	push   $0x0
  pushl $143
c01033c8:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c01033cd:	e9 a5 fa ff ff       	jmp    c0102e77 <__alltraps>

c01033d2 <vector144>:
.globl vector144
vector144:
  pushl $0
c01033d2:	6a 00                	push   $0x0
  pushl $144
c01033d4:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c01033d9:	e9 99 fa ff ff       	jmp    c0102e77 <__alltraps>

c01033de <vector145>:
.globl vector145
vector145:
  pushl $0
c01033de:	6a 00                	push   $0x0
  pushl $145
c01033e0:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c01033e5:	e9 8d fa ff ff       	jmp    c0102e77 <__alltraps>

c01033ea <vector146>:
.globl vector146
vector146:
  pushl $0
c01033ea:	6a 00                	push   $0x0
  pushl $146
c01033ec:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c01033f1:	e9 81 fa ff ff       	jmp    c0102e77 <__alltraps>

c01033f6 <vector147>:
.globl vector147
vector147:
  pushl $0
c01033f6:	6a 00                	push   $0x0
  pushl $147
c01033f8:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c01033fd:	e9 75 fa ff ff       	jmp    c0102e77 <__alltraps>

c0103402 <vector148>:
.globl vector148
vector148:
  pushl $0
c0103402:	6a 00                	push   $0x0
  pushl $148
c0103404:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0103409:	e9 69 fa ff ff       	jmp    c0102e77 <__alltraps>

c010340e <vector149>:
.globl vector149
vector149:
  pushl $0
c010340e:	6a 00                	push   $0x0
  pushl $149
c0103410:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c0103415:	e9 5d fa ff ff       	jmp    c0102e77 <__alltraps>

c010341a <vector150>:
.globl vector150
vector150:
  pushl $0
c010341a:	6a 00                	push   $0x0
  pushl $150
c010341c:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c0103421:	e9 51 fa ff ff       	jmp    c0102e77 <__alltraps>

c0103426 <vector151>:
.globl vector151
vector151:
  pushl $0
c0103426:	6a 00                	push   $0x0
  pushl $151
c0103428:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c010342d:	e9 45 fa ff ff       	jmp    c0102e77 <__alltraps>

c0103432 <vector152>:
.globl vector152
vector152:
  pushl $0
c0103432:	6a 00                	push   $0x0
  pushl $152
c0103434:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c0103439:	e9 39 fa ff ff       	jmp    c0102e77 <__alltraps>

c010343e <vector153>:
.globl vector153
vector153:
  pushl $0
c010343e:	6a 00                	push   $0x0
  pushl $153
c0103440:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c0103445:	e9 2d fa ff ff       	jmp    c0102e77 <__alltraps>

c010344a <vector154>:
.globl vector154
vector154:
  pushl $0
c010344a:	6a 00                	push   $0x0
  pushl $154
c010344c:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c0103451:	e9 21 fa ff ff       	jmp    c0102e77 <__alltraps>

c0103456 <vector155>:
.globl vector155
vector155:
  pushl $0
c0103456:	6a 00                	push   $0x0
  pushl $155
c0103458:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c010345d:	e9 15 fa ff ff       	jmp    c0102e77 <__alltraps>

c0103462 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103462:	6a 00                	push   $0x0
  pushl $156
c0103464:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c0103469:	e9 09 fa ff ff       	jmp    c0102e77 <__alltraps>

c010346e <vector157>:
.globl vector157
vector157:
  pushl $0
c010346e:	6a 00                	push   $0x0
  pushl $157
c0103470:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103475:	e9 fd f9 ff ff       	jmp    c0102e77 <__alltraps>

c010347a <vector158>:
.globl vector158
vector158:
  pushl $0
c010347a:	6a 00                	push   $0x0
  pushl $158
c010347c:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103481:	e9 f1 f9 ff ff       	jmp    c0102e77 <__alltraps>

c0103486 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103486:	6a 00                	push   $0x0
  pushl $159
c0103488:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c010348d:	e9 e5 f9 ff ff       	jmp    c0102e77 <__alltraps>

c0103492 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103492:	6a 00                	push   $0x0
  pushl $160
c0103494:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0103499:	e9 d9 f9 ff ff       	jmp    c0102e77 <__alltraps>

c010349e <vector161>:
.globl vector161
vector161:
  pushl $0
c010349e:	6a 00                	push   $0x0
  pushl $161
c01034a0:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c01034a5:	e9 cd f9 ff ff       	jmp    c0102e77 <__alltraps>

c01034aa <vector162>:
.globl vector162
vector162:
  pushl $0
c01034aa:	6a 00                	push   $0x0
  pushl $162
c01034ac:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c01034b1:	e9 c1 f9 ff ff       	jmp    c0102e77 <__alltraps>

c01034b6 <vector163>:
.globl vector163
vector163:
  pushl $0
c01034b6:	6a 00                	push   $0x0
  pushl $163
c01034b8:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c01034bd:	e9 b5 f9 ff ff       	jmp    c0102e77 <__alltraps>

c01034c2 <vector164>:
.globl vector164
vector164:
  pushl $0
c01034c2:	6a 00                	push   $0x0
  pushl $164
c01034c4:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c01034c9:	e9 a9 f9 ff ff       	jmp    c0102e77 <__alltraps>

c01034ce <vector165>:
.globl vector165
vector165:
  pushl $0
c01034ce:	6a 00                	push   $0x0
  pushl $165
c01034d0:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c01034d5:	e9 9d f9 ff ff       	jmp    c0102e77 <__alltraps>

c01034da <vector166>:
.globl vector166
vector166:
  pushl $0
c01034da:	6a 00                	push   $0x0
  pushl $166
c01034dc:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c01034e1:	e9 91 f9 ff ff       	jmp    c0102e77 <__alltraps>

c01034e6 <vector167>:
.globl vector167
vector167:
  pushl $0
c01034e6:	6a 00                	push   $0x0
  pushl $167
c01034e8:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c01034ed:	e9 85 f9 ff ff       	jmp    c0102e77 <__alltraps>

c01034f2 <vector168>:
.globl vector168
vector168:
  pushl $0
c01034f2:	6a 00                	push   $0x0
  pushl $168
c01034f4:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c01034f9:	e9 79 f9 ff ff       	jmp    c0102e77 <__alltraps>

c01034fe <vector169>:
.globl vector169
vector169:
  pushl $0
c01034fe:	6a 00                	push   $0x0
  pushl $169
c0103500:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c0103505:	e9 6d f9 ff ff       	jmp    c0102e77 <__alltraps>

c010350a <vector170>:
.globl vector170
vector170:
  pushl $0
c010350a:	6a 00                	push   $0x0
  pushl $170
c010350c:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c0103511:	e9 61 f9 ff ff       	jmp    c0102e77 <__alltraps>

c0103516 <vector171>:
.globl vector171
vector171:
  pushl $0
c0103516:	6a 00                	push   $0x0
  pushl $171
c0103518:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c010351d:	e9 55 f9 ff ff       	jmp    c0102e77 <__alltraps>

c0103522 <vector172>:
.globl vector172
vector172:
  pushl $0
c0103522:	6a 00                	push   $0x0
  pushl $172
c0103524:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c0103529:	e9 49 f9 ff ff       	jmp    c0102e77 <__alltraps>

c010352e <vector173>:
.globl vector173
vector173:
  pushl $0
c010352e:	6a 00                	push   $0x0
  pushl $173
c0103530:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c0103535:	e9 3d f9 ff ff       	jmp    c0102e77 <__alltraps>

c010353a <vector174>:
.globl vector174
vector174:
  pushl $0
c010353a:	6a 00                	push   $0x0
  pushl $174
c010353c:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c0103541:	e9 31 f9 ff ff       	jmp    c0102e77 <__alltraps>

c0103546 <vector175>:
.globl vector175
vector175:
  pushl $0
c0103546:	6a 00                	push   $0x0
  pushl $175
c0103548:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c010354d:	e9 25 f9 ff ff       	jmp    c0102e77 <__alltraps>

c0103552 <vector176>:
.globl vector176
vector176:
  pushl $0
c0103552:	6a 00                	push   $0x0
  pushl $176
c0103554:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c0103559:	e9 19 f9 ff ff       	jmp    c0102e77 <__alltraps>

c010355e <vector177>:
.globl vector177
vector177:
  pushl $0
c010355e:	6a 00                	push   $0x0
  pushl $177
c0103560:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0103565:	e9 0d f9 ff ff       	jmp    c0102e77 <__alltraps>

c010356a <vector178>:
.globl vector178
vector178:
  pushl $0
c010356a:	6a 00                	push   $0x0
  pushl $178
c010356c:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103571:	e9 01 f9 ff ff       	jmp    c0102e77 <__alltraps>

c0103576 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103576:	6a 00                	push   $0x0
  pushl $179
c0103578:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c010357d:	e9 f5 f8 ff ff       	jmp    c0102e77 <__alltraps>

c0103582 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103582:	6a 00                	push   $0x0
  pushl $180
c0103584:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0103589:	e9 e9 f8 ff ff       	jmp    c0102e77 <__alltraps>

c010358e <vector181>:
.globl vector181
vector181:
  pushl $0
c010358e:	6a 00                	push   $0x0
  pushl $181
c0103590:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103595:	e9 dd f8 ff ff       	jmp    c0102e77 <__alltraps>

c010359a <vector182>:
.globl vector182
vector182:
  pushl $0
c010359a:	6a 00                	push   $0x0
  pushl $182
c010359c:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c01035a1:	e9 d1 f8 ff ff       	jmp    c0102e77 <__alltraps>

c01035a6 <vector183>:
.globl vector183
vector183:
  pushl $0
c01035a6:	6a 00                	push   $0x0
  pushl $183
c01035a8:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c01035ad:	e9 c5 f8 ff ff       	jmp    c0102e77 <__alltraps>

c01035b2 <vector184>:
.globl vector184
vector184:
  pushl $0
c01035b2:	6a 00                	push   $0x0
  pushl $184
c01035b4:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c01035b9:	e9 b9 f8 ff ff       	jmp    c0102e77 <__alltraps>

c01035be <vector185>:
.globl vector185
vector185:
  pushl $0
c01035be:	6a 00                	push   $0x0
  pushl $185
c01035c0:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c01035c5:	e9 ad f8 ff ff       	jmp    c0102e77 <__alltraps>

c01035ca <vector186>:
.globl vector186
vector186:
  pushl $0
c01035ca:	6a 00                	push   $0x0
  pushl $186
c01035cc:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c01035d1:	e9 a1 f8 ff ff       	jmp    c0102e77 <__alltraps>

c01035d6 <vector187>:
.globl vector187
vector187:
  pushl $0
c01035d6:	6a 00                	push   $0x0
  pushl $187
c01035d8:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c01035dd:	e9 95 f8 ff ff       	jmp    c0102e77 <__alltraps>

c01035e2 <vector188>:
.globl vector188
vector188:
  pushl $0
c01035e2:	6a 00                	push   $0x0
  pushl $188
c01035e4:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c01035e9:	e9 89 f8 ff ff       	jmp    c0102e77 <__alltraps>

c01035ee <vector189>:
.globl vector189
vector189:
  pushl $0
c01035ee:	6a 00                	push   $0x0
  pushl $189
c01035f0:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c01035f5:	e9 7d f8 ff ff       	jmp    c0102e77 <__alltraps>

c01035fa <vector190>:
.globl vector190
vector190:
  pushl $0
c01035fa:	6a 00                	push   $0x0
  pushl $190
c01035fc:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c0103601:	e9 71 f8 ff ff       	jmp    c0102e77 <__alltraps>

c0103606 <vector191>:
.globl vector191
vector191:
  pushl $0
c0103606:	6a 00                	push   $0x0
  pushl $191
c0103608:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c010360d:	e9 65 f8 ff ff       	jmp    c0102e77 <__alltraps>

c0103612 <vector192>:
.globl vector192
vector192:
  pushl $0
c0103612:	6a 00                	push   $0x0
  pushl $192
c0103614:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c0103619:	e9 59 f8 ff ff       	jmp    c0102e77 <__alltraps>

c010361e <vector193>:
.globl vector193
vector193:
  pushl $0
c010361e:	6a 00                	push   $0x0
  pushl $193
c0103620:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c0103625:	e9 4d f8 ff ff       	jmp    c0102e77 <__alltraps>

c010362a <vector194>:
.globl vector194
vector194:
  pushl $0
c010362a:	6a 00                	push   $0x0
  pushl $194
c010362c:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c0103631:	e9 41 f8 ff ff       	jmp    c0102e77 <__alltraps>

c0103636 <vector195>:
.globl vector195
vector195:
  pushl $0
c0103636:	6a 00                	push   $0x0
  pushl $195
c0103638:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c010363d:	e9 35 f8 ff ff       	jmp    c0102e77 <__alltraps>

c0103642 <vector196>:
.globl vector196
vector196:
  pushl $0
c0103642:	6a 00                	push   $0x0
  pushl $196
c0103644:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c0103649:	e9 29 f8 ff ff       	jmp    c0102e77 <__alltraps>

c010364e <vector197>:
.globl vector197
vector197:
  pushl $0
c010364e:	6a 00                	push   $0x0
  pushl $197
c0103650:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c0103655:	e9 1d f8 ff ff       	jmp    c0102e77 <__alltraps>

c010365a <vector198>:
.globl vector198
vector198:
  pushl $0
c010365a:	6a 00                	push   $0x0
  pushl $198
c010365c:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103661:	e9 11 f8 ff ff       	jmp    c0102e77 <__alltraps>

c0103666 <vector199>:
.globl vector199
vector199:
  pushl $0
c0103666:	6a 00                	push   $0x0
  pushl $199
c0103668:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c010366d:	e9 05 f8 ff ff       	jmp    c0102e77 <__alltraps>

c0103672 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103672:	6a 00                	push   $0x0
  pushl $200
c0103674:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0103679:	e9 f9 f7 ff ff       	jmp    c0102e77 <__alltraps>

c010367e <vector201>:
.globl vector201
vector201:
  pushl $0
c010367e:	6a 00                	push   $0x0
  pushl $201
c0103680:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103685:	e9 ed f7 ff ff       	jmp    c0102e77 <__alltraps>

c010368a <vector202>:
.globl vector202
vector202:
  pushl $0
c010368a:	6a 00                	push   $0x0
  pushl $202
c010368c:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103691:	e9 e1 f7 ff ff       	jmp    c0102e77 <__alltraps>

c0103696 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103696:	6a 00                	push   $0x0
  pushl $203
c0103698:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c010369d:	e9 d5 f7 ff ff       	jmp    c0102e77 <__alltraps>

c01036a2 <vector204>:
.globl vector204
vector204:
  pushl $0
c01036a2:	6a 00                	push   $0x0
  pushl $204
c01036a4:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c01036a9:	e9 c9 f7 ff ff       	jmp    c0102e77 <__alltraps>

c01036ae <vector205>:
.globl vector205
vector205:
  pushl $0
c01036ae:	6a 00                	push   $0x0
  pushl $205
c01036b0:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c01036b5:	e9 bd f7 ff ff       	jmp    c0102e77 <__alltraps>

c01036ba <vector206>:
.globl vector206
vector206:
  pushl $0
c01036ba:	6a 00                	push   $0x0
  pushl $206
c01036bc:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c01036c1:	e9 b1 f7 ff ff       	jmp    c0102e77 <__alltraps>

c01036c6 <vector207>:
.globl vector207
vector207:
  pushl $0
c01036c6:	6a 00                	push   $0x0
  pushl $207
c01036c8:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c01036cd:	e9 a5 f7 ff ff       	jmp    c0102e77 <__alltraps>

c01036d2 <vector208>:
.globl vector208
vector208:
  pushl $0
c01036d2:	6a 00                	push   $0x0
  pushl $208
c01036d4:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c01036d9:	e9 99 f7 ff ff       	jmp    c0102e77 <__alltraps>

c01036de <vector209>:
.globl vector209
vector209:
  pushl $0
c01036de:	6a 00                	push   $0x0
  pushl $209
c01036e0:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c01036e5:	e9 8d f7 ff ff       	jmp    c0102e77 <__alltraps>

c01036ea <vector210>:
.globl vector210
vector210:
  pushl $0
c01036ea:	6a 00                	push   $0x0
  pushl $210
c01036ec:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c01036f1:	e9 81 f7 ff ff       	jmp    c0102e77 <__alltraps>

c01036f6 <vector211>:
.globl vector211
vector211:
  pushl $0
c01036f6:	6a 00                	push   $0x0
  pushl $211
c01036f8:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c01036fd:	e9 75 f7 ff ff       	jmp    c0102e77 <__alltraps>

c0103702 <vector212>:
.globl vector212
vector212:
  pushl $0
c0103702:	6a 00                	push   $0x0
  pushl $212
c0103704:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c0103709:	e9 69 f7 ff ff       	jmp    c0102e77 <__alltraps>

c010370e <vector213>:
.globl vector213
vector213:
  pushl $0
c010370e:	6a 00                	push   $0x0
  pushl $213
c0103710:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c0103715:	e9 5d f7 ff ff       	jmp    c0102e77 <__alltraps>

c010371a <vector214>:
.globl vector214
vector214:
  pushl $0
c010371a:	6a 00                	push   $0x0
  pushl $214
c010371c:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c0103721:	e9 51 f7 ff ff       	jmp    c0102e77 <__alltraps>

c0103726 <vector215>:
.globl vector215
vector215:
  pushl $0
c0103726:	6a 00                	push   $0x0
  pushl $215
c0103728:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c010372d:	e9 45 f7 ff ff       	jmp    c0102e77 <__alltraps>

c0103732 <vector216>:
.globl vector216
vector216:
  pushl $0
c0103732:	6a 00                	push   $0x0
  pushl $216
c0103734:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c0103739:	e9 39 f7 ff ff       	jmp    c0102e77 <__alltraps>

c010373e <vector217>:
.globl vector217
vector217:
  pushl $0
c010373e:	6a 00                	push   $0x0
  pushl $217
c0103740:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c0103745:	e9 2d f7 ff ff       	jmp    c0102e77 <__alltraps>

c010374a <vector218>:
.globl vector218
vector218:
  pushl $0
c010374a:	6a 00                	push   $0x0
  pushl $218
c010374c:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c0103751:	e9 21 f7 ff ff       	jmp    c0102e77 <__alltraps>

c0103756 <vector219>:
.globl vector219
vector219:
  pushl $0
c0103756:	6a 00                	push   $0x0
  pushl $219
c0103758:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c010375d:	e9 15 f7 ff ff       	jmp    c0102e77 <__alltraps>

c0103762 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103762:	6a 00                	push   $0x0
  pushl $220
c0103764:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c0103769:	e9 09 f7 ff ff       	jmp    c0102e77 <__alltraps>

c010376e <vector221>:
.globl vector221
vector221:
  pushl $0
c010376e:	6a 00                	push   $0x0
  pushl $221
c0103770:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103775:	e9 fd f6 ff ff       	jmp    c0102e77 <__alltraps>

c010377a <vector222>:
.globl vector222
vector222:
  pushl $0
c010377a:	6a 00                	push   $0x0
  pushl $222
c010377c:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103781:	e9 f1 f6 ff ff       	jmp    c0102e77 <__alltraps>

c0103786 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103786:	6a 00                	push   $0x0
  pushl $223
c0103788:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c010378d:	e9 e5 f6 ff ff       	jmp    c0102e77 <__alltraps>

c0103792 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103792:	6a 00                	push   $0x0
  pushl $224
c0103794:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103799:	e9 d9 f6 ff ff       	jmp    c0102e77 <__alltraps>

c010379e <vector225>:
.globl vector225
vector225:
  pushl $0
c010379e:	6a 00                	push   $0x0
  pushl $225
c01037a0:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c01037a5:	e9 cd f6 ff ff       	jmp    c0102e77 <__alltraps>

c01037aa <vector226>:
.globl vector226
vector226:
  pushl $0
c01037aa:	6a 00                	push   $0x0
  pushl $226
c01037ac:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c01037b1:	e9 c1 f6 ff ff       	jmp    c0102e77 <__alltraps>

c01037b6 <vector227>:
.globl vector227
vector227:
  pushl $0
c01037b6:	6a 00                	push   $0x0
  pushl $227
c01037b8:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c01037bd:	e9 b5 f6 ff ff       	jmp    c0102e77 <__alltraps>

c01037c2 <vector228>:
.globl vector228
vector228:
  pushl $0
c01037c2:	6a 00                	push   $0x0
  pushl $228
c01037c4:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c01037c9:	e9 a9 f6 ff ff       	jmp    c0102e77 <__alltraps>

c01037ce <vector229>:
.globl vector229
vector229:
  pushl $0
c01037ce:	6a 00                	push   $0x0
  pushl $229
c01037d0:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c01037d5:	e9 9d f6 ff ff       	jmp    c0102e77 <__alltraps>

c01037da <vector230>:
.globl vector230
vector230:
  pushl $0
c01037da:	6a 00                	push   $0x0
  pushl $230
c01037dc:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c01037e1:	e9 91 f6 ff ff       	jmp    c0102e77 <__alltraps>

c01037e6 <vector231>:
.globl vector231
vector231:
  pushl $0
c01037e6:	6a 00                	push   $0x0
  pushl $231
c01037e8:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c01037ed:	e9 85 f6 ff ff       	jmp    c0102e77 <__alltraps>

c01037f2 <vector232>:
.globl vector232
vector232:
  pushl $0
c01037f2:	6a 00                	push   $0x0
  pushl $232
c01037f4:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c01037f9:	e9 79 f6 ff ff       	jmp    c0102e77 <__alltraps>

c01037fe <vector233>:
.globl vector233
vector233:
  pushl $0
c01037fe:	6a 00                	push   $0x0
  pushl $233
c0103800:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c0103805:	e9 6d f6 ff ff       	jmp    c0102e77 <__alltraps>

c010380a <vector234>:
.globl vector234
vector234:
  pushl $0
c010380a:	6a 00                	push   $0x0
  pushl $234
c010380c:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c0103811:	e9 61 f6 ff ff       	jmp    c0102e77 <__alltraps>

c0103816 <vector235>:
.globl vector235
vector235:
  pushl $0
c0103816:	6a 00                	push   $0x0
  pushl $235
c0103818:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c010381d:	e9 55 f6 ff ff       	jmp    c0102e77 <__alltraps>

c0103822 <vector236>:
.globl vector236
vector236:
  pushl $0
c0103822:	6a 00                	push   $0x0
  pushl $236
c0103824:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c0103829:	e9 49 f6 ff ff       	jmp    c0102e77 <__alltraps>

c010382e <vector237>:
.globl vector237
vector237:
  pushl $0
c010382e:	6a 00                	push   $0x0
  pushl $237
c0103830:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c0103835:	e9 3d f6 ff ff       	jmp    c0102e77 <__alltraps>

c010383a <vector238>:
.globl vector238
vector238:
  pushl $0
c010383a:	6a 00                	push   $0x0
  pushl $238
c010383c:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c0103841:	e9 31 f6 ff ff       	jmp    c0102e77 <__alltraps>

c0103846 <vector239>:
.globl vector239
vector239:
  pushl $0
c0103846:	6a 00                	push   $0x0
  pushl $239
c0103848:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c010384d:	e9 25 f6 ff ff       	jmp    c0102e77 <__alltraps>

c0103852 <vector240>:
.globl vector240
vector240:
  pushl $0
c0103852:	6a 00                	push   $0x0
  pushl $240
c0103854:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c0103859:	e9 19 f6 ff ff       	jmp    c0102e77 <__alltraps>

c010385e <vector241>:
.globl vector241
vector241:
  pushl $0
c010385e:	6a 00                	push   $0x0
  pushl $241
c0103860:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0103865:	e9 0d f6 ff ff       	jmp    c0102e77 <__alltraps>

c010386a <vector242>:
.globl vector242
vector242:
  pushl $0
c010386a:	6a 00                	push   $0x0
  pushl $242
c010386c:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103871:	e9 01 f6 ff ff       	jmp    c0102e77 <__alltraps>

c0103876 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103876:	6a 00                	push   $0x0
  pushl $243
c0103878:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c010387d:	e9 f5 f5 ff ff       	jmp    c0102e77 <__alltraps>

c0103882 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103882:	6a 00                	push   $0x0
  pushl $244
c0103884:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0103889:	e9 e9 f5 ff ff       	jmp    c0102e77 <__alltraps>

c010388e <vector245>:
.globl vector245
vector245:
  pushl $0
c010388e:	6a 00                	push   $0x0
  pushl $245
c0103890:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103895:	e9 dd f5 ff ff       	jmp    c0102e77 <__alltraps>

c010389a <vector246>:
.globl vector246
vector246:
  pushl $0
c010389a:	6a 00                	push   $0x0
  pushl $246
c010389c:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c01038a1:	e9 d1 f5 ff ff       	jmp    c0102e77 <__alltraps>

c01038a6 <vector247>:
.globl vector247
vector247:
  pushl $0
c01038a6:	6a 00                	push   $0x0
  pushl $247
c01038a8:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c01038ad:	e9 c5 f5 ff ff       	jmp    c0102e77 <__alltraps>

c01038b2 <vector248>:
.globl vector248
vector248:
  pushl $0
c01038b2:	6a 00                	push   $0x0
  pushl $248
c01038b4:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c01038b9:	e9 b9 f5 ff ff       	jmp    c0102e77 <__alltraps>

c01038be <vector249>:
.globl vector249
vector249:
  pushl $0
c01038be:	6a 00                	push   $0x0
  pushl $249
c01038c0:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c01038c5:	e9 ad f5 ff ff       	jmp    c0102e77 <__alltraps>

c01038ca <vector250>:
.globl vector250
vector250:
  pushl $0
c01038ca:	6a 00                	push   $0x0
  pushl $250
c01038cc:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c01038d1:	e9 a1 f5 ff ff       	jmp    c0102e77 <__alltraps>

c01038d6 <vector251>:
.globl vector251
vector251:
  pushl $0
c01038d6:	6a 00                	push   $0x0
  pushl $251
c01038d8:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c01038dd:	e9 95 f5 ff ff       	jmp    c0102e77 <__alltraps>

c01038e2 <vector252>:
.globl vector252
vector252:
  pushl $0
c01038e2:	6a 00                	push   $0x0
  pushl $252
c01038e4:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c01038e9:	e9 89 f5 ff ff       	jmp    c0102e77 <__alltraps>

c01038ee <vector253>:
.globl vector253
vector253:
  pushl $0
c01038ee:	6a 00                	push   $0x0
  pushl $253
c01038f0:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c01038f5:	e9 7d f5 ff ff       	jmp    c0102e77 <__alltraps>

c01038fa <vector254>:
.globl vector254
vector254:
  pushl $0
c01038fa:	6a 00                	push   $0x0
  pushl $254
c01038fc:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c0103901:	e9 71 f5 ff ff       	jmp    c0102e77 <__alltraps>

c0103906 <vector255>:
.globl vector255
vector255:
  pushl $0
c0103906:	6a 00                	push   $0x0
  pushl $255
c0103908:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c010390d:	e9 65 f5 ff ff       	jmp    c0102e77 <__alltraps>

c0103912 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0103912:	55                   	push   %ebp
c0103913:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0103915:	8b 55 08             	mov    0x8(%ebp),%edx
c0103918:	a1 6c 11 17 c0       	mov    0xc017116c,%eax
c010391d:	29 c2                	sub    %eax,%edx
c010391f:	89 d0                	mov    %edx,%eax
c0103921:	c1 f8 02             	sar    $0x2,%eax
c0103924:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010392a:	5d                   	pop    %ebp
c010392b:	c3                   	ret    

c010392c <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010392c:	55                   	push   %ebp
c010392d:	89 e5                	mov    %esp,%ebp
c010392f:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0103932:	8b 45 08             	mov    0x8(%ebp),%eax
c0103935:	89 04 24             	mov    %eax,(%esp)
c0103938:	e8 d5 ff ff ff       	call   c0103912 <page2ppn>
c010393d:	c1 e0 0c             	shl    $0xc,%eax
}
c0103940:	c9                   	leave  
c0103941:	c3                   	ret    

c0103942 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0103942:	55                   	push   %ebp
c0103943:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0103945:	8b 45 08             	mov    0x8(%ebp),%eax
c0103948:	8b 00                	mov    (%eax),%eax
}
c010394a:	5d                   	pop    %ebp
c010394b:	c3                   	ret    

c010394c <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c010394c:	55                   	push   %ebp
c010394d:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c010394f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103952:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103955:	89 10                	mov    %edx,(%eax)
}
c0103957:	5d                   	pop    %ebp
c0103958:	c3                   	ret    

c0103959 <best_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
best_init(void) {
c0103959:	55                   	push   %ebp
c010395a:	89 e5                	mov    %esp,%ebp
c010395c:	83 ec 10             	sub    $0x10,%esp
c010395f:	c7 45 fc 54 11 17 c0 	movl   $0xc0171154,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103966:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103969:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010396c:	89 50 04             	mov    %edx,0x4(%eax)
c010396f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103972:	8b 50 04             	mov    0x4(%eax),%edx
c0103975:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103978:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c010397a:	c7 05 5c 11 17 c0 00 	movl   $0x0,0xc017115c
c0103981:	00 00 00 
}
c0103984:	c9                   	leave  
c0103985:	c3                   	ret    

c0103986 <best_init_memmap>:

static void
best_init_memmap(struct Page *base, size_t n) {
c0103986:	55                   	push   %ebp
c0103987:	89 e5                	mov    %esp,%ebp
c0103989:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c010398c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103990:	75 24                	jne    c01039b6 <best_init_memmap+0x30>
c0103992:	c7 44 24 0c 00 28 12 	movl   $0xc0122800,0xc(%esp)
c0103999:	c0 
c010399a:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c01039a1:	c0 
c01039a2:	c7 44 24 04 13 00 00 	movl   $0x13,0x4(%esp)
c01039a9:	00 
c01039aa:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c01039b1:	e8 60 d8 ff ff       	call   c0101216 <__panic>
    struct Page *p = base;
c01039b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01039b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c01039bc:	eb 7d                	jmp    c0103a3b <best_init_memmap+0xb5>
        assert(PageReserved(p));
c01039be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039c1:	83 c0 04             	add    $0x4,%eax
c01039c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01039cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01039ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01039d1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01039d4:	0f a3 10             	bt     %edx,(%eax)
c01039d7:	19 c0                	sbb    %eax,%eax
c01039d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c01039dc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01039e0:	0f 95 c0             	setne  %al
c01039e3:	0f b6 c0             	movzbl %al,%eax
c01039e6:	85 c0                	test   %eax,%eax
c01039e8:	75 24                	jne    c0103a0e <best_init_memmap+0x88>
c01039ea:	c7 44 24 0c 31 28 12 	movl   $0xc0122831,0xc(%esp)
c01039f1:	c0 
c01039f2:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c01039f9:	c0 
c01039fa:	c7 44 24 04 16 00 00 	movl   $0x16,0x4(%esp)
c0103a01:	00 
c0103a02:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0103a09:	e8 08 d8 ff ff       	call   c0101216 <__panic>
        p->flags = p->property = 0;
c0103a0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a11:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0103a18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a1b:	8b 50 08             	mov    0x8(%eax),%edx
c0103a1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a21:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c0103a24:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103a2b:	00 
c0103a2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a2f:	89 04 24             	mov    %eax,(%esp)
c0103a32:	e8 15 ff ff ff       	call   c010394c <set_page_ref>

static void
best_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0103a37:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c0103a3b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a3e:	89 d0                	mov    %edx,%eax
c0103a40:	c1 e0 03             	shl    $0x3,%eax
c0103a43:	01 d0                	add    %edx,%eax
c0103a45:	c1 e0 02             	shl    $0x2,%eax
c0103a48:	89 c2                	mov    %eax,%edx
c0103a4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a4d:	01 d0                	add    %edx,%eax
c0103a4f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103a52:	0f 85 66 ff ff ff    	jne    c01039be <best_init_memmap+0x38>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0103a58:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a5b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a5e:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0103a61:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a64:	83 c0 04             	add    $0x4,%eax
c0103a67:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0103a6e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a71:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103a74:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103a77:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c0103a7a:	8b 15 5c 11 17 c0    	mov    0xc017115c,%edx
c0103a80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a83:	01 d0                	add    %edx,%eax
c0103a85:	a3 5c 11 17 c0       	mov    %eax,0xc017115c
    list_add_before(&free_list, &(base->page_link));
c0103a8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a8d:	83 c0 10             	add    $0x10,%eax
c0103a90:	c7 45 dc 54 11 17 c0 	movl   $0xc0171154,-0x24(%ebp)
c0103a97:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103a9a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103a9d:	8b 00                	mov    (%eax),%eax
c0103a9f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0103aa2:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103aa5:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103aa8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103aab:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103aae:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103ab1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103ab4:	89 10                	mov    %edx,(%eax)
c0103ab6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103ab9:	8b 10                	mov    (%eax),%edx
c0103abb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103abe:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103ac1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103ac4:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103ac7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103aca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103acd:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103ad0:	89 10                	mov    %edx,(%eax)
}
c0103ad2:	c9                   	leave  
c0103ad3:	c3                   	ret    

c0103ad4 <best_alloc_pages>:
    return page;
}*/


static struct Page *
best_alloc_pages(size_t n) {
c0103ad4:	55                   	push   %ebp
c0103ad5:	89 e5                	mov    %esp,%ebp
c0103ad7:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0103ada:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103ade:	75 24                	jne    c0103b04 <best_alloc_pages+0x30>
c0103ae0:	c7 44 24 0c 00 28 12 	movl   $0xc0122800,0xc(%esp)
c0103ae7:	c0 
c0103ae8:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0103aef:	c0 
c0103af0:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0103af7:	00 
c0103af8:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0103aff:	e8 12 d7 ff ff       	call   c0101216 <__panic>
    if (n > nr_free) {
c0103b04:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0103b09:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103b0c:	73 0a                	jae    c0103b18 <best_alloc_pages+0x44>
        return NULL;
c0103b0e:	b8 00 00 00 00       	mov    $0x0,%eax
c0103b13:	e9 7a 01 00 00       	jmp    c0103c92 <best_alloc_pages+0x1be>
    }
    list_entry_t *le=&free_list;
c0103b18:	c7 45 f4 54 11 17 c0 	movl   $0xc0171154,-0xc(%ebp)
    struct Page *best_p = NULL;
c0103b1f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    int best_property=-1,flag=0;
c0103b26:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
c0103b2d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    while((le=list_next(le))!=&free_list){
c0103b34:	eb 3d                	jmp    c0103b73 <best_alloc_pages+0x9f>
     struct Page *p = le2page(le,page_link);
c0103b36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b39:	83 e8 10             	sub    $0x10,%eax
c0103b3c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if(p->property>=n){
c0103b3f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103b42:	8b 40 08             	mov    0x8(%eax),%eax
c0103b45:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103b48:	72 29                	jb     c0103b73 <best_alloc_pages+0x9f>
	if(best_property==-1||p->property<best_property){
c0103b4a:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
c0103b4e:	74 0d                	je     c0103b5d <best_alloc_pages+0x89>
c0103b50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103b53:	8b 50 08             	mov    0x8(%eax),%edx
c0103b56:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b59:	39 c2                	cmp    %eax,%edx
c0103b5b:	73 16                	jae    c0103b73 <best_alloc_pages+0x9f>
                best_p=p;
c0103b5d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103b60:	89 45 f0             	mov    %eax,-0x10(%ebp)
		best_property=p->property;
c0103b63:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103b66:	8b 40 08             	mov    0x8(%eax),%eax
c0103b69:	89 45 ec             	mov    %eax,-0x14(%ebp)
		flag=1;
c0103b6c:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c0103b73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b76:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103b79:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103b7c:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    list_entry_t *le=&free_list;
    struct Page *best_p = NULL;
    int best_property=-1,flag=0;
    while((le=list_next(le))!=&free_list){
c0103b7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103b82:	81 7d f4 54 11 17 c0 	cmpl   $0xc0171154,-0xc(%ebp)
c0103b89:	75 ab                	jne    c0103b36 <best_alloc_pages+0x62>
		best_property=p->property;
		flag=1;
	}
     }
   }
	if(flag==0)
c0103b8b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103b8f:	75 0a                	jne    c0103b9b <best_alloc_pages+0xc7>
	  return NULL;
c0103b91:	b8 00 00 00 00       	mov    $0x0,%eax
c0103b96:	e9 f7 00 00 00       	jmp    c0103c92 <best_alloc_pages+0x1be>
        if (best_p != NULL) 
c0103b9b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103b9f:	0f 84 ea 00 00 00    	je     c0103c8f <best_alloc_pages+0x1bb>
	{
      //  list_del(&(best_p->page_link));
        if (best_p->property > n) {
c0103ba5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ba8:	8b 40 08             	mov    0x8(%eax),%eax
c0103bab:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103bae:	0f 86 8a 00 00 00    	jbe    c0103c3e <best_alloc_pages+0x16a>
            struct Page *p = best_p + n;
c0103bb4:	8b 55 08             	mov    0x8(%ebp),%edx
c0103bb7:	89 d0                	mov    %edx,%eax
c0103bb9:	c1 e0 03             	shl    $0x3,%eax
c0103bbc:	01 d0                	add    %edx,%eax
c0103bbe:	c1 e0 02             	shl    $0x2,%eax
c0103bc1:	89 c2                	mov    %eax,%edx
c0103bc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103bc6:	01 d0                	add    %edx,%eax
c0103bc8:	89 45 e0             	mov    %eax,-0x20(%ebp)
            p->property = best_p->property - n;
c0103bcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103bce:	8b 40 08             	mov    0x8(%eax),%eax
c0103bd1:	2b 45 08             	sub    0x8(%ebp),%eax
c0103bd4:	89 c2                	mov    %eax,%edx
c0103bd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103bd9:	89 50 08             	mov    %edx,0x8(%eax)
            SetPageProperty(p);
c0103bdc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103bdf:	83 c0 04             	add    $0x4,%eax
c0103be2:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
c0103be9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0103bec:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103bef:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0103bf2:	0f ab 10             	bts    %edx,(%eax)
            list_add_after(&free_list, &(p->page_link));
c0103bf5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103bf8:	83 c0 10             	add    $0x10,%eax
c0103bfb:	c7 45 d0 54 11 17 c0 	movl   $0xc0171154,-0x30(%ebp)
c0103c02:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0103c05:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103c08:	8b 40 04             	mov    0x4(%eax),%eax
c0103c0b:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103c0e:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0103c11:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103c14:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c0103c17:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103c1a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0103c1d:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103c20:	89 10                	mov    %edx,(%eax)
c0103c22:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0103c25:	8b 10                	mov    (%eax),%edx
c0103c27:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103c2a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103c2d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103c30:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103c33:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103c36:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103c39:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0103c3c:	89 10                	mov    %edx,(%eax)
    }
	list_del(&(best_p->page_link));
c0103c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c41:	83 c0 10             	add    $0x10,%eax
c0103c44:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103c47:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103c4a:	8b 40 04             	mov    0x4(%eax),%eax
c0103c4d:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0103c50:	8b 12                	mov    (%edx),%edx
c0103c52:	89 55 b8             	mov    %edx,-0x48(%ebp)
c0103c55:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103c58:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103c5b:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0103c5e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103c61:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103c64:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0103c67:	89 10                	mov    %edx,(%eax)
        nr_free -= n;
c0103c69:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0103c6e:	2b 45 08             	sub    0x8(%ebp),%eax
c0103c71:	a3 5c 11 17 c0       	mov    %eax,0xc017115c
        ClearPageProperty(best_p);
c0103c76:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c79:	83 c0 04             	add    $0x4,%eax
c0103c7c:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0103c83:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103c86:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0103c89:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0103c8c:	0f b3 10             	btr    %edx,(%eax)
    }
    return best_p;
c0103c8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
    
}
c0103c92:	c9                   	leave  
c0103c93:	c3                   	ret    

c0103c94 <best_free_pages>:

static void
best_free_pages(struct Page *base, size_t n) {
c0103c94:	55                   	push   %ebp
c0103c95:	89 e5                	mov    %esp,%ebp
c0103c97:	81 ec 98 00 00 00    	sub    $0x98,%esp
    assert(n > 0);
c0103c9d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103ca1:	75 24                	jne    c0103cc7 <best_free_pages+0x33>
c0103ca3:	c7 44 24 0c 00 28 12 	movl   $0xc0122800,0xc(%esp)
c0103caa:	c0 
c0103cab:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0103cb2:	c0 
c0103cb3:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0103cba:	00 
c0103cbb:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0103cc2:	e8 4f d5 ff ff       	call   c0101216 <__panic>
    struct Page *p = base;
c0103cc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0103ccd:	e9 9d 00 00 00       	jmp    c0103d6f <best_free_pages+0xdb>
        assert(!PageReserved(p) && !PageProperty(p));
c0103cd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cd5:	83 c0 04             	add    $0x4,%eax
c0103cd8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0103cdf:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103ce2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ce5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0103ce8:	0f a3 10             	bt     %edx,(%eax)
c0103ceb:	19 c0                	sbb    %eax,%eax
c0103ced:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c0103cf0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0103cf4:	0f 95 c0             	setne  %al
c0103cf7:	0f b6 c0             	movzbl %al,%eax
c0103cfa:	85 c0                	test   %eax,%eax
c0103cfc:	75 2c                	jne    c0103d2a <best_free_pages+0x96>
c0103cfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d01:	83 c0 04             	add    $0x4,%eax
c0103d04:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c0103d0b:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103d0e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103d11:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103d14:	0f a3 10             	bt     %edx,(%eax)
c0103d17:	19 c0                	sbb    %eax,%eax
c0103d19:	89 45 d8             	mov    %eax,-0x28(%ebp)
    return oldbit != 0;
c0103d1c:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0103d20:	0f 95 c0             	setne  %al
c0103d23:	0f b6 c0             	movzbl %al,%eax
c0103d26:	85 c0                	test   %eax,%eax
c0103d28:	74 24                	je     c0103d4e <best_free_pages+0xba>
c0103d2a:	c7 44 24 0c 44 28 12 	movl   $0xc0122844,0xc(%esp)
c0103d31:	c0 
c0103d32:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0103d39:	c0 
c0103d3a:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0103d41:	00 
c0103d42:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0103d49:	e8 c8 d4 ff ff       	call   c0101216 <__panic>
        p->flags = 0;
c0103d4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d51:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);
c0103d58:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103d5f:	00 
c0103d60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d63:	89 04 24             	mov    %eax,(%esp)
c0103d66:	e8 e1 fb ff ff       	call   c010394c <set_page_ref>

static void
best_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0103d6b:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c0103d6f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103d72:	89 d0                	mov    %edx,%eax
c0103d74:	c1 e0 03             	shl    $0x3,%eax
c0103d77:	01 d0                	add    %edx,%eax
c0103d79:	c1 e0 02             	shl    $0x2,%eax
c0103d7c:	89 c2                	mov    %eax,%edx
c0103d7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d81:	01 d0                	add    %edx,%eax
c0103d83:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103d86:	0f 85 46 ff ff ff    	jne    c0103cd2 <best_free_pages+0x3e>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0103d8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d8f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103d92:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0103d95:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d98:	83 c0 04             	add    $0x4,%eax
c0103d9b:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0103da2:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103da5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103da8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103dab:	0f ab 10             	bts    %edx,(%eax)
c0103dae:	c7 45 cc 54 11 17 c0 	movl   $0xc0171154,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103db5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103db8:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *le = list_next(&free_list);
c0103dbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0103dbe:	e9 08 01 00 00       	jmp    c0103ecb <best_free_pages+0x237>
        p = le2page(le, page_link);
c0103dc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103dc6:	83 e8 10             	sub    $0x10,%eax
c0103dc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103dcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103dcf:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0103dd2:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103dd5:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0103dd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (base + base->property == p) {
c0103ddb:	8b 45 08             	mov    0x8(%ebp),%eax
c0103dde:	8b 50 08             	mov    0x8(%eax),%edx
c0103de1:	89 d0                	mov    %edx,%eax
c0103de3:	c1 e0 03             	shl    $0x3,%eax
c0103de6:	01 d0                	add    %edx,%eax
c0103de8:	c1 e0 02             	shl    $0x2,%eax
c0103deb:	89 c2                	mov    %eax,%edx
c0103ded:	8b 45 08             	mov    0x8(%ebp),%eax
c0103df0:	01 d0                	add    %edx,%eax
c0103df2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103df5:	75 5a                	jne    c0103e51 <best_free_pages+0x1bd>
            base->property += p->property;
c0103df7:	8b 45 08             	mov    0x8(%ebp),%eax
c0103dfa:	8b 50 08             	mov    0x8(%eax),%edx
c0103dfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e00:	8b 40 08             	mov    0x8(%eax),%eax
c0103e03:	01 c2                	add    %eax,%edx
c0103e05:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e08:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(p);
c0103e0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e0e:	83 c0 04             	add    $0x4,%eax
c0103e11:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0103e18:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103e1b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0103e1e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0103e21:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c0103e24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e27:	83 c0 10             	add    $0x10,%eax
c0103e2a:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103e2d:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103e30:	8b 40 04             	mov    0x4(%eax),%eax
c0103e33:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0103e36:	8b 12                	mov    (%edx),%edx
c0103e38:	89 55 b8             	mov    %edx,-0x48(%ebp)
c0103e3b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103e3e:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103e41:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0103e44:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103e47:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103e4a:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0103e4d:	89 10                	mov    %edx,(%eax)
c0103e4f:	eb 7a                	jmp    c0103ecb <best_free_pages+0x237>
        }
        else if (p + p->property == base) {
c0103e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e54:	8b 50 08             	mov    0x8(%eax),%edx
c0103e57:	89 d0                	mov    %edx,%eax
c0103e59:	c1 e0 03             	shl    $0x3,%eax
c0103e5c:	01 d0                	add    %edx,%eax
c0103e5e:	c1 e0 02             	shl    $0x2,%eax
c0103e61:	89 c2                	mov    %eax,%edx
c0103e63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e66:	01 d0                	add    %edx,%eax
c0103e68:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103e6b:	75 5e                	jne    c0103ecb <best_free_pages+0x237>
            p->property += base->property;
c0103e6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e70:	8b 50 08             	mov    0x8(%eax),%edx
c0103e73:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e76:	8b 40 08             	mov    0x8(%eax),%eax
c0103e79:	01 c2                	add    %eax,%edx
c0103e7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e7e:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(base);
c0103e81:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e84:	83 c0 04             	add    $0x4,%eax
c0103e87:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0103e8e:	89 45 ac             	mov    %eax,-0x54(%ebp)
c0103e91:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0103e94:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0103e97:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c0103e9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e9d:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c0103ea0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ea3:	83 c0 10             	add    $0x10,%eax
c0103ea6:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103ea9:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0103eac:	8b 40 04             	mov    0x4(%eax),%eax
c0103eaf:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0103eb2:	8b 12                	mov    (%edx),%edx
c0103eb4:	89 55 a4             	mov    %edx,-0x5c(%ebp)
c0103eb7:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103eba:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0103ebd:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0103ec0:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103ec3:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0103ec6:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0103ec9:	89 10                	mov    %edx,(%eax)
        set_page_ref(p, 0);
    }
    base->property = n;
    SetPageProperty(base);
    list_entry_t *le = list_next(&free_list);
    while (le != &free_list) {
c0103ecb:	81 7d f0 54 11 17 c0 	cmpl   $0xc0171154,-0x10(%ebp)
c0103ed2:	0f 85 eb fe ff ff    	jne    c0103dc3 <best_free_pages+0x12f>
            ClearPageProperty(base);
            base = p;
            list_del(&(p->page_link));
        }
    }
    nr_free += n;
c0103ed8:	8b 15 5c 11 17 c0    	mov    0xc017115c,%edx
c0103ede:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103ee1:	01 d0                	add    %edx,%eax
c0103ee3:	a3 5c 11 17 c0       	mov    %eax,0xc017115c
c0103ee8:	c7 45 9c 54 11 17 c0 	movl   $0xc0171154,-0x64(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103eef:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0103ef2:	8b 40 04             	mov    0x4(%eax),%eax
    le = list_next(&free_list);
c0103ef5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0103ef8:	eb 76                	jmp    c0103f70 <best_free_pages+0x2dc>
        p = le2page(le, page_link);
c0103efa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103efd:	83 e8 10             	sub    $0x10,%eax
c0103f00:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (base + base->property <= p) {
c0103f03:	8b 45 08             	mov    0x8(%ebp),%eax
c0103f06:	8b 50 08             	mov    0x8(%eax),%edx
c0103f09:	89 d0                	mov    %edx,%eax
c0103f0b:	c1 e0 03             	shl    $0x3,%eax
c0103f0e:	01 d0                	add    %edx,%eax
c0103f10:	c1 e0 02             	shl    $0x2,%eax
c0103f13:	89 c2                	mov    %eax,%edx
c0103f15:	8b 45 08             	mov    0x8(%ebp),%eax
c0103f18:	01 d0                	add    %edx,%eax
c0103f1a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103f1d:	77 42                	ja     c0103f61 <best_free_pages+0x2cd>
            assert(base + base->property != p);
c0103f1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103f22:	8b 50 08             	mov    0x8(%eax),%edx
c0103f25:	89 d0                	mov    %edx,%eax
c0103f27:	c1 e0 03             	shl    $0x3,%eax
c0103f2a:	01 d0                	add    %edx,%eax
c0103f2c:	c1 e0 02             	shl    $0x2,%eax
c0103f2f:	89 c2                	mov    %eax,%edx
c0103f31:	8b 45 08             	mov    0x8(%ebp),%eax
c0103f34:	01 d0                	add    %edx,%eax
c0103f36:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103f39:	75 24                	jne    c0103f5f <best_free_pages+0x2cb>
c0103f3b:	c7 44 24 0c 69 28 12 	movl   $0xc0122869,0xc(%esp)
c0103f42:	c0 
c0103f43:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0103f4a:	c0 
c0103f4b:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0103f52:	00 
c0103f53:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0103f5a:	e8 b7 d2 ff ff       	call   c0101216 <__panic>
            break;
c0103f5f:	eb 18                	jmp    c0103f79 <best_free_pages+0x2e5>
c0103f61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f64:	89 45 98             	mov    %eax,-0x68(%ebp)
c0103f67:	8b 45 98             	mov    -0x68(%ebp),%eax
c0103f6a:	8b 40 04             	mov    0x4(%eax),%eax
        }
        le = list_next(le);
c0103f6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
            list_del(&(p->page_link));
        }
    }
    nr_free += n;
    le = list_next(&free_list);
    while (le != &free_list) {
c0103f70:	81 7d f0 54 11 17 c0 	cmpl   $0xc0171154,-0x10(%ebp)
c0103f77:	75 81                	jne    c0103efa <best_free_pages+0x266>
            assert(base + base->property != p);
            break;
        }
        le = list_next(le);
    }
    list_add_before(le, &(base->page_link));
c0103f79:	8b 45 08             	mov    0x8(%ebp),%eax
c0103f7c:	8d 50 10             	lea    0x10(%eax),%edx
c0103f7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f82:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0103f85:	89 55 90             	mov    %edx,-0x70(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103f88:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0103f8b:	8b 00                	mov    (%eax),%eax
c0103f8d:	8b 55 90             	mov    -0x70(%ebp),%edx
c0103f90:	89 55 8c             	mov    %edx,-0x74(%ebp)
c0103f93:	89 45 88             	mov    %eax,-0x78(%ebp)
c0103f96:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0103f99:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103f9c:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0103f9f:	8b 55 8c             	mov    -0x74(%ebp),%edx
c0103fa2:	89 10                	mov    %edx,(%eax)
c0103fa4:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0103fa7:	8b 10                	mov    (%eax),%edx
c0103fa9:	8b 45 88             	mov    -0x78(%ebp),%eax
c0103fac:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103faf:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0103fb2:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0103fb5:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103fb8:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0103fbb:	8b 55 88             	mov    -0x78(%ebp),%edx
c0103fbe:	89 10                	mov    %edx,(%eax)
}
c0103fc0:	c9                   	leave  
c0103fc1:	c3                   	ret    

c0103fc2 <best_nr_free_pages>:



static size_t
best_nr_free_pages(void) {
c0103fc2:	55                   	push   %ebp
c0103fc3:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103fc5:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
}
c0103fca:	5d                   	pop    %ebp
c0103fcb:	c3                   	ret    

c0103fcc <basic_check>:

static void
basic_check(void) {
c0103fcc:	55                   	push   %ebp
c0103fcd:	89 e5                	mov    %esp,%ebp
c0103fcf:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103fd2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103fd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fdc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103fdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103fe2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103fe5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103fec:	e8 6c 85 00 00       	call   c010c55d <alloc_pages>
c0103ff1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103ff4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103ff8:	75 24                	jne    c010401e <basic_check+0x52>
c0103ffa:	c7 44 24 0c 84 28 12 	movl   $0xc0122884,0xc(%esp)
c0104001:	c0 
c0104002:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104009:	c0 
c010400a:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0104011:	00 
c0104012:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104019:	e8 f8 d1 ff ff       	call   c0101216 <__panic>
    assert((p1 = alloc_page()) != NULL);
c010401e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104025:	e8 33 85 00 00       	call   c010c55d <alloc_pages>
c010402a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010402d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104031:	75 24                	jne    c0104057 <basic_check+0x8b>
c0104033:	c7 44 24 0c a0 28 12 	movl   $0xc01228a0,0xc(%esp)
c010403a:	c0 
c010403b:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104042:	c0 
c0104043:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
c010404a:	00 
c010404b:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104052:	e8 bf d1 ff ff       	call   c0101216 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0104057:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010405e:	e8 fa 84 00 00       	call   c010c55d <alloc_pages>
c0104063:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104066:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010406a:	75 24                	jne    c0104090 <basic_check+0xc4>
c010406c:	c7 44 24 0c bc 28 12 	movl   $0xc01228bc,0xc(%esp)
c0104073:	c0 
c0104074:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c010407b:	c0 
c010407c:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c0104083:	00 
c0104084:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c010408b:	e8 86 d1 ff ff       	call   c0101216 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0104090:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104093:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104096:	74 10                	je     c01040a8 <basic_check+0xdc>
c0104098:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010409b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010409e:	74 08                	je     c01040a8 <basic_check+0xdc>
c01040a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01040a3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01040a6:	75 24                	jne    c01040cc <basic_check+0x100>
c01040a8:	c7 44 24 0c d8 28 12 	movl   $0xc01228d8,0xc(%esp)
c01040af:	c0 
c01040b0:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c01040b7:	c0 
c01040b8:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c01040bf:	00 
c01040c0:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c01040c7:	e8 4a d1 ff ff       	call   c0101216 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c01040cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01040cf:	89 04 24             	mov    %eax,(%esp)
c01040d2:	e8 6b f8 ff ff       	call   c0103942 <page_ref>
c01040d7:	85 c0                	test   %eax,%eax
c01040d9:	75 1e                	jne    c01040f9 <basic_check+0x12d>
c01040db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01040de:	89 04 24             	mov    %eax,(%esp)
c01040e1:	e8 5c f8 ff ff       	call   c0103942 <page_ref>
c01040e6:	85 c0                	test   %eax,%eax
c01040e8:	75 0f                	jne    c01040f9 <basic_check+0x12d>
c01040ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01040ed:	89 04 24             	mov    %eax,(%esp)
c01040f0:	e8 4d f8 ff ff       	call   c0103942 <page_ref>
c01040f5:	85 c0                	test   %eax,%eax
c01040f7:	74 24                	je     c010411d <basic_check+0x151>
c01040f9:	c7 44 24 0c fc 28 12 	movl   $0xc01228fc,0xc(%esp)
c0104100:	c0 
c0104101:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104108:	c0 
c0104109:	c7 44 24 04 9d 00 00 	movl   $0x9d,0x4(%esp)
c0104110:	00 
c0104111:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104118:	e8 f9 d0 ff ff       	call   c0101216 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c010411d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104120:	89 04 24             	mov    %eax,(%esp)
c0104123:	e8 04 f8 ff ff       	call   c010392c <page2pa>
c0104128:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c010412e:	c1 e2 0c             	shl    $0xc,%edx
c0104131:	39 d0                	cmp    %edx,%eax
c0104133:	72 24                	jb     c0104159 <basic_check+0x18d>
c0104135:	c7 44 24 0c 38 29 12 	movl   $0xc0122938,0xc(%esp)
c010413c:	c0 
c010413d:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104144:	c0 
c0104145:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c010414c:	00 
c010414d:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104154:	e8 bd d0 ff ff       	call   c0101216 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0104159:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010415c:	89 04 24             	mov    %eax,(%esp)
c010415f:	e8 c8 f7 ff ff       	call   c010392c <page2pa>
c0104164:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c010416a:	c1 e2 0c             	shl    $0xc,%edx
c010416d:	39 d0                	cmp    %edx,%eax
c010416f:	72 24                	jb     c0104195 <basic_check+0x1c9>
c0104171:	c7 44 24 0c 55 29 12 	movl   $0xc0122955,0xc(%esp)
c0104178:	c0 
c0104179:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104180:	c0 
c0104181:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0104188:	00 
c0104189:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104190:	e8 81 d0 ff ff       	call   c0101216 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0104195:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104198:	89 04 24             	mov    %eax,(%esp)
c010419b:	e8 8c f7 ff ff       	call   c010392c <page2pa>
c01041a0:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c01041a6:	c1 e2 0c             	shl    $0xc,%edx
c01041a9:	39 d0                	cmp    %edx,%eax
c01041ab:	72 24                	jb     c01041d1 <basic_check+0x205>
c01041ad:	c7 44 24 0c 72 29 12 	movl   $0xc0122972,0xc(%esp)
c01041b4:	c0 
c01041b5:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c01041bc:	c0 
c01041bd:	c7 44 24 04 a1 00 00 	movl   $0xa1,0x4(%esp)
c01041c4:	00 
c01041c5:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c01041cc:	e8 45 d0 ff ff       	call   c0101216 <__panic>

    list_entry_t free_list_store = free_list;
c01041d1:	a1 54 11 17 c0       	mov    0xc0171154,%eax
c01041d6:	8b 15 58 11 17 c0    	mov    0xc0171158,%edx
c01041dc:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01041df:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01041e2:	c7 45 e0 54 11 17 c0 	movl   $0xc0171154,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01041e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01041ec:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01041ef:	89 50 04             	mov    %edx,0x4(%eax)
c01041f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01041f5:	8b 50 04             	mov    0x4(%eax),%edx
c01041f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01041fb:	89 10                	mov    %edx,(%eax)
c01041fd:	c7 45 dc 54 11 17 c0 	movl   $0xc0171154,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0104204:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104207:	8b 40 04             	mov    0x4(%eax),%eax
c010420a:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010420d:	0f 94 c0             	sete   %al
c0104210:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0104213:	85 c0                	test   %eax,%eax
c0104215:	75 24                	jne    c010423b <basic_check+0x26f>
c0104217:	c7 44 24 0c 8f 29 12 	movl   $0xc012298f,0xc(%esp)
c010421e:	c0 
c010421f:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104226:	c0 
c0104227:	c7 44 24 04 a5 00 00 	movl   $0xa5,0x4(%esp)
c010422e:	00 
c010422f:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104236:	e8 db cf ff ff       	call   c0101216 <__panic>

    unsigned int nr_free_store = nr_free;
c010423b:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0104240:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0104243:	c7 05 5c 11 17 c0 00 	movl   $0x0,0xc017115c
c010424a:	00 00 00 

    assert(alloc_page() == NULL);
c010424d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104254:	e8 04 83 00 00       	call   c010c55d <alloc_pages>
c0104259:	85 c0                	test   %eax,%eax
c010425b:	74 24                	je     c0104281 <basic_check+0x2b5>
c010425d:	c7 44 24 0c a6 29 12 	movl   $0xc01229a6,0xc(%esp)
c0104264:	c0 
c0104265:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c010426c:	c0 
c010426d:	c7 44 24 04 aa 00 00 	movl   $0xaa,0x4(%esp)
c0104274:	00 
c0104275:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c010427c:	e8 95 cf ff ff       	call   c0101216 <__panic>

    free_page(p0);
c0104281:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104288:	00 
c0104289:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010428c:	89 04 24             	mov    %eax,(%esp)
c010428f:	e8 34 83 00 00       	call   c010c5c8 <free_pages>
    free_page(p1);
c0104294:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010429b:	00 
c010429c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010429f:	89 04 24             	mov    %eax,(%esp)
c01042a2:	e8 21 83 00 00       	call   c010c5c8 <free_pages>
    free_page(p2);
c01042a7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01042ae:	00 
c01042af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01042b2:	89 04 24             	mov    %eax,(%esp)
c01042b5:	e8 0e 83 00 00       	call   c010c5c8 <free_pages>
    assert(nr_free == 3);
c01042ba:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c01042bf:	83 f8 03             	cmp    $0x3,%eax
c01042c2:	74 24                	je     c01042e8 <basic_check+0x31c>
c01042c4:	c7 44 24 0c bb 29 12 	movl   $0xc01229bb,0xc(%esp)
c01042cb:	c0 
c01042cc:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c01042d3:	c0 
c01042d4:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c01042db:	00 
c01042dc:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c01042e3:	e8 2e cf ff ff       	call   c0101216 <__panic>

    assert((p0 = alloc_page()) != NULL);
c01042e8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01042ef:	e8 69 82 00 00       	call   c010c55d <alloc_pages>
c01042f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01042f7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01042fb:	75 24                	jne    c0104321 <basic_check+0x355>
c01042fd:	c7 44 24 0c 84 28 12 	movl   $0xc0122884,0xc(%esp)
c0104304:	c0 
c0104305:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c010430c:	c0 
c010430d:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0104314:	00 
c0104315:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c010431c:	e8 f5 ce ff ff       	call   c0101216 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0104321:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104328:	e8 30 82 00 00       	call   c010c55d <alloc_pages>
c010432d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104330:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104334:	75 24                	jne    c010435a <basic_check+0x38e>
c0104336:	c7 44 24 0c a0 28 12 	movl   $0xc01228a0,0xc(%esp)
c010433d:	c0 
c010433e:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104345:	c0 
c0104346:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c010434d:	00 
c010434e:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104355:	e8 bc ce ff ff       	call   c0101216 <__panic>
    assert((p2 = alloc_page()) != NULL);
c010435a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104361:	e8 f7 81 00 00       	call   c010c55d <alloc_pages>
c0104366:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104369:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010436d:	75 24                	jne    c0104393 <basic_check+0x3c7>
c010436f:	c7 44 24 0c bc 28 12 	movl   $0xc01228bc,0xc(%esp)
c0104376:	c0 
c0104377:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c010437e:	c0 
c010437f:	c7 44 24 04 b3 00 00 	movl   $0xb3,0x4(%esp)
c0104386:	00 
c0104387:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c010438e:	e8 83 ce ff ff       	call   c0101216 <__panic>

    assert(alloc_page() == NULL);
c0104393:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010439a:	e8 be 81 00 00       	call   c010c55d <alloc_pages>
c010439f:	85 c0                	test   %eax,%eax
c01043a1:	74 24                	je     c01043c7 <basic_check+0x3fb>
c01043a3:	c7 44 24 0c a6 29 12 	movl   $0xc01229a6,0xc(%esp)
c01043aa:	c0 
c01043ab:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c01043b2:	c0 
c01043b3:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c01043ba:	00 
c01043bb:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c01043c2:	e8 4f ce ff ff       	call   c0101216 <__panic>

    free_page(p0);
c01043c7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01043ce:	00 
c01043cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01043d2:	89 04 24             	mov    %eax,(%esp)
c01043d5:	e8 ee 81 00 00       	call   c010c5c8 <free_pages>
c01043da:	c7 45 d8 54 11 17 c0 	movl   $0xc0171154,-0x28(%ebp)
c01043e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01043e4:	8b 40 04             	mov    0x4(%eax),%eax
c01043e7:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c01043ea:	0f 94 c0             	sete   %al
c01043ed:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c01043f0:	85 c0                	test   %eax,%eax
c01043f2:	74 24                	je     c0104418 <basic_check+0x44c>
c01043f4:	c7 44 24 0c c8 29 12 	movl   $0xc01229c8,0xc(%esp)
c01043fb:	c0 
c01043fc:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104403:	c0 
c0104404:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c010440b:	00 
c010440c:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104413:	e8 fe cd ff ff       	call   c0101216 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0104418:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010441f:	e8 39 81 00 00       	call   c010c55d <alloc_pages>
c0104424:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104427:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010442a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010442d:	74 24                	je     c0104453 <basic_check+0x487>
c010442f:	c7 44 24 0c e0 29 12 	movl   $0xc01229e0,0xc(%esp)
c0104436:	c0 
c0104437:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c010443e:	c0 
c010443f:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0104446:	00 
c0104447:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c010444e:	e8 c3 cd ff ff       	call   c0101216 <__panic>
    assert(alloc_page() == NULL);
c0104453:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010445a:	e8 fe 80 00 00       	call   c010c55d <alloc_pages>
c010445f:	85 c0                	test   %eax,%eax
c0104461:	74 24                	je     c0104487 <basic_check+0x4bb>
c0104463:	c7 44 24 0c a6 29 12 	movl   $0xc01229a6,0xc(%esp)
c010446a:	c0 
c010446b:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104472:	c0 
c0104473:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c010447a:	00 
c010447b:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104482:	e8 8f cd ff ff       	call   c0101216 <__panic>

    assert(nr_free == 0);
c0104487:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010448c:	85 c0                	test   %eax,%eax
c010448e:	74 24                	je     c01044b4 <basic_check+0x4e8>
c0104490:	c7 44 24 0c f9 29 12 	movl   $0xc01229f9,0xc(%esp)
c0104497:	c0 
c0104498:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c010449f:	c0 
c01044a0:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c01044a7:	00 
c01044a8:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c01044af:	e8 62 cd ff ff       	call   c0101216 <__panic>
    free_list = free_list_store;
c01044b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01044b7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01044ba:	a3 54 11 17 c0       	mov    %eax,0xc0171154
c01044bf:	89 15 58 11 17 c0    	mov    %edx,0xc0171158
    nr_free = nr_free_store;
c01044c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01044c8:	a3 5c 11 17 c0       	mov    %eax,0xc017115c

    free_page(p);
c01044cd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01044d4:	00 
c01044d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044d8:	89 04 24             	mov    %eax,(%esp)
c01044db:	e8 e8 80 00 00       	call   c010c5c8 <free_pages>
    free_page(p1);
c01044e0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01044e7:	00 
c01044e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01044eb:	89 04 24             	mov    %eax,(%esp)
c01044ee:	e8 d5 80 00 00       	call   c010c5c8 <free_pages>
    free_page(p2);
c01044f3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01044fa:	00 
c01044fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01044fe:	89 04 24             	mov    %eax,(%esp)
c0104501:	e8 c2 80 00 00       	call   c010c5c8 <free_pages>
}
c0104506:	c9                   	leave  
c0104507:	c3                   	ret    

c0104508 <best_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, best_check functions!
static void
best_check(void) {
c0104508:	55                   	push   %ebp
c0104509:	89 e5                	mov    %esp,%ebp
c010450b:	53                   	push   %ebx
c010450c:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0104512:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104519:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0104520:	c7 45 ec 54 11 17 c0 	movl   $0xc0171154,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104527:	eb 6b                	jmp    c0104594 <best_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0104529:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010452c:	83 e8 10             	sub    $0x10,%eax
c010452f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0104532:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104535:	83 c0 04             	add    $0x4,%eax
c0104538:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c010453f:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104542:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104545:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104548:	0f a3 10             	bt     %edx,(%eax)
c010454b:	19 c0                	sbb    %eax,%eax
c010454d:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c0104550:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0104554:	0f 95 c0             	setne  %al
c0104557:	0f b6 c0             	movzbl %al,%eax
c010455a:	85 c0                	test   %eax,%eax
c010455c:	75 24                	jne    c0104582 <best_check+0x7a>
c010455e:	c7 44 24 0c 06 2a 12 	movl   $0xc0122a06,0xc(%esp)
c0104565:	c0 
c0104566:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c010456d:	c0 
c010456e:	c7 44 24 04 cf 00 00 	movl   $0xcf,0x4(%esp)
c0104575:	00 
c0104576:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c010457d:	e8 94 cc ff ff       	call   c0101216 <__panic>
        count ++, total += p->property;
c0104582:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104586:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104589:	8b 50 08             	mov    0x8(%eax),%edx
c010458c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010458f:	01 d0                	add    %edx,%eax
c0104591:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104594:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104597:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010459a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010459d:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, best_check functions!
static void
best_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01045a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01045a3:	81 7d ec 54 11 17 c0 	cmpl   $0xc0171154,-0x14(%ebp)
c01045aa:	0f 85 79 ff ff ff    	jne    c0104529 <best_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c01045b0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01045b3:	e8 42 80 00 00       	call   c010c5fa <nr_free_pages>
c01045b8:	39 c3                	cmp    %eax,%ebx
c01045ba:	74 24                	je     c01045e0 <best_check+0xd8>
c01045bc:	c7 44 24 0c 16 2a 12 	movl   $0xc0122a16,0xc(%esp)
c01045c3:	c0 
c01045c4:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c01045cb:	c0 
c01045cc:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
c01045d3:	00 
c01045d4:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c01045db:	e8 36 cc ff ff       	call   c0101216 <__panic>

    basic_check();
c01045e0:	e8 e7 f9 ff ff       	call   c0103fcc <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c01045e5:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c01045ec:	e8 6c 7f 00 00       	call   c010c55d <alloc_pages>
c01045f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c01045f4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01045f8:	75 24                	jne    c010461e <best_check+0x116>
c01045fa:	c7 44 24 0c 2f 2a 12 	movl   $0xc0122a2f,0xc(%esp)
c0104601:	c0 
c0104602:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104609:	c0 
c010460a:	c7 44 24 04 d7 00 00 	movl   $0xd7,0x4(%esp)
c0104611:	00 
c0104612:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104619:	e8 f8 cb ff ff       	call   c0101216 <__panic>
    assert(!PageProperty(p0));
c010461e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104621:	83 c0 04             	add    $0x4,%eax
c0104624:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c010462b:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010462e:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104631:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104634:	0f a3 10             	bt     %edx,(%eax)
c0104637:	19 c0                	sbb    %eax,%eax
c0104639:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c010463c:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0104640:	0f 95 c0             	setne  %al
c0104643:	0f b6 c0             	movzbl %al,%eax
c0104646:	85 c0                	test   %eax,%eax
c0104648:	74 24                	je     c010466e <best_check+0x166>
c010464a:	c7 44 24 0c 3a 2a 12 	movl   $0xc0122a3a,0xc(%esp)
c0104651:	c0 
c0104652:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104659:	c0 
c010465a:	c7 44 24 04 d8 00 00 	movl   $0xd8,0x4(%esp)
c0104661:	00 
c0104662:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104669:	e8 a8 cb ff ff       	call   c0101216 <__panic>

    list_entry_t free_list_store = free_list;
c010466e:	a1 54 11 17 c0       	mov    0xc0171154,%eax
c0104673:	8b 15 58 11 17 c0    	mov    0xc0171158,%edx
c0104679:	89 45 80             	mov    %eax,-0x80(%ebp)
c010467c:	89 55 84             	mov    %edx,-0x7c(%ebp)
c010467f:	c7 45 b4 54 11 17 c0 	movl   $0xc0171154,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104686:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104689:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010468c:	89 50 04             	mov    %edx,0x4(%eax)
c010468f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104692:	8b 50 04             	mov    0x4(%eax),%edx
c0104695:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104698:	89 10                	mov    %edx,(%eax)
c010469a:	c7 45 b0 54 11 17 c0 	movl   $0xc0171154,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01046a1:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01046a4:	8b 40 04             	mov    0x4(%eax),%eax
c01046a7:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c01046aa:	0f 94 c0             	sete   %al
c01046ad:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01046b0:	85 c0                	test   %eax,%eax
c01046b2:	75 24                	jne    c01046d8 <best_check+0x1d0>
c01046b4:	c7 44 24 0c 8f 29 12 	movl   $0xc012298f,0xc(%esp)
c01046bb:	c0 
c01046bc:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c01046c3:	c0 
c01046c4:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c01046cb:	00 
c01046cc:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c01046d3:	e8 3e cb ff ff       	call   c0101216 <__panic>
    assert(alloc_page() == NULL);
c01046d8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01046df:	e8 79 7e 00 00       	call   c010c55d <alloc_pages>
c01046e4:	85 c0                	test   %eax,%eax
c01046e6:	74 24                	je     c010470c <best_check+0x204>
c01046e8:	c7 44 24 0c a6 29 12 	movl   $0xc01229a6,0xc(%esp)
c01046ef:	c0 
c01046f0:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c01046f7:	c0 
c01046f8:	c7 44 24 04 dd 00 00 	movl   $0xdd,0x4(%esp)
c01046ff:	00 
c0104700:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104707:	e8 0a cb ff ff       	call   c0101216 <__panic>

    unsigned int nr_free_store = nr_free;
c010470c:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0104711:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0104714:	c7 05 5c 11 17 c0 00 	movl   $0x0,0xc017115c
c010471b:	00 00 00 

    free_pages(p0 + 2, 3);
c010471e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104721:	83 c0 48             	add    $0x48,%eax
c0104724:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010472b:	00 
c010472c:	89 04 24             	mov    %eax,(%esp)
c010472f:	e8 94 7e 00 00       	call   c010c5c8 <free_pages>
    assert(alloc_pages(4) == NULL);
c0104734:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010473b:	e8 1d 7e 00 00       	call   c010c55d <alloc_pages>
c0104740:	85 c0                	test   %eax,%eax
c0104742:	74 24                	je     c0104768 <best_check+0x260>
c0104744:	c7 44 24 0c 4c 2a 12 	movl   $0xc0122a4c,0xc(%esp)
c010474b:	c0 
c010474c:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104753:	c0 
c0104754:	c7 44 24 04 e3 00 00 	movl   $0xe3,0x4(%esp)
c010475b:	00 
c010475c:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104763:	e8 ae ca ff ff       	call   c0101216 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0104768:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010476b:	83 c0 48             	add    $0x48,%eax
c010476e:	83 c0 04             	add    $0x4,%eax
c0104771:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c0104778:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010477b:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010477e:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0104781:	0f a3 10             	bt     %edx,(%eax)
c0104784:	19 c0                	sbb    %eax,%eax
c0104786:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c0104789:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c010478d:	0f 95 c0             	setne  %al
c0104790:	0f b6 c0             	movzbl %al,%eax
c0104793:	85 c0                	test   %eax,%eax
c0104795:	74 0e                	je     c01047a5 <best_check+0x29d>
c0104797:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010479a:	83 c0 48             	add    $0x48,%eax
c010479d:	8b 40 08             	mov    0x8(%eax),%eax
c01047a0:	83 f8 03             	cmp    $0x3,%eax
c01047a3:	74 24                	je     c01047c9 <best_check+0x2c1>
c01047a5:	c7 44 24 0c 64 2a 12 	movl   $0xc0122a64,0xc(%esp)
c01047ac:	c0 
c01047ad:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c01047b4:	c0 
c01047b5:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c01047bc:	00 
c01047bd:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c01047c4:	e8 4d ca ff ff       	call   c0101216 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c01047c9:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c01047d0:	e8 88 7d 00 00       	call   c010c55d <alloc_pages>
c01047d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01047d8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01047dc:	75 24                	jne    c0104802 <best_check+0x2fa>
c01047de:	c7 44 24 0c 90 2a 12 	movl   $0xc0122a90,0xc(%esp)
c01047e5:	c0 
c01047e6:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c01047ed:	c0 
c01047ee:	c7 44 24 04 e5 00 00 	movl   $0xe5,0x4(%esp)
c01047f5:	00 
c01047f6:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c01047fd:	e8 14 ca ff ff       	call   c0101216 <__panic>
    assert(alloc_page() == NULL);
c0104802:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104809:	e8 4f 7d 00 00       	call   c010c55d <alloc_pages>
c010480e:	85 c0                	test   %eax,%eax
c0104810:	74 24                	je     c0104836 <best_check+0x32e>
c0104812:	c7 44 24 0c a6 29 12 	movl   $0xc01229a6,0xc(%esp)
c0104819:	c0 
c010481a:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104821:	c0 
c0104822:	c7 44 24 04 e6 00 00 	movl   $0xe6,0x4(%esp)
c0104829:	00 
c010482a:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104831:	e8 e0 c9 ff ff       	call   c0101216 <__panic>
    assert(p0 + 2 == p1);
c0104836:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104839:	83 c0 48             	add    $0x48,%eax
c010483c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010483f:	74 24                	je     c0104865 <best_check+0x35d>
c0104841:	c7 44 24 0c ae 2a 12 	movl   $0xc0122aae,0xc(%esp)
c0104848:	c0 
c0104849:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104850:	c0 
c0104851:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
c0104858:	00 
c0104859:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104860:	e8 b1 c9 ff ff       	call   c0101216 <__panic>

    p2 = p0 + 1;
c0104865:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104868:	83 c0 24             	add    $0x24,%eax
c010486b:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c010486e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104875:	00 
c0104876:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104879:	89 04 24             	mov    %eax,(%esp)
c010487c:	e8 47 7d 00 00       	call   c010c5c8 <free_pages>
    free_pages(p1, 3);
c0104881:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0104888:	00 
c0104889:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010488c:	89 04 24             	mov    %eax,(%esp)
c010488f:	e8 34 7d 00 00       	call   c010c5c8 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c0104894:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104897:	83 c0 04             	add    $0x4,%eax
c010489a:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c01048a1:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01048a4:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01048a7:	8b 55 a0             	mov    -0x60(%ebp),%edx
c01048aa:	0f a3 10             	bt     %edx,(%eax)
c01048ad:	19 c0                	sbb    %eax,%eax
c01048af:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c01048b2:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c01048b6:	0f 95 c0             	setne  %al
c01048b9:	0f b6 c0             	movzbl %al,%eax
c01048bc:	85 c0                	test   %eax,%eax
c01048be:	74 0b                	je     c01048cb <best_check+0x3c3>
c01048c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01048c3:	8b 40 08             	mov    0x8(%eax),%eax
c01048c6:	83 f8 01             	cmp    $0x1,%eax
c01048c9:	74 24                	je     c01048ef <best_check+0x3e7>
c01048cb:	c7 44 24 0c bc 2a 12 	movl   $0xc0122abc,0xc(%esp)
c01048d2:	c0 
c01048d3:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c01048da:	c0 
c01048db:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
c01048e2:	00 
c01048e3:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c01048ea:	e8 27 c9 ff ff       	call   c0101216 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c01048ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01048f2:	83 c0 04             	add    $0x4,%eax
c01048f5:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c01048fc:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01048ff:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104902:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0104905:	0f a3 10             	bt     %edx,(%eax)
c0104908:	19 c0                	sbb    %eax,%eax
c010490a:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c010490d:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0104911:	0f 95 c0             	setne  %al
c0104914:	0f b6 c0             	movzbl %al,%eax
c0104917:	85 c0                	test   %eax,%eax
c0104919:	74 0b                	je     c0104926 <best_check+0x41e>
c010491b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010491e:	8b 40 08             	mov    0x8(%eax),%eax
c0104921:	83 f8 03             	cmp    $0x3,%eax
c0104924:	74 24                	je     c010494a <best_check+0x442>
c0104926:	c7 44 24 0c e4 2a 12 	movl   $0xc0122ae4,0xc(%esp)
c010492d:	c0 
c010492e:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104935:	c0 
c0104936:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c010493d:	00 
c010493e:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104945:	e8 cc c8 ff ff       	call   c0101216 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c010494a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104951:	e8 07 7c 00 00       	call   c010c55d <alloc_pages>
c0104956:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104959:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010495c:	83 e8 24             	sub    $0x24,%eax
c010495f:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0104962:	74 24                	je     c0104988 <best_check+0x480>
c0104964:	c7 44 24 0c 0a 2b 12 	movl   $0xc0122b0a,0xc(%esp)
c010496b:	c0 
c010496c:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104973:	c0 
c0104974:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c010497b:	00 
c010497c:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104983:	e8 8e c8 ff ff       	call   c0101216 <__panic>
    free_page(p0);
c0104988:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010498f:	00 
c0104990:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104993:	89 04 24             	mov    %eax,(%esp)
c0104996:	e8 2d 7c 00 00       	call   c010c5c8 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c010499b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01049a2:	e8 b6 7b 00 00       	call   c010c55d <alloc_pages>
c01049a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01049aa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01049ad:	83 c0 24             	add    $0x24,%eax
c01049b0:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01049b3:	74 24                	je     c01049d9 <best_check+0x4d1>
c01049b5:	c7 44 24 0c 28 2b 12 	movl   $0xc0122b28,0xc(%esp)
c01049bc:	c0 
c01049bd:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c01049c4:	c0 
c01049c5:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
c01049cc:	00 
c01049cd:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c01049d4:	e8 3d c8 ff ff       	call   c0101216 <__panic>

    free_pages(p0, 2);
c01049d9:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c01049e0:	00 
c01049e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049e4:	89 04 24             	mov    %eax,(%esp)
c01049e7:	e8 dc 7b 00 00       	call   c010c5c8 <free_pages>
    free_page(p2);
c01049ec:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01049f3:	00 
c01049f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01049f7:	89 04 24             	mov    %eax,(%esp)
c01049fa:	e8 c9 7b 00 00       	call   c010c5c8 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c01049ff:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104a06:	e8 52 7b 00 00       	call   c010c55d <alloc_pages>
c0104a0b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104a0e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104a12:	75 24                	jne    c0104a38 <best_check+0x530>
c0104a14:	c7 44 24 0c 48 2b 12 	movl   $0xc0122b48,0xc(%esp)
c0104a1b:	c0 
c0104a1c:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104a23:	c0 
c0104a24:	c7 44 24 04 f6 00 00 	movl   $0xf6,0x4(%esp)
c0104a2b:	00 
c0104a2c:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104a33:	e8 de c7 ff ff       	call   c0101216 <__panic>
    assert(alloc_page() == NULL);
c0104a38:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104a3f:	e8 19 7b 00 00       	call   c010c55d <alloc_pages>
c0104a44:	85 c0                	test   %eax,%eax
c0104a46:	74 24                	je     c0104a6c <best_check+0x564>
c0104a48:	c7 44 24 0c a6 29 12 	movl   $0xc01229a6,0xc(%esp)
c0104a4f:	c0 
c0104a50:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104a57:	c0 
c0104a58:	c7 44 24 04 f7 00 00 	movl   $0xf7,0x4(%esp)
c0104a5f:	00 
c0104a60:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104a67:	e8 aa c7 ff ff       	call   c0101216 <__panic>

    assert(nr_free == 0);
c0104a6c:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0104a71:	85 c0                	test   %eax,%eax
c0104a73:	74 24                	je     c0104a99 <best_check+0x591>
c0104a75:	c7 44 24 0c f9 29 12 	movl   $0xc01229f9,0xc(%esp)
c0104a7c:	c0 
c0104a7d:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104a84:	c0 
c0104a85:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c0104a8c:	00 
c0104a8d:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104a94:	e8 7d c7 ff ff       	call   c0101216 <__panic>
    nr_free = nr_free_store;
c0104a99:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104a9c:	a3 5c 11 17 c0       	mov    %eax,0xc017115c

    free_list = free_list_store;
c0104aa1:	8b 45 80             	mov    -0x80(%ebp),%eax
c0104aa4:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0104aa7:	a3 54 11 17 c0       	mov    %eax,0xc0171154
c0104aac:	89 15 58 11 17 c0    	mov    %edx,0xc0171158
    free_pages(p0, 5);
c0104ab2:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0104ab9:	00 
c0104aba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104abd:	89 04 24             	mov    %eax,(%esp)
c0104ac0:	e8 03 7b 00 00       	call   c010c5c8 <free_pages>

    le = &free_list;
c0104ac5:	c7 45 ec 54 11 17 c0 	movl   $0xc0171154,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104acc:	eb 1d                	jmp    c0104aeb <best_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c0104ace:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ad1:	83 e8 10             	sub    $0x10,%eax
c0104ad4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0104ad7:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104adb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104ade:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104ae1:	8b 40 08             	mov    0x8(%eax),%eax
c0104ae4:	29 c2                	sub    %eax,%edx
c0104ae6:	89 d0                	mov    %edx,%eax
c0104ae8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104aeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104aee:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104af1:	8b 45 88             	mov    -0x78(%ebp),%eax
c0104af4:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104af7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104afa:	81 7d ec 54 11 17 c0 	cmpl   $0xc0171154,-0x14(%ebp)
c0104b01:	75 cb                	jne    c0104ace <best_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0104b03:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104b07:	74 24                	je     c0104b2d <best_check+0x625>
c0104b09:	c7 44 24 0c 66 2b 12 	movl   $0xc0122b66,0xc(%esp)
c0104b10:	c0 
c0104b11:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104b18:	c0 
c0104b19:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c0104b20:	00 
c0104b21:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104b28:	e8 e9 c6 ff ff       	call   c0101216 <__panic>
    assert(total == 0);
c0104b2d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104b31:	74 24                	je     c0104b57 <best_check+0x64f>
c0104b33:	c7 44 24 0c 71 2b 12 	movl   $0xc0122b71,0xc(%esp)
c0104b3a:	c0 
c0104b3b:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104b42:	c0 
c0104b43:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c0104b4a:	00 
c0104b4b:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104b52:	e8 bf c6 ff ff       	call   c0101216 <__panic>
}
c0104b57:	81 c4 94 00 00 00    	add    $0x94,%esp
c0104b5d:	5b                   	pop    %ebx
c0104b5e:	5d                   	pop    %ebp
c0104b5f:	c3                   	ret    

c0104b60 <bestfit_user_check>:

static void
bestfit_user_check(void){
c0104b60:	55                   	push   %ebp
c0104b61:	89 e5                	mov    %esp,%ebp
c0104b63:	83 ec 38             	sub    $0x38,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0104b66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104b6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b70:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104b73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b76:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0104b79:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104b80:	e8 d8 79 00 00       	call   c010c55d <alloc_pages>
c0104b85:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104b88:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104b8c:	75 24                	jne    c0104bb2 <bestfit_user_check+0x52>
c0104b8e:	c7 44 24 0c 84 28 12 	movl   $0xc0122884,0xc(%esp)
c0104b95:	c0 
c0104b96:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104b9d:	c0 
c0104b9e:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c0104ba5:	00 
c0104ba6:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104bad:	e8 64 c6 ff ff       	call   c0101216 <__panic>
    cprintf("assert((p0 = alloc_page()) != NULL)\n");
c0104bb2:	c7 04 24 7c 2b 12 c0 	movl   $0xc0122b7c,(%esp)
c0104bb9:	e8 35 b8 ff ff       	call   c01003f3 <cprintf>
    assert((p1 = alloc_page()) != NULL);	
c0104bbe:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104bc5:	e8 93 79 00 00       	call   c010c55d <alloc_pages>
c0104bca:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104bcd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104bd1:	75 24                	jne    c0104bf7 <bestfit_user_check+0x97>
c0104bd3:	c7 44 24 0c a0 28 12 	movl   $0xc01228a0,0xc(%esp)
c0104bda:	c0 
c0104bdb:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104be2:	c0 
c0104be3:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c0104bea:	00 
c0104beb:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104bf2:	e8 1f c6 ff ff       	call   c0101216 <__panic>
    cprintf("assert((p1 = alloc_page()) != NULL)\n");
c0104bf7:	c7 04 24 a4 2b 12 c0 	movl   $0xc0122ba4,(%esp)
c0104bfe:	e8 f0 b7 ff ff       	call   c01003f3 <cprintf>
    assert((p2 = alloc_page()) != NULL);
c0104c03:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104c0a:	e8 4e 79 00 00       	call   c010c55d <alloc_pages>
c0104c0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c12:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104c16:	75 24                	jne    c0104c3c <bestfit_user_check+0xdc>
c0104c18:	c7 44 24 0c bc 28 12 	movl   $0xc01228bc,0xc(%esp)
c0104c1f:	c0 
c0104c20:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104c27:	c0 
c0104c28:	c7 44 24 04 10 01 00 	movl   $0x110,0x4(%esp)
c0104c2f:	00 
c0104c30:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104c37:	e8 da c5 ff ff       	call   c0101216 <__panic>
    cprintf("assert((p2 = alloc_page()) != NULL)\n");
c0104c3c:	c7 04 24 cc 2b 12 c0 	movl   $0xc0122bcc,(%esp)
c0104c43:	e8 ab b7 ff ff       	call   c01003f3 <cprintf>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0104c48:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c4b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104c4e:	74 10                	je     c0104c60 <bestfit_user_check+0x100>
c0104c50:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c53:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104c56:	74 08                	je     c0104c60 <bestfit_user_check+0x100>
c0104c58:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c5b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104c5e:	75 24                	jne    c0104c84 <bestfit_user_check+0x124>
c0104c60:	c7 44 24 0c d8 28 12 	movl   $0xc01228d8,0xc(%esp)
c0104c67:	c0 
c0104c68:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104c6f:	c0 
c0104c70:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c0104c77:	00 
c0104c78:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104c7f:	e8 92 c5 ff ff       	call   c0101216 <__panic>
    cprintf("assert(p0 != p1 && p0 != p2 && p1 != p2)\n");
c0104c84:	c7 04 24 f4 2b 12 c0 	movl   $0xc0122bf4,(%esp)
c0104c8b:	e8 63 b7 ff ff       	call   c01003f3 <cprintf>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0104c90:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c93:	89 04 24             	mov    %eax,(%esp)
c0104c96:	e8 a7 ec ff ff       	call   c0103942 <page_ref>
c0104c9b:	85 c0                	test   %eax,%eax
c0104c9d:	75 1e                	jne    c0104cbd <bestfit_user_check+0x15d>
c0104c9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ca2:	89 04 24             	mov    %eax,(%esp)
c0104ca5:	e8 98 ec ff ff       	call   c0103942 <page_ref>
c0104caa:	85 c0                	test   %eax,%eax
c0104cac:	75 0f                	jne    c0104cbd <bestfit_user_check+0x15d>
c0104cae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cb1:	89 04 24             	mov    %eax,(%esp)
c0104cb4:	e8 89 ec ff ff       	call   c0103942 <page_ref>
c0104cb9:	85 c0                	test   %eax,%eax
c0104cbb:	74 24                	je     c0104ce1 <bestfit_user_check+0x181>
c0104cbd:	c7 44 24 0c fc 28 12 	movl   $0xc01228fc,0xc(%esp)
c0104cc4:	c0 
c0104cc5:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104ccc:	c0 
c0104ccd:	c7 44 24 04 15 01 00 	movl   $0x115,0x4(%esp)
c0104cd4:	00 
c0104cd5:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104cdc:	e8 35 c5 ff ff       	call   c0101216 <__panic>
    cprintf("assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0)\n");
c0104ce1:	c7 04 24 20 2c 12 c0 	movl   $0xc0122c20,(%esp)
c0104ce8:	e8 06 b7 ff ff       	call   c01003f3 <cprintf>


    assert(page2pa(p0) < npage * PGSIZE);
c0104ced:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104cf0:	89 04 24             	mov    %eax,(%esp)
c0104cf3:	e8 34 ec ff ff       	call   c010392c <page2pa>
c0104cf8:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c0104cfe:	c1 e2 0c             	shl    $0xc,%edx
c0104d01:	39 d0                	cmp    %edx,%eax
c0104d03:	72 24                	jb     c0104d29 <bestfit_user_check+0x1c9>
c0104d05:	c7 44 24 0c 38 29 12 	movl   $0xc0122938,0xc(%esp)
c0104d0c:	c0 
c0104d0d:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104d14:	c0 
c0104d15:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0104d1c:	00 
c0104d1d:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104d24:	e8 ed c4 ff ff       	call   c0101216 <__panic>
    cprintf("assert(page2pa(p0) < npage * PGSIZE)\n");
c0104d29:	c7 04 24 68 2c 12 c0 	movl   $0xc0122c68,(%esp)
c0104d30:	e8 be b6 ff ff       	call   c01003f3 <cprintf>
    assert(page2pa(p1) < npage * PGSIZE);
c0104d35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d38:	89 04 24             	mov    %eax,(%esp)
c0104d3b:	e8 ec eb ff ff       	call   c010392c <page2pa>
c0104d40:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c0104d46:	c1 e2 0c             	shl    $0xc,%edx
c0104d49:	39 d0                	cmp    %edx,%eax
c0104d4b:	72 24                	jb     c0104d71 <bestfit_user_check+0x211>
c0104d4d:	c7 44 24 0c 55 29 12 	movl   $0xc0122955,0xc(%esp)
c0104d54:	c0 
c0104d55:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104d5c:	c0 
c0104d5d:	c7 44 24 04 1b 01 00 	movl   $0x11b,0x4(%esp)
c0104d64:	00 
c0104d65:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104d6c:	e8 a5 c4 ff ff       	call   c0101216 <__panic>
    cprintf("assert(page2pa(p01) < npage * PGSIZE)\n");
c0104d71:	c7 04 24 90 2c 12 c0 	movl   $0xc0122c90,(%esp)
c0104d78:	e8 76 b6 ff ff       	call   c01003f3 <cprintf>
    assert(page2pa(p2) < npage * PGSIZE);
c0104d7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d80:	89 04 24             	mov    %eax,(%esp)
c0104d83:	e8 a4 eb ff ff       	call   c010392c <page2pa>
c0104d88:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c0104d8e:	c1 e2 0c             	shl    $0xc,%edx
c0104d91:	39 d0                	cmp    %edx,%eax
c0104d93:	72 24                	jb     c0104db9 <bestfit_user_check+0x259>
c0104d95:	c7 44 24 0c 72 29 12 	movl   $0xc0122972,0xc(%esp)
c0104d9c:	c0 
c0104d9d:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104da4:	c0 
c0104da5:	c7 44 24 04 1d 01 00 	movl   $0x11d,0x4(%esp)
c0104dac:	00 
c0104dad:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104db4:	e8 5d c4 ff ff       	call   c0101216 <__panic>
    cprintf("assert(page2pa(p2) < npage * PGSIZE)\n");
c0104db9:	c7 04 24 b8 2c 12 c0 	movl   $0xc0122cb8,(%esp)
c0104dc0:	e8 2e b6 ff ff       	call   c01003f3 <cprintf>

    list_entry_t free_list_store = free_list;
c0104dc5:	a1 54 11 17 c0       	mov    0xc0171154,%eax
c0104dca:	8b 15 58 11 17 c0    	mov    0xc0171158,%edx
c0104dd0:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0104dd3:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0104dd6:	c7 45 e4 54 11 17 c0 	movl   $0xc0171154,-0x1c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104ddd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104de0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104de3:	89 50 04             	mov    %edx,0x4(%eax)
c0104de6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104de9:	8b 50 04             	mov    0x4(%eax),%edx
c0104dec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104def:	89 10                	mov    %edx,(%eax)
c0104df1:	c7 45 e0 54 11 17 c0 	movl   $0xc0171154,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0104df8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104dfb:	8b 40 04             	mov    0x4(%eax),%eax
c0104dfe:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c0104e01:	0f 94 c0             	sete   %al
c0104e04:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0104e07:	85 c0                	test   %eax,%eax
c0104e09:	75 24                	jne    c0104e2f <bestfit_user_check+0x2cf>
c0104e0b:	c7 44 24 0c 8f 29 12 	movl   $0xc012298f,0xc(%esp)
c0104e12:	c0 
c0104e13:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104e1a:	c0 
c0104e1b:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0104e22:	00 
c0104e23:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104e2a:	e8 e7 c3 ff ff       	call   c0101216 <__panic>

    unsigned int nr_free_store = nr_free;
c0104e2f:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0104e34:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0104e37:	c7 05 5c 11 17 c0 00 	movl   $0x0,0xc017115c
c0104e3e:	00 00 00 
    cprintf("assert(alloc_page() != NULL) because of swap out! \n");
c0104e41:	c7 04 24 e0 2c 12 c0 	movl   $0xc0122ce0,(%esp)
c0104e48:	e8 a6 b5 ff ff       	call   c01003f3 <cprintf>

    free_page(p0);
c0104e4d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104e54:	00 
c0104e55:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e58:	89 04 24             	mov    %eax,(%esp)
c0104e5b:	e8 68 77 00 00       	call   c010c5c8 <free_pages>
    cprintf("free_page(p0)\n");
c0104e60:	c7 04 24 14 2d 12 c0 	movl   $0xc0122d14,(%esp)
c0104e67:	e8 87 b5 ff ff       	call   c01003f3 <cprintf>
    free_page(p1);
c0104e6c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104e73:	00 
c0104e74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e77:	89 04 24             	mov    %eax,(%esp)
c0104e7a:	e8 49 77 00 00       	call   c010c5c8 <free_pages>
    cprintf("free_page(p1)\n");
c0104e7f:	c7 04 24 23 2d 12 c0 	movl   $0xc0122d23,(%esp)
c0104e86:	e8 68 b5 ff ff       	call   c01003f3 <cprintf>
    free_page(p2);
c0104e8b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104e92:	00 
c0104e93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e96:	89 04 24             	mov    %eax,(%esp)
c0104e99:	e8 2a 77 00 00       	call   c010c5c8 <free_pages>
    cprintf("free_page(p2)\n");
c0104e9e:	c7 04 24 32 2d 12 c0 	movl   $0xc0122d32,(%esp)
c0104ea5:	e8 49 b5 ff ff       	call   c01003f3 <cprintf>
    assert(nr_free == 3);
c0104eaa:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0104eaf:	83 f8 03             	cmp    $0x3,%eax
c0104eb2:	74 24                	je     c0104ed8 <bestfit_user_check+0x378>
c0104eb4:	c7 44 24 0c bb 29 12 	movl   $0xc01229bb,0xc(%esp)
c0104ebb:	c0 
c0104ebc:	c7 44 24 08 06 28 12 	movl   $0xc0122806,0x8(%esp)
c0104ec3:	c0 
c0104ec4:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0104ecb:	00 
c0104ecc:	c7 04 24 1b 28 12 c0 	movl   $0xc012281b,(%esp)
c0104ed3:	e8 3e c3 ff ff       	call   c0101216 <__panic>
    cprintf("assert(nr_free == 3)\n");
c0104ed8:	c7 04 24 41 2d 12 c0 	movl   $0xc0122d41,(%esp)
c0104edf:	e8 0f b5 ff ff       	call   c01003f3 <cprintf>

}
c0104ee4:	c9                   	leave  
c0104ee5:	c3                   	ret    

c0104ee6 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104ee6:	55                   	push   %ebp
c0104ee7:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104ee9:	8b 55 08             	mov    0x8(%ebp),%edx
c0104eec:	a1 6c 11 17 c0       	mov    0xc017116c,%eax
c0104ef1:	29 c2                	sub    %eax,%edx
c0104ef3:	89 d0                	mov    %edx,%eax
c0104ef5:	c1 f8 02             	sar    $0x2,%eax
c0104ef8:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0104efe:	5d                   	pop    %ebp
c0104eff:	c3                   	ret    

c0104f00 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104f00:	55                   	push   %ebp
c0104f01:	89 e5                	mov    %esp,%ebp
c0104f03:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104f06:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f09:	89 04 24             	mov    %eax,(%esp)
c0104f0c:	e8 d5 ff ff ff       	call   c0104ee6 <page2ppn>
c0104f11:	c1 e0 0c             	shl    $0xc,%eax
}
c0104f14:	c9                   	leave  
c0104f15:	c3                   	ret    

c0104f16 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0104f16:	55                   	push   %ebp
c0104f17:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104f19:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f1c:	8b 00                	mov    (%eax),%eax
}
c0104f1e:	5d                   	pop    %ebp
c0104f1f:	c3                   	ret    

c0104f20 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104f20:	55                   	push   %ebp
c0104f21:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104f23:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f26:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104f29:	89 10                	mov    %edx,(%eax)
}
c0104f2b:	5d                   	pop    %ebp
c0104f2c:	c3                   	ret    

c0104f2d <buddy_init_size>:
#define UINT32_REMAINDER(a)     ((a)&(UINT32_MASK(a)>>1))
#define UINT32_ROUND_UP(a)      (UINT32_REMAINDER(a)?(((a)-UINT32_REMAINDER(a))<<1):(a))
#define UINT32_ROUND_DOWN(a)    (UINT32_REMAINDER(a)?((a)-UINT32_REMAINDER(a)):(a))

static void
buddy_init_size(size_t n) {
c0104f2d:	55                   	push   %ebp
c0104f2e:	89 e5                	mov    %esp,%ebp
c0104f30:	57                   	push   %edi
c0104f31:	56                   	push   %esi
c0104f32:	53                   	push   %ebx
c0104f33:	83 ec 2c             	sub    $0x2c,%esp
    assert(n > 1);
c0104f36:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0104f3a:	77 24                	ja     c0104f60 <buddy_init_size+0x33>
c0104f3c:	c7 44 24 0c a0 2d 12 	movl   $0xc0122da0,0xc(%esp)
c0104f43:	c0 
c0104f44:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0104f4b:	c0 
c0104f4c:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c0104f53:	00 
c0104f54:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0104f5b:	e8 b6 c2 ff ff       	call   c0101216 <__panic>
    buddy_physical_size = n;
c0104f60:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f63:	a3 84 df 16 c0       	mov    %eax,0xc016df84
    if (n < 512) {
c0104f68:	81 7d 08 ff 01 00 00 	cmpl   $0x1ff,0x8(%ebp)
c0104f6f:	0f 87 de 02 00 00    	ja     c0105253 <buddy_init_size+0x326>
        buddy_virtual_size = UINT32_ROUND_UP(n-1);
c0104f75:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f78:	8d 78 ff             	lea    -0x1(%eax),%edi
c0104f7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f7e:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104f81:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f84:	83 e8 01             	sub    $0x1,%eax
c0104f87:	d1 e8                	shr    %eax
c0104f89:	09 c2                	or     %eax,%edx
c0104f8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f8e:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0104f91:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f94:	83 e8 01             	sub    $0x1,%eax
c0104f97:	d1 e8                	shr    %eax
c0104f99:	09 c8                	or     %ecx,%eax
c0104f9b:	c1 e8 02             	shr    $0x2,%eax
c0104f9e:	09 c2                	or     %eax,%edx
c0104fa0:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fa3:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0104fa6:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fa9:	83 e8 01             	sub    $0x1,%eax
c0104fac:	d1 e8                	shr    %eax
c0104fae:	09 c1                	or     %eax,%ecx
c0104fb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fb3:	8d 58 ff             	lea    -0x1(%eax),%ebx
c0104fb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fb9:	83 e8 01             	sub    $0x1,%eax
c0104fbc:	d1 e8                	shr    %eax
c0104fbe:	09 d8                	or     %ebx,%eax
c0104fc0:	c1 e8 02             	shr    $0x2,%eax
c0104fc3:	09 c8                	or     %ecx,%eax
c0104fc5:	c1 e8 04             	shr    $0x4,%eax
c0104fc8:	09 c2                	or     %eax,%edx
c0104fca:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fcd:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0104fd0:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fd3:	83 e8 01             	sub    $0x1,%eax
c0104fd6:	d1 e8                	shr    %eax
c0104fd8:	09 c1                	or     %eax,%ecx
c0104fda:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fdd:	8d 58 ff             	lea    -0x1(%eax),%ebx
c0104fe0:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fe3:	83 e8 01             	sub    $0x1,%eax
c0104fe6:	d1 e8                	shr    %eax
c0104fe8:	09 d8                	or     %ebx,%eax
c0104fea:	c1 e8 02             	shr    $0x2,%eax
c0104fed:	09 c1                	or     %eax,%ecx
c0104fef:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ff2:	8d 58 ff             	lea    -0x1(%eax),%ebx
c0104ff5:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ff8:	83 e8 01             	sub    $0x1,%eax
c0104ffb:	d1 e8                	shr    %eax
c0104ffd:	09 c3                	or     %eax,%ebx
c0104fff:	8b 45 08             	mov    0x8(%ebp),%eax
c0105002:	8d 70 ff             	lea    -0x1(%eax),%esi
c0105005:	8b 45 08             	mov    0x8(%ebp),%eax
c0105008:	83 e8 01             	sub    $0x1,%eax
c010500b:	d1 e8                	shr    %eax
c010500d:	09 f0                	or     %esi,%eax
c010500f:	c1 e8 02             	shr    $0x2,%eax
c0105012:	09 d8                	or     %ebx,%eax
c0105014:	c1 e8 04             	shr    $0x4,%eax
c0105017:	09 c8                	or     %ecx,%eax
c0105019:	c1 e8 08             	shr    $0x8,%eax
c010501c:	89 d6                	mov    %edx,%esi
c010501e:	09 c6                	or     %eax,%esi
c0105020:	8b 45 08             	mov    0x8(%ebp),%eax
c0105023:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105026:	8b 45 08             	mov    0x8(%ebp),%eax
c0105029:	83 e8 01             	sub    $0x1,%eax
c010502c:	d1 e8                	shr    %eax
c010502e:	09 c2                	or     %eax,%edx
c0105030:	8b 45 08             	mov    0x8(%ebp),%eax
c0105033:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0105036:	8b 45 08             	mov    0x8(%ebp),%eax
c0105039:	83 e8 01             	sub    $0x1,%eax
c010503c:	d1 e8                	shr    %eax
c010503e:	09 c8                	or     %ecx,%eax
c0105040:	c1 e8 02             	shr    $0x2,%eax
c0105043:	09 c2                	or     %eax,%edx
c0105045:	8b 45 08             	mov    0x8(%ebp),%eax
c0105048:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010504b:	8b 45 08             	mov    0x8(%ebp),%eax
c010504e:	83 e8 01             	sub    $0x1,%eax
c0105051:	d1 e8                	shr    %eax
c0105053:	09 c1                	or     %eax,%ecx
c0105055:	8b 45 08             	mov    0x8(%ebp),%eax
c0105058:	8d 58 ff             	lea    -0x1(%eax),%ebx
c010505b:	8b 45 08             	mov    0x8(%ebp),%eax
c010505e:	83 e8 01             	sub    $0x1,%eax
c0105061:	d1 e8                	shr    %eax
c0105063:	09 d8                	or     %ebx,%eax
c0105065:	c1 e8 02             	shr    $0x2,%eax
c0105068:	09 c8                	or     %ecx,%eax
c010506a:	c1 e8 04             	shr    $0x4,%eax
c010506d:	89 d3                	mov    %edx,%ebx
c010506f:	09 c3                	or     %eax,%ebx
c0105071:	8b 45 08             	mov    0x8(%ebp),%eax
c0105074:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105077:	8b 45 08             	mov    0x8(%ebp),%eax
c010507a:	83 e8 01             	sub    $0x1,%eax
c010507d:	d1 e8                	shr    %eax
c010507f:	09 c2                	or     %eax,%edx
c0105081:	8b 45 08             	mov    0x8(%ebp),%eax
c0105084:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0105087:	8b 45 08             	mov    0x8(%ebp),%eax
c010508a:	83 e8 01             	sub    $0x1,%eax
c010508d:	d1 e8                	shr    %eax
c010508f:	09 c8                	or     %ecx,%eax
c0105091:	c1 e8 02             	shr    $0x2,%eax
c0105094:	89 d1                	mov    %edx,%ecx
c0105096:	09 c1                	or     %eax,%ecx
c0105098:	8b 45 08             	mov    0x8(%ebp),%eax
c010509b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010509e:	8b 45 08             	mov    0x8(%ebp),%eax
c01050a1:	83 e8 01             	sub    $0x1,%eax
c01050a4:	d1 e8                	shr    %eax
c01050a6:	09 c2                	or     %eax,%edx
c01050a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01050ab:	83 e8 01             	sub    $0x1,%eax
c01050ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01050b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01050b4:	83 e8 01             	sub    $0x1,%eax
c01050b7:	d1 e8                	shr    %eax
c01050b9:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01050bc:	c1 e8 02             	shr    $0x2,%eax
c01050bf:	09 d0                	or     %edx,%eax
c01050c1:	c1 e8 04             	shr    $0x4,%eax
c01050c4:	09 c8                	or     %ecx,%eax
c01050c6:	c1 e8 08             	shr    $0x8,%eax
c01050c9:	09 d8                	or     %ebx,%eax
c01050cb:	c1 e8 10             	shr    $0x10,%eax
c01050ce:	09 f0                	or     %esi,%eax
c01050d0:	d1 e8                	shr    %eax
c01050d2:	21 f8                	and    %edi,%eax
c01050d4:	85 c0                	test   %eax,%eax
c01050d6:	0f 84 5d 01 00 00    	je     c0105239 <buddy_init_size+0x30c>
c01050dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01050df:	8d 50 ff             	lea    -0x1(%eax),%edx
c01050e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01050e5:	83 e8 01             	sub    $0x1,%eax
c01050e8:	d1 e8                	shr    %eax
c01050ea:	09 c2                	or     %eax,%edx
c01050ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01050ef:	8d 48 ff             	lea    -0x1(%eax),%ecx
c01050f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01050f5:	83 e8 01             	sub    $0x1,%eax
c01050f8:	d1 e8                	shr    %eax
c01050fa:	09 c8                	or     %ecx,%eax
c01050fc:	c1 e8 02             	shr    $0x2,%eax
c01050ff:	09 c2                	or     %eax,%edx
c0105101:	8b 45 08             	mov    0x8(%ebp),%eax
c0105104:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0105107:	8b 45 08             	mov    0x8(%ebp),%eax
c010510a:	83 e8 01             	sub    $0x1,%eax
c010510d:	d1 e8                	shr    %eax
c010510f:	09 c1                	or     %eax,%ecx
c0105111:	8b 45 08             	mov    0x8(%ebp),%eax
c0105114:	8d 58 ff             	lea    -0x1(%eax),%ebx
c0105117:	8b 45 08             	mov    0x8(%ebp),%eax
c010511a:	83 e8 01             	sub    $0x1,%eax
c010511d:	d1 e8                	shr    %eax
c010511f:	09 d8                	or     %ebx,%eax
c0105121:	c1 e8 02             	shr    $0x2,%eax
c0105124:	09 c8                	or     %ecx,%eax
c0105126:	c1 e8 04             	shr    $0x4,%eax
c0105129:	09 c2                	or     %eax,%edx
c010512b:	8b 45 08             	mov    0x8(%ebp),%eax
c010512e:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0105131:	8b 45 08             	mov    0x8(%ebp),%eax
c0105134:	83 e8 01             	sub    $0x1,%eax
c0105137:	d1 e8                	shr    %eax
c0105139:	09 c1                	or     %eax,%ecx
c010513b:	8b 45 08             	mov    0x8(%ebp),%eax
c010513e:	8d 58 ff             	lea    -0x1(%eax),%ebx
c0105141:	8b 45 08             	mov    0x8(%ebp),%eax
c0105144:	83 e8 01             	sub    $0x1,%eax
c0105147:	d1 e8                	shr    %eax
c0105149:	09 d8                	or     %ebx,%eax
c010514b:	c1 e8 02             	shr    $0x2,%eax
c010514e:	09 c1                	or     %eax,%ecx
c0105150:	8b 45 08             	mov    0x8(%ebp),%eax
c0105153:	8d 58 ff             	lea    -0x1(%eax),%ebx
c0105156:	8b 45 08             	mov    0x8(%ebp),%eax
c0105159:	83 e8 01             	sub    $0x1,%eax
c010515c:	d1 e8                	shr    %eax
c010515e:	09 c3                	or     %eax,%ebx
c0105160:	8b 45 08             	mov    0x8(%ebp),%eax
c0105163:	8d 70 ff             	lea    -0x1(%eax),%esi
c0105166:	8b 45 08             	mov    0x8(%ebp),%eax
c0105169:	83 e8 01             	sub    $0x1,%eax
c010516c:	d1 e8                	shr    %eax
c010516e:	09 f0                	or     %esi,%eax
c0105170:	c1 e8 02             	shr    $0x2,%eax
c0105173:	09 d8                	or     %ebx,%eax
c0105175:	c1 e8 04             	shr    $0x4,%eax
c0105178:	09 c8                	or     %ecx,%eax
c010517a:	c1 e8 08             	shr    $0x8,%eax
c010517d:	09 c2                	or     %eax,%edx
c010517f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105182:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0105185:	8b 45 08             	mov    0x8(%ebp),%eax
c0105188:	83 e8 01             	sub    $0x1,%eax
c010518b:	d1 e8                	shr    %eax
c010518d:	09 c1                	or     %eax,%ecx
c010518f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105192:	8d 58 ff             	lea    -0x1(%eax),%ebx
c0105195:	8b 45 08             	mov    0x8(%ebp),%eax
c0105198:	83 e8 01             	sub    $0x1,%eax
c010519b:	d1 e8                	shr    %eax
c010519d:	09 d8                	or     %ebx,%eax
c010519f:	c1 e8 02             	shr    $0x2,%eax
c01051a2:	09 c1                	or     %eax,%ecx
c01051a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01051a7:	8d 58 ff             	lea    -0x1(%eax),%ebx
c01051aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01051ad:	83 e8 01             	sub    $0x1,%eax
c01051b0:	d1 e8                	shr    %eax
c01051b2:	09 c3                	or     %eax,%ebx
c01051b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01051b7:	8d 70 ff             	lea    -0x1(%eax),%esi
c01051ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01051bd:	83 e8 01             	sub    $0x1,%eax
c01051c0:	d1 e8                	shr    %eax
c01051c2:	09 f0                	or     %esi,%eax
c01051c4:	c1 e8 02             	shr    $0x2,%eax
c01051c7:	09 d8                	or     %ebx,%eax
c01051c9:	c1 e8 04             	shr    $0x4,%eax
c01051cc:	09 c1                	or     %eax,%ecx
c01051ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01051d1:	8d 58 ff             	lea    -0x1(%eax),%ebx
c01051d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01051d7:	83 e8 01             	sub    $0x1,%eax
c01051da:	d1 e8                	shr    %eax
c01051dc:	09 c3                	or     %eax,%ebx
c01051de:	8b 45 08             	mov    0x8(%ebp),%eax
c01051e1:	8d 70 ff             	lea    -0x1(%eax),%esi
c01051e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01051e7:	83 e8 01             	sub    $0x1,%eax
c01051ea:	d1 e8                	shr    %eax
c01051ec:	09 f0                	or     %esi,%eax
c01051ee:	c1 e8 02             	shr    $0x2,%eax
c01051f1:	09 c3                	or     %eax,%ebx
c01051f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01051f6:	8d 70 ff             	lea    -0x1(%eax),%esi
c01051f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01051fc:	83 e8 01             	sub    $0x1,%eax
c01051ff:	d1 e8                	shr    %eax
c0105201:	09 c6                	or     %eax,%esi
c0105203:	8b 45 08             	mov    0x8(%ebp),%eax
c0105206:	8d 78 ff             	lea    -0x1(%eax),%edi
c0105209:	8b 45 08             	mov    0x8(%ebp),%eax
c010520c:	83 e8 01             	sub    $0x1,%eax
c010520f:	d1 e8                	shr    %eax
c0105211:	09 f8                	or     %edi,%eax
c0105213:	c1 e8 02             	shr    $0x2,%eax
c0105216:	09 f0                	or     %esi,%eax
c0105218:	c1 e8 04             	shr    $0x4,%eax
c010521b:	09 d8                	or     %ebx,%eax
c010521d:	c1 e8 08             	shr    $0x8,%eax
c0105220:	09 c8                	or     %ecx,%eax
c0105222:	c1 e8 10             	shr    $0x10,%eax
c0105225:	09 d0                	or     %edx,%eax
c0105227:	d1 e8                	shr    %eax
c0105229:	f7 d0                	not    %eax
c010522b:	89 c2                	mov    %eax,%edx
c010522d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105230:	83 e8 01             	sub    $0x1,%eax
c0105233:	21 d0                	and    %edx,%eax
c0105235:	01 c0                	add    %eax,%eax
c0105237:	eb 06                	jmp    c010523f <buddy_init_size+0x312>
c0105239:	8b 45 08             	mov    0x8(%ebp),%eax
c010523c:	83 e8 01             	sub    $0x1,%eax
c010523f:	a3 88 df 16 c0       	mov    %eax,0xc016df88
        buddy_segment_size = 1;
c0105244:	c7 05 8c df 16 c0 01 	movl   $0x1,0xc016df8c
c010524b:	00 00 00 
c010524e:	e9 00 02 00 00       	jmp    c0105453 <buddy_init_size+0x526>
    } else {
        buddy_virtual_size = UINT32_ROUND_DOWN(n);
c0105253:	8b 45 08             	mov    0x8(%ebp),%eax
c0105256:	d1 e8                	shr    %eax
c0105258:	0b 45 08             	or     0x8(%ebp),%eax
c010525b:	8b 55 08             	mov    0x8(%ebp),%edx
c010525e:	d1 ea                	shr    %edx
c0105260:	0b 55 08             	or     0x8(%ebp),%edx
c0105263:	c1 ea 02             	shr    $0x2,%edx
c0105266:	09 d0                	or     %edx,%eax
c0105268:	89 c1                	mov    %eax,%ecx
c010526a:	8b 45 08             	mov    0x8(%ebp),%eax
c010526d:	d1 e8                	shr    %eax
c010526f:	0b 45 08             	or     0x8(%ebp),%eax
c0105272:	8b 55 08             	mov    0x8(%ebp),%edx
c0105275:	d1 ea                	shr    %edx
c0105277:	0b 55 08             	or     0x8(%ebp),%edx
c010527a:	c1 ea 02             	shr    $0x2,%edx
c010527d:	09 d0                	or     %edx,%eax
c010527f:	c1 e8 04             	shr    $0x4,%eax
c0105282:	09 c1                	or     %eax,%ecx
c0105284:	8b 45 08             	mov    0x8(%ebp),%eax
c0105287:	d1 e8                	shr    %eax
c0105289:	0b 45 08             	or     0x8(%ebp),%eax
c010528c:	8b 55 08             	mov    0x8(%ebp),%edx
c010528f:	d1 ea                	shr    %edx
c0105291:	0b 55 08             	or     0x8(%ebp),%edx
c0105294:	c1 ea 02             	shr    $0x2,%edx
c0105297:	09 d0                	or     %edx,%eax
c0105299:	89 c3                	mov    %eax,%ebx
c010529b:	8b 45 08             	mov    0x8(%ebp),%eax
c010529e:	d1 e8                	shr    %eax
c01052a0:	0b 45 08             	or     0x8(%ebp),%eax
c01052a3:	8b 55 08             	mov    0x8(%ebp),%edx
c01052a6:	d1 ea                	shr    %edx
c01052a8:	0b 55 08             	or     0x8(%ebp),%edx
c01052ab:	c1 ea 02             	shr    $0x2,%edx
c01052ae:	09 d0                	or     %edx,%eax
c01052b0:	c1 e8 04             	shr    $0x4,%eax
c01052b3:	09 d8                	or     %ebx,%eax
c01052b5:	c1 e8 08             	shr    $0x8,%eax
c01052b8:	09 c1                	or     %eax,%ecx
c01052ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01052bd:	d1 e8                	shr    %eax
c01052bf:	0b 45 08             	or     0x8(%ebp),%eax
c01052c2:	8b 55 08             	mov    0x8(%ebp),%edx
c01052c5:	d1 ea                	shr    %edx
c01052c7:	0b 55 08             	or     0x8(%ebp),%edx
c01052ca:	c1 ea 02             	shr    $0x2,%edx
c01052cd:	09 d0                	or     %edx,%eax
c01052cf:	89 c3                	mov    %eax,%ebx
c01052d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01052d4:	d1 e8                	shr    %eax
c01052d6:	0b 45 08             	or     0x8(%ebp),%eax
c01052d9:	8b 55 08             	mov    0x8(%ebp),%edx
c01052dc:	d1 ea                	shr    %edx
c01052de:	0b 55 08             	or     0x8(%ebp),%edx
c01052e1:	c1 ea 02             	shr    $0x2,%edx
c01052e4:	09 d0                	or     %edx,%eax
c01052e6:	c1 e8 04             	shr    $0x4,%eax
c01052e9:	09 c3                	or     %eax,%ebx
c01052eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01052ee:	d1 e8                	shr    %eax
c01052f0:	0b 45 08             	or     0x8(%ebp),%eax
c01052f3:	8b 55 08             	mov    0x8(%ebp),%edx
c01052f6:	d1 ea                	shr    %edx
c01052f8:	0b 55 08             	or     0x8(%ebp),%edx
c01052fb:	c1 ea 02             	shr    $0x2,%edx
c01052fe:	09 d0                	or     %edx,%eax
c0105300:	89 c6                	mov    %eax,%esi
c0105302:	8b 45 08             	mov    0x8(%ebp),%eax
c0105305:	d1 e8                	shr    %eax
c0105307:	0b 45 08             	or     0x8(%ebp),%eax
c010530a:	8b 55 08             	mov    0x8(%ebp),%edx
c010530d:	d1 ea                	shr    %edx
c010530f:	0b 55 08             	or     0x8(%ebp),%edx
c0105312:	c1 ea 02             	shr    $0x2,%edx
c0105315:	09 d0                	or     %edx,%eax
c0105317:	c1 e8 04             	shr    $0x4,%eax
c010531a:	09 f0                	or     %esi,%eax
c010531c:	c1 e8 08             	shr    $0x8,%eax
c010531f:	09 d8                	or     %ebx,%eax
c0105321:	c1 e8 10             	shr    $0x10,%eax
c0105324:	09 c8                	or     %ecx,%eax
c0105326:	d1 e8                	shr    %eax
c0105328:	23 45 08             	and    0x8(%ebp),%eax
c010532b:	85 c0                	test   %eax,%eax
c010532d:	0f 84 dc 00 00 00    	je     c010540f <buddy_init_size+0x4e2>
c0105333:	8b 45 08             	mov    0x8(%ebp),%eax
c0105336:	d1 e8                	shr    %eax
c0105338:	0b 45 08             	or     0x8(%ebp),%eax
c010533b:	8b 55 08             	mov    0x8(%ebp),%edx
c010533e:	d1 ea                	shr    %edx
c0105340:	0b 55 08             	or     0x8(%ebp),%edx
c0105343:	c1 ea 02             	shr    $0x2,%edx
c0105346:	09 d0                	or     %edx,%eax
c0105348:	89 c1                	mov    %eax,%ecx
c010534a:	8b 45 08             	mov    0x8(%ebp),%eax
c010534d:	d1 e8                	shr    %eax
c010534f:	0b 45 08             	or     0x8(%ebp),%eax
c0105352:	8b 55 08             	mov    0x8(%ebp),%edx
c0105355:	d1 ea                	shr    %edx
c0105357:	0b 55 08             	or     0x8(%ebp),%edx
c010535a:	c1 ea 02             	shr    $0x2,%edx
c010535d:	09 d0                	or     %edx,%eax
c010535f:	c1 e8 04             	shr    $0x4,%eax
c0105362:	09 c1                	or     %eax,%ecx
c0105364:	8b 45 08             	mov    0x8(%ebp),%eax
c0105367:	d1 e8                	shr    %eax
c0105369:	0b 45 08             	or     0x8(%ebp),%eax
c010536c:	8b 55 08             	mov    0x8(%ebp),%edx
c010536f:	d1 ea                	shr    %edx
c0105371:	0b 55 08             	or     0x8(%ebp),%edx
c0105374:	c1 ea 02             	shr    $0x2,%edx
c0105377:	09 d0                	or     %edx,%eax
c0105379:	89 c3                	mov    %eax,%ebx
c010537b:	8b 45 08             	mov    0x8(%ebp),%eax
c010537e:	d1 e8                	shr    %eax
c0105380:	0b 45 08             	or     0x8(%ebp),%eax
c0105383:	8b 55 08             	mov    0x8(%ebp),%edx
c0105386:	d1 ea                	shr    %edx
c0105388:	0b 55 08             	or     0x8(%ebp),%edx
c010538b:	c1 ea 02             	shr    $0x2,%edx
c010538e:	09 d0                	or     %edx,%eax
c0105390:	c1 e8 04             	shr    $0x4,%eax
c0105393:	09 d8                	or     %ebx,%eax
c0105395:	c1 e8 08             	shr    $0x8,%eax
c0105398:	09 c1                	or     %eax,%ecx
c010539a:	8b 45 08             	mov    0x8(%ebp),%eax
c010539d:	d1 e8                	shr    %eax
c010539f:	0b 45 08             	or     0x8(%ebp),%eax
c01053a2:	8b 55 08             	mov    0x8(%ebp),%edx
c01053a5:	d1 ea                	shr    %edx
c01053a7:	0b 55 08             	or     0x8(%ebp),%edx
c01053aa:	c1 ea 02             	shr    $0x2,%edx
c01053ad:	09 d0                	or     %edx,%eax
c01053af:	89 c3                	mov    %eax,%ebx
c01053b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01053b4:	d1 e8                	shr    %eax
c01053b6:	0b 45 08             	or     0x8(%ebp),%eax
c01053b9:	8b 55 08             	mov    0x8(%ebp),%edx
c01053bc:	d1 ea                	shr    %edx
c01053be:	0b 55 08             	or     0x8(%ebp),%edx
c01053c1:	c1 ea 02             	shr    $0x2,%edx
c01053c4:	09 d0                	or     %edx,%eax
c01053c6:	c1 e8 04             	shr    $0x4,%eax
c01053c9:	09 c3                	or     %eax,%ebx
c01053cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01053ce:	d1 e8                	shr    %eax
c01053d0:	0b 45 08             	or     0x8(%ebp),%eax
c01053d3:	8b 55 08             	mov    0x8(%ebp),%edx
c01053d6:	d1 ea                	shr    %edx
c01053d8:	0b 55 08             	or     0x8(%ebp),%edx
c01053db:	c1 ea 02             	shr    $0x2,%edx
c01053de:	09 d0                	or     %edx,%eax
c01053e0:	89 c6                	mov    %eax,%esi
c01053e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01053e5:	d1 e8                	shr    %eax
c01053e7:	0b 45 08             	or     0x8(%ebp),%eax
c01053ea:	8b 55 08             	mov    0x8(%ebp),%edx
c01053ed:	d1 ea                	shr    %edx
c01053ef:	0b 55 08             	or     0x8(%ebp),%edx
c01053f2:	c1 ea 02             	shr    $0x2,%edx
c01053f5:	09 d0                	or     %edx,%eax
c01053f7:	c1 e8 04             	shr    $0x4,%eax
c01053fa:	09 f0                	or     %esi,%eax
c01053fc:	c1 e8 08             	shr    $0x8,%eax
c01053ff:	09 d8                	or     %ebx,%eax
c0105401:	c1 e8 10             	shr    $0x10,%eax
c0105404:	09 c8                	or     %ecx,%eax
c0105406:	d1 e8                	shr    %eax
c0105408:	f7 d0                	not    %eax
c010540a:	23 45 08             	and    0x8(%ebp),%eax
c010540d:	eb 03                	jmp    c0105412 <buddy_init_size+0x4e5>
c010540f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105412:	a3 88 df 16 c0       	mov    %eax,0xc016df88
        buddy_segment_size = buddy_virtual_size*sizeof(size_t)*2/PGSIZE;
c0105417:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c010541c:	c1 e0 03             	shl    $0x3,%eax
c010541f:	c1 e8 0c             	shr    $0xc,%eax
c0105422:	a3 8c df 16 c0       	mov    %eax,0xc016df8c
        if (n > buddy_virtual_size + (buddy_segment_size<<1)) {
c0105427:	a1 8c df 16 c0       	mov    0xc016df8c,%eax
c010542c:	8d 14 00             	lea    (%eax,%eax,1),%edx
c010542f:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0105434:	01 d0                	add    %edx,%eax
c0105436:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105439:	73 18                	jae    c0105453 <buddy_init_size+0x526>
            buddy_virtual_size <<= 1;
c010543b:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0105440:	01 c0                	add    %eax,%eax
c0105442:	a3 88 df 16 c0       	mov    %eax,0xc016df88
            buddy_segment_size <<= 1;
c0105447:	a1 8c df 16 c0       	mov    0xc016df8c,%eax
c010544c:	01 c0                	add    %eax,%eax
c010544e:	a3 8c df 16 c0       	mov    %eax,0xc016df8c
        }
    }
    buddy_alloc_size = MIN(buddy_virtual_size, buddy_physical_size-buddy_segment_size);
c0105453:	8b 15 84 df 16 c0    	mov    0xc016df84,%edx
c0105459:	a1 8c df 16 c0       	mov    0xc016df8c,%eax
c010545e:	29 c2                	sub    %eax,%edx
c0105460:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0105465:	39 c2                	cmp    %eax,%edx
c0105467:	0f 46 c2             	cmovbe %edx,%eax
c010546a:	a3 90 df 16 c0       	mov    %eax,0xc016df90
}
c010546f:	83 c4 2c             	add    $0x2c,%esp
c0105472:	5b                   	pop    %ebx
c0105473:	5e                   	pop    %esi
c0105474:	5f                   	pop    %edi
c0105475:	5d                   	pop    %ebp
c0105476:	c3                   	ret    

c0105477 <buddy_init_segment>:

static void
buddy_init_segment(struct Page *base) {
c0105477:	55                   	push   %ebp
c0105478:	89 e5                	mov    %esp,%ebp
c010547a:	57                   	push   %edi
c010547b:	56                   	push   %esi
c010547c:	53                   	push   %ebx
c010547d:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
    // Init address
    buddy_physical = base;
c0105483:	8b 45 08             	mov    0x8(%ebp),%eax
c0105486:	a3 98 df 16 c0       	mov    %eax,0xc016df98
    buddy_segment = KADDR(page2pa(base));
c010548b:	8b 45 08             	mov    0x8(%ebp),%eax
c010548e:	89 04 24             	mov    %eax,(%esp)
c0105491:	e8 6a fa ff ff       	call   c0104f00 <page2pa>
c0105496:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0105499:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010549c:	c1 e8 0c             	shr    $0xc,%eax
c010549f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01054a2:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c01054a7:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
c01054aa:	72 23                	jb     c01054cf <buddy_init_segment+0x58>
c01054ac:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01054af:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01054b3:	c7 44 24 08 d0 2d 12 	movl   $0xc0122dd0,0x8(%esp)
c01054ba:	c0 
c01054bb:	c7 44 24 04 3e 00 00 	movl   $0x3e,0x4(%esp)
c01054c2:	00 
c01054c3:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c01054ca:	e8 47 bd ff ff       	call   c0101216 <__panic>
c01054cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01054d2:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01054d7:	a3 94 df 16 c0       	mov    %eax,0xc016df94
    buddy_alloc = base + buddy_segment_size;
c01054dc:	8b 15 8c df 16 c0    	mov    0xc016df8c,%edx
c01054e2:	89 d0                	mov    %edx,%eax
c01054e4:	c1 e0 03             	shl    $0x3,%eax
c01054e7:	01 d0                	add    %edx,%eax
c01054e9:	c1 e0 02             	shl    $0x2,%eax
c01054ec:	89 c2                	mov    %eax,%edx
c01054ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01054f1:	01 d0                	add    %edx,%eax
c01054f3:	a3 9c df 16 c0       	mov    %eax,0xc016df9c
    memset(buddy_segment, 0, buddy_segment_size*PGSIZE);
c01054f8:	a1 8c df 16 c0       	mov    0xc016df8c,%eax
c01054fd:	c1 e0 0c             	shl    $0xc,%eax
c0105500:	89 c2                	mov    %eax,%edx
c0105502:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c0105507:	89 54 24 08          	mov    %edx,0x8(%esp)
c010550b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105512:	00 
c0105513:	89 04 24             	mov    %eax,(%esp)
c0105516:	e8 e4 bb 01 00       	call   c01210ff <memset>
    // Init segment
    nr_free += buddy_alloc_size;
c010551b:	8b 15 5c 11 17 c0    	mov    0xc017115c,%edx
c0105521:	a1 90 df 16 c0       	mov    0xc016df90,%eax
c0105526:	01 d0                	add    %edx,%eax
c0105528:	a3 5c 11 17 c0       	mov    %eax,0xc017115c
    size_t block = BUDDY_ROOT;
c010552d:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
    size_t alloc_size = buddy_alloc_size;
c0105534:	a1 90 df 16 c0       	mov    0xc016df90,%eax
c0105539:	89 45 e0             	mov    %eax,-0x20(%ebp)
    size_t virtual_size = buddy_virtual_size;
c010553c:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0105541:	89 45 dc             	mov    %eax,-0x24(%ebp)
    buddy_segment[block] = alloc_size;
c0105544:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c0105549:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010554c:	c1 e2 02             	shl    $0x2,%edx
c010554f:	01 c2                	add    %eax,%edx
c0105551:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105554:	89 02                	mov    %eax,(%edx)
    while (alloc_size > 0 && alloc_size < virtual_size) {
c0105556:	e9 b3 03 00 00       	jmp    c010590e <buddy_init_segment+0x497>
        virtual_size >>= 1;
c010555b:	d1 6d dc             	shrl   -0x24(%ebp)
        if (alloc_size > virtual_size) {
c010555e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105561:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0105564:	0f 86 79 03 00 00    	jbe    c01058e3 <buddy_init_segment+0x46c>
            // Add left to free list
            struct Page *page = &buddy_alloc[BUDDY_BEGIN(block)];
c010556a:	a1 9c df 16 c0       	mov    0xc016df9c,%eax
c010556f:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0105572:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105575:	d1 e8                	shr    %eax
c0105577:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010557a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010557d:	d1 ea                	shr    %edx
c010557f:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105582:	c1 ea 02             	shr    $0x2,%edx
c0105585:	09 d0                	or     %edx,%eax
c0105587:	89 c1                	mov    %eax,%ecx
c0105589:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010558c:	d1 e8                	shr    %eax
c010558e:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105591:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105594:	d1 ea                	shr    %edx
c0105596:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105599:	c1 ea 02             	shr    $0x2,%edx
c010559c:	09 d0                	or     %edx,%eax
c010559e:	c1 e8 04             	shr    $0x4,%eax
c01055a1:	09 c1                	or     %eax,%ecx
c01055a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01055a6:	d1 e8                	shr    %eax
c01055a8:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01055ab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01055ae:	d1 ea                	shr    %edx
c01055b0:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01055b3:	c1 ea 02             	shr    $0x2,%edx
c01055b6:	09 d0                	or     %edx,%eax
c01055b8:	89 c3                	mov    %eax,%ebx
c01055ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01055bd:	d1 e8                	shr    %eax
c01055bf:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01055c2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01055c5:	d1 ea                	shr    %edx
c01055c7:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01055ca:	c1 ea 02             	shr    $0x2,%edx
c01055cd:	09 d0                	or     %edx,%eax
c01055cf:	c1 e8 04             	shr    $0x4,%eax
c01055d2:	09 d8                	or     %ebx,%eax
c01055d4:	c1 e8 08             	shr    $0x8,%eax
c01055d7:	09 c1                	or     %eax,%ecx
c01055d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01055dc:	d1 e8                	shr    %eax
c01055de:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01055e1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01055e4:	d1 ea                	shr    %edx
c01055e6:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01055e9:	c1 ea 02             	shr    $0x2,%edx
c01055ec:	09 d0                	or     %edx,%eax
c01055ee:	89 c3                	mov    %eax,%ebx
c01055f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01055f3:	d1 e8                	shr    %eax
c01055f5:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01055f8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01055fb:	d1 ea                	shr    %edx
c01055fd:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105600:	c1 ea 02             	shr    $0x2,%edx
c0105603:	09 d0                	or     %edx,%eax
c0105605:	c1 e8 04             	shr    $0x4,%eax
c0105608:	09 c3                	or     %eax,%ebx
c010560a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010560d:	d1 e8                	shr    %eax
c010560f:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105612:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105615:	d1 ea                	shr    %edx
c0105617:	0b 55 e4             	or     -0x1c(%ebp),%edx
c010561a:	c1 ea 02             	shr    $0x2,%edx
c010561d:	09 d0                	or     %edx,%eax
c010561f:	89 c6                	mov    %eax,%esi
c0105621:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105624:	d1 e8                	shr    %eax
c0105626:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105629:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010562c:	d1 ea                	shr    %edx
c010562e:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105631:	c1 ea 02             	shr    $0x2,%edx
c0105634:	09 d0                	or     %edx,%eax
c0105636:	c1 e8 04             	shr    $0x4,%eax
c0105639:	09 f0                	or     %esi,%eax
c010563b:	c1 e8 08             	shr    $0x8,%eax
c010563e:	09 d8                	or     %ebx,%eax
c0105640:	c1 e8 10             	shr    $0x10,%eax
c0105643:	09 c8                	or     %ecx,%eax
c0105645:	d1 e8                	shr    %eax
c0105647:	23 45 e4             	and    -0x1c(%ebp),%eax
c010564a:	89 45 80             	mov    %eax,-0x80(%ebp)
c010564d:	8b 3d 88 df 16 c0    	mov    0xc016df88,%edi
c0105653:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105656:	d1 e8                	shr    %eax
c0105658:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010565b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010565e:	d1 ea                	shr    %edx
c0105660:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105663:	c1 ea 02             	shr    $0x2,%edx
c0105666:	09 d0                	or     %edx,%eax
c0105668:	89 c1                	mov    %eax,%ecx
c010566a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010566d:	d1 e8                	shr    %eax
c010566f:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105672:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105675:	d1 ea                	shr    %edx
c0105677:	0b 55 e4             	or     -0x1c(%ebp),%edx
c010567a:	c1 ea 02             	shr    $0x2,%edx
c010567d:	09 d0                	or     %edx,%eax
c010567f:	c1 e8 04             	shr    $0x4,%eax
c0105682:	09 c1                	or     %eax,%ecx
c0105684:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105687:	d1 e8                	shr    %eax
c0105689:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010568c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010568f:	d1 ea                	shr    %edx
c0105691:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105694:	c1 ea 02             	shr    $0x2,%edx
c0105697:	09 d0                	or     %edx,%eax
c0105699:	89 c3                	mov    %eax,%ebx
c010569b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010569e:	d1 e8                	shr    %eax
c01056a0:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01056a3:	89 c2                	mov    %eax,%edx
c01056a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056a8:	d1 e8                	shr    %eax
c01056aa:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01056ad:	c1 e8 02             	shr    $0x2,%eax
c01056b0:	09 d0                	or     %edx,%eax
c01056b2:	c1 e8 04             	shr    $0x4,%eax
c01056b5:	09 d8                	or     %ebx,%eax
c01056b7:	c1 e8 08             	shr    $0x8,%eax
c01056ba:	89 ce                	mov    %ecx,%esi
c01056bc:	09 c6                	or     %eax,%esi
c01056be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056c1:	d1 e8                	shr    %eax
c01056c3:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01056c6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01056c9:	d1 ea                	shr    %edx
c01056cb:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01056ce:	c1 ea 02             	shr    $0x2,%edx
c01056d1:	09 d0                	or     %edx,%eax
c01056d3:	89 c1                	mov    %eax,%ecx
c01056d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056d8:	d1 e8                	shr    %eax
c01056da:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01056dd:	89 c2                	mov    %eax,%edx
c01056df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056e2:	d1 e8                	shr    %eax
c01056e4:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01056e7:	c1 e8 02             	shr    $0x2,%eax
c01056ea:	09 d0                	or     %edx,%eax
c01056ec:	c1 e8 04             	shr    $0x4,%eax
c01056ef:	89 cb                	mov    %ecx,%ebx
c01056f1:	09 c3                	or     %eax,%ebx
c01056f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056f6:	d1 e8                	shr    %eax
c01056f8:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01056fb:	89 c2                	mov    %eax,%edx
c01056fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105700:	d1 e8                	shr    %eax
c0105702:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105705:	c1 e8 02             	shr    $0x2,%eax
c0105708:	89 d1                	mov    %edx,%ecx
c010570a:	09 c1                	or     %eax,%ecx
c010570c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010570f:	d1 e8                	shr    %eax
c0105711:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105714:	89 c2                	mov    %eax,%edx
c0105716:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105719:	d1 e8                	shr    %eax
c010571b:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010571e:	c1 e8 02             	shr    $0x2,%eax
c0105721:	09 d0                	or     %edx,%eax
c0105723:	c1 e8 04             	shr    $0x4,%eax
c0105726:	09 c8                	or     %ecx,%eax
c0105728:	c1 e8 08             	shr    $0x8,%eax
c010572b:	09 d8                	or     %ebx,%eax
c010572d:	c1 e8 10             	shr    $0x10,%eax
c0105730:	09 f0                	or     %esi,%eax
c0105732:	d1 e8                	shr    %eax
c0105734:	23 45 e4             	and    -0x1c(%ebp),%eax
c0105737:	85 c0                	test   %eax,%eax
c0105739:	0f 84 ea 00 00 00    	je     c0105829 <buddy_init_segment+0x3b2>
c010573f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105742:	d1 e8                	shr    %eax
c0105744:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105747:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010574a:	d1 ea                	shr    %edx
c010574c:	0b 55 e4             	or     -0x1c(%ebp),%edx
c010574f:	c1 ea 02             	shr    $0x2,%edx
c0105752:	09 d0                	or     %edx,%eax
c0105754:	89 c1                	mov    %eax,%ecx
c0105756:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105759:	d1 e8                	shr    %eax
c010575b:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010575e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105761:	d1 ea                	shr    %edx
c0105763:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105766:	c1 ea 02             	shr    $0x2,%edx
c0105769:	09 d0                	or     %edx,%eax
c010576b:	c1 e8 04             	shr    $0x4,%eax
c010576e:	09 c1                	or     %eax,%ecx
c0105770:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105773:	d1 e8                	shr    %eax
c0105775:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105778:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010577b:	d1 ea                	shr    %edx
c010577d:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105780:	c1 ea 02             	shr    $0x2,%edx
c0105783:	09 d0                	or     %edx,%eax
c0105785:	89 c3                	mov    %eax,%ebx
c0105787:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010578a:	d1 e8                	shr    %eax
c010578c:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010578f:	89 c2                	mov    %eax,%edx
c0105791:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105794:	d1 e8                	shr    %eax
c0105796:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105799:	c1 e8 02             	shr    $0x2,%eax
c010579c:	09 d0                	or     %edx,%eax
c010579e:	c1 e8 04             	shr    $0x4,%eax
c01057a1:	09 d8                	or     %ebx,%eax
c01057a3:	c1 e8 08             	shr    $0x8,%eax
c01057a6:	89 ce                	mov    %ecx,%esi
c01057a8:	09 c6                	or     %eax,%esi
c01057aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01057ad:	d1 e8                	shr    %eax
c01057af:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01057b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01057b5:	d1 ea                	shr    %edx
c01057b7:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01057ba:	c1 ea 02             	shr    $0x2,%edx
c01057bd:	09 d0                	or     %edx,%eax
c01057bf:	89 c1                	mov    %eax,%ecx
c01057c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01057c4:	d1 e8                	shr    %eax
c01057c6:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01057c9:	89 c2                	mov    %eax,%edx
c01057cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01057ce:	d1 e8                	shr    %eax
c01057d0:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01057d3:	c1 e8 02             	shr    $0x2,%eax
c01057d6:	09 d0                	or     %edx,%eax
c01057d8:	c1 e8 04             	shr    $0x4,%eax
c01057db:	89 cb                	mov    %ecx,%ebx
c01057dd:	09 c3                	or     %eax,%ebx
c01057df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01057e2:	d1 e8                	shr    %eax
c01057e4:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01057e7:	89 c2                	mov    %eax,%edx
c01057e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01057ec:	d1 e8                	shr    %eax
c01057ee:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01057f1:	c1 e8 02             	shr    $0x2,%eax
c01057f4:	89 d1                	mov    %edx,%ecx
c01057f6:	09 c1                	or     %eax,%ecx
c01057f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01057fb:	d1 e8                	shr    %eax
c01057fd:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105800:	89 c2                	mov    %eax,%edx
c0105802:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105805:	d1 e8                	shr    %eax
c0105807:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010580a:	c1 e8 02             	shr    $0x2,%eax
c010580d:	09 d0                	or     %edx,%eax
c010580f:	c1 e8 04             	shr    $0x4,%eax
c0105812:	09 c8                	or     %ecx,%eax
c0105814:	c1 e8 08             	shr    $0x8,%eax
c0105817:	09 d8                	or     %ebx,%eax
c0105819:	c1 e8 10             	shr    $0x10,%eax
c010581c:	09 f0                	or     %esi,%eax
c010581e:	d1 e8                	shr    %eax
c0105820:	f7 d0                	not    %eax
c0105822:	23 45 e4             	and    -0x1c(%ebp),%eax
c0105825:	89 c6                	mov    %eax,%esi
c0105827:	eb 03                	jmp    c010582c <buddy_init_segment+0x3b5>
c0105829:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010582c:	89 f8                	mov    %edi,%eax
c010582e:	ba 00 00 00 00       	mov    $0x0,%edx
c0105833:	f7 f6                	div    %esi
c0105835:	8b 55 80             	mov    -0x80(%ebp),%edx
c0105838:	0f af d0             	imul   %eax,%edx
c010583b:	89 d0                	mov    %edx,%eax
c010583d:	c1 e0 03             	shl    $0x3,%eax
c0105840:	01 d0                	add    %edx,%eax
c0105842:	c1 e0 02             	shl    $0x2,%eax
c0105845:	03 45 84             	add    -0x7c(%ebp),%eax
c0105848:	89 45 d0             	mov    %eax,-0x30(%ebp)
            page->property = virtual_size;
c010584b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010584e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105851:	89 50 08             	mov    %edx,0x8(%eax)
            list_add(&(free_list), &(page->page_link));
c0105854:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105857:	83 c0 10             	add    $0x10,%eax
c010585a:	c7 45 c8 54 11 17 c0 	movl   $0xc0171154,-0x38(%ebp)
c0105861:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0105864:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105867:	89 45 c0             	mov    %eax,-0x40(%ebp)
c010586a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010586d:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0105870:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105873:	8b 40 04             	mov    0x4(%eax),%eax
c0105876:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0105879:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010587c:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010587f:	89 55 b4             	mov    %edx,-0x4c(%ebp)
c0105882:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0105885:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105888:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010588b:	89 10                	mov    %edx,(%eax)
c010588d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105890:	8b 10                	mov    (%eax),%edx
c0105892:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0105895:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0105898:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010589b:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010589e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01058a1:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01058a4:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01058a7:	89 10                	mov    %edx,(%eax)
            buddy_segment[BUDDY_LEFT(block)] = virtual_size;
c01058a9:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c01058ae:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01058b1:	c1 e2 03             	shl    $0x3,%edx
c01058b4:	01 c2                	add    %eax,%edx
c01058b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01058b9:	89 02                	mov    %eax,(%edx)
            // Switch ro right
            alloc_size -= virtual_size;
c01058bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01058be:	29 45 e0             	sub    %eax,-0x20(%ebp)
            buddy_segment[BUDDY_RIGHT(block)] = alloc_size;
c01058c1:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c01058c6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01058c9:	c1 e2 03             	shl    $0x3,%edx
c01058cc:	83 c2 04             	add    $0x4,%edx
c01058cf:	01 c2                	add    %eax,%edx
c01058d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01058d4:	89 02                	mov    %eax,(%edx)
            block = BUDDY_RIGHT(block);
c01058d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01058d9:	01 c0                	add    %eax,%eax
c01058db:	83 c0 01             	add    $0x1,%eax
c01058de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01058e1:	eb 2b                	jmp    c010590e <buddy_init_segment+0x497>
        } else {
            // Switch to left
            buddy_segment[BUDDY_LEFT(block)] = alloc_size;
c01058e3:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c01058e8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01058eb:	c1 e2 03             	shl    $0x3,%edx
c01058ee:	01 c2                	add    %eax,%edx
c01058f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01058f3:	89 02                	mov    %eax,(%edx)
            buddy_segment[BUDDY_RIGHT(block)] = 0;
c01058f5:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c01058fa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01058fd:	c1 e2 03             	shl    $0x3,%edx
c0105900:	83 c2 04             	add    $0x4,%edx
c0105903:	01 d0                	add    %edx,%eax
c0105905:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
            block = BUDDY_LEFT(block);
c010590b:	d1 65 e4             	shll   -0x1c(%ebp)
    nr_free += buddy_alloc_size;
    size_t block = BUDDY_ROOT;
    size_t alloc_size = buddy_alloc_size;
    size_t virtual_size = buddy_virtual_size;
    buddy_segment[block] = alloc_size;
    while (alloc_size > 0 && alloc_size < virtual_size) {
c010590e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105912:	74 0c                	je     c0105920 <buddy_init_segment+0x4a9>
c0105914:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105917:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010591a:	0f 82 3b fc ff ff    	jb     c010555b <buddy_init_segment+0xe4>
            buddy_segment[BUDDY_LEFT(block)] = alloc_size;
            buddy_segment[BUDDY_RIGHT(block)] = 0;
            block = BUDDY_LEFT(block);
        }
    }
    if (alloc_size > 0) {
c0105920:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105924:	0f 84 3f 03 00 00    	je     c0105c69 <buddy_init_segment+0x7f2>
        struct Page *page = &buddy_alloc[BUDDY_BEGIN(block)];
c010592a:	a1 9c df 16 c0       	mov    0xc016df9c,%eax
c010592f:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0105932:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105935:	d1 e8                	shr    %eax
c0105937:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010593a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010593d:	d1 ea                	shr    %edx
c010593f:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105942:	c1 ea 02             	shr    $0x2,%edx
c0105945:	09 d0                	or     %edx,%eax
c0105947:	89 c1                	mov    %eax,%ecx
c0105949:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010594c:	d1 e8                	shr    %eax
c010594e:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105951:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105954:	d1 ea                	shr    %edx
c0105956:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105959:	c1 ea 02             	shr    $0x2,%edx
c010595c:	09 d0                	or     %edx,%eax
c010595e:	c1 e8 04             	shr    $0x4,%eax
c0105961:	09 c1                	or     %eax,%ecx
c0105963:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105966:	d1 e8                	shr    %eax
c0105968:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010596b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010596e:	d1 ea                	shr    %edx
c0105970:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105973:	c1 ea 02             	shr    $0x2,%edx
c0105976:	09 d0                	or     %edx,%eax
c0105978:	89 c3                	mov    %eax,%ebx
c010597a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010597d:	d1 e8                	shr    %eax
c010597f:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105982:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105985:	d1 ea                	shr    %edx
c0105987:	0b 55 e4             	or     -0x1c(%ebp),%edx
c010598a:	c1 ea 02             	shr    $0x2,%edx
c010598d:	09 d0                	or     %edx,%eax
c010598f:	c1 e8 04             	shr    $0x4,%eax
c0105992:	09 d8                	or     %ebx,%eax
c0105994:	c1 e8 08             	shr    $0x8,%eax
c0105997:	09 c1                	or     %eax,%ecx
c0105999:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010599c:	d1 e8                	shr    %eax
c010599e:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01059a1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01059a4:	d1 ea                	shr    %edx
c01059a6:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01059a9:	c1 ea 02             	shr    $0x2,%edx
c01059ac:	09 d0                	or     %edx,%eax
c01059ae:	89 c3                	mov    %eax,%ebx
c01059b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01059b3:	d1 e8                	shr    %eax
c01059b5:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01059b8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01059bb:	d1 ea                	shr    %edx
c01059bd:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01059c0:	c1 ea 02             	shr    $0x2,%edx
c01059c3:	09 d0                	or     %edx,%eax
c01059c5:	c1 e8 04             	shr    $0x4,%eax
c01059c8:	09 c3                	or     %eax,%ebx
c01059ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01059cd:	d1 e8                	shr    %eax
c01059cf:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01059d2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01059d5:	d1 ea                	shr    %edx
c01059d7:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01059da:	c1 ea 02             	shr    $0x2,%edx
c01059dd:	09 d0                	or     %edx,%eax
c01059df:	89 c6                	mov    %eax,%esi
c01059e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01059e4:	d1 e8                	shr    %eax
c01059e6:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01059e9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01059ec:	d1 ea                	shr    %edx
c01059ee:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01059f1:	c1 ea 02             	shr    $0x2,%edx
c01059f4:	09 d0                	or     %edx,%eax
c01059f6:	c1 e8 04             	shr    $0x4,%eax
c01059f9:	09 f0                	or     %esi,%eax
c01059fb:	c1 e8 08             	shr    $0x8,%eax
c01059fe:	09 d8                	or     %ebx,%eax
c0105a00:	c1 e8 10             	shr    $0x10,%eax
c0105a03:	09 c8                	or     %ecx,%eax
c0105a05:	d1 e8                	shr    %eax
c0105a07:	23 45 e4             	and    -0x1c(%ebp),%eax
c0105a0a:	89 45 80             	mov    %eax,-0x80(%ebp)
c0105a0d:	8b 3d 88 df 16 c0    	mov    0xc016df88,%edi
c0105a13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a16:	d1 e8                	shr    %eax
c0105a18:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105a1b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105a1e:	d1 ea                	shr    %edx
c0105a20:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105a23:	c1 ea 02             	shr    $0x2,%edx
c0105a26:	09 d0                	or     %edx,%eax
c0105a28:	89 c1                	mov    %eax,%ecx
c0105a2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a2d:	d1 e8                	shr    %eax
c0105a2f:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105a32:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105a35:	d1 ea                	shr    %edx
c0105a37:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105a3a:	c1 ea 02             	shr    $0x2,%edx
c0105a3d:	09 d0                	or     %edx,%eax
c0105a3f:	c1 e8 04             	shr    $0x4,%eax
c0105a42:	09 c1                	or     %eax,%ecx
c0105a44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a47:	d1 e8                	shr    %eax
c0105a49:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105a4c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105a4f:	d1 ea                	shr    %edx
c0105a51:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105a54:	c1 ea 02             	shr    $0x2,%edx
c0105a57:	09 d0                	or     %edx,%eax
c0105a59:	89 c3                	mov    %eax,%ebx
c0105a5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a5e:	d1 e8                	shr    %eax
c0105a60:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105a63:	89 c2                	mov    %eax,%edx
c0105a65:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a68:	d1 e8                	shr    %eax
c0105a6a:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105a6d:	c1 e8 02             	shr    $0x2,%eax
c0105a70:	09 d0                	or     %edx,%eax
c0105a72:	c1 e8 04             	shr    $0x4,%eax
c0105a75:	09 d8                	or     %ebx,%eax
c0105a77:	c1 e8 08             	shr    $0x8,%eax
c0105a7a:	89 ce                	mov    %ecx,%esi
c0105a7c:	09 c6                	or     %eax,%esi
c0105a7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a81:	d1 e8                	shr    %eax
c0105a83:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105a86:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105a89:	d1 ea                	shr    %edx
c0105a8b:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105a8e:	c1 ea 02             	shr    $0x2,%edx
c0105a91:	09 d0                	or     %edx,%eax
c0105a93:	89 c1                	mov    %eax,%ecx
c0105a95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a98:	d1 e8                	shr    %eax
c0105a9a:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105a9d:	89 c2                	mov    %eax,%edx
c0105a9f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105aa2:	d1 e8                	shr    %eax
c0105aa4:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105aa7:	c1 e8 02             	shr    $0x2,%eax
c0105aaa:	09 d0                	or     %edx,%eax
c0105aac:	c1 e8 04             	shr    $0x4,%eax
c0105aaf:	89 cb                	mov    %ecx,%ebx
c0105ab1:	09 c3                	or     %eax,%ebx
c0105ab3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105ab6:	d1 e8                	shr    %eax
c0105ab8:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105abb:	89 c2                	mov    %eax,%edx
c0105abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105ac0:	d1 e8                	shr    %eax
c0105ac2:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105ac5:	c1 e8 02             	shr    $0x2,%eax
c0105ac8:	89 d1                	mov    %edx,%ecx
c0105aca:	09 c1                	or     %eax,%ecx
c0105acc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105acf:	d1 e8                	shr    %eax
c0105ad1:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105ad4:	89 c2                	mov    %eax,%edx
c0105ad6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105ad9:	d1 e8                	shr    %eax
c0105adb:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105ade:	c1 e8 02             	shr    $0x2,%eax
c0105ae1:	09 d0                	or     %edx,%eax
c0105ae3:	c1 e8 04             	shr    $0x4,%eax
c0105ae6:	09 c8                	or     %ecx,%eax
c0105ae8:	c1 e8 08             	shr    $0x8,%eax
c0105aeb:	09 d8                	or     %ebx,%eax
c0105aed:	c1 e8 10             	shr    $0x10,%eax
c0105af0:	09 f0                	or     %esi,%eax
c0105af2:	d1 e8                	shr    %eax
c0105af4:	23 45 e4             	and    -0x1c(%ebp),%eax
c0105af7:	85 c0                	test   %eax,%eax
c0105af9:	0f 84 ea 00 00 00    	je     c0105be9 <buddy_init_segment+0x772>
c0105aff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105b02:	d1 e8                	shr    %eax
c0105b04:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105b07:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105b0a:	d1 ea                	shr    %edx
c0105b0c:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105b0f:	c1 ea 02             	shr    $0x2,%edx
c0105b12:	09 d0                	or     %edx,%eax
c0105b14:	89 c1                	mov    %eax,%ecx
c0105b16:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105b19:	d1 e8                	shr    %eax
c0105b1b:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105b1e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105b21:	d1 ea                	shr    %edx
c0105b23:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105b26:	c1 ea 02             	shr    $0x2,%edx
c0105b29:	09 d0                	or     %edx,%eax
c0105b2b:	c1 e8 04             	shr    $0x4,%eax
c0105b2e:	09 c1                	or     %eax,%ecx
c0105b30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105b33:	d1 e8                	shr    %eax
c0105b35:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105b38:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105b3b:	d1 ea                	shr    %edx
c0105b3d:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105b40:	c1 ea 02             	shr    $0x2,%edx
c0105b43:	09 d0                	or     %edx,%eax
c0105b45:	89 c3                	mov    %eax,%ebx
c0105b47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105b4a:	d1 e8                	shr    %eax
c0105b4c:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105b4f:	89 c2                	mov    %eax,%edx
c0105b51:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105b54:	d1 e8                	shr    %eax
c0105b56:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105b59:	c1 e8 02             	shr    $0x2,%eax
c0105b5c:	09 d0                	or     %edx,%eax
c0105b5e:	c1 e8 04             	shr    $0x4,%eax
c0105b61:	09 d8                	or     %ebx,%eax
c0105b63:	c1 e8 08             	shr    $0x8,%eax
c0105b66:	89 ce                	mov    %ecx,%esi
c0105b68:	09 c6                	or     %eax,%esi
c0105b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105b6d:	d1 e8                	shr    %eax
c0105b6f:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105b72:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105b75:	d1 ea                	shr    %edx
c0105b77:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105b7a:	c1 ea 02             	shr    $0x2,%edx
c0105b7d:	09 d0                	or     %edx,%eax
c0105b7f:	89 c1                	mov    %eax,%ecx
c0105b81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105b84:	d1 e8                	shr    %eax
c0105b86:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105b89:	89 c2                	mov    %eax,%edx
c0105b8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105b8e:	d1 e8                	shr    %eax
c0105b90:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105b93:	c1 e8 02             	shr    $0x2,%eax
c0105b96:	09 d0                	or     %edx,%eax
c0105b98:	c1 e8 04             	shr    $0x4,%eax
c0105b9b:	89 cb                	mov    %ecx,%ebx
c0105b9d:	09 c3                	or     %eax,%ebx
c0105b9f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105ba2:	d1 e8                	shr    %eax
c0105ba4:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105ba7:	89 c2                	mov    %eax,%edx
c0105ba9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105bac:	d1 e8                	shr    %eax
c0105bae:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105bb1:	c1 e8 02             	shr    $0x2,%eax
c0105bb4:	89 d1                	mov    %edx,%ecx
c0105bb6:	09 c1                	or     %eax,%ecx
c0105bb8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105bbb:	d1 e8                	shr    %eax
c0105bbd:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105bc0:	89 c2                	mov    %eax,%edx
c0105bc2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105bc5:	d1 e8                	shr    %eax
c0105bc7:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105bca:	c1 e8 02             	shr    $0x2,%eax
c0105bcd:	09 d0                	or     %edx,%eax
c0105bcf:	c1 e8 04             	shr    $0x4,%eax
c0105bd2:	09 c8                	or     %ecx,%eax
c0105bd4:	c1 e8 08             	shr    $0x8,%eax
c0105bd7:	09 d8                	or     %ebx,%eax
c0105bd9:	c1 e8 10             	shr    $0x10,%eax
c0105bdc:	09 f0                	or     %esi,%eax
c0105bde:	d1 e8                	shr    %eax
c0105be0:	f7 d0                	not    %eax
c0105be2:	23 45 e4             	and    -0x1c(%ebp),%eax
c0105be5:	89 c6                	mov    %eax,%esi
c0105be7:	eb 03                	jmp    c0105bec <buddy_init_segment+0x775>
c0105be9:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0105bec:	89 f8                	mov    %edi,%eax
c0105bee:	ba 00 00 00 00       	mov    $0x0,%edx
c0105bf3:	f7 f6                	div    %esi
c0105bf5:	8b 55 80             	mov    -0x80(%ebp),%edx
c0105bf8:	0f af d0             	imul   %eax,%edx
c0105bfb:	89 d0                	mov    %edx,%eax
c0105bfd:	c1 e0 03             	shl    $0x3,%eax
c0105c00:	01 d0                	add    %edx,%eax
c0105c02:	c1 e0 02             	shl    $0x2,%eax
c0105c05:	03 45 84             	add    -0x7c(%ebp),%eax
c0105c08:	89 45 cc             	mov    %eax,-0x34(%ebp)
        page->property = alloc_size;
c0105c0b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105c0e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0105c11:	89 50 08             	mov    %edx,0x8(%eax)
        list_add(&(free_list), &(page->page_link));
c0105c14:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105c17:	83 c0 10             	add    $0x10,%eax
c0105c1a:	c7 45 ac 54 11 17 c0 	movl   $0xc0171154,-0x54(%ebp)
c0105c21:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0105c24:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0105c27:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0105c2a:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105c2d:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0105c30:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105c33:	8b 40 04             	mov    0x4(%eax),%eax
c0105c36:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0105c39:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0105c3c:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0105c3f:	89 55 98             	mov    %edx,-0x68(%ebp)
c0105c42:	89 45 94             	mov    %eax,-0x6c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0105c45:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0105c48:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0105c4b:	89 10                	mov    %edx,(%eax)
c0105c4d:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0105c50:	8b 10                	mov    (%eax),%edx
c0105c52:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105c55:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0105c58:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0105c5b:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0105c5e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0105c61:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0105c64:	8b 55 98             	mov    -0x68(%ebp),%edx
c0105c67:	89 10                	mov    %edx,(%eax)
    }
}
c0105c69:	81 c4 8c 00 00 00    	add    $0x8c,%esp
c0105c6f:	5b                   	pop    %ebx
c0105c70:	5e                   	pop    %esi
c0105c71:	5f                   	pop    %edi
c0105c72:	5d                   	pop    %ebp
c0105c73:	c3                   	ret    

c0105c74 <buddy_init>:

static void
buddy_init(void) {
c0105c74:	55                   	push   %ebp
c0105c75:	89 e5                	mov    %esp,%ebp
c0105c77:	83 ec 10             	sub    $0x10,%esp
c0105c7a:	c7 45 fc 54 11 17 c0 	movl   $0xc0171154,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105c81:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105c84:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0105c87:	89 50 04             	mov    %edx,0x4(%eax)
c0105c8a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105c8d:	8b 50 04             	mov    0x4(%eax),%edx
c0105c90:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105c93:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0105c95:	c7 05 5c 11 17 c0 00 	movl   $0x0,0xc017115c
c0105c9c:	00 00 00 
}
c0105c9f:	c9                   	leave  
c0105ca0:	c3                   	ret    

c0105ca1 <buddy_init_memmap>:

static void
buddy_init_memmap(struct Page *base, size_t n) {
c0105ca1:	55                   	push   %ebp
c0105ca2:	89 e5                	mov    %esp,%ebp
c0105ca4:	83 ec 28             	sub    $0x28,%esp
    assert(n > 0);
c0105ca7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105cab:	75 24                	jne    c0105cd1 <buddy_init_memmap+0x30>
c0105cad:	c7 44 24 0c f3 2d 12 	movl   $0xc0122df3,0xc(%esp)
c0105cb4:	c0 
c0105cb5:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0105cbc:	c0 
c0105cbd:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c0105cc4:	00 
c0105cc5:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0105ccc:	e8 45 b5 ff ff       	call   c0101216 <__panic>
    // Init pages
    struct Page *p;
    for (p = base; p < base + n; p++) {
c0105cd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105cd7:	eb 6a                	jmp    c0105d43 <buddy_init_memmap+0xa2>
        assert(PageReserved(p));
c0105cd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105cdc:	83 c0 04             	add    $0x4,%eax
c0105cdf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0105ce6:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105ce9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105cec:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105cef:	0f a3 10             	bt     %edx,(%eax)
c0105cf2:	19 c0                	sbb    %eax,%eax
c0105cf4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0105cf7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0105cfb:	0f 95 c0             	setne  %al
c0105cfe:	0f b6 c0             	movzbl %al,%eax
c0105d01:	85 c0                	test   %eax,%eax
c0105d03:	75 24                	jne    c0105d29 <buddy_init_memmap+0x88>
c0105d05:	c7 44 24 0c f9 2d 12 	movl   $0xc0122df9,0xc(%esp)
c0105d0c:	c0 
c0105d0d:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0105d14:	c0 
c0105d15:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0105d1c:	00 
c0105d1d:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0105d24:	e8 ed b4 ff ff       	call   c0101216 <__panic>
        p->flags = p->property = 0;
c0105d29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d2c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0105d33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d36:	8b 50 08             	mov    0x8(%eax),%edx
c0105d39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d3c:	89 50 04             	mov    %edx,0x4(%eax)
static void
buddy_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    // Init pages
    struct Page *p;
    for (p = base; p < base + n; p++) {
c0105d3f:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c0105d43:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105d46:	89 d0                	mov    %edx,%eax
c0105d48:	c1 e0 03             	shl    $0x3,%eax
c0105d4b:	01 d0                	add    %edx,%eax
c0105d4d:	c1 e0 02             	shl    $0x2,%eax
c0105d50:	89 c2                	mov    %eax,%edx
c0105d52:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d55:	01 d0                	add    %edx,%eax
c0105d57:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105d5a:	0f 87 79 ff ff ff    	ja     c0105cd9 <buddy_init_memmap+0x38>
        assert(PageReserved(p));
        p->flags = p->property = 0;
    }
    // Init size
    buddy_init_size(n);
c0105d60:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d63:	89 04 24             	mov    %eax,(%esp)
c0105d66:	e8 c2 f1 ff ff       	call   c0104f2d <buddy_init_size>
    // Init segment
    buddy_init_segment(base);
c0105d6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d6e:	89 04 24             	mov    %eax,(%esp)
c0105d71:	e8 01 f7 ff ff       	call   c0105477 <buddy_init_segment>
}
c0105d76:	c9                   	leave  
c0105d77:	c3                   	ret    

c0105d78 <buddy_alloc_pages>:

static struct Page *
buddy_alloc_pages(size_t n) {
c0105d78:	55                   	push   %ebp
c0105d79:	89 e5                	mov    %esp,%ebp
c0105d7b:	57                   	push   %edi
c0105d7c:	56                   	push   %esi
c0105d7d:	53                   	push   %ebx
c0105d7e:	81 ec 9c 00 00 00    	sub    $0x9c,%esp

    assert(n > 0);
c0105d84:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105d88:	75 24                	jne    c0105dae <buddy_alloc_pages+0x36>
c0105d8a:	c7 44 24 0c f3 2d 12 	movl   $0xc0122df3,0xc(%esp)
c0105d91:	c0 
c0105d92:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0105d99:	c0 
c0105d9a:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c0105da1:	00 
c0105da2:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0105da9:	e8 68 b4 ff ff       	call   c0101216 <__panic>
    struct Page *page;
    size_t block = BUDDY_ROOT;
c0105dae:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
    size_t length = UINT32_ROUND_UP(n);
c0105db5:	8b 45 08             	mov    0x8(%ebp),%eax
c0105db8:	d1 e8                	shr    %eax
c0105dba:	0b 45 08             	or     0x8(%ebp),%eax
c0105dbd:	8b 55 08             	mov    0x8(%ebp),%edx
c0105dc0:	d1 ea                	shr    %edx
c0105dc2:	0b 55 08             	or     0x8(%ebp),%edx
c0105dc5:	c1 ea 02             	shr    $0x2,%edx
c0105dc8:	09 d0                	or     %edx,%eax
c0105dca:	89 c1                	mov    %eax,%ecx
c0105dcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0105dcf:	d1 e8                	shr    %eax
c0105dd1:	0b 45 08             	or     0x8(%ebp),%eax
c0105dd4:	8b 55 08             	mov    0x8(%ebp),%edx
c0105dd7:	d1 ea                	shr    %edx
c0105dd9:	0b 55 08             	or     0x8(%ebp),%edx
c0105ddc:	c1 ea 02             	shr    $0x2,%edx
c0105ddf:	09 d0                	or     %edx,%eax
c0105de1:	c1 e8 04             	shr    $0x4,%eax
c0105de4:	09 c1                	or     %eax,%ecx
c0105de6:	8b 45 08             	mov    0x8(%ebp),%eax
c0105de9:	d1 e8                	shr    %eax
c0105deb:	0b 45 08             	or     0x8(%ebp),%eax
c0105dee:	8b 55 08             	mov    0x8(%ebp),%edx
c0105df1:	d1 ea                	shr    %edx
c0105df3:	0b 55 08             	or     0x8(%ebp),%edx
c0105df6:	c1 ea 02             	shr    $0x2,%edx
c0105df9:	09 d0                	or     %edx,%eax
c0105dfb:	89 c3                	mov    %eax,%ebx
c0105dfd:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e00:	d1 e8                	shr    %eax
c0105e02:	0b 45 08             	or     0x8(%ebp),%eax
c0105e05:	8b 55 08             	mov    0x8(%ebp),%edx
c0105e08:	d1 ea                	shr    %edx
c0105e0a:	0b 55 08             	or     0x8(%ebp),%edx
c0105e0d:	c1 ea 02             	shr    $0x2,%edx
c0105e10:	09 d0                	or     %edx,%eax
c0105e12:	c1 e8 04             	shr    $0x4,%eax
c0105e15:	09 d8                	or     %ebx,%eax
c0105e17:	c1 e8 08             	shr    $0x8,%eax
c0105e1a:	09 c1                	or     %eax,%ecx
c0105e1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e1f:	d1 e8                	shr    %eax
c0105e21:	0b 45 08             	or     0x8(%ebp),%eax
c0105e24:	8b 55 08             	mov    0x8(%ebp),%edx
c0105e27:	d1 ea                	shr    %edx
c0105e29:	0b 55 08             	or     0x8(%ebp),%edx
c0105e2c:	c1 ea 02             	shr    $0x2,%edx
c0105e2f:	09 d0                	or     %edx,%eax
c0105e31:	89 c3                	mov    %eax,%ebx
c0105e33:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e36:	d1 e8                	shr    %eax
c0105e38:	0b 45 08             	or     0x8(%ebp),%eax
c0105e3b:	8b 55 08             	mov    0x8(%ebp),%edx
c0105e3e:	d1 ea                	shr    %edx
c0105e40:	0b 55 08             	or     0x8(%ebp),%edx
c0105e43:	c1 ea 02             	shr    $0x2,%edx
c0105e46:	09 d0                	or     %edx,%eax
c0105e48:	c1 e8 04             	shr    $0x4,%eax
c0105e4b:	09 c3                	or     %eax,%ebx
c0105e4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e50:	d1 e8                	shr    %eax
c0105e52:	0b 45 08             	or     0x8(%ebp),%eax
c0105e55:	8b 55 08             	mov    0x8(%ebp),%edx
c0105e58:	d1 ea                	shr    %edx
c0105e5a:	0b 55 08             	or     0x8(%ebp),%edx
c0105e5d:	c1 ea 02             	shr    $0x2,%edx
c0105e60:	09 d0                	or     %edx,%eax
c0105e62:	89 c6                	mov    %eax,%esi
c0105e64:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e67:	d1 e8                	shr    %eax
c0105e69:	0b 45 08             	or     0x8(%ebp),%eax
c0105e6c:	8b 55 08             	mov    0x8(%ebp),%edx
c0105e6f:	d1 ea                	shr    %edx
c0105e71:	0b 55 08             	or     0x8(%ebp),%edx
c0105e74:	c1 ea 02             	shr    $0x2,%edx
c0105e77:	09 d0                	or     %edx,%eax
c0105e79:	c1 e8 04             	shr    $0x4,%eax
c0105e7c:	09 f0                	or     %esi,%eax
c0105e7e:	c1 e8 08             	shr    $0x8,%eax
c0105e81:	09 d8                	or     %ebx,%eax
c0105e83:	c1 e8 10             	shr    $0x10,%eax
c0105e86:	09 c8                	or     %ecx,%eax
c0105e88:	d1 e8                	shr    %eax
c0105e8a:	23 45 08             	and    0x8(%ebp),%eax
c0105e8d:	85 c0                	test   %eax,%eax
c0105e8f:	0f 84 de 00 00 00    	je     c0105f73 <buddy_alloc_pages+0x1fb>
c0105e95:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e98:	d1 e8                	shr    %eax
c0105e9a:	0b 45 08             	or     0x8(%ebp),%eax
c0105e9d:	8b 55 08             	mov    0x8(%ebp),%edx
c0105ea0:	d1 ea                	shr    %edx
c0105ea2:	0b 55 08             	or     0x8(%ebp),%edx
c0105ea5:	c1 ea 02             	shr    $0x2,%edx
c0105ea8:	09 d0                	or     %edx,%eax
c0105eaa:	89 c1                	mov    %eax,%ecx
c0105eac:	8b 45 08             	mov    0x8(%ebp),%eax
c0105eaf:	d1 e8                	shr    %eax
c0105eb1:	0b 45 08             	or     0x8(%ebp),%eax
c0105eb4:	8b 55 08             	mov    0x8(%ebp),%edx
c0105eb7:	d1 ea                	shr    %edx
c0105eb9:	0b 55 08             	or     0x8(%ebp),%edx
c0105ebc:	c1 ea 02             	shr    $0x2,%edx
c0105ebf:	09 d0                	or     %edx,%eax
c0105ec1:	c1 e8 04             	shr    $0x4,%eax
c0105ec4:	09 c1                	or     %eax,%ecx
c0105ec6:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ec9:	d1 e8                	shr    %eax
c0105ecb:	0b 45 08             	or     0x8(%ebp),%eax
c0105ece:	8b 55 08             	mov    0x8(%ebp),%edx
c0105ed1:	d1 ea                	shr    %edx
c0105ed3:	0b 55 08             	or     0x8(%ebp),%edx
c0105ed6:	c1 ea 02             	shr    $0x2,%edx
c0105ed9:	09 d0                	or     %edx,%eax
c0105edb:	89 c3                	mov    %eax,%ebx
c0105edd:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ee0:	d1 e8                	shr    %eax
c0105ee2:	0b 45 08             	or     0x8(%ebp),%eax
c0105ee5:	8b 55 08             	mov    0x8(%ebp),%edx
c0105ee8:	d1 ea                	shr    %edx
c0105eea:	0b 55 08             	or     0x8(%ebp),%edx
c0105eed:	c1 ea 02             	shr    $0x2,%edx
c0105ef0:	09 d0                	or     %edx,%eax
c0105ef2:	c1 e8 04             	shr    $0x4,%eax
c0105ef5:	09 d8                	or     %ebx,%eax
c0105ef7:	c1 e8 08             	shr    $0x8,%eax
c0105efa:	09 c1                	or     %eax,%ecx
c0105efc:	8b 45 08             	mov    0x8(%ebp),%eax
c0105eff:	d1 e8                	shr    %eax
c0105f01:	0b 45 08             	or     0x8(%ebp),%eax
c0105f04:	8b 55 08             	mov    0x8(%ebp),%edx
c0105f07:	d1 ea                	shr    %edx
c0105f09:	0b 55 08             	or     0x8(%ebp),%edx
c0105f0c:	c1 ea 02             	shr    $0x2,%edx
c0105f0f:	09 d0                	or     %edx,%eax
c0105f11:	89 c3                	mov    %eax,%ebx
c0105f13:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f16:	d1 e8                	shr    %eax
c0105f18:	0b 45 08             	or     0x8(%ebp),%eax
c0105f1b:	8b 55 08             	mov    0x8(%ebp),%edx
c0105f1e:	d1 ea                	shr    %edx
c0105f20:	0b 55 08             	or     0x8(%ebp),%edx
c0105f23:	c1 ea 02             	shr    $0x2,%edx
c0105f26:	09 d0                	or     %edx,%eax
c0105f28:	c1 e8 04             	shr    $0x4,%eax
c0105f2b:	09 c3                	or     %eax,%ebx
c0105f2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f30:	d1 e8                	shr    %eax
c0105f32:	0b 45 08             	or     0x8(%ebp),%eax
c0105f35:	8b 55 08             	mov    0x8(%ebp),%edx
c0105f38:	d1 ea                	shr    %edx
c0105f3a:	0b 55 08             	or     0x8(%ebp),%edx
c0105f3d:	c1 ea 02             	shr    $0x2,%edx
c0105f40:	09 d0                	or     %edx,%eax
c0105f42:	89 c6                	mov    %eax,%esi
c0105f44:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f47:	d1 e8                	shr    %eax
c0105f49:	0b 45 08             	or     0x8(%ebp),%eax
c0105f4c:	8b 55 08             	mov    0x8(%ebp),%edx
c0105f4f:	d1 ea                	shr    %edx
c0105f51:	0b 55 08             	or     0x8(%ebp),%edx
c0105f54:	c1 ea 02             	shr    $0x2,%edx
c0105f57:	09 d0                	or     %edx,%eax
c0105f59:	c1 e8 04             	shr    $0x4,%eax
c0105f5c:	09 f0                	or     %esi,%eax
c0105f5e:	c1 e8 08             	shr    $0x8,%eax
c0105f61:	09 d8                	or     %ebx,%eax
c0105f63:	c1 e8 10             	shr    $0x10,%eax
c0105f66:	09 c8                	or     %ecx,%eax
c0105f68:	d1 e8                	shr    %eax
c0105f6a:	f7 d0                	not    %eax
c0105f6c:	23 45 08             	and    0x8(%ebp),%eax
c0105f6f:	01 c0                	add    %eax,%eax
c0105f71:	eb 03                	jmp    c0105f76 <buddy_alloc_pages+0x1fe>
c0105f73:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f76:	89 45 e0             	mov    %eax,-0x20(%ebp)
    // Find block
    while (length <= buddy_segment[block] && length < BUDDY_LENGTH(block)) {
c0105f79:	e9 ee 09 00 00       	jmp    c010696c <buddy_alloc_pages+0xbf4>
        size_t left = BUDDY_LEFT(block);
c0105f7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105f81:	01 c0                	add    %eax,%eax
c0105f83:	89 45 dc             	mov    %eax,-0x24(%ebp)
        size_t right = BUDDY_RIGHT(block);
c0105f86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105f89:	01 c0                	add    %eax,%eax
c0105f8b:	83 c0 01             	add    $0x1,%eax
c0105f8e:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (BUDDY_EMPTY(block)) {                   // Split
c0105f91:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c0105f96:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105f99:	c1 e2 02             	shl    $0x2,%edx
c0105f9c:	01 d0                	add    %edx,%eax
c0105f9e:	8b 00                	mov    (%eax),%eax
c0105fa0:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
c0105fa6:	8b 3d 88 df 16 c0    	mov    0xc016df88,%edi
c0105fac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105faf:	d1 e8                	shr    %eax
c0105fb1:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105fb4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105fb7:	d1 ea                	shr    %edx
c0105fb9:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105fbc:	c1 ea 02             	shr    $0x2,%edx
c0105fbf:	09 d0                	or     %edx,%eax
c0105fc1:	89 c1                	mov    %eax,%ecx
c0105fc3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105fc6:	d1 e8                	shr    %eax
c0105fc8:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105fcb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105fce:	d1 ea                	shr    %edx
c0105fd0:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105fd3:	c1 ea 02             	shr    $0x2,%edx
c0105fd6:	09 d0                	or     %edx,%eax
c0105fd8:	c1 e8 04             	shr    $0x4,%eax
c0105fdb:	09 c1                	or     %eax,%ecx
c0105fdd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105fe0:	d1 e8                	shr    %eax
c0105fe2:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105fe5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105fe8:	d1 ea                	shr    %edx
c0105fea:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0105fed:	c1 ea 02             	shr    $0x2,%edx
c0105ff0:	09 d0                	or     %edx,%eax
c0105ff2:	89 c3                	mov    %eax,%ebx
c0105ff4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105ff7:	d1 e8                	shr    %eax
c0105ff9:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105ffc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105fff:	d1 ea                	shr    %edx
c0106001:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106004:	c1 ea 02             	shr    $0x2,%edx
c0106007:	09 d0                	or     %edx,%eax
c0106009:	c1 e8 04             	shr    $0x4,%eax
c010600c:	09 d8                	or     %ebx,%eax
c010600e:	c1 e8 08             	shr    $0x8,%eax
c0106011:	89 cb                	mov    %ecx,%ebx
c0106013:	09 c3                	or     %eax,%ebx
c0106015:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106018:	d1 e8                	shr    %eax
c010601a:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010601d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106020:	d1 ea                	shr    %edx
c0106022:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106025:	c1 ea 02             	shr    $0x2,%edx
c0106028:	09 d0                	or     %edx,%eax
c010602a:	89 c1                	mov    %eax,%ecx
c010602c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010602f:	d1 e8                	shr    %eax
c0106031:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106034:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106037:	d1 ea                	shr    %edx
c0106039:	0b 55 e4             	or     -0x1c(%ebp),%edx
c010603c:	c1 ea 02             	shr    $0x2,%edx
c010603f:	09 d0                	or     %edx,%eax
c0106041:	c1 e8 04             	shr    $0x4,%eax
c0106044:	09 c1                	or     %eax,%ecx
c0106046:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106049:	d1 e8                	shr    %eax
c010604b:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010604e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106051:	d1 ea                	shr    %edx
c0106053:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106056:	c1 ea 02             	shr    $0x2,%edx
c0106059:	09 d0                	or     %edx,%eax
c010605b:	89 c6                	mov    %eax,%esi
c010605d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106060:	d1 e8                	shr    %eax
c0106062:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106065:	89 c2                	mov    %eax,%edx
c0106067:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010606a:	d1 e8                	shr    %eax
c010606c:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010606f:	c1 e8 02             	shr    $0x2,%eax
c0106072:	09 d0                	or     %edx,%eax
c0106074:	c1 e8 04             	shr    $0x4,%eax
c0106077:	09 f0                	or     %esi,%eax
c0106079:	c1 e8 08             	shr    $0x8,%eax
c010607c:	09 c8                	or     %ecx,%eax
c010607e:	c1 e8 10             	shr    $0x10,%eax
c0106081:	09 d8                	or     %ebx,%eax
c0106083:	d1 e8                	shr    %eax
c0106085:	23 45 e4             	and    -0x1c(%ebp),%eax
c0106088:	85 c0                	test   %eax,%eax
c010608a:	0f 84 e2 00 00 00    	je     c0106172 <buddy_alloc_pages+0x3fa>
c0106090:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106093:	d1 e8                	shr    %eax
c0106095:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106098:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010609b:	d1 ea                	shr    %edx
c010609d:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01060a0:	c1 ea 02             	shr    $0x2,%edx
c01060a3:	09 d0                	or     %edx,%eax
c01060a5:	89 c1                	mov    %eax,%ecx
c01060a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01060aa:	d1 e8                	shr    %eax
c01060ac:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01060af:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01060b2:	d1 ea                	shr    %edx
c01060b4:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01060b7:	c1 ea 02             	shr    $0x2,%edx
c01060ba:	09 d0                	or     %edx,%eax
c01060bc:	c1 e8 04             	shr    $0x4,%eax
c01060bf:	09 c1                	or     %eax,%ecx
c01060c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01060c4:	d1 e8                	shr    %eax
c01060c6:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01060c9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01060cc:	d1 ea                	shr    %edx
c01060ce:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01060d1:	c1 ea 02             	shr    $0x2,%edx
c01060d4:	09 d0                	or     %edx,%eax
c01060d6:	89 c3                	mov    %eax,%ebx
c01060d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01060db:	d1 e8                	shr    %eax
c01060dd:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01060e0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01060e3:	d1 ea                	shr    %edx
c01060e5:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01060e8:	c1 ea 02             	shr    $0x2,%edx
c01060eb:	09 d0                	or     %edx,%eax
c01060ed:	c1 e8 04             	shr    $0x4,%eax
c01060f0:	09 d8                	or     %ebx,%eax
c01060f2:	c1 e8 08             	shr    $0x8,%eax
c01060f5:	89 cb                	mov    %ecx,%ebx
c01060f7:	09 c3                	or     %eax,%ebx
c01060f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01060fc:	d1 e8                	shr    %eax
c01060fe:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106101:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106104:	d1 ea                	shr    %edx
c0106106:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106109:	c1 ea 02             	shr    $0x2,%edx
c010610c:	09 d0                	or     %edx,%eax
c010610e:	89 c1                	mov    %eax,%ecx
c0106110:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106113:	d1 e8                	shr    %eax
c0106115:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106118:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010611b:	d1 ea                	shr    %edx
c010611d:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106120:	c1 ea 02             	shr    $0x2,%edx
c0106123:	09 d0                	or     %edx,%eax
c0106125:	c1 e8 04             	shr    $0x4,%eax
c0106128:	09 c1                	or     %eax,%ecx
c010612a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010612d:	d1 e8                	shr    %eax
c010612f:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106132:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106135:	d1 ea                	shr    %edx
c0106137:	0b 55 e4             	or     -0x1c(%ebp),%edx
c010613a:	c1 ea 02             	shr    $0x2,%edx
c010613d:	09 d0                	or     %edx,%eax
c010613f:	89 c6                	mov    %eax,%esi
c0106141:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106144:	d1 e8                	shr    %eax
c0106146:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106149:	89 c2                	mov    %eax,%edx
c010614b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010614e:	d1 e8                	shr    %eax
c0106150:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106153:	c1 e8 02             	shr    $0x2,%eax
c0106156:	09 d0                	or     %edx,%eax
c0106158:	c1 e8 04             	shr    $0x4,%eax
c010615b:	09 f0                	or     %esi,%eax
c010615d:	c1 e8 08             	shr    $0x8,%eax
c0106160:	09 c8                	or     %ecx,%eax
c0106162:	c1 e8 10             	shr    $0x10,%eax
c0106165:	09 d8                	or     %ebx,%eax
c0106167:	d1 e8                	shr    %eax
c0106169:	f7 d0                	not    %eax
c010616b:	23 45 e4             	and    -0x1c(%ebp),%eax
c010616e:	89 c6                	mov    %eax,%esi
c0106170:	eb 03                	jmp    c0106175 <buddy_alloc_pages+0x3fd>
c0106172:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0106175:	89 f8                	mov    %edi,%eax
c0106177:	ba 00 00 00 00       	mov    $0x0,%edx
c010617c:	f7 f6                	div    %esi
c010617e:	39 85 74 ff ff ff    	cmp    %eax,-0x8c(%ebp)
c0106184:	0f 85 4a 07 00 00    	jne    c01068d4 <buddy_alloc_pages+0xb5c>
            size_t begin = BUDDY_BEGIN(block);
c010618a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010618d:	d1 e8                	shr    %eax
c010618f:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106192:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106195:	d1 ea                	shr    %edx
c0106197:	0b 55 e4             	or     -0x1c(%ebp),%edx
c010619a:	c1 ea 02             	shr    $0x2,%edx
c010619d:	09 d0                	or     %edx,%eax
c010619f:	89 c1                	mov    %eax,%ecx
c01061a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01061a4:	d1 e8                	shr    %eax
c01061a6:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01061a9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01061ac:	d1 ea                	shr    %edx
c01061ae:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01061b1:	c1 ea 02             	shr    $0x2,%edx
c01061b4:	09 d0                	or     %edx,%eax
c01061b6:	c1 e8 04             	shr    $0x4,%eax
c01061b9:	09 c1                	or     %eax,%ecx
c01061bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01061be:	d1 e8                	shr    %eax
c01061c0:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01061c3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01061c6:	d1 ea                	shr    %edx
c01061c8:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01061cb:	c1 ea 02             	shr    $0x2,%edx
c01061ce:	09 d0                	or     %edx,%eax
c01061d0:	89 c3                	mov    %eax,%ebx
c01061d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01061d5:	d1 e8                	shr    %eax
c01061d7:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01061da:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01061dd:	d1 ea                	shr    %edx
c01061df:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01061e2:	c1 ea 02             	shr    $0x2,%edx
c01061e5:	09 d0                	or     %edx,%eax
c01061e7:	c1 e8 04             	shr    $0x4,%eax
c01061ea:	09 d8                	or     %ebx,%eax
c01061ec:	c1 e8 08             	shr    $0x8,%eax
c01061ef:	09 c1                	or     %eax,%ecx
c01061f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01061f4:	d1 e8                	shr    %eax
c01061f6:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01061f9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01061fc:	d1 ea                	shr    %edx
c01061fe:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106201:	c1 ea 02             	shr    $0x2,%edx
c0106204:	09 d0                	or     %edx,%eax
c0106206:	89 c3                	mov    %eax,%ebx
c0106208:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010620b:	d1 e8                	shr    %eax
c010620d:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106210:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106213:	d1 ea                	shr    %edx
c0106215:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106218:	c1 ea 02             	shr    $0x2,%edx
c010621b:	09 d0                	or     %edx,%eax
c010621d:	c1 e8 04             	shr    $0x4,%eax
c0106220:	09 c3                	or     %eax,%ebx
c0106222:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106225:	d1 e8                	shr    %eax
c0106227:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010622a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010622d:	d1 ea                	shr    %edx
c010622f:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106232:	c1 ea 02             	shr    $0x2,%edx
c0106235:	09 d0                	or     %edx,%eax
c0106237:	89 c6                	mov    %eax,%esi
c0106239:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010623c:	d1 e8                	shr    %eax
c010623e:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106241:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106244:	d1 ea                	shr    %edx
c0106246:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106249:	c1 ea 02             	shr    $0x2,%edx
c010624c:	09 d0                	or     %edx,%eax
c010624e:	c1 e8 04             	shr    $0x4,%eax
c0106251:	09 f0                	or     %esi,%eax
c0106253:	c1 e8 08             	shr    $0x8,%eax
c0106256:	09 d8                	or     %ebx,%eax
c0106258:	c1 e8 10             	shr    $0x10,%eax
c010625b:	09 c8                	or     %ecx,%eax
c010625d:	d1 e8                	shr    %eax
c010625f:	23 45 e4             	and    -0x1c(%ebp),%eax
c0106262:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
c0106268:	8b 3d 88 df 16 c0    	mov    0xc016df88,%edi
c010626e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106271:	d1 e8                	shr    %eax
c0106273:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106276:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106279:	d1 ea                	shr    %edx
c010627b:	0b 55 e4             	or     -0x1c(%ebp),%edx
c010627e:	c1 ea 02             	shr    $0x2,%edx
c0106281:	09 d0                	or     %edx,%eax
c0106283:	89 c1                	mov    %eax,%ecx
c0106285:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106288:	d1 e8                	shr    %eax
c010628a:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010628d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106290:	d1 ea                	shr    %edx
c0106292:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106295:	c1 ea 02             	shr    $0x2,%edx
c0106298:	09 d0                	or     %edx,%eax
c010629a:	c1 e8 04             	shr    $0x4,%eax
c010629d:	09 c1                	or     %eax,%ecx
c010629f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01062a2:	d1 e8                	shr    %eax
c01062a4:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01062a7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01062aa:	d1 ea                	shr    %edx
c01062ac:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01062af:	c1 ea 02             	shr    $0x2,%edx
c01062b2:	09 d0                	or     %edx,%eax
c01062b4:	89 c3                	mov    %eax,%ebx
c01062b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01062b9:	d1 e8                	shr    %eax
c01062bb:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01062be:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01062c1:	d1 ea                	shr    %edx
c01062c3:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01062c6:	c1 ea 02             	shr    $0x2,%edx
c01062c9:	09 d0                	or     %edx,%eax
c01062cb:	c1 e8 04             	shr    $0x4,%eax
c01062ce:	09 d8                	or     %ebx,%eax
c01062d0:	c1 e8 08             	shr    $0x8,%eax
c01062d3:	89 cb                	mov    %ecx,%ebx
c01062d5:	09 c3                	or     %eax,%ebx
c01062d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01062da:	d1 e8                	shr    %eax
c01062dc:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01062df:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01062e2:	d1 ea                	shr    %edx
c01062e4:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01062e7:	c1 ea 02             	shr    $0x2,%edx
c01062ea:	09 d0                	or     %edx,%eax
c01062ec:	89 c1                	mov    %eax,%ecx
c01062ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01062f1:	d1 e8                	shr    %eax
c01062f3:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01062f6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01062f9:	d1 ea                	shr    %edx
c01062fb:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01062fe:	c1 ea 02             	shr    $0x2,%edx
c0106301:	09 d0                	or     %edx,%eax
c0106303:	c1 e8 04             	shr    $0x4,%eax
c0106306:	09 c1                	or     %eax,%ecx
c0106308:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010630b:	d1 e8                	shr    %eax
c010630d:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106310:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106313:	d1 ea                	shr    %edx
c0106315:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106318:	c1 ea 02             	shr    $0x2,%edx
c010631b:	09 d0                	or     %edx,%eax
c010631d:	89 c6                	mov    %eax,%esi
c010631f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106322:	d1 e8                	shr    %eax
c0106324:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106327:	89 c2                	mov    %eax,%edx
c0106329:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010632c:	d1 e8                	shr    %eax
c010632e:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106331:	c1 e8 02             	shr    $0x2,%eax
c0106334:	09 d0                	or     %edx,%eax
c0106336:	c1 e8 04             	shr    $0x4,%eax
c0106339:	09 f0                	or     %esi,%eax
c010633b:	c1 e8 08             	shr    $0x8,%eax
c010633e:	09 c8                	or     %ecx,%eax
c0106340:	c1 e8 10             	shr    $0x10,%eax
c0106343:	09 d8                	or     %ebx,%eax
c0106345:	d1 e8                	shr    %eax
c0106347:	23 45 e4             	and    -0x1c(%ebp),%eax
c010634a:	85 c0                	test   %eax,%eax
c010634c:	0f 84 e2 00 00 00    	je     c0106434 <buddy_alloc_pages+0x6bc>
c0106352:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106355:	d1 e8                	shr    %eax
c0106357:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010635a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010635d:	d1 ea                	shr    %edx
c010635f:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106362:	c1 ea 02             	shr    $0x2,%edx
c0106365:	09 d0                	or     %edx,%eax
c0106367:	89 c1                	mov    %eax,%ecx
c0106369:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010636c:	d1 e8                	shr    %eax
c010636e:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106371:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106374:	d1 ea                	shr    %edx
c0106376:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106379:	c1 ea 02             	shr    $0x2,%edx
c010637c:	09 d0                	or     %edx,%eax
c010637e:	c1 e8 04             	shr    $0x4,%eax
c0106381:	09 c1                	or     %eax,%ecx
c0106383:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106386:	d1 e8                	shr    %eax
c0106388:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010638b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010638e:	d1 ea                	shr    %edx
c0106390:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106393:	c1 ea 02             	shr    $0x2,%edx
c0106396:	09 d0                	or     %edx,%eax
c0106398:	89 c3                	mov    %eax,%ebx
c010639a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010639d:	d1 e8                	shr    %eax
c010639f:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01063a2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01063a5:	d1 ea                	shr    %edx
c01063a7:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01063aa:	c1 ea 02             	shr    $0x2,%edx
c01063ad:	09 d0                	or     %edx,%eax
c01063af:	c1 e8 04             	shr    $0x4,%eax
c01063b2:	09 d8                	or     %ebx,%eax
c01063b4:	c1 e8 08             	shr    $0x8,%eax
c01063b7:	89 cb                	mov    %ecx,%ebx
c01063b9:	09 c3                	or     %eax,%ebx
c01063bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01063be:	d1 e8                	shr    %eax
c01063c0:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01063c3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01063c6:	d1 ea                	shr    %edx
c01063c8:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01063cb:	c1 ea 02             	shr    $0x2,%edx
c01063ce:	09 d0                	or     %edx,%eax
c01063d0:	89 c1                	mov    %eax,%ecx
c01063d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01063d5:	d1 e8                	shr    %eax
c01063d7:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01063da:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01063dd:	d1 ea                	shr    %edx
c01063df:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01063e2:	c1 ea 02             	shr    $0x2,%edx
c01063e5:	09 d0                	or     %edx,%eax
c01063e7:	c1 e8 04             	shr    $0x4,%eax
c01063ea:	09 c1                	or     %eax,%ecx
c01063ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01063ef:	d1 e8                	shr    %eax
c01063f1:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01063f4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01063f7:	d1 ea                	shr    %edx
c01063f9:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01063fc:	c1 ea 02             	shr    $0x2,%edx
c01063ff:	09 d0                	or     %edx,%eax
c0106401:	89 c6                	mov    %eax,%esi
c0106403:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106406:	d1 e8                	shr    %eax
c0106408:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010640b:	89 c2                	mov    %eax,%edx
c010640d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106410:	d1 e8                	shr    %eax
c0106412:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106415:	c1 e8 02             	shr    $0x2,%eax
c0106418:	09 d0                	or     %edx,%eax
c010641a:	c1 e8 04             	shr    $0x4,%eax
c010641d:	09 f0                	or     %esi,%eax
c010641f:	c1 e8 08             	shr    $0x8,%eax
c0106422:	09 c8                	or     %ecx,%eax
c0106424:	c1 e8 10             	shr    $0x10,%eax
c0106427:	09 d8                	or     %ebx,%eax
c0106429:	d1 e8                	shr    %eax
c010642b:	f7 d0                	not    %eax
c010642d:	23 45 e4             	and    -0x1c(%ebp),%eax
c0106430:	89 c6                	mov    %eax,%esi
c0106432:	eb 03                	jmp    c0106437 <buddy_alloc_pages+0x6bf>
c0106434:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0106437:	89 f8                	mov    %edi,%eax
c0106439:	ba 00 00 00 00       	mov    $0x0,%edx
c010643e:	f7 f6                	div    %esi
c0106440:	0f af 85 74 ff ff ff 	imul   -0x8c(%ebp),%eax
c0106447:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            size_t end = BUDDY_END(block);
c010644a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010644d:	d1 e8                	shr    %eax
c010644f:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106452:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106455:	d1 ea                	shr    %edx
c0106457:	0b 55 e4             	or     -0x1c(%ebp),%edx
c010645a:	c1 ea 02             	shr    $0x2,%edx
c010645d:	09 d0                	or     %edx,%eax
c010645f:	89 c1                	mov    %eax,%ecx
c0106461:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106464:	d1 e8                	shr    %eax
c0106466:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106469:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010646c:	d1 ea                	shr    %edx
c010646e:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106471:	c1 ea 02             	shr    $0x2,%edx
c0106474:	09 d0                	or     %edx,%eax
c0106476:	c1 e8 04             	shr    $0x4,%eax
c0106479:	09 c1                	or     %eax,%ecx
c010647b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010647e:	d1 e8                	shr    %eax
c0106480:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106483:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106486:	d1 ea                	shr    %edx
c0106488:	0b 55 e4             	or     -0x1c(%ebp),%edx
c010648b:	c1 ea 02             	shr    $0x2,%edx
c010648e:	09 d0                	or     %edx,%eax
c0106490:	89 c3                	mov    %eax,%ebx
c0106492:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106495:	d1 e8                	shr    %eax
c0106497:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010649a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010649d:	d1 ea                	shr    %edx
c010649f:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01064a2:	c1 ea 02             	shr    $0x2,%edx
c01064a5:	09 d0                	or     %edx,%eax
c01064a7:	c1 e8 04             	shr    $0x4,%eax
c01064aa:	09 d8                	or     %ebx,%eax
c01064ac:	c1 e8 08             	shr    $0x8,%eax
c01064af:	09 c1                	or     %eax,%ecx
c01064b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01064b4:	d1 e8                	shr    %eax
c01064b6:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01064b9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01064bc:	d1 ea                	shr    %edx
c01064be:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01064c1:	c1 ea 02             	shr    $0x2,%edx
c01064c4:	09 d0                	or     %edx,%eax
c01064c6:	89 c3                	mov    %eax,%ebx
c01064c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01064cb:	d1 e8                	shr    %eax
c01064cd:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01064d0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01064d3:	d1 ea                	shr    %edx
c01064d5:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01064d8:	c1 ea 02             	shr    $0x2,%edx
c01064db:	09 d0                	or     %edx,%eax
c01064dd:	c1 e8 04             	shr    $0x4,%eax
c01064e0:	09 c3                	or     %eax,%ebx
c01064e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01064e5:	d1 e8                	shr    %eax
c01064e7:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01064ea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01064ed:	d1 ea                	shr    %edx
c01064ef:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01064f2:	c1 ea 02             	shr    $0x2,%edx
c01064f5:	09 d0                	or     %edx,%eax
c01064f7:	89 c6                	mov    %eax,%esi
c01064f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01064fc:	d1 e8                	shr    %eax
c01064fe:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106501:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106504:	d1 ea                	shr    %edx
c0106506:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106509:	c1 ea 02             	shr    $0x2,%edx
c010650c:	09 d0                	or     %edx,%eax
c010650e:	c1 e8 04             	shr    $0x4,%eax
c0106511:	09 f0                	or     %esi,%eax
c0106513:	c1 e8 08             	shr    $0x8,%eax
c0106516:	09 d8                	or     %ebx,%eax
c0106518:	c1 e8 10             	shr    $0x10,%eax
c010651b:	09 c8                	or     %ecx,%eax
c010651d:	d1 e8                	shr    %eax
c010651f:	23 45 e4             	and    -0x1c(%ebp),%eax
c0106522:	83 c0 01             	add    $0x1,%eax
c0106525:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
c010652b:	8b 3d 88 df 16 c0    	mov    0xc016df88,%edi
c0106531:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106534:	d1 e8                	shr    %eax
c0106536:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106539:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010653c:	d1 ea                	shr    %edx
c010653e:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106541:	c1 ea 02             	shr    $0x2,%edx
c0106544:	09 d0                	or     %edx,%eax
c0106546:	89 c1                	mov    %eax,%ecx
c0106548:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010654b:	d1 e8                	shr    %eax
c010654d:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106550:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106553:	d1 ea                	shr    %edx
c0106555:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106558:	c1 ea 02             	shr    $0x2,%edx
c010655b:	09 d0                	or     %edx,%eax
c010655d:	c1 e8 04             	shr    $0x4,%eax
c0106560:	09 c1                	or     %eax,%ecx
c0106562:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106565:	d1 e8                	shr    %eax
c0106567:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010656a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010656d:	d1 ea                	shr    %edx
c010656f:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106572:	c1 ea 02             	shr    $0x2,%edx
c0106575:	09 d0                	or     %edx,%eax
c0106577:	89 c3                	mov    %eax,%ebx
c0106579:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010657c:	d1 e8                	shr    %eax
c010657e:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106581:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106584:	d1 ea                	shr    %edx
c0106586:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106589:	c1 ea 02             	shr    $0x2,%edx
c010658c:	09 d0                	or     %edx,%eax
c010658e:	c1 e8 04             	shr    $0x4,%eax
c0106591:	09 d8                	or     %ebx,%eax
c0106593:	c1 e8 08             	shr    $0x8,%eax
c0106596:	89 cb                	mov    %ecx,%ebx
c0106598:	09 c3                	or     %eax,%ebx
c010659a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010659d:	d1 e8                	shr    %eax
c010659f:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01065a2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01065a5:	d1 ea                	shr    %edx
c01065a7:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01065aa:	c1 ea 02             	shr    $0x2,%edx
c01065ad:	09 d0                	or     %edx,%eax
c01065af:	89 c1                	mov    %eax,%ecx
c01065b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065b4:	d1 e8                	shr    %eax
c01065b6:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01065b9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01065bc:	d1 ea                	shr    %edx
c01065be:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01065c1:	c1 ea 02             	shr    $0x2,%edx
c01065c4:	09 d0                	or     %edx,%eax
c01065c6:	c1 e8 04             	shr    $0x4,%eax
c01065c9:	09 c1                	or     %eax,%ecx
c01065cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065ce:	d1 e8                	shr    %eax
c01065d0:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01065d3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01065d6:	d1 ea                	shr    %edx
c01065d8:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01065db:	c1 ea 02             	shr    $0x2,%edx
c01065de:	09 d0                	or     %edx,%eax
c01065e0:	89 c6                	mov    %eax,%esi
c01065e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065e5:	d1 e8                	shr    %eax
c01065e7:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01065ea:	89 c2                	mov    %eax,%edx
c01065ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065ef:	d1 e8                	shr    %eax
c01065f1:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01065f4:	c1 e8 02             	shr    $0x2,%eax
c01065f7:	09 d0                	or     %edx,%eax
c01065f9:	c1 e8 04             	shr    $0x4,%eax
c01065fc:	09 f0                	or     %esi,%eax
c01065fe:	c1 e8 08             	shr    $0x8,%eax
c0106601:	09 c8                	or     %ecx,%eax
c0106603:	c1 e8 10             	shr    $0x10,%eax
c0106606:	09 d8                	or     %ebx,%eax
c0106608:	d1 e8                	shr    %eax
c010660a:	23 45 e4             	and    -0x1c(%ebp),%eax
c010660d:	85 c0                	test   %eax,%eax
c010660f:	0f 84 e2 00 00 00    	je     c01066f7 <buddy_alloc_pages+0x97f>
c0106615:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106618:	d1 e8                	shr    %eax
c010661a:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010661d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106620:	d1 ea                	shr    %edx
c0106622:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106625:	c1 ea 02             	shr    $0x2,%edx
c0106628:	09 d0                	or     %edx,%eax
c010662a:	89 c1                	mov    %eax,%ecx
c010662c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010662f:	d1 e8                	shr    %eax
c0106631:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106634:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106637:	d1 ea                	shr    %edx
c0106639:	0b 55 e4             	or     -0x1c(%ebp),%edx
c010663c:	c1 ea 02             	shr    $0x2,%edx
c010663f:	09 d0                	or     %edx,%eax
c0106641:	c1 e8 04             	shr    $0x4,%eax
c0106644:	09 c1                	or     %eax,%ecx
c0106646:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106649:	d1 e8                	shr    %eax
c010664b:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010664e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106651:	d1 ea                	shr    %edx
c0106653:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106656:	c1 ea 02             	shr    $0x2,%edx
c0106659:	09 d0                	or     %edx,%eax
c010665b:	89 c3                	mov    %eax,%ebx
c010665d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106660:	d1 e8                	shr    %eax
c0106662:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106665:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106668:	d1 ea                	shr    %edx
c010666a:	0b 55 e4             	or     -0x1c(%ebp),%edx
c010666d:	c1 ea 02             	shr    $0x2,%edx
c0106670:	09 d0                	or     %edx,%eax
c0106672:	c1 e8 04             	shr    $0x4,%eax
c0106675:	09 d8                	or     %ebx,%eax
c0106677:	c1 e8 08             	shr    $0x8,%eax
c010667a:	89 cb                	mov    %ecx,%ebx
c010667c:	09 c3                	or     %eax,%ebx
c010667e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106681:	d1 e8                	shr    %eax
c0106683:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106686:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106689:	d1 ea                	shr    %edx
c010668b:	0b 55 e4             	or     -0x1c(%ebp),%edx
c010668e:	c1 ea 02             	shr    $0x2,%edx
c0106691:	09 d0                	or     %edx,%eax
c0106693:	89 c1                	mov    %eax,%ecx
c0106695:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106698:	d1 e8                	shr    %eax
c010669a:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010669d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01066a0:	d1 ea                	shr    %edx
c01066a2:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01066a5:	c1 ea 02             	shr    $0x2,%edx
c01066a8:	09 d0                	or     %edx,%eax
c01066aa:	c1 e8 04             	shr    $0x4,%eax
c01066ad:	09 c1                	or     %eax,%ecx
c01066af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01066b2:	d1 e8                	shr    %eax
c01066b4:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01066b7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01066ba:	d1 ea                	shr    %edx
c01066bc:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01066bf:	c1 ea 02             	shr    $0x2,%edx
c01066c2:	09 d0                	or     %edx,%eax
c01066c4:	89 c6                	mov    %eax,%esi
c01066c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01066c9:	d1 e8                	shr    %eax
c01066cb:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01066ce:	89 c2                	mov    %eax,%edx
c01066d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01066d3:	d1 e8                	shr    %eax
c01066d5:	0b 45 e4             	or     -0x1c(%ebp),%eax
c01066d8:	c1 e8 02             	shr    $0x2,%eax
c01066db:	09 d0                	or     %edx,%eax
c01066dd:	c1 e8 04             	shr    $0x4,%eax
c01066e0:	09 f0                	or     %esi,%eax
c01066e2:	c1 e8 08             	shr    $0x8,%eax
c01066e5:	09 c8                	or     %ecx,%eax
c01066e7:	c1 e8 10             	shr    $0x10,%eax
c01066ea:	09 d8                	or     %ebx,%eax
c01066ec:	d1 e8                	shr    %eax
c01066ee:	f7 d0                	not    %eax
c01066f0:	23 45 e4             	and    -0x1c(%ebp),%eax
c01066f3:	89 c6                	mov    %eax,%esi
c01066f5:	eb 03                	jmp    c01066fa <buddy_alloc_pages+0x982>
c01066f7:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c01066fa:	89 f8                	mov    %edi,%eax
c01066fc:	ba 00 00 00 00       	mov    $0x0,%edx
c0106701:	f7 f6                	div    %esi
c0106703:	0f af 85 74 ff ff ff 	imul   -0x8c(%ebp),%eax
c010670a:	89 45 d0             	mov    %eax,-0x30(%ebp)
            size_t mid = (begin+end)>>1;
c010670d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106710:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106713:	01 d0                	add    %edx,%eax
c0106715:	d1 e8                	shr    %eax
c0106717:	89 45 cc             	mov    %eax,-0x34(%ebp)
            list_del(&(buddy_alloc[begin].page_link));
c010671a:	8b 0d 9c df 16 c0    	mov    0xc016df9c,%ecx
c0106720:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106723:	89 d0                	mov    %edx,%eax
c0106725:	c1 e0 03             	shl    $0x3,%eax
c0106728:	01 d0                	add    %edx,%eax
c010672a:	c1 e0 02             	shl    $0x2,%eax
c010672d:	01 c8                	add    %ecx,%eax
c010672f:	83 c0 10             	add    $0x10,%eax
c0106732:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106735:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106738:	8b 40 04             	mov    0x4(%eax),%eax
c010673b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010673e:	8b 12                	mov    (%edx),%edx
c0106740:	89 55 c0             	mov    %edx,-0x40(%ebp)
c0106743:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0106746:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106749:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010674c:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010674f:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0106752:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0106755:	89 10                	mov    %edx,(%eax)
            buddy_alloc[begin].property >>= 1;
c0106757:	8b 0d 9c df 16 c0    	mov    0xc016df9c,%ecx
c010675d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106760:	89 d0                	mov    %edx,%eax
c0106762:	c1 e0 03             	shl    $0x3,%eax
c0106765:	01 d0                	add    %edx,%eax
c0106767:	c1 e0 02             	shl    $0x2,%eax
c010676a:	01 c1                	add    %eax,%ecx
c010676c:	8b 1d 9c df 16 c0    	mov    0xc016df9c,%ebx
c0106772:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106775:	89 d0                	mov    %edx,%eax
c0106777:	c1 e0 03             	shl    $0x3,%eax
c010677a:	01 d0                	add    %edx,%eax
c010677c:	c1 e0 02             	shl    $0x2,%eax
c010677f:	01 d8                	add    %ebx,%eax
c0106781:	8b 40 08             	mov    0x8(%eax),%eax
c0106784:	d1 e8                	shr    %eax
c0106786:	89 41 08             	mov    %eax,0x8(%ecx)
            buddy_alloc[mid].property = buddy_alloc[begin].property;
c0106789:	8b 0d 9c df 16 c0    	mov    0xc016df9c,%ecx
c010678f:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0106792:	89 d0                	mov    %edx,%eax
c0106794:	c1 e0 03             	shl    $0x3,%eax
c0106797:	01 d0                	add    %edx,%eax
c0106799:	c1 e0 02             	shl    $0x2,%eax
c010679c:	01 c1                	add    %eax,%ecx
c010679e:	8b 1d 9c df 16 c0    	mov    0xc016df9c,%ebx
c01067a4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01067a7:	89 d0                	mov    %edx,%eax
c01067a9:	c1 e0 03             	shl    $0x3,%eax
c01067ac:	01 d0                	add    %edx,%eax
c01067ae:	c1 e0 02             	shl    $0x2,%eax
c01067b1:	01 d8                	add    %ebx,%eax
c01067b3:	8b 40 08             	mov    0x8(%eax),%eax
c01067b6:	89 41 08             	mov    %eax,0x8(%ecx)
            buddy_segment[left] = buddy_segment[block]>>1;
c01067b9:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c01067be:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01067c1:	c1 e2 02             	shl    $0x2,%edx
c01067c4:	01 d0                	add    %edx,%eax
c01067c6:	8b 15 94 df 16 c0    	mov    0xc016df94,%edx
c01067cc:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c01067cf:	c1 e1 02             	shl    $0x2,%ecx
c01067d2:	01 ca                	add    %ecx,%edx
c01067d4:	8b 12                	mov    (%edx),%edx
c01067d6:	d1 ea                	shr    %edx
c01067d8:	89 10                	mov    %edx,(%eax)
            buddy_segment[right] = buddy_segment[block]>>1;
c01067da:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c01067df:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01067e2:	c1 e2 02             	shl    $0x2,%edx
c01067e5:	01 d0                	add    %edx,%eax
c01067e7:	8b 15 94 df 16 c0    	mov    0xc016df94,%edx
c01067ed:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c01067f0:	c1 e1 02             	shl    $0x2,%ecx
c01067f3:	01 ca                	add    %ecx,%edx
c01067f5:	8b 12                	mov    (%edx),%edx
c01067f7:	d1 ea                	shr    %edx
c01067f9:	89 10                	mov    %edx,(%eax)
            list_add(&free_list, &(buddy_alloc[begin].page_link));
c01067fb:	8b 0d 9c df 16 c0    	mov    0xc016df9c,%ecx
c0106801:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106804:	89 d0                	mov    %edx,%eax
c0106806:	c1 e0 03             	shl    $0x3,%eax
c0106809:	01 d0                	add    %edx,%eax
c010680b:	c1 e0 02             	shl    $0x2,%eax
c010680e:	01 c8                	add    %ecx,%eax
c0106810:	83 c0 10             	add    $0x10,%eax
c0106813:	c7 45 b8 54 11 17 c0 	movl   $0xc0171154,-0x48(%ebp)
c010681a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010681d:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106820:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0106823:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106826:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0106829:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010682c:	8b 40 04             	mov    0x4(%eax),%eax
c010682f:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0106832:	89 55 a8             	mov    %edx,-0x58(%ebp)
c0106835:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0106838:	89 55 a4             	mov    %edx,-0x5c(%ebp)
c010683b:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010683e:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0106841:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0106844:	89 10                	mov    %edx,(%eax)
c0106846:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0106849:	8b 10                	mov    (%eax),%edx
c010684b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010684e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0106851:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0106854:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0106857:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010685a:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010685d:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0106860:	89 10                	mov    %edx,(%eax)
            list_add(&free_list, &(buddy_alloc[mid].page_link));
c0106862:	8b 0d 9c df 16 c0    	mov    0xc016df9c,%ecx
c0106868:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010686b:	89 d0                	mov    %edx,%eax
c010686d:	c1 e0 03             	shl    $0x3,%eax
c0106870:	01 d0                	add    %edx,%eax
c0106872:	c1 e0 02             	shl    $0x2,%eax
c0106875:	01 c8                	add    %ecx,%eax
c0106877:	83 c0 10             	add    $0x10,%eax
c010687a:	c7 45 9c 54 11 17 c0 	movl   $0xc0171154,-0x64(%ebp)
c0106881:	89 45 98             	mov    %eax,-0x68(%ebp)
c0106884:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0106887:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010688a:	8b 45 98             	mov    -0x68(%ebp),%eax
c010688d:	89 45 90             	mov    %eax,-0x70(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0106890:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0106893:	8b 40 04             	mov    0x4(%eax),%eax
c0106896:	8b 55 90             	mov    -0x70(%ebp),%edx
c0106899:	89 55 8c             	mov    %edx,-0x74(%ebp)
c010689c:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010689f:	89 55 88             	mov    %edx,-0x78(%ebp)
c01068a2:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01068a5:	8b 45 84             	mov    -0x7c(%ebp),%eax
c01068a8:	8b 55 8c             	mov    -0x74(%ebp),%edx
c01068ab:	89 10                	mov    %edx,(%eax)
c01068ad:	8b 45 84             	mov    -0x7c(%ebp),%eax
c01068b0:	8b 10                	mov    (%eax),%edx
c01068b2:	8b 45 88             	mov    -0x78(%ebp),%eax
c01068b5:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01068b8:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01068bb:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01068be:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01068c1:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01068c4:	8b 55 88             	mov    -0x78(%ebp),%edx
c01068c7:	89 10                	mov    %edx,(%eax)
            block = left;
c01068c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01068cc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01068cf:	e9 98 00 00 00       	jmp    c010696c <buddy_alloc_pages+0xbf4>
        } else if (length & buddy_segment[left]) {  // Find in left (optimize)
c01068d4:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c01068d9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01068dc:	c1 e2 02             	shl    $0x2,%edx
c01068df:	01 d0                	add    %edx,%eax
c01068e1:	8b 00                	mov    (%eax),%eax
c01068e3:	23 45 e0             	and    -0x20(%ebp),%eax
c01068e6:	85 c0                	test   %eax,%eax
c01068e8:	74 08                	je     c01068f2 <buddy_alloc_pages+0xb7a>
            block = left;
c01068ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01068ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01068f0:	eb 7a                	jmp    c010696c <buddy_alloc_pages+0xbf4>
        } else if (length & buddy_segment[right]) { // Find in right (optimize)
c01068f2:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c01068f7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01068fa:	c1 e2 02             	shl    $0x2,%edx
c01068fd:	01 d0                	add    %edx,%eax
c01068ff:	8b 00                	mov    (%eax),%eax
c0106901:	23 45 e0             	and    -0x20(%ebp),%eax
c0106904:	85 c0                	test   %eax,%eax
c0106906:	74 08                	je     c0106910 <buddy_alloc_pages+0xb98>
            block = right;
c0106908:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010690b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010690e:	eb 5c                	jmp    c010696c <buddy_alloc_pages+0xbf4>
        } else if (length <= buddy_segment[left]) { // Find in left
c0106910:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c0106915:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106918:	c1 e2 02             	shl    $0x2,%edx
c010691b:	01 d0                	add    %edx,%eax
c010691d:	8b 00                	mov    (%eax),%eax
c010691f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0106922:	72 08                	jb     c010692c <buddy_alloc_pages+0xbb4>
            block = left;
c0106924:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106927:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010692a:	eb 40                	jmp    c010696c <buddy_alloc_pages+0xbf4>
        } else if (length <= buddy_segment[right]) {// Find in right
c010692c:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c0106931:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106934:	c1 e2 02             	shl    $0x2,%edx
c0106937:	01 d0                	add    %edx,%eax
c0106939:	8b 00                	mov    (%eax),%eax
c010693b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010693e:	72 08                	jb     c0106948 <buddy_alloc_pages+0xbd0>
            block = right;
c0106940:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106943:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106946:	eb 24                	jmp    c010696c <buddy_alloc_pages+0xbf4>
        } else {                                    // Shouldn't be here
            assert(0);
c0106948:	c7 44 24 0c 09 2e 12 	movl   $0xc0122e09,0xc(%esp)
c010694f:	c0 
c0106950:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0106957:	c0 
c0106958:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c010695f:	00 
c0106960:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0106967:	e8 aa a8 ff ff       	call   c0101216 <__panic>
    assert(n > 0);
    struct Page *page;
    size_t block = BUDDY_ROOT;
    size_t length = UINT32_ROUND_UP(n);
    // Find block
    while (length <= buddy_segment[block] && length < BUDDY_LENGTH(block)) {
c010696c:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c0106971:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106974:	c1 e2 02             	shl    $0x2,%edx
c0106977:	01 d0                	add    %edx,%eax
c0106979:	8b 00                	mov    (%eax),%eax
c010697b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010697e:	0f 82 d6 01 00 00    	jb     c0106b5a <buddy_alloc_pages+0xde2>
c0106984:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0106989:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010698c:	d1 ea                	shr    %edx
c010698e:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106991:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0106994:	d1 e9                	shr    %ecx
c0106996:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c0106999:	c1 e9 02             	shr    $0x2,%ecx
c010699c:	89 d3                	mov    %edx,%ebx
c010699e:	09 cb                	or     %ecx,%ebx
c01069a0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01069a3:	d1 ea                	shr    %edx
c01069a5:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01069a8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c01069ab:	d1 e9                	shr    %ecx
c01069ad:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c01069b0:	c1 e9 02             	shr    $0x2,%ecx
c01069b3:	09 ca                	or     %ecx,%edx
c01069b5:	c1 ea 04             	shr    $0x4,%edx
c01069b8:	09 d3                	or     %edx,%ebx
c01069ba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01069bd:	d1 ea                	shr    %edx
c01069bf:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01069c2:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c01069c5:	d1 e9                	shr    %ecx
c01069c7:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c01069ca:	c1 e9 02             	shr    $0x2,%ecx
c01069cd:	89 d6                	mov    %edx,%esi
c01069cf:	09 ce                	or     %ecx,%esi
c01069d1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01069d4:	d1 ea                	shr    %edx
c01069d6:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01069d9:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c01069dc:	d1 e9                	shr    %ecx
c01069de:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c01069e1:	c1 e9 02             	shr    $0x2,%ecx
c01069e4:	09 ca                	or     %ecx,%edx
c01069e6:	c1 ea 04             	shr    $0x4,%edx
c01069e9:	09 f2                	or     %esi,%edx
c01069eb:	c1 ea 08             	shr    $0x8,%edx
c01069ee:	09 d3                	or     %edx,%ebx
c01069f0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01069f3:	d1 ea                	shr    %edx
c01069f5:	0b 55 e4             	or     -0x1c(%ebp),%edx
c01069f8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c01069fb:	d1 e9                	shr    %ecx
c01069fd:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c0106a00:	c1 e9 02             	shr    $0x2,%ecx
c0106a03:	89 d6                	mov    %edx,%esi
c0106a05:	09 ce                	or     %ecx,%esi
c0106a07:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106a0a:	d1 ea                	shr    %edx
c0106a0c:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106a0f:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0106a12:	d1 e9                	shr    %ecx
c0106a14:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c0106a17:	c1 e9 02             	shr    $0x2,%ecx
c0106a1a:	09 ca                	or     %ecx,%edx
c0106a1c:	c1 ea 04             	shr    $0x4,%edx
c0106a1f:	09 d6                	or     %edx,%esi
c0106a21:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106a24:	d1 ea                	shr    %edx
c0106a26:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106a29:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0106a2c:	d1 e9                	shr    %ecx
c0106a2e:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c0106a31:	c1 e9 02             	shr    $0x2,%ecx
c0106a34:	89 d7                	mov    %edx,%edi
c0106a36:	09 cf                	or     %ecx,%edi
c0106a38:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106a3b:	d1 ea                	shr    %edx
c0106a3d:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106a40:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0106a43:	d1 e9                	shr    %ecx
c0106a45:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c0106a48:	c1 e9 02             	shr    $0x2,%ecx
c0106a4b:	09 ca                	or     %ecx,%edx
c0106a4d:	c1 ea 04             	shr    $0x4,%edx
c0106a50:	09 fa                	or     %edi,%edx
c0106a52:	c1 ea 08             	shr    $0x8,%edx
c0106a55:	09 f2                	or     %esi,%edx
c0106a57:	c1 ea 10             	shr    $0x10,%edx
c0106a5a:	09 da                	or     %ebx,%edx
c0106a5c:	d1 ea                	shr    %edx
c0106a5e:	23 55 e4             	and    -0x1c(%ebp),%edx
c0106a61:	85 d2                	test   %edx,%edx
c0106a63:	0f 84 de 00 00 00    	je     c0106b47 <buddy_alloc_pages+0xdcf>
c0106a69:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106a6c:	d1 ea                	shr    %edx
c0106a6e:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106a71:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0106a74:	d1 e9                	shr    %ecx
c0106a76:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c0106a79:	c1 e9 02             	shr    $0x2,%ecx
c0106a7c:	89 d3                	mov    %edx,%ebx
c0106a7e:	09 cb                	or     %ecx,%ebx
c0106a80:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106a83:	d1 ea                	shr    %edx
c0106a85:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106a88:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0106a8b:	d1 e9                	shr    %ecx
c0106a8d:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c0106a90:	c1 e9 02             	shr    $0x2,%ecx
c0106a93:	09 ca                	or     %ecx,%edx
c0106a95:	c1 ea 04             	shr    $0x4,%edx
c0106a98:	09 d3                	or     %edx,%ebx
c0106a9a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106a9d:	d1 ea                	shr    %edx
c0106a9f:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106aa2:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0106aa5:	d1 e9                	shr    %ecx
c0106aa7:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c0106aaa:	c1 e9 02             	shr    $0x2,%ecx
c0106aad:	89 d6                	mov    %edx,%esi
c0106aaf:	09 ce                	or     %ecx,%esi
c0106ab1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106ab4:	d1 ea                	shr    %edx
c0106ab6:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106ab9:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0106abc:	d1 e9                	shr    %ecx
c0106abe:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c0106ac1:	c1 e9 02             	shr    $0x2,%ecx
c0106ac4:	09 ca                	or     %ecx,%edx
c0106ac6:	c1 ea 04             	shr    $0x4,%edx
c0106ac9:	09 f2                	or     %esi,%edx
c0106acb:	c1 ea 08             	shr    $0x8,%edx
c0106ace:	09 d3                	or     %edx,%ebx
c0106ad0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106ad3:	d1 ea                	shr    %edx
c0106ad5:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106ad8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0106adb:	d1 e9                	shr    %ecx
c0106add:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c0106ae0:	c1 e9 02             	shr    $0x2,%ecx
c0106ae3:	89 d6                	mov    %edx,%esi
c0106ae5:	09 ce                	or     %ecx,%esi
c0106ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106aea:	d1 ea                	shr    %edx
c0106aec:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106aef:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0106af2:	d1 e9                	shr    %ecx
c0106af4:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c0106af7:	c1 e9 02             	shr    $0x2,%ecx
c0106afa:	09 ca                	or     %ecx,%edx
c0106afc:	c1 ea 04             	shr    $0x4,%edx
c0106aff:	09 d6                	or     %edx,%esi
c0106b01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106b04:	d1 ea                	shr    %edx
c0106b06:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106b09:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0106b0c:	d1 e9                	shr    %ecx
c0106b0e:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c0106b11:	c1 e9 02             	shr    $0x2,%ecx
c0106b14:	89 d7                	mov    %edx,%edi
c0106b16:	09 cf                	or     %ecx,%edi
c0106b18:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106b1b:	d1 ea                	shr    %edx
c0106b1d:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106b20:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0106b23:	d1 e9                	shr    %ecx
c0106b25:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c0106b28:	c1 e9 02             	shr    $0x2,%ecx
c0106b2b:	09 ca                	or     %ecx,%edx
c0106b2d:	c1 ea 04             	shr    $0x4,%edx
c0106b30:	09 fa                	or     %edi,%edx
c0106b32:	c1 ea 08             	shr    $0x8,%edx
c0106b35:	09 f2                	or     %esi,%edx
c0106b37:	c1 ea 10             	shr    $0x10,%edx
c0106b3a:	09 da                	or     %ebx,%edx
c0106b3c:	d1 ea                	shr    %edx
c0106b3e:	f7 d2                	not    %edx
c0106b40:	89 d7                	mov    %edx,%edi
c0106b42:	23 7d e4             	and    -0x1c(%ebp),%edi
c0106b45:	eb 03                	jmp    c0106b4a <buddy_alloc_pages+0xdd2>
c0106b47:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c0106b4a:	ba 00 00 00 00       	mov    $0x0,%edx
c0106b4f:	f7 f7                	div    %edi
c0106b51:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0106b54:	0f 87 24 f4 ff ff    	ja     c0105f7e <buddy_alloc_pages+0x206>
        } else {                                    // Shouldn't be here
            assert(0);
        }
    }
    // Allocate
    if (length > buddy_segment[block])
c0106b5a:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c0106b5f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106b62:	c1 e2 02             	shl    $0x2,%edx
c0106b65:	01 d0                	add    %edx,%eax
c0106b67:	8b 00                	mov    (%eax),%eax
c0106b69:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0106b6c:	73 0a                	jae    c0106b78 <buddy_alloc_pages+0xe00>
        return NULL;
c0106b6e:	b8 00 00 00 00       	mov    $0x0,%eax
c0106b73:	e9 8c 03 00 00       	jmp    c0106f04 <buddy_alloc_pages+0x118c>
    page = &(buddy_alloc[BUDDY_BEGIN(block)]);
c0106b78:	a1 9c df 16 c0       	mov    0xc016df9c,%eax
c0106b7d:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
c0106b83:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106b86:	d1 e8                	shr    %eax
c0106b88:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106b8b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106b8e:	d1 ea                	shr    %edx
c0106b90:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106b93:	c1 ea 02             	shr    $0x2,%edx
c0106b96:	09 d0                	or     %edx,%eax
c0106b98:	89 c1                	mov    %eax,%ecx
c0106b9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106b9d:	d1 e8                	shr    %eax
c0106b9f:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106ba2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106ba5:	d1 ea                	shr    %edx
c0106ba7:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106baa:	c1 ea 02             	shr    $0x2,%edx
c0106bad:	09 d0                	or     %edx,%eax
c0106baf:	c1 e8 04             	shr    $0x4,%eax
c0106bb2:	09 c1                	or     %eax,%ecx
c0106bb4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106bb7:	d1 e8                	shr    %eax
c0106bb9:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106bbc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106bbf:	d1 ea                	shr    %edx
c0106bc1:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106bc4:	c1 ea 02             	shr    $0x2,%edx
c0106bc7:	09 d0                	or     %edx,%eax
c0106bc9:	89 c3                	mov    %eax,%ebx
c0106bcb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106bce:	d1 e8                	shr    %eax
c0106bd0:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106bd3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106bd6:	d1 ea                	shr    %edx
c0106bd8:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106bdb:	c1 ea 02             	shr    $0x2,%edx
c0106bde:	09 d0                	or     %edx,%eax
c0106be0:	c1 e8 04             	shr    $0x4,%eax
c0106be3:	09 d8                	or     %ebx,%eax
c0106be5:	c1 e8 08             	shr    $0x8,%eax
c0106be8:	09 c1                	or     %eax,%ecx
c0106bea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106bed:	d1 e8                	shr    %eax
c0106bef:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106bf2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106bf5:	d1 ea                	shr    %edx
c0106bf7:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106bfa:	c1 ea 02             	shr    $0x2,%edx
c0106bfd:	09 d0                	or     %edx,%eax
c0106bff:	89 c3                	mov    %eax,%ebx
c0106c01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c04:	d1 e8                	shr    %eax
c0106c06:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106c09:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106c0c:	d1 ea                	shr    %edx
c0106c0e:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106c11:	c1 ea 02             	shr    $0x2,%edx
c0106c14:	09 d0                	or     %edx,%eax
c0106c16:	c1 e8 04             	shr    $0x4,%eax
c0106c19:	09 c3                	or     %eax,%ebx
c0106c1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c1e:	d1 e8                	shr    %eax
c0106c20:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106c23:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106c26:	d1 ea                	shr    %edx
c0106c28:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106c2b:	c1 ea 02             	shr    $0x2,%edx
c0106c2e:	09 d0                	or     %edx,%eax
c0106c30:	89 c6                	mov    %eax,%esi
c0106c32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c35:	d1 e8                	shr    %eax
c0106c37:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106c3a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106c3d:	d1 ea                	shr    %edx
c0106c3f:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106c42:	c1 ea 02             	shr    $0x2,%edx
c0106c45:	09 d0                	or     %edx,%eax
c0106c47:	c1 e8 04             	shr    $0x4,%eax
c0106c4a:	09 f0                	or     %esi,%eax
c0106c4c:	c1 e8 08             	shr    $0x8,%eax
c0106c4f:	09 d8                	or     %ebx,%eax
c0106c51:	c1 e8 10             	shr    $0x10,%eax
c0106c54:	09 c8                	or     %ecx,%eax
c0106c56:	d1 e8                	shr    %eax
c0106c58:	23 45 e4             	and    -0x1c(%ebp),%eax
c0106c5b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
c0106c61:	8b 3d 88 df 16 c0    	mov    0xc016df88,%edi
c0106c67:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c6a:	d1 e8                	shr    %eax
c0106c6c:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106c6f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106c72:	d1 ea                	shr    %edx
c0106c74:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106c77:	c1 ea 02             	shr    $0x2,%edx
c0106c7a:	09 d0                	or     %edx,%eax
c0106c7c:	89 c1                	mov    %eax,%ecx
c0106c7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c81:	d1 e8                	shr    %eax
c0106c83:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106c86:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106c89:	d1 ea                	shr    %edx
c0106c8b:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106c8e:	c1 ea 02             	shr    $0x2,%edx
c0106c91:	09 d0                	or     %edx,%eax
c0106c93:	c1 e8 04             	shr    $0x4,%eax
c0106c96:	09 c1                	or     %eax,%ecx
c0106c98:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c9b:	d1 e8                	shr    %eax
c0106c9d:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106ca0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106ca3:	d1 ea                	shr    %edx
c0106ca5:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106ca8:	c1 ea 02             	shr    $0x2,%edx
c0106cab:	09 d0                	or     %edx,%eax
c0106cad:	89 c3                	mov    %eax,%ebx
c0106caf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106cb2:	d1 e8                	shr    %eax
c0106cb4:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106cb7:	89 c2                	mov    %eax,%edx
c0106cb9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106cbc:	d1 e8                	shr    %eax
c0106cbe:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106cc1:	c1 e8 02             	shr    $0x2,%eax
c0106cc4:	09 d0                	or     %edx,%eax
c0106cc6:	c1 e8 04             	shr    $0x4,%eax
c0106cc9:	09 d8                	or     %ebx,%eax
c0106ccb:	c1 e8 08             	shr    $0x8,%eax
c0106cce:	89 ce                	mov    %ecx,%esi
c0106cd0:	09 c6                	or     %eax,%esi
c0106cd2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106cd5:	d1 e8                	shr    %eax
c0106cd7:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106cda:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106cdd:	d1 ea                	shr    %edx
c0106cdf:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106ce2:	c1 ea 02             	shr    $0x2,%edx
c0106ce5:	09 d0                	or     %edx,%eax
c0106ce7:	89 c1                	mov    %eax,%ecx
c0106ce9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106cec:	d1 e8                	shr    %eax
c0106cee:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106cf1:	89 c2                	mov    %eax,%edx
c0106cf3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106cf6:	d1 e8                	shr    %eax
c0106cf8:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106cfb:	c1 e8 02             	shr    $0x2,%eax
c0106cfe:	09 d0                	or     %edx,%eax
c0106d00:	c1 e8 04             	shr    $0x4,%eax
c0106d03:	89 cb                	mov    %ecx,%ebx
c0106d05:	09 c3                	or     %eax,%ebx
c0106d07:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d0a:	d1 e8                	shr    %eax
c0106d0c:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106d0f:	89 c2                	mov    %eax,%edx
c0106d11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d14:	d1 e8                	shr    %eax
c0106d16:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106d19:	c1 e8 02             	shr    $0x2,%eax
c0106d1c:	89 d1                	mov    %edx,%ecx
c0106d1e:	09 c1                	or     %eax,%ecx
c0106d20:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d23:	d1 e8                	shr    %eax
c0106d25:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106d28:	89 c2                	mov    %eax,%edx
c0106d2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d2d:	d1 e8                	shr    %eax
c0106d2f:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106d32:	c1 e8 02             	shr    $0x2,%eax
c0106d35:	09 d0                	or     %edx,%eax
c0106d37:	c1 e8 04             	shr    $0x4,%eax
c0106d3a:	09 c8                	or     %ecx,%eax
c0106d3c:	c1 e8 08             	shr    $0x8,%eax
c0106d3f:	09 d8                	or     %ebx,%eax
c0106d41:	c1 e8 10             	shr    $0x10,%eax
c0106d44:	09 f0                	or     %esi,%eax
c0106d46:	d1 e8                	shr    %eax
c0106d48:	23 45 e4             	and    -0x1c(%ebp),%eax
c0106d4b:	85 c0                	test   %eax,%eax
c0106d4d:	0f 84 ea 00 00 00    	je     c0106e3d <buddy_alloc_pages+0x10c5>
c0106d53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d56:	d1 e8                	shr    %eax
c0106d58:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106d5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106d5e:	d1 ea                	shr    %edx
c0106d60:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106d63:	c1 ea 02             	shr    $0x2,%edx
c0106d66:	09 d0                	or     %edx,%eax
c0106d68:	89 c1                	mov    %eax,%ecx
c0106d6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d6d:	d1 e8                	shr    %eax
c0106d6f:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106d72:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106d75:	d1 ea                	shr    %edx
c0106d77:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106d7a:	c1 ea 02             	shr    $0x2,%edx
c0106d7d:	09 d0                	or     %edx,%eax
c0106d7f:	c1 e8 04             	shr    $0x4,%eax
c0106d82:	09 c1                	or     %eax,%ecx
c0106d84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d87:	d1 e8                	shr    %eax
c0106d89:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106d8c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106d8f:	d1 ea                	shr    %edx
c0106d91:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106d94:	c1 ea 02             	shr    $0x2,%edx
c0106d97:	09 d0                	or     %edx,%eax
c0106d99:	89 c3                	mov    %eax,%ebx
c0106d9b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d9e:	d1 e8                	shr    %eax
c0106da0:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106da3:	89 c2                	mov    %eax,%edx
c0106da5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106da8:	d1 e8                	shr    %eax
c0106daa:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106dad:	c1 e8 02             	shr    $0x2,%eax
c0106db0:	09 d0                	or     %edx,%eax
c0106db2:	c1 e8 04             	shr    $0x4,%eax
c0106db5:	09 d8                	or     %ebx,%eax
c0106db7:	c1 e8 08             	shr    $0x8,%eax
c0106dba:	89 ce                	mov    %ecx,%esi
c0106dbc:	09 c6                	or     %eax,%esi
c0106dbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106dc1:	d1 e8                	shr    %eax
c0106dc3:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106dc6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106dc9:	d1 ea                	shr    %edx
c0106dcb:	0b 55 e4             	or     -0x1c(%ebp),%edx
c0106dce:	c1 ea 02             	shr    $0x2,%edx
c0106dd1:	09 d0                	or     %edx,%eax
c0106dd3:	89 c1                	mov    %eax,%ecx
c0106dd5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106dd8:	d1 e8                	shr    %eax
c0106dda:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106ddd:	89 c2                	mov    %eax,%edx
c0106ddf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106de2:	d1 e8                	shr    %eax
c0106de4:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106de7:	c1 e8 02             	shr    $0x2,%eax
c0106dea:	09 d0                	or     %edx,%eax
c0106dec:	c1 e8 04             	shr    $0x4,%eax
c0106def:	89 cb                	mov    %ecx,%ebx
c0106df1:	09 c3                	or     %eax,%ebx
c0106df3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106df6:	d1 e8                	shr    %eax
c0106df8:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106dfb:	89 c2                	mov    %eax,%edx
c0106dfd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106e00:	d1 e8                	shr    %eax
c0106e02:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106e05:	c1 e8 02             	shr    $0x2,%eax
c0106e08:	89 d1                	mov    %edx,%ecx
c0106e0a:	09 c1                	or     %eax,%ecx
c0106e0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106e0f:	d1 e8                	shr    %eax
c0106e11:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106e14:	89 c2                	mov    %eax,%edx
c0106e16:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106e19:	d1 e8                	shr    %eax
c0106e1b:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0106e1e:	c1 e8 02             	shr    $0x2,%eax
c0106e21:	09 d0                	or     %edx,%eax
c0106e23:	c1 e8 04             	shr    $0x4,%eax
c0106e26:	09 c8                	or     %ecx,%eax
c0106e28:	c1 e8 08             	shr    $0x8,%eax
c0106e2b:	09 d8                	or     %ebx,%eax
c0106e2d:	c1 e8 10             	shr    $0x10,%eax
c0106e30:	09 f0                	or     %esi,%eax
c0106e32:	d1 e8                	shr    %eax
c0106e34:	f7 d0                	not    %eax
c0106e36:	23 45 e4             	and    -0x1c(%ebp),%eax
c0106e39:	89 c6                	mov    %eax,%esi
c0106e3b:	eb 03                	jmp    c0106e40 <buddy_alloc_pages+0x10c8>
c0106e3d:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0106e40:	89 f8                	mov    %edi,%eax
c0106e42:	ba 00 00 00 00       	mov    $0x0,%edx
c0106e47:	f7 f6                	div    %esi
c0106e49:	8b 95 70 ff ff ff    	mov    -0x90(%ebp),%edx
c0106e4f:	0f af d0             	imul   %eax,%edx
c0106e52:	89 d0                	mov    %edx,%eax
c0106e54:	c1 e0 03             	shl    $0x3,%eax
c0106e57:	01 d0                	add    %edx,%eax
c0106e59:	c1 e0 02             	shl    $0x2,%eax
c0106e5c:	03 85 74 ff ff ff    	add    -0x8c(%ebp),%eax
c0106e62:	89 45 c8             	mov    %eax,-0x38(%ebp)
    list_del(&(page->page_link));
c0106e65:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106e68:	83 c0 10             	add    $0x10,%eax
c0106e6b:	89 45 80             	mov    %eax,-0x80(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106e6e:	8b 45 80             	mov    -0x80(%ebp),%eax
c0106e71:	8b 40 04             	mov    0x4(%eax),%eax
c0106e74:	8b 55 80             	mov    -0x80(%ebp),%edx
c0106e77:	8b 12                	mov    (%edx),%edx
c0106e79:	89 95 7c ff ff ff    	mov    %edx,-0x84(%ebp)
c0106e7f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0106e85:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0106e8b:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
c0106e91:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0106e94:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0106e9a:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
c0106ea0:	89 10                	mov    %edx,(%eax)
    buddy_segment[block] = 0;
c0106ea2:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c0106ea7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106eaa:	c1 e2 02             	shl    $0x2,%edx
c0106ead:	01 d0                	add    %edx,%eax
c0106eaf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    nr_free -= length;
c0106eb5:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0106eba:	2b 45 e0             	sub    -0x20(%ebp),%eax
c0106ebd:	a3 5c 11 17 c0       	mov    %eax,0xc017115c
    // Update buddy segment
    while (block != BUDDY_ROOT) {
c0106ec2:	eb 37                	jmp    c0106efb <buddy_alloc_pages+0x1183>
        block = BUDDY_PARENT(block);
c0106ec4:	d1 6d e4             	shrl   -0x1c(%ebp)
        buddy_segment[block] = buddy_segment[BUDDY_LEFT(block)] | buddy_segment[BUDDY_RIGHT(block)];
c0106ec7:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c0106ecc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106ecf:	c1 e2 02             	shl    $0x2,%edx
c0106ed2:	01 d0                	add    %edx,%eax
c0106ed4:	8b 15 94 df 16 c0    	mov    0xc016df94,%edx
c0106eda:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0106edd:	c1 e1 03             	shl    $0x3,%ecx
c0106ee0:	01 ca                	add    %ecx,%edx
c0106ee2:	8b 0a                	mov    (%edx),%ecx
c0106ee4:	8b 15 94 df 16 c0    	mov    0xc016df94,%edx
c0106eea:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c0106eed:	c1 e3 03             	shl    $0x3,%ebx
c0106ef0:	83 c3 04             	add    $0x4,%ebx
c0106ef3:	01 da                	add    %ebx,%edx
c0106ef5:	8b 12                	mov    (%edx),%edx
c0106ef7:	09 ca                	or     %ecx,%edx
c0106ef9:	89 10                	mov    %edx,(%eax)
    page = &(buddy_alloc[BUDDY_BEGIN(block)]);
    list_del(&(page->page_link));
    buddy_segment[block] = 0;
    nr_free -= length;
    // Update buddy segment
    while (block != BUDDY_ROOT) {
c0106efb:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
c0106eff:	75 c3                	jne    c0106ec4 <buddy_alloc_pages+0x114c>
        block = BUDDY_PARENT(block);
        buddy_segment[block] = buddy_segment[BUDDY_LEFT(block)] | buddy_segment[BUDDY_RIGHT(block)];
    }
    return page;
c0106f01:	8b 45 c8             	mov    -0x38(%ebp),%eax
}
c0106f04:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c0106f0a:	5b                   	pop    %ebx
c0106f0b:	5e                   	pop    %esi
c0106f0c:	5f                   	pop    %edi
c0106f0d:	5d                   	pop    %ebp
c0106f0e:	c3                   	ret    

c0106f0f <buddy_free_pages>:

static void
buddy_free_pages(struct Page *base, size_t n) {
c0106f0f:	55                   	push   %ebp
c0106f10:	89 e5                	mov    %esp,%ebp
c0106f12:	57                   	push   %edi
c0106f13:	56                   	push   %esi
c0106f14:	53                   	push   %ebx
c0106f15:	81 ec bc 00 00 00    	sub    $0xbc,%esp
    assert(n > 0);
c0106f1b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0106f1f:	75 24                	jne    c0106f45 <buddy_free_pages+0x36>
c0106f21:	c7 44 24 0c f3 2d 12 	movl   $0xc0122df3,0xc(%esp)
c0106f28:	c0 
c0106f29:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0106f30:	c0 
c0106f31:	c7 44 24 04 aa 00 00 	movl   $0xaa,0x4(%esp)
c0106f38:	00 
c0106f39:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0106f40:	e8 d1 a2 ff ff       	call   c0101216 <__panic>
    struct Page *p = base;
c0106f45:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f48:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    size_t length = UINT32_ROUND_UP(n);
c0106f4b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f4e:	d1 e8                	shr    %eax
c0106f50:	0b 45 0c             	or     0xc(%ebp),%eax
c0106f53:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106f56:	d1 ea                	shr    %edx
c0106f58:	0b 55 0c             	or     0xc(%ebp),%edx
c0106f5b:	c1 ea 02             	shr    $0x2,%edx
c0106f5e:	09 d0                	or     %edx,%eax
c0106f60:	89 c1                	mov    %eax,%ecx
c0106f62:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f65:	d1 e8                	shr    %eax
c0106f67:	0b 45 0c             	or     0xc(%ebp),%eax
c0106f6a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106f6d:	d1 ea                	shr    %edx
c0106f6f:	0b 55 0c             	or     0xc(%ebp),%edx
c0106f72:	c1 ea 02             	shr    $0x2,%edx
c0106f75:	09 d0                	or     %edx,%eax
c0106f77:	c1 e8 04             	shr    $0x4,%eax
c0106f7a:	09 c1                	or     %eax,%ecx
c0106f7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f7f:	d1 e8                	shr    %eax
c0106f81:	0b 45 0c             	or     0xc(%ebp),%eax
c0106f84:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106f87:	d1 ea                	shr    %edx
c0106f89:	0b 55 0c             	or     0xc(%ebp),%edx
c0106f8c:	c1 ea 02             	shr    $0x2,%edx
c0106f8f:	09 d0                	or     %edx,%eax
c0106f91:	89 c3                	mov    %eax,%ebx
c0106f93:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f96:	d1 e8                	shr    %eax
c0106f98:	0b 45 0c             	or     0xc(%ebp),%eax
c0106f9b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106f9e:	d1 ea                	shr    %edx
c0106fa0:	0b 55 0c             	or     0xc(%ebp),%edx
c0106fa3:	c1 ea 02             	shr    $0x2,%edx
c0106fa6:	09 d0                	or     %edx,%eax
c0106fa8:	c1 e8 04             	shr    $0x4,%eax
c0106fab:	09 d8                	or     %ebx,%eax
c0106fad:	c1 e8 08             	shr    $0x8,%eax
c0106fb0:	09 c1                	or     %eax,%ecx
c0106fb2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106fb5:	d1 e8                	shr    %eax
c0106fb7:	0b 45 0c             	or     0xc(%ebp),%eax
c0106fba:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106fbd:	d1 ea                	shr    %edx
c0106fbf:	0b 55 0c             	or     0xc(%ebp),%edx
c0106fc2:	c1 ea 02             	shr    $0x2,%edx
c0106fc5:	09 d0                	or     %edx,%eax
c0106fc7:	89 c3                	mov    %eax,%ebx
c0106fc9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106fcc:	d1 e8                	shr    %eax
c0106fce:	0b 45 0c             	or     0xc(%ebp),%eax
c0106fd1:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106fd4:	d1 ea                	shr    %edx
c0106fd6:	0b 55 0c             	or     0xc(%ebp),%edx
c0106fd9:	c1 ea 02             	shr    $0x2,%edx
c0106fdc:	09 d0                	or     %edx,%eax
c0106fde:	c1 e8 04             	shr    $0x4,%eax
c0106fe1:	09 c3                	or     %eax,%ebx
c0106fe3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106fe6:	d1 e8                	shr    %eax
c0106fe8:	0b 45 0c             	or     0xc(%ebp),%eax
c0106feb:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106fee:	d1 ea                	shr    %edx
c0106ff0:	0b 55 0c             	or     0xc(%ebp),%edx
c0106ff3:	c1 ea 02             	shr    $0x2,%edx
c0106ff6:	09 d0                	or     %edx,%eax
c0106ff8:	89 c6                	mov    %eax,%esi
c0106ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106ffd:	d1 e8                	shr    %eax
c0106fff:	0b 45 0c             	or     0xc(%ebp),%eax
c0107002:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107005:	d1 ea                	shr    %edx
c0107007:	0b 55 0c             	or     0xc(%ebp),%edx
c010700a:	c1 ea 02             	shr    $0x2,%edx
c010700d:	09 d0                	or     %edx,%eax
c010700f:	c1 e8 04             	shr    $0x4,%eax
c0107012:	09 f0                	or     %esi,%eax
c0107014:	c1 e8 08             	shr    $0x8,%eax
c0107017:	09 d8                	or     %ebx,%eax
c0107019:	c1 e8 10             	shr    $0x10,%eax
c010701c:	09 c8                	or     %ecx,%eax
c010701e:	d1 e8                	shr    %eax
c0107020:	23 45 0c             	and    0xc(%ebp),%eax
c0107023:	85 c0                	test   %eax,%eax
c0107025:	0f 84 de 00 00 00    	je     c0107109 <buddy_free_pages+0x1fa>
c010702b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010702e:	d1 e8                	shr    %eax
c0107030:	0b 45 0c             	or     0xc(%ebp),%eax
c0107033:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107036:	d1 ea                	shr    %edx
c0107038:	0b 55 0c             	or     0xc(%ebp),%edx
c010703b:	c1 ea 02             	shr    $0x2,%edx
c010703e:	09 d0                	or     %edx,%eax
c0107040:	89 c1                	mov    %eax,%ecx
c0107042:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107045:	d1 e8                	shr    %eax
c0107047:	0b 45 0c             	or     0xc(%ebp),%eax
c010704a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010704d:	d1 ea                	shr    %edx
c010704f:	0b 55 0c             	or     0xc(%ebp),%edx
c0107052:	c1 ea 02             	shr    $0x2,%edx
c0107055:	09 d0                	or     %edx,%eax
c0107057:	c1 e8 04             	shr    $0x4,%eax
c010705a:	09 c1                	or     %eax,%ecx
c010705c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010705f:	d1 e8                	shr    %eax
c0107061:	0b 45 0c             	or     0xc(%ebp),%eax
c0107064:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107067:	d1 ea                	shr    %edx
c0107069:	0b 55 0c             	or     0xc(%ebp),%edx
c010706c:	c1 ea 02             	shr    $0x2,%edx
c010706f:	09 d0                	or     %edx,%eax
c0107071:	89 c3                	mov    %eax,%ebx
c0107073:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107076:	d1 e8                	shr    %eax
c0107078:	0b 45 0c             	or     0xc(%ebp),%eax
c010707b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010707e:	d1 ea                	shr    %edx
c0107080:	0b 55 0c             	or     0xc(%ebp),%edx
c0107083:	c1 ea 02             	shr    $0x2,%edx
c0107086:	09 d0                	or     %edx,%eax
c0107088:	c1 e8 04             	shr    $0x4,%eax
c010708b:	09 d8                	or     %ebx,%eax
c010708d:	c1 e8 08             	shr    $0x8,%eax
c0107090:	09 c1                	or     %eax,%ecx
c0107092:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107095:	d1 e8                	shr    %eax
c0107097:	0b 45 0c             	or     0xc(%ebp),%eax
c010709a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010709d:	d1 ea                	shr    %edx
c010709f:	0b 55 0c             	or     0xc(%ebp),%edx
c01070a2:	c1 ea 02             	shr    $0x2,%edx
c01070a5:	09 d0                	or     %edx,%eax
c01070a7:	89 c3                	mov    %eax,%ebx
c01070a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01070ac:	d1 e8                	shr    %eax
c01070ae:	0b 45 0c             	or     0xc(%ebp),%eax
c01070b1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01070b4:	d1 ea                	shr    %edx
c01070b6:	0b 55 0c             	or     0xc(%ebp),%edx
c01070b9:	c1 ea 02             	shr    $0x2,%edx
c01070bc:	09 d0                	or     %edx,%eax
c01070be:	c1 e8 04             	shr    $0x4,%eax
c01070c1:	09 c3                	or     %eax,%ebx
c01070c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01070c6:	d1 e8                	shr    %eax
c01070c8:	0b 45 0c             	or     0xc(%ebp),%eax
c01070cb:	8b 55 0c             	mov    0xc(%ebp),%edx
c01070ce:	d1 ea                	shr    %edx
c01070d0:	0b 55 0c             	or     0xc(%ebp),%edx
c01070d3:	c1 ea 02             	shr    $0x2,%edx
c01070d6:	09 d0                	or     %edx,%eax
c01070d8:	89 c6                	mov    %eax,%esi
c01070da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01070dd:	d1 e8                	shr    %eax
c01070df:	0b 45 0c             	or     0xc(%ebp),%eax
c01070e2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01070e5:	d1 ea                	shr    %edx
c01070e7:	0b 55 0c             	or     0xc(%ebp),%edx
c01070ea:	c1 ea 02             	shr    $0x2,%edx
c01070ed:	09 d0                	or     %edx,%eax
c01070ef:	c1 e8 04             	shr    $0x4,%eax
c01070f2:	09 f0                	or     %esi,%eax
c01070f4:	c1 e8 08             	shr    $0x8,%eax
c01070f7:	09 d8                	or     %ebx,%eax
c01070f9:	c1 e8 10             	shr    $0x10,%eax
c01070fc:	09 c8                	or     %ecx,%eax
c01070fe:	d1 e8                	shr    %eax
c0107100:	f7 d0                	not    %eax
c0107102:	23 45 0c             	and    0xc(%ebp),%eax
c0107105:	01 c0                	add    %eax,%eax
c0107107:	eb 03                	jmp    c010710c <buddy_free_pages+0x1fd>
c0107109:	8b 45 0c             	mov    0xc(%ebp),%eax
c010710c:	89 45 dc             	mov    %eax,-0x24(%ebp)
    // Find buddy id 
    size_t begin = (base-buddy_alloc);
c010710f:	8b 55 08             	mov    0x8(%ebp),%edx
c0107112:	a1 9c df 16 c0       	mov    0xc016df9c,%eax
c0107117:	29 c2                	sub    %eax,%edx
c0107119:	89 d0                	mov    %edx,%eax
c010711b:	c1 f8 02             	sar    $0x2,%eax
c010711e:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
c0107124:	89 45 d8             	mov    %eax,-0x28(%ebp)
    size_t end = begin + length;
c0107127:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010712a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010712d:	01 d0                	add    %edx,%eax
c010712f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    size_t block = BUDDY_BLOCK(begin, end);
c0107132:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0107137:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010713a:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010713d:	29 d1                	sub    %edx,%ecx
c010713f:	89 cf                	mov    %ecx,%edi
c0107141:	ba 00 00 00 00       	mov    $0x0,%edx
c0107146:	f7 f7                	div    %edi
c0107148:	89 c1                	mov    %eax,%ecx
c010714a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010714d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107150:	89 d7                	mov    %edx,%edi
c0107152:	29 c7                	sub    %eax,%edi
c0107154:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107157:	ba 00 00 00 00       	mov    $0x0,%edx
c010715c:	f7 f7                	div    %edi
c010715e:	01 c8                	add    %ecx,%eax
c0107160:	89 45 e0             	mov    %eax,-0x20(%ebp)
    // Release block
    for (; p != base + n; p ++) {
c0107163:	eb 71                	jmp    c01071d6 <buddy_free_pages+0x2c7>
        assert(!PageReserved(p));
c0107165:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107168:	83 c0 04             	add    $0x4,%eax
c010716b:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c0107172:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107175:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0107178:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010717b:	0f a3 10             	bt     %edx,(%eax)
c010717e:	19 c0                	sbb    %eax,%eax
c0107180:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c0107183:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0107187:	0f 95 c0             	setne  %al
c010718a:	0f b6 c0             	movzbl %al,%eax
c010718d:	85 c0                	test   %eax,%eax
c010718f:	74 24                	je     c01071b5 <buddy_free_pages+0x2a6>
c0107191:	c7 44 24 0c 0b 2e 12 	movl   $0xc0122e0b,0xc(%esp)
c0107198:	c0 
c0107199:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c01071a0:	c0 
c01071a1:	c7 44 24 04 b3 00 00 	movl   $0xb3,0x4(%esp)
c01071a8:	00 
c01071a9:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c01071b0:	e8 61 a0 ff ff       	call   c0101216 <__panic>
        p->flags = 0;
c01071b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071b8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);
c01071bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01071c6:	00 
c01071c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071ca:	89 04 24             	mov    %eax,(%esp)
c01071cd:	e8 4e dd ff ff       	call   c0104f20 <set_page_ref>
    // Find buddy id 
    size_t begin = (base-buddy_alloc);
    size_t end = begin + length;
    size_t block = BUDDY_BLOCK(begin, end);
    // Release block
    for (; p != base + n; p ++) {
c01071d2:	83 45 e4 24          	addl   $0x24,-0x1c(%ebp)
c01071d6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01071d9:	89 d0                	mov    %edx,%eax
c01071db:	c1 e0 03             	shl    $0x3,%eax
c01071de:	01 d0                	add    %edx,%eax
c01071e0:	c1 e0 02             	shl    $0x2,%eax
c01071e3:	89 c2                	mov    %eax,%edx
c01071e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01071e8:	01 d0                	add    %edx,%eax
c01071ea:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c01071ed:	0f 85 72 ff ff ff    	jne    c0107165 <buddy_free_pages+0x256>
        assert(!PageReserved(p));
        p->flags = 0;
        set_page_ref(p, 0);
    }
    base->property = length;
c01071f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01071f6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01071f9:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);  //add
c01071fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01071ff:	83 c0 04             	add    $0x4,%eax
c0107202:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c0107209:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010720c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010720f:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107212:	0f ab 10             	bts    %edx,(%eax)

    list_add(&(free_list), &(base->page_link));
c0107215:	8b 45 08             	mov    0x8(%ebp),%eax
c0107218:	83 c0 10             	add    $0x10,%eax
c010721b:	c7 45 ac 54 11 17 c0 	movl   $0xc0171154,-0x54(%ebp)
c0107222:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0107225:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0107228:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010722b:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010722e:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107231:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107234:	8b 40 04             	mov    0x4(%eax),%eax
c0107237:	8b 55 a0             	mov    -0x60(%ebp),%edx
c010723a:	89 55 9c             	mov    %edx,-0x64(%ebp)
c010723d:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0107240:	89 55 98             	mov    %edx,-0x68(%ebp)
c0107243:	89 45 94             	mov    %eax,-0x6c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107246:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107249:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010724c:	89 10                	mov    %edx,(%eax)
c010724e:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107251:	8b 10                	mov    (%eax),%edx
c0107253:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107256:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107259:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010725c:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010725f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107262:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0107265:	8b 55 98             	mov    -0x68(%ebp),%edx
c0107268:	89 10                	mov    %edx,(%eax)
    nr_free += length;
c010726a:	8b 15 5c 11 17 c0    	mov    0xc017115c,%edx
c0107270:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107273:	01 d0                	add    %edx,%eax
c0107275:	a3 5c 11 17 c0       	mov    %eax,0xc017115c
    buddy_segment[block] = length;
c010727a:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c010727f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107282:	c1 e2 02             	shl    $0x2,%edx
c0107285:	01 c2                	add    %eax,%edx
c0107287:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010728a:	89 02                	mov    %eax,(%edx)
    // Upadte & merge
    while (block != BUDDY_ROOT) {
c010728c:	e9 2f 0b 00 00       	jmp    c0107dc0 <buddy_free_pages+0xeb1>
        block = BUDDY_PARENT(block);
c0107291:	d1 6d e0             	shrl   -0x20(%ebp)
        size_t left = BUDDY_LEFT(block);
c0107294:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107297:	01 c0                	add    %eax,%eax
c0107299:	89 45 d0             	mov    %eax,-0x30(%ebp)
        size_t right = BUDDY_RIGHT(block);
c010729c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010729f:	01 c0                	add    %eax,%eax
c01072a1:	83 c0 01             	add    $0x1,%eax
c01072a4:	89 45 cc             	mov    %eax,-0x34(%ebp)
        if (BUDDY_EMPTY(left) && BUDDY_EMPTY(right)) {  // Merge
c01072a7:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c01072ac:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01072af:	c1 e2 02             	shl    $0x2,%edx
c01072b2:	01 d0                	add    %edx,%eax
c01072b4:	8b 00                	mov    (%eax),%eax
c01072b6:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
c01072bc:	8b 3d 88 df 16 c0    	mov    0xc016df88,%edi
c01072c2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01072c5:	d1 e8                	shr    %eax
c01072c7:	0b 45 d0             	or     -0x30(%ebp),%eax
c01072ca:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01072cd:	d1 ea                	shr    %edx
c01072cf:	0b 55 d0             	or     -0x30(%ebp),%edx
c01072d2:	c1 ea 02             	shr    $0x2,%edx
c01072d5:	09 d0                	or     %edx,%eax
c01072d7:	89 c1                	mov    %eax,%ecx
c01072d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01072dc:	d1 e8                	shr    %eax
c01072de:	0b 45 d0             	or     -0x30(%ebp),%eax
c01072e1:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01072e4:	d1 ea                	shr    %edx
c01072e6:	0b 55 d0             	or     -0x30(%ebp),%edx
c01072e9:	c1 ea 02             	shr    $0x2,%edx
c01072ec:	09 d0                	or     %edx,%eax
c01072ee:	c1 e8 04             	shr    $0x4,%eax
c01072f1:	09 c1                	or     %eax,%ecx
c01072f3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01072f6:	d1 e8                	shr    %eax
c01072f8:	0b 45 d0             	or     -0x30(%ebp),%eax
c01072fb:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01072fe:	d1 ea                	shr    %edx
c0107300:	0b 55 d0             	or     -0x30(%ebp),%edx
c0107303:	c1 ea 02             	shr    $0x2,%edx
c0107306:	09 d0                	or     %edx,%eax
c0107308:	89 c3                	mov    %eax,%ebx
c010730a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010730d:	d1 e8                	shr    %eax
c010730f:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107312:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107315:	d1 ea                	shr    %edx
c0107317:	0b 55 d0             	or     -0x30(%ebp),%edx
c010731a:	c1 ea 02             	shr    $0x2,%edx
c010731d:	09 d0                	or     %edx,%eax
c010731f:	c1 e8 04             	shr    $0x4,%eax
c0107322:	09 d8                	or     %ebx,%eax
c0107324:	c1 e8 08             	shr    $0x8,%eax
c0107327:	89 cb                	mov    %ecx,%ebx
c0107329:	09 c3                	or     %eax,%ebx
c010732b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010732e:	d1 e8                	shr    %eax
c0107330:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107333:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107336:	d1 ea                	shr    %edx
c0107338:	0b 55 d0             	or     -0x30(%ebp),%edx
c010733b:	c1 ea 02             	shr    $0x2,%edx
c010733e:	09 d0                	or     %edx,%eax
c0107340:	89 c1                	mov    %eax,%ecx
c0107342:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107345:	d1 e8                	shr    %eax
c0107347:	0b 45 d0             	or     -0x30(%ebp),%eax
c010734a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010734d:	d1 ea                	shr    %edx
c010734f:	0b 55 d0             	or     -0x30(%ebp),%edx
c0107352:	c1 ea 02             	shr    $0x2,%edx
c0107355:	09 d0                	or     %edx,%eax
c0107357:	c1 e8 04             	shr    $0x4,%eax
c010735a:	09 c1                	or     %eax,%ecx
c010735c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010735f:	d1 e8                	shr    %eax
c0107361:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107364:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107367:	d1 ea                	shr    %edx
c0107369:	0b 55 d0             	or     -0x30(%ebp),%edx
c010736c:	c1 ea 02             	shr    $0x2,%edx
c010736f:	09 d0                	or     %edx,%eax
c0107371:	89 c6                	mov    %eax,%esi
c0107373:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107376:	d1 e8                	shr    %eax
c0107378:	0b 45 d0             	or     -0x30(%ebp),%eax
c010737b:	89 c2                	mov    %eax,%edx
c010737d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107380:	d1 e8                	shr    %eax
c0107382:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107385:	c1 e8 02             	shr    $0x2,%eax
c0107388:	09 d0                	or     %edx,%eax
c010738a:	c1 e8 04             	shr    $0x4,%eax
c010738d:	09 f0                	or     %esi,%eax
c010738f:	c1 e8 08             	shr    $0x8,%eax
c0107392:	09 c8                	or     %ecx,%eax
c0107394:	c1 e8 10             	shr    $0x10,%eax
c0107397:	09 d8                	or     %ebx,%eax
c0107399:	d1 e8                	shr    %eax
c010739b:	23 45 d0             	and    -0x30(%ebp),%eax
c010739e:	85 c0                	test   %eax,%eax
c01073a0:	0f 84 e2 00 00 00    	je     c0107488 <buddy_free_pages+0x579>
c01073a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01073a9:	d1 e8                	shr    %eax
c01073ab:	0b 45 d0             	or     -0x30(%ebp),%eax
c01073ae:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01073b1:	d1 ea                	shr    %edx
c01073b3:	0b 55 d0             	or     -0x30(%ebp),%edx
c01073b6:	c1 ea 02             	shr    $0x2,%edx
c01073b9:	09 d0                	or     %edx,%eax
c01073bb:	89 c1                	mov    %eax,%ecx
c01073bd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01073c0:	d1 e8                	shr    %eax
c01073c2:	0b 45 d0             	or     -0x30(%ebp),%eax
c01073c5:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01073c8:	d1 ea                	shr    %edx
c01073ca:	0b 55 d0             	or     -0x30(%ebp),%edx
c01073cd:	c1 ea 02             	shr    $0x2,%edx
c01073d0:	09 d0                	or     %edx,%eax
c01073d2:	c1 e8 04             	shr    $0x4,%eax
c01073d5:	09 c1                	or     %eax,%ecx
c01073d7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01073da:	d1 e8                	shr    %eax
c01073dc:	0b 45 d0             	or     -0x30(%ebp),%eax
c01073df:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01073e2:	d1 ea                	shr    %edx
c01073e4:	0b 55 d0             	or     -0x30(%ebp),%edx
c01073e7:	c1 ea 02             	shr    $0x2,%edx
c01073ea:	09 d0                	or     %edx,%eax
c01073ec:	89 c3                	mov    %eax,%ebx
c01073ee:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01073f1:	d1 e8                	shr    %eax
c01073f3:	0b 45 d0             	or     -0x30(%ebp),%eax
c01073f6:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01073f9:	d1 ea                	shr    %edx
c01073fb:	0b 55 d0             	or     -0x30(%ebp),%edx
c01073fe:	c1 ea 02             	shr    $0x2,%edx
c0107401:	09 d0                	or     %edx,%eax
c0107403:	c1 e8 04             	shr    $0x4,%eax
c0107406:	09 d8                	or     %ebx,%eax
c0107408:	c1 e8 08             	shr    $0x8,%eax
c010740b:	89 cb                	mov    %ecx,%ebx
c010740d:	09 c3                	or     %eax,%ebx
c010740f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107412:	d1 e8                	shr    %eax
c0107414:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107417:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010741a:	d1 ea                	shr    %edx
c010741c:	0b 55 d0             	or     -0x30(%ebp),%edx
c010741f:	c1 ea 02             	shr    $0x2,%edx
c0107422:	09 d0                	or     %edx,%eax
c0107424:	89 c1                	mov    %eax,%ecx
c0107426:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107429:	d1 e8                	shr    %eax
c010742b:	0b 45 d0             	or     -0x30(%ebp),%eax
c010742e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107431:	d1 ea                	shr    %edx
c0107433:	0b 55 d0             	or     -0x30(%ebp),%edx
c0107436:	c1 ea 02             	shr    $0x2,%edx
c0107439:	09 d0                	or     %edx,%eax
c010743b:	c1 e8 04             	shr    $0x4,%eax
c010743e:	09 c1                	or     %eax,%ecx
c0107440:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107443:	d1 e8                	shr    %eax
c0107445:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107448:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010744b:	d1 ea                	shr    %edx
c010744d:	0b 55 d0             	or     -0x30(%ebp),%edx
c0107450:	c1 ea 02             	shr    $0x2,%edx
c0107453:	09 d0                	or     %edx,%eax
c0107455:	89 c6                	mov    %eax,%esi
c0107457:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010745a:	d1 e8                	shr    %eax
c010745c:	0b 45 d0             	or     -0x30(%ebp),%eax
c010745f:	89 c2                	mov    %eax,%edx
c0107461:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107464:	d1 e8                	shr    %eax
c0107466:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107469:	c1 e8 02             	shr    $0x2,%eax
c010746c:	09 d0                	or     %edx,%eax
c010746e:	c1 e8 04             	shr    $0x4,%eax
c0107471:	09 f0                	or     %esi,%eax
c0107473:	c1 e8 08             	shr    $0x8,%eax
c0107476:	09 c8                	or     %ecx,%eax
c0107478:	c1 e8 10             	shr    $0x10,%eax
c010747b:	09 d8                	or     %ebx,%eax
c010747d:	d1 e8                	shr    %eax
c010747f:	f7 d0                	not    %eax
c0107481:	23 45 d0             	and    -0x30(%ebp),%eax
c0107484:	89 c6                	mov    %eax,%esi
c0107486:	eb 03                	jmp    c010748b <buddy_free_pages+0x57c>
c0107488:	8b 75 d0             	mov    -0x30(%ebp),%esi
c010748b:	89 f8                	mov    %edi,%eax
c010748d:	ba 00 00 00 00       	mov    $0x0,%edx
c0107492:	f7 f6                	div    %esi
c0107494:	39 85 54 ff ff ff    	cmp    %eax,-0xac(%ebp)
c010749a:	0f 85 ec 08 00 00    	jne    c0107d8c <buddy_free_pages+0xe7d>
c01074a0:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c01074a5:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01074a8:	c1 e2 02             	shl    $0x2,%edx
c01074ab:	01 d0                	add    %edx,%eax
c01074ad:	8b 00                	mov    (%eax),%eax
c01074af:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
c01074b5:	8b 3d 88 df 16 c0    	mov    0xc016df88,%edi
c01074bb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01074be:	d1 e8                	shr    %eax
c01074c0:	0b 45 cc             	or     -0x34(%ebp),%eax
c01074c3:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01074c6:	d1 ea                	shr    %edx
c01074c8:	0b 55 cc             	or     -0x34(%ebp),%edx
c01074cb:	c1 ea 02             	shr    $0x2,%edx
c01074ce:	09 d0                	or     %edx,%eax
c01074d0:	89 c1                	mov    %eax,%ecx
c01074d2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01074d5:	d1 e8                	shr    %eax
c01074d7:	0b 45 cc             	or     -0x34(%ebp),%eax
c01074da:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01074dd:	d1 ea                	shr    %edx
c01074df:	0b 55 cc             	or     -0x34(%ebp),%edx
c01074e2:	c1 ea 02             	shr    $0x2,%edx
c01074e5:	09 d0                	or     %edx,%eax
c01074e7:	c1 e8 04             	shr    $0x4,%eax
c01074ea:	09 c1                	or     %eax,%ecx
c01074ec:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01074ef:	d1 e8                	shr    %eax
c01074f1:	0b 45 cc             	or     -0x34(%ebp),%eax
c01074f4:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01074f7:	d1 ea                	shr    %edx
c01074f9:	0b 55 cc             	or     -0x34(%ebp),%edx
c01074fc:	c1 ea 02             	shr    $0x2,%edx
c01074ff:	09 d0                	or     %edx,%eax
c0107501:	89 c3                	mov    %eax,%ebx
c0107503:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107506:	d1 e8                	shr    %eax
c0107508:	0b 45 cc             	or     -0x34(%ebp),%eax
c010750b:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010750e:	d1 ea                	shr    %edx
c0107510:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107513:	c1 ea 02             	shr    $0x2,%edx
c0107516:	09 d0                	or     %edx,%eax
c0107518:	c1 e8 04             	shr    $0x4,%eax
c010751b:	09 d8                	or     %ebx,%eax
c010751d:	c1 e8 08             	shr    $0x8,%eax
c0107520:	89 cb                	mov    %ecx,%ebx
c0107522:	09 c3                	or     %eax,%ebx
c0107524:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107527:	d1 e8                	shr    %eax
c0107529:	0b 45 cc             	or     -0x34(%ebp),%eax
c010752c:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010752f:	d1 ea                	shr    %edx
c0107531:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107534:	c1 ea 02             	shr    $0x2,%edx
c0107537:	09 d0                	or     %edx,%eax
c0107539:	89 c1                	mov    %eax,%ecx
c010753b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010753e:	d1 e8                	shr    %eax
c0107540:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107543:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107546:	d1 ea                	shr    %edx
c0107548:	0b 55 cc             	or     -0x34(%ebp),%edx
c010754b:	c1 ea 02             	shr    $0x2,%edx
c010754e:	09 d0                	or     %edx,%eax
c0107550:	c1 e8 04             	shr    $0x4,%eax
c0107553:	09 c1                	or     %eax,%ecx
c0107555:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107558:	d1 e8                	shr    %eax
c010755a:	0b 45 cc             	or     -0x34(%ebp),%eax
c010755d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107560:	d1 ea                	shr    %edx
c0107562:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107565:	c1 ea 02             	shr    $0x2,%edx
c0107568:	09 d0                	or     %edx,%eax
c010756a:	89 c6                	mov    %eax,%esi
c010756c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010756f:	d1 e8                	shr    %eax
c0107571:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107574:	89 c2                	mov    %eax,%edx
c0107576:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107579:	d1 e8                	shr    %eax
c010757b:	0b 45 cc             	or     -0x34(%ebp),%eax
c010757e:	c1 e8 02             	shr    $0x2,%eax
c0107581:	09 d0                	or     %edx,%eax
c0107583:	c1 e8 04             	shr    $0x4,%eax
c0107586:	09 f0                	or     %esi,%eax
c0107588:	c1 e8 08             	shr    $0x8,%eax
c010758b:	09 c8                	or     %ecx,%eax
c010758d:	c1 e8 10             	shr    $0x10,%eax
c0107590:	09 d8                	or     %ebx,%eax
c0107592:	d1 e8                	shr    %eax
c0107594:	23 45 cc             	and    -0x34(%ebp),%eax
c0107597:	85 c0                	test   %eax,%eax
c0107599:	0f 84 e2 00 00 00    	je     c0107681 <buddy_free_pages+0x772>
c010759f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01075a2:	d1 e8                	shr    %eax
c01075a4:	0b 45 cc             	or     -0x34(%ebp),%eax
c01075a7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01075aa:	d1 ea                	shr    %edx
c01075ac:	0b 55 cc             	or     -0x34(%ebp),%edx
c01075af:	c1 ea 02             	shr    $0x2,%edx
c01075b2:	09 d0                	or     %edx,%eax
c01075b4:	89 c1                	mov    %eax,%ecx
c01075b6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01075b9:	d1 e8                	shr    %eax
c01075bb:	0b 45 cc             	or     -0x34(%ebp),%eax
c01075be:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01075c1:	d1 ea                	shr    %edx
c01075c3:	0b 55 cc             	or     -0x34(%ebp),%edx
c01075c6:	c1 ea 02             	shr    $0x2,%edx
c01075c9:	09 d0                	or     %edx,%eax
c01075cb:	c1 e8 04             	shr    $0x4,%eax
c01075ce:	09 c1                	or     %eax,%ecx
c01075d0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01075d3:	d1 e8                	shr    %eax
c01075d5:	0b 45 cc             	or     -0x34(%ebp),%eax
c01075d8:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01075db:	d1 ea                	shr    %edx
c01075dd:	0b 55 cc             	or     -0x34(%ebp),%edx
c01075e0:	c1 ea 02             	shr    $0x2,%edx
c01075e3:	09 d0                	or     %edx,%eax
c01075e5:	89 c3                	mov    %eax,%ebx
c01075e7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01075ea:	d1 e8                	shr    %eax
c01075ec:	0b 45 cc             	or     -0x34(%ebp),%eax
c01075ef:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01075f2:	d1 ea                	shr    %edx
c01075f4:	0b 55 cc             	or     -0x34(%ebp),%edx
c01075f7:	c1 ea 02             	shr    $0x2,%edx
c01075fa:	09 d0                	or     %edx,%eax
c01075fc:	c1 e8 04             	shr    $0x4,%eax
c01075ff:	09 d8                	or     %ebx,%eax
c0107601:	c1 e8 08             	shr    $0x8,%eax
c0107604:	89 cb                	mov    %ecx,%ebx
c0107606:	09 c3                	or     %eax,%ebx
c0107608:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010760b:	d1 e8                	shr    %eax
c010760d:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107610:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107613:	d1 ea                	shr    %edx
c0107615:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107618:	c1 ea 02             	shr    $0x2,%edx
c010761b:	09 d0                	or     %edx,%eax
c010761d:	89 c1                	mov    %eax,%ecx
c010761f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107622:	d1 e8                	shr    %eax
c0107624:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107627:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010762a:	d1 ea                	shr    %edx
c010762c:	0b 55 cc             	or     -0x34(%ebp),%edx
c010762f:	c1 ea 02             	shr    $0x2,%edx
c0107632:	09 d0                	or     %edx,%eax
c0107634:	c1 e8 04             	shr    $0x4,%eax
c0107637:	09 c1                	or     %eax,%ecx
c0107639:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010763c:	d1 e8                	shr    %eax
c010763e:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107641:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107644:	d1 ea                	shr    %edx
c0107646:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107649:	c1 ea 02             	shr    $0x2,%edx
c010764c:	09 d0                	or     %edx,%eax
c010764e:	89 c6                	mov    %eax,%esi
c0107650:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107653:	d1 e8                	shr    %eax
c0107655:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107658:	89 c2                	mov    %eax,%edx
c010765a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010765d:	d1 e8                	shr    %eax
c010765f:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107662:	c1 e8 02             	shr    $0x2,%eax
c0107665:	09 d0                	or     %edx,%eax
c0107667:	c1 e8 04             	shr    $0x4,%eax
c010766a:	09 f0                	or     %esi,%eax
c010766c:	c1 e8 08             	shr    $0x8,%eax
c010766f:	09 c8                	or     %ecx,%eax
c0107671:	c1 e8 10             	shr    $0x10,%eax
c0107674:	09 d8                	or     %ebx,%eax
c0107676:	d1 e8                	shr    %eax
c0107678:	f7 d0                	not    %eax
c010767a:	23 45 cc             	and    -0x34(%ebp),%eax
c010767d:	89 c6                	mov    %eax,%esi
c010767f:	eb 03                	jmp    c0107684 <buddy_free_pages+0x775>
c0107681:	8b 75 cc             	mov    -0x34(%ebp),%esi
c0107684:	89 f8                	mov    %edi,%eax
c0107686:	ba 00 00 00 00       	mov    $0x0,%edx
c010768b:	f7 f6                	div    %esi
c010768d:	39 85 54 ff ff ff    	cmp    %eax,-0xac(%ebp)
c0107693:	0f 85 f3 06 00 00    	jne    c0107d8c <buddy_free_pages+0xe7d>
            size_t lbegin = BUDDY_BEGIN(left);
c0107699:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010769c:	d1 e8                	shr    %eax
c010769e:	0b 45 d0             	or     -0x30(%ebp),%eax
c01076a1:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01076a4:	d1 ea                	shr    %edx
c01076a6:	0b 55 d0             	or     -0x30(%ebp),%edx
c01076a9:	c1 ea 02             	shr    $0x2,%edx
c01076ac:	09 d0                	or     %edx,%eax
c01076ae:	89 c1                	mov    %eax,%ecx
c01076b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01076b3:	d1 e8                	shr    %eax
c01076b5:	0b 45 d0             	or     -0x30(%ebp),%eax
c01076b8:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01076bb:	d1 ea                	shr    %edx
c01076bd:	0b 55 d0             	or     -0x30(%ebp),%edx
c01076c0:	c1 ea 02             	shr    $0x2,%edx
c01076c3:	09 d0                	or     %edx,%eax
c01076c5:	c1 e8 04             	shr    $0x4,%eax
c01076c8:	09 c1                	or     %eax,%ecx
c01076ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01076cd:	d1 e8                	shr    %eax
c01076cf:	0b 45 d0             	or     -0x30(%ebp),%eax
c01076d2:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01076d5:	d1 ea                	shr    %edx
c01076d7:	0b 55 d0             	or     -0x30(%ebp),%edx
c01076da:	c1 ea 02             	shr    $0x2,%edx
c01076dd:	09 d0                	or     %edx,%eax
c01076df:	89 c3                	mov    %eax,%ebx
c01076e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01076e4:	d1 e8                	shr    %eax
c01076e6:	0b 45 d0             	or     -0x30(%ebp),%eax
c01076e9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01076ec:	d1 ea                	shr    %edx
c01076ee:	0b 55 d0             	or     -0x30(%ebp),%edx
c01076f1:	c1 ea 02             	shr    $0x2,%edx
c01076f4:	09 d0                	or     %edx,%eax
c01076f6:	c1 e8 04             	shr    $0x4,%eax
c01076f9:	09 d8                	or     %ebx,%eax
c01076fb:	c1 e8 08             	shr    $0x8,%eax
c01076fe:	09 c1                	or     %eax,%ecx
c0107700:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107703:	d1 e8                	shr    %eax
c0107705:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107708:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010770b:	d1 ea                	shr    %edx
c010770d:	0b 55 d0             	or     -0x30(%ebp),%edx
c0107710:	c1 ea 02             	shr    $0x2,%edx
c0107713:	09 d0                	or     %edx,%eax
c0107715:	89 c3                	mov    %eax,%ebx
c0107717:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010771a:	d1 e8                	shr    %eax
c010771c:	0b 45 d0             	or     -0x30(%ebp),%eax
c010771f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107722:	d1 ea                	shr    %edx
c0107724:	0b 55 d0             	or     -0x30(%ebp),%edx
c0107727:	c1 ea 02             	shr    $0x2,%edx
c010772a:	09 d0                	or     %edx,%eax
c010772c:	c1 e8 04             	shr    $0x4,%eax
c010772f:	09 c3                	or     %eax,%ebx
c0107731:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107734:	d1 e8                	shr    %eax
c0107736:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107739:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010773c:	d1 ea                	shr    %edx
c010773e:	0b 55 d0             	or     -0x30(%ebp),%edx
c0107741:	c1 ea 02             	shr    $0x2,%edx
c0107744:	09 d0                	or     %edx,%eax
c0107746:	89 c6                	mov    %eax,%esi
c0107748:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010774b:	d1 e8                	shr    %eax
c010774d:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107750:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107753:	d1 ea                	shr    %edx
c0107755:	0b 55 d0             	or     -0x30(%ebp),%edx
c0107758:	c1 ea 02             	shr    $0x2,%edx
c010775b:	09 d0                	or     %edx,%eax
c010775d:	c1 e8 04             	shr    $0x4,%eax
c0107760:	09 f0                	or     %esi,%eax
c0107762:	c1 e8 08             	shr    $0x8,%eax
c0107765:	09 d8                	or     %ebx,%eax
c0107767:	c1 e8 10             	shr    $0x10,%eax
c010776a:	09 c8                	or     %ecx,%eax
c010776c:	d1 e8                	shr    %eax
c010776e:	23 45 d0             	and    -0x30(%ebp),%eax
c0107771:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
c0107777:	8b 3d 88 df 16 c0    	mov    0xc016df88,%edi
c010777d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107780:	d1 e8                	shr    %eax
c0107782:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107785:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107788:	d1 ea                	shr    %edx
c010778a:	0b 55 d0             	or     -0x30(%ebp),%edx
c010778d:	c1 ea 02             	shr    $0x2,%edx
c0107790:	09 d0                	or     %edx,%eax
c0107792:	89 c1                	mov    %eax,%ecx
c0107794:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107797:	d1 e8                	shr    %eax
c0107799:	0b 45 d0             	or     -0x30(%ebp),%eax
c010779c:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010779f:	d1 ea                	shr    %edx
c01077a1:	0b 55 d0             	or     -0x30(%ebp),%edx
c01077a4:	c1 ea 02             	shr    $0x2,%edx
c01077a7:	09 d0                	or     %edx,%eax
c01077a9:	c1 e8 04             	shr    $0x4,%eax
c01077ac:	09 c1                	or     %eax,%ecx
c01077ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01077b1:	d1 e8                	shr    %eax
c01077b3:	0b 45 d0             	or     -0x30(%ebp),%eax
c01077b6:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01077b9:	d1 ea                	shr    %edx
c01077bb:	0b 55 d0             	or     -0x30(%ebp),%edx
c01077be:	c1 ea 02             	shr    $0x2,%edx
c01077c1:	09 d0                	or     %edx,%eax
c01077c3:	89 c3                	mov    %eax,%ebx
c01077c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01077c8:	d1 e8                	shr    %eax
c01077ca:	0b 45 d0             	or     -0x30(%ebp),%eax
c01077cd:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01077d0:	d1 ea                	shr    %edx
c01077d2:	0b 55 d0             	or     -0x30(%ebp),%edx
c01077d5:	c1 ea 02             	shr    $0x2,%edx
c01077d8:	09 d0                	or     %edx,%eax
c01077da:	c1 e8 04             	shr    $0x4,%eax
c01077dd:	09 d8                	or     %ebx,%eax
c01077df:	c1 e8 08             	shr    $0x8,%eax
c01077e2:	89 cb                	mov    %ecx,%ebx
c01077e4:	09 c3                	or     %eax,%ebx
c01077e6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01077e9:	d1 e8                	shr    %eax
c01077eb:	0b 45 d0             	or     -0x30(%ebp),%eax
c01077ee:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01077f1:	d1 ea                	shr    %edx
c01077f3:	0b 55 d0             	or     -0x30(%ebp),%edx
c01077f6:	c1 ea 02             	shr    $0x2,%edx
c01077f9:	09 d0                	or     %edx,%eax
c01077fb:	89 c1                	mov    %eax,%ecx
c01077fd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107800:	d1 e8                	shr    %eax
c0107802:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107805:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107808:	d1 ea                	shr    %edx
c010780a:	0b 55 d0             	or     -0x30(%ebp),%edx
c010780d:	c1 ea 02             	shr    $0x2,%edx
c0107810:	09 d0                	or     %edx,%eax
c0107812:	c1 e8 04             	shr    $0x4,%eax
c0107815:	09 c1                	or     %eax,%ecx
c0107817:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010781a:	d1 e8                	shr    %eax
c010781c:	0b 45 d0             	or     -0x30(%ebp),%eax
c010781f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107822:	d1 ea                	shr    %edx
c0107824:	0b 55 d0             	or     -0x30(%ebp),%edx
c0107827:	c1 ea 02             	shr    $0x2,%edx
c010782a:	09 d0                	or     %edx,%eax
c010782c:	89 c6                	mov    %eax,%esi
c010782e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107831:	d1 e8                	shr    %eax
c0107833:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107836:	89 c2                	mov    %eax,%edx
c0107838:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010783b:	d1 e8                	shr    %eax
c010783d:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107840:	c1 e8 02             	shr    $0x2,%eax
c0107843:	09 d0                	or     %edx,%eax
c0107845:	c1 e8 04             	shr    $0x4,%eax
c0107848:	09 f0                	or     %esi,%eax
c010784a:	c1 e8 08             	shr    $0x8,%eax
c010784d:	09 c8                	or     %ecx,%eax
c010784f:	c1 e8 10             	shr    $0x10,%eax
c0107852:	09 d8                	or     %ebx,%eax
c0107854:	d1 e8                	shr    %eax
c0107856:	23 45 d0             	and    -0x30(%ebp),%eax
c0107859:	85 c0                	test   %eax,%eax
c010785b:	0f 84 e2 00 00 00    	je     c0107943 <buddy_free_pages+0xa34>
c0107861:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107864:	d1 e8                	shr    %eax
c0107866:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107869:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010786c:	d1 ea                	shr    %edx
c010786e:	0b 55 d0             	or     -0x30(%ebp),%edx
c0107871:	c1 ea 02             	shr    $0x2,%edx
c0107874:	09 d0                	or     %edx,%eax
c0107876:	89 c1                	mov    %eax,%ecx
c0107878:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010787b:	d1 e8                	shr    %eax
c010787d:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107880:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107883:	d1 ea                	shr    %edx
c0107885:	0b 55 d0             	or     -0x30(%ebp),%edx
c0107888:	c1 ea 02             	shr    $0x2,%edx
c010788b:	09 d0                	or     %edx,%eax
c010788d:	c1 e8 04             	shr    $0x4,%eax
c0107890:	09 c1                	or     %eax,%ecx
c0107892:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107895:	d1 e8                	shr    %eax
c0107897:	0b 45 d0             	or     -0x30(%ebp),%eax
c010789a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010789d:	d1 ea                	shr    %edx
c010789f:	0b 55 d0             	or     -0x30(%ebp),%edx
c01078a2:	c1 ea 02             	shr    $0x2,%edx
c01078a5:	09 d0                	or     %edx,%eax
c01078a7:	89 c3                	mov    %eax,%ebx
c01078a9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01078ac:	d1 e8                	shr    %eax
c01078ae:	0b 45 d0             	or     -0x30(%ebp),%eax
c01078b1:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01078b4:	d1 ea                	shr    %edx
c01078b6:	0b 55 d0             	or     -0x30(%ebp),%edx
c01078b9:	c1 ea 02             	shr    $0x2,%edx
c01078bc:	09 d0                	or     %edx,%eax
c01078be:	c1 e8 04             	shr    $0x4,%eax
c01078c1:	09 d8                	or     %ebx,%eax
c01078c3:	c1 e8 08             	shr    $0x8,%eax
c01078c6:	89 cb                	mov    %ecx,%ebx
c01078c8:	09 c3                	or     %eax,%ebx
c01078ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01078cd:	d1 e8                	shr    %eax
c01078cf:	0b 45 d0             	or     -0x30(%ebp),%eax
c01078d2:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01078d5:	d1 ea                	shr    %edx
c01078d7:	0b 55 d0             	or     -0x30(%ebp),%edx
c01078da:	c1 ea 02             	shr    $0x2,%edx
c01078dd:	09 d0                	or     %edx,%eax
c01078df:	89 c1                	mov    %eax,%ecx
c01078e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01078e4:	d1 e8                	shr    %eax
c01078e6:	0b 45 d0             	or     -0x30(%ebp),%eax
c01078e9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01078ec:	d1 ea                	shr    %edx
c01078ee:	0b 55 d0             	or     -0x30(%ebp),%edx
c01078f1:	c1 ea 02             	shr    $0x2,%edx
c01078f4:	09 d0                	or     %edx,%eax
c01078f6:	c1 e8 04             	shr    $0x4,%eax
c01078f9:	09 c1                	or     %eax,%ecx
c01078fb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01078fe:	d1 e8                	shr    %eax
c0107900:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107903:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107906:	d1 ea                	shr    %edx
c0107908:	0b 55 d0             	or     -0x30(%ebp),%edx
c010790b:	c1 ea 02             	shr    $0x2,%edx
c010790e:	09 d0                	or     %edx,%eax
c0107910:	89 c6                	mov    %eax,%esi
c0107912:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107915:	d1 e8                	shr    %eax
c0107917:	0b 45 d0             	or     -0x30(%ebp),%eax
c010791a:	89 c2                	mov    %eax,%edx
c010791c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010791f:	d1 e8                	shr    %eax
c0107921:	0b 45 d0             	or     -0x30(%ebp),%eax
c0107924:	c1 e8 02             	shr    $0x2,%eax
c0107927:	09 d0                	or     %edx,%eax
c0107929:	c1 e8 04             	shr    $0x4,%eax
c010792c:	09 f0                	or     %esi,%eax
c010792e:	c1 e8 08             	shr    $0x8,%eax
c0107931:	09 c8                	or     %ecx,%eax
c0107933:	c1 e8 10             	shr    $0x10,%eax
c0107936:	09 d8                	or     %ebx,%eax
c0107938:	d1 e8                	shr    %eax
c010793a:	f7 d0                	not    %eax
c010793c:	23 45 d0             	and    -0x30(%ebp),%eax
c010793f:	89 c6                	mov    %eax,%esi
c0107941:	eb 03                	jmp    c0107946 <buddy_free_pages+0xa37>
c0107943:	8b 75 d0             	mov    -0x30(%ebp),%esi
c0107946:	89 f8                	mov    %edi,%eax
c0107948:	ba 00 00 00 00       	mov    $0x0,%edx
c010794d:	f7 f6                	div    %esi
c010794f:	0f af 85 54 ff ff ff 	imul   -0xac(%ebp),%eax
c0107956:	89 45 c8             	mov    %eax,-0x38(%ebp)
            size_t rbegin = BUDDY_BEGIN(right);
c0107959:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010795c:	d1 e8                	shr    %eax
c010795e:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107961:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107964:	d1 ea                	shr    %edx
c0107966:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107969:	c1 ea 02             	shr    $0x2,%edx
c010796c:	09 d0                	or     %edx,%eax
c010796e:	89 c1                	mov    %eax,%ecx
c0107970:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107973:	d1 e8                	shr    %eax
c0107975:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107978:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010797b:	d1 ea                	shr    %edx
c010797d:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107980:	c1 ea 02             	shr    $0x2,%edx
c0107983:	09 d0                	or     %edx,%eax
c0107985:	c1 e8 04             	shr    $0x4,%eax
c0107988:	09 c1                	or     %eax,%ecx
c010798a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010798d:	d1 e8                	shr    %eax
c010798f:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107992:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107995:	d1 ea                	shr    %edx
c0107997:	0b 55 cc             	or     -0x34(%ebp),%edx
c010799a:	c1 ea 02             	shr    $0x2,%edx
c010799d:	09 d0                	or     %edx,%eax
c010799f:	89 c3                	mov    %eax,%ebx
c01079a1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01079a4:	d1 e8                	shr    %eax
c01079a6:	0b 45 cc             	or     -0x34(%ebp),%eax
c01079a9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01079ac:	d1 ea                	shr    %edx
c01079ae:	0b 55 cc             	or     -0x34(%ebp),%edx
c01079b1:	c1 ea 02             	shr    $0x2,%edx
c01079b4:	09 d0                	or     %edx,%eax
c01079b6:	c1 e8 04             	shr    $0x4,%eax
c01079b9:	09 d8                	or     %ebx,%eax
c01079bb:	c1 e8 08             	shr    $0x8,%eax
c01079be:	09 c1                	or     %eax,%ecx
c01079c0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01079c3:	d1 e8                	shr    %eax
c01079c5:	0b 45 cc             	or     -0x34(%ebp),%eax
c01079c8:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01079cb:	d1 ea                	shr    %edx
c01079cd:	0b 55 cc             	or     -0x34(%ebp),%edx
c01079d0:	c1 ea 02             	shr    $0x2,%edx
c01079d3:	09 d0                	or     %edx,%eax
c01079d5:	89 c3                	mov    %eax,%ebx
c01079d7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01079da:	d1 e8                	shr    %eax
c01079dc:	0b 45 cc             	or     -0x34(%ebp),%eax
c01079df:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01079e2:	d1 ea                	shr    %edx
c01079e4:	0b 55 cc             	or     -0x34(%ebp),%edx
c01079e7:	c1 ea 02             	shr    $0x2,%edx
c01079ea:	09 d0                	or     %edx,%eax
c01079ec:	c1 e8 04             	shr    $0x4,%eax
c01079ef:	09 c3                	or     %eax,%ebx
c01079f1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01079f4:	d1 e8                	shr    %eax
c01079f6:	0b 45 cc             	or     -0x34(%ebp),%eax
c01079f9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01079fc:	d1 ea                	shr    %edx
c01079fe:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107a01:	c1 ea 02             	shr    $0x2,%edx
c0107a04:	09 d0                	or     %edx,%eax
c0107a06:	89 c6                	mov    %eax,%esi
c0107a08:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107a0b:	d1 e8                	shr    %eax
c0107a0d:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107a10:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107a13:	d1 ea                	shr    %edx
c0107a15:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107a18:	c1 ea 02             	shr    $0x2,%edx
c0107a1b:	09 d0                	or     %edx,%eax
c0107a1d:	c1 e8 04             	shr    $0x4,%eax
c0107a20:	09 f0                	or     %esi,%eax
c0107a22:	c1 e8 08             	shr    $0x8,%eax
c0107a25:	09 d8                	or     %ebx,%eax
c0107a27:	c1 e8 10             	shr    $0x10,%eax
c0107a2a:	09 c8                	or     %ecx,%eax
c0107a2c:	d1 e8                	shr    %eax
c0107a2e:	23 45 cc             	and    -0x34(%ebp),%eax
c0107a31:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
c0107a37:	8b 3d 88 df 16 c0    	mov    0xc016df88,%edi
c0107a3d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107a40:	d1 e8                	shr    %eax
c0107a42:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107a45:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107a48:	d1 ea                	shr    %edx
c0107a4a:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107a4d:	c1 ea 02             	shr    $0x2,%edx
c0107a50:	09 d0                	or     %edx,%eax
c0107a52:	89 c1                	mov    %eax,%ecx
c0107a54:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107a57:	d1 e8                	shr    %eax
c0107a59:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107a5c:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107a5f:	d1 ea                	shr    %edx
c0107a61:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107a64:	c1 ea 02             	shr    $0x2,%edx
c0107a67:	09 d0                	or     %edx,%eax
c0107a69:	c1 e8 04             	shr    $0x4,%eax
c0107a6c:	09 c1                	or     %eax,%ecx
c0107a6e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107a71:	d1 e8                	shr    %eax
c0107a73:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107a76:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107a79:	d1 ea                	shr    %edx
c0107a7b:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107a7e:	c1 ea 02             	shr    $0x2,%edx
c0107a81:	09 d0                	or     %edx,%eax
c0107a83:	89 c3                	mov    %eax,%ebx
c0107a85:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107a88:	d1 e8                	shr    %eax
c0107a8a:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107a8d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107a90:	d1 ea                	shr    %edx
c0107a92:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107a95:	c1 ea 02             	shr    $0x2,%edx
c0107a98:	09 d0                	or     %edx,%eax
c0107a9a:	c1 e8 04             	shr    $0x4,%eax
c0107a9d:	09 d8                	or     %ebx,%eax
c0107a9f:	c1 e8 08             	shr    $0x8,%eax
c0107aa2:	89 cb                	mov    %ecx,%ebx
c0107aa4:	09 c3                	or     %eax,%ebx
c0107aa6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107aa9:	d1 e8                	shr    %eax
c0107aab:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107aae:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107ab1:	d1 ea                	shr    %edx
c0107ab3:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107ab6:	c1 ea 02             	shr    $0x2,%edx
c0107ab9:	09 d0                	or     %edx,%eax
c0107abb:	89 c1                	mov    %eax,%ecx
c0107abd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107ac0:	d1 e8                	shr    %eax
c0107ac2:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107ac5:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107ac8:	d1 ea                	shr    %edx
c0107aca:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107acd:	c1 ea 02             	shr    $0x2,%edx
c0107ad0:	09 d0                	or     %edx,%eax
c0107ad2:	c1 e8 04             	shr    $0x4,%eax
c0107ad5:	09 c1                	or     %eax,%ecx
c0107ad7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107ada:	d1 e8                	shr    %eax
c0107adc:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107adf:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107ae2:	d1 ea                	shr    %edx
c0107ae4:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107ae7:	c1 ea 02             	shr    $0x2,%edx
c0107aea:	09 d0                	or     %edx,%eax
c0107aec:	89 c6                	mov    %eax,%esi
c0107aee:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107af1:	d1 e8                	shr    %eax
c0107af3:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107af6:	89 c2                	mov    %eax,%edx
c0107af8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107afb:	d1 e8                	shr    %eax
c0107afd:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107b00:	c1 e8 02             	shr    $0x2,%eax
c0107b03:	09 d0                	or     %edx,%eax
c0107b05:	c1 e8 04             	shr    $0x4,%eax
c0107b08:	09 f0                	or     %esi,%eax
c0107b0a:	c1 e8 08             	shr    $0x8,%eax
c0107b0d:	09 c8                	or     %ecx,%eax
c0107b0f:	c1 e8 10             	shr    $0x10,%eax
c0107b12:	09 d8                	or     %ebx,%eax
c0107b14:	d1 e8                	shr    %eax
c0107b16:	23 45 cc             	and    -0x34(%ebp),%eax
c0107b19:	85 c0                	test   %eax,%eax
c0107b1b:	0f 84 e2 00 00 00    	je     c0107c03 <buddy_free_pages+0xcf4>
c0107b21:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107b24:	d1 e8                	shr    %eax
c0107b26:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107b29:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107b2c:	d1 ea                	shr    %edx
c0107b2e:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107b31:	c1 ea 02             	shr    $0x2,%edx
c0107b34:	09 d0                	or     %edx,%eax
c0107b36:	89 c1                	mov    %eax,%ecx
c0107b38:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107b3b:	d1 e8                	shr    %eax
c0107b3d:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107b40:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107b43:	d1 ea                	shr    %edx
c0107b45:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107b48:	c1 ea 02             	shr    $0x2,%edx
c0107b4b:	09 d0                	or     %edx,%eax
c0107b4d:	c1 e8 04             	shr    $0x4,%eax
c0107b50:	09 c1                	or     %eax,%ecx
c0107b52:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107b55:	d1 e8                	shr    %eax
c0107b57:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107b5a:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107b5d:	d1 ea                	shr    %edx
c0107b5f:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107b62:	c1 ea 02             	shr    $0x2,%edx
c0107b65:	09 d0                	or     %edx,%eax
c0107b67:	89 c3                	mov    %eax,%ebx
c0107b69:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107b6c:	d1 e8                	shr    %eax
c0107b6e:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107b71:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107b74:	d1 ea                	shr    %edx
c0107b76:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107b79:	c1 ea 02             	shr    $0x2,%edx
c0107b7c:	09 d0                	or     %edx,%eax
c0107b7e:	c1 e8 04             	shr    $0x4,%eax
c0107b81:	09 d8                	or     %ebx,%eax
c0107b83:	c1 e8 08             	shr    $0x8,%eax
c0107b86:	89 cb                	mov    %ecx,%ebx
c0107b88:	09 c3                	or     %eax,%ebx
c0107b8a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107b8d:	d1 e8                	shr    %eax
c0107b8f:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107b92:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107b95:	d1 ea                	shr    %edx
c0107b97:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107b9a:	c1 ea 02             	shr    $0x2,%edx
c0107b9d:	09 d0                	or     %edx,%eax
c0107b9f:	89 c1                	mov    %eax,%ecx
c0107ba1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107ba4:	d1 e8                	shr    %eax
c0107ba6:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107ba9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107bac:	d1 ea                	shr    %edx
c0107bae:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107bb1:	c1 ea 02             	shr    $0x2,%edx
c0107bb4:	09 d0                	or     %edx,%eax
c0107bb6:	c1 e8 04             	shr    $0x4,%eax
c0107bb9:	09 c1                	or     %eax,%ecx
c0107bbb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107bbe:	d1 e8                	shr    %eax
c0107bc0:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107bc3:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107bc6:	d1 ea                	shr    %edx
c0107bc8:	0b 55 cc             	or     -0x34(%ebp),%edx
c0107bcb:	c1 ea 02             	shr    $0x2,%edx
c0107bce:	09 d0                	or     %edx,%eax
c0107bd0:	89 c6                	mov    %eax,%esi
c0107bd2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107bd5:	d1 e8                	shr    %eax
c0107bd7:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107bda:	89 c2                	mov    %eax,%edx
c0107bdc:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107bdf:	d1 e8                	shr    %eax
c0107be1:	0b 45 cc             	or     -0x34(%ebp),%eax
c0107be4:	c1 e8 02             	shr    $0x2,%eax
c0107be7:	09 d0                	or     %edx,%eax
c0107be9:	c1 e8 04             	shr    $0x4,%eax
c0107bec:	09 f0                	or     %esi,%eax
c0107bee:	c1 e8 08             	shr    $0x8,%eax
c0107bf1:	09 c8                	or     %ecx,%eax
c0107bf3:	c1 e8 10             	shr    $0x10,%eax
c0107bf6:	09 d8                	or     %ebx,%eax
c0107bf8:	d1 e8                	shr    %eax
c0107bfa:	f7 d0                	not    %eax
c0107bfc:	23 45 cc             	and    -0x34(%ebp),%eax
c0107bff:	89 c6                	mov    %eax,%esi
c0107c01:	eb 03                	jmp    c0107c06 <buddy_free_pages+0xcf7>
c0107c03:	8b 75 cc             	mov    -0x34(%ebp),%esi
c0107c06:	89 f8                	mov    %edi,%eax
c0107c08:	ba 00 00 00 00       	mov    $0x0,%edx
c0107c0d:	f7 f6                	div    %esi
c0107c0f:	0f af 85 54 ff ff ff 	imul   -0xac(%ebp),%eax
c0107c16:	89 45 c4             	mov    %eax,-0x3c(%ebp)
            list_del(&(buddy_alloc[lbegin].page_link));
c0107c19:	8b 0d 9c df 16 c0    	mov    0xc016df9c,%ecx
c0107c1f:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0107c22:	89 d0                	mov    %edx,%eax
c0107c24:	c1 e0 03             	shl    $0x3,%eax
c0107c27:	01 d0                	add    %edx,%eax
c0107c29:	c1 e0 02             	shl    $0x2,%eax
c0107c2c:	01 c8                	add    %ecx,%eax
c0107c2e:	83 c0 10             	add    $0x10,%eax
c0107c31:	89 45 90             	mov    %eax,-0x70(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107c34:	8b 45 90             	mov    -0x70(%ebp),%eax
c0107c37:	8b 40 04             	mov    0x4(%eax),%eax
c0107c3a:	8b 55 90             	mov    -0x70(%ebp),%edx
c0107c3d:	8b 12                	mov    (%edx),%edx
c0107c3f:	89 55 8c             	mov    %edx,-0x74(%ebp)
c0107c42:	89 45 88             	mov    %eax,-0x78(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107c45:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0107c48:	8b 55 88             	mov    -0x78(%ebp),%edx
c0107c4b:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107c4e:	8b 45 88             	mov    -0x78(%ebp),%eax
c0107c51:	8b 55 8c             	mov    -0x74(%ebp),%edx
c0107c54:	89 10                	mov    %edx,(%eax)
            list_del(&(buddy_alloc[rbegin].page_link));
c0107c56:	8b 0d 9c df 16 c0    	mov    0xc016df9c,%ecx
c0107c5c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0107c5f:	89 d0                	mov    %edx,%eax
c0107c61:	c1 e0 03             	shl    $0x3,%eax
c0107c64:	01 d0                	add    %edx,%eax
c0107c66:	c1 e0 02             	shl    $0x2,%eax
c0107c69:	01 c8                	add    %ecx,%eax
c0107c6b:	83 c0 10             	add    $0x10,%eax
c0107c6e:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107c71:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0107c74:	8b 40 04             	mov    0x4(%eax),%eax
c0107c77:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0107c7a:	8b 12                	mov    (%edx),%edx
c0107c7c:	89 55 80             	mov    %edx,-0x80(%ebp)
c0107c7f:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107c85:	8b 45 80             	mov    -0x80(%ebp),%eax
c0107c88:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
c0107c8e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107c91:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0107c97:	8b 55 80             	mov    -0x80(%ebp),%edx
c0107c9a:	89 10                	mov    %edx,(%eax)
            buddy_segment[block] = buddy_segment[left]<<1;
c0107c9c:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c0107ca1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107ca4:	c1 e2 02             	shl    $0x2,%edx
c0107ca7:	01 d0                	add    %edx,%eax
c0107ca9:	8b 15 94 df 16 c0    	mov    0xc016df94,%edx
c0107caf:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0107cb2:	c1 e1 02             	shl    $0x2,%ecx
c0107cb5:	01 ca                	add    %ecx,%edx
c0107cb7:	8b 12                	mov    (%edx),%edx
c0107cb9:	01 d2                	add    %edx,%edx
c0107cbb:	89 10                	mov    %edx,(%eax)
            buddy_alloc[lbegin].property = buddy_segment[left]<<1;
c0107cbd:	8b 0d 9c df 16 c0    	mov    0xc016df9c,%ecx
c0107cc3:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0107cc6:	89 d0                	mov    %edx,%eax
c0107cc8:	c1 e0 03             	shl    $0x3,%eax
c0107ccb:	01 d0                	add    %edx,%eax
c0107ccd:	c1 e0 02             	shl    $0x2,%eax
c0107cd0:	01 c8                	add    %ecx,%eax
c0107cd2:	8b 15 94 df 16 c0    	mov    0xc016df94,%edx
c0107cd8:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0107cdb:	c1 e1 02             	shl    $0x2,%ecx
c0107cde:	01 ca                	add    %ecx,%edx
c0107ce0:	8b 12                	mov    (%edx),%edx
c0107ce2:	01 d2                	add    %edx,%edx
c0107ce4:	89 50 08             	mov    %edx,0x8(%eax)
            list_add(&(free_list), &(buddy_alloc[lbegin].page_link));
c0107ce7:	8b 0d 9c df 16 c0    	mov    0xc016df9c,%ecx
c0107ced:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0107cf0:	89 d0                	mov    %edx,%eax
c0107cf2:	c1 e0 03             	shl    $0x3,%eax
c0107cf5:	01 d0                	add    %edx,%eax
c0107cf7:	c1 e0 02             	shl    $0x2,%eax
c0107cfa:	01 c8                	add    %ecx,%eax
c0107cfc:	83 c0 10             	add    $0x10,%eax
c0107cff:	c7 85 78 ff ff ff 54 	movl   $0xc0171154,-0x88(%ebp)
c0107d06:	11 17 c0 
c0107d09:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
c0107d0f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0107d15:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
c0107d1b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0107d21:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107d27:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
c0107d2d:	8b 40 04             	mov    0x4(%eax),%eax
c0107d30:	8b 95 6c ff ff ff    	mov    -0x94(%ebp),%edx
c0107d36:	89 95 68 ff ff ff    	mov    %edx,-0x98(%ebp)
c0107d3c:	8b 95 70 ff ff ff    	mov    -0x90(%ebp),%edx
c0107d42:	89 95 64 ff ff ff    	mov    %edx,-0x9c(%ebp)
c0107d48:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107d4e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
c0107d54:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
c0107d5a:	89 10                	mov    %edx,(%eax)
c0107d5c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
c0107d62:	8b 10                	mov    (%eax),%edx
c0107d64:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
c0107d6a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107d6d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
c0107d73:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
c0107d79:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107d7c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
c0107d82:	8b 95 64 ff ff ff    	mov    -0x9c(%ebp),%edx
c0107d88:	89 10                	mov    %edx,(%eax)
    // Upadte & merge
    while (block != BUDDY_ROOT) {
        block = BUDDY_PARENT(block);
        size_t left = BUDDY_LEFT(block);
        size_t right = BUDDY_RIGHT(block);
        if (BUDDY_EMPTY(left) && BUDDY_EMPTY(right)) {  // Merge
c0107d8a:	eb 34                	jmp    c0107dc0 <buddy_free_pages+0xeb1>
            list_del(&(buddy_alloc[rbegin].page_link));
            buddy_segment[block] = buddy_segment[left]<<1;
            buddy_alloc[lbegin].property = buddy_segment[left]<<1;
            list_add(&(free_list), &(buddy_alloc[lbegin].page_link));
        } else {                                        // Update
            buddy_segment[block] = buddy_segment[BUDDY_LEFT(block)] | buddy_segment[BUDDY_RIGHT(block)];
c0107d8c:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c0107d91:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107d94:	c1 e2 02             	shl    $0x2,%edx
c0107d97:	01 d0                	add    %edx,%eax
c0107d99:	8b 15 94 df 16 c0    	mov    0xc016df94,%edx
c0107d9f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0107da2:	c1 e1 03             	shl    $0x3,%ecx
c0107da5:	01 ca                	add    %ecx,%edx
c0107da7:	8b 0a                	mov    (%edx),%ecx
c0107da9:	8b 15 94 df 16 c0    	mov    0xc016df94,%edx
c0107daf:	8b 5d e0             	mov    -0x20(%ebp),%ebx
c0107db2:	c1 e3 03             	shl    $0x3,%ebx
c0107db5:	83 c3 04             	add    $0x4,%ebx
c0107db8:	01 da                	add    %ebx,%edx
c0107dba:	8b 12                	mov    (%edx),%edx
c0107dbc:	09 ca                	or     %ecx,%edx
c0107dbe:	89 10                	mov    %edx,(%eax)

    list_add(&(free_list), &(base->page_link));
    nr_free += length;
    buddy_segment[block] = length;
    // Upadte & merge
    while (block != BUDDY_ROOT) {
c0107dc0:	83 7d e0 01          	cmpl   $0x1,-0x20(%ebp)
c0107dc4:	0f 85 c7 f4 ff ff    	jne    c0107291 <buddy_free_pages+0x382>
            list_add(&(free_list), &(buddy_alloc[lbegin].page_link));
        } else {                                        // Update
            buddy_segment[block] = buddy_segment[BUDDY_LEFT(block)] | buddy_segment[BUDDY_RIGHT(block)];
        }
    }
}
c0107dca:	81 c4 bc 00 00 00    	add    $0xbc,%esp
c0107dd0:	5b                   	pop    %ebx
c0107dd1:	5e                   	pop    %esi
c0107dd2:	5f                   	pop    %edi
c0107dd3:	5d                   	pop    %ebp
c0107dd4:	c3                   	ret    

c0107dd5 <buddy_nr_free_pages>:

static size_t
buddy_nr_free_pages(void) {
c0107dd5:	55                   	push   %ebp
c0107dd6:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0107dd8:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
}
c0107ddd:	5d                   	pop    %ebp
c0107dde:	c3                   	ret    

c0107ddf <macro_check>:

static void
macro_check(void) {
c0107ddf:	55                   	push   %ebp
c0107de0:	89 e5                	mov    %esp,%ebp
c0107de2:	83 ec 28             	sub    $0x28,%esp
    assert(BUDDY_ROOT == 1);
    assert(BUDDY_LEFT(3) == 6);
    assert(BUDDY_RIGHT(3) == 7);
    assert(BUDDY_PARENT(6) == 3);
    assert(BUDDY_PARENT(7) == 3);
    size_t buddy_virtual_size_store = buddy_virtual_size;
c0107de5:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0107dea:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t buddy_segment_root_store = buddy_segment[BUDDY_ROOT];
c0107ded:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c0107df2:	8b 40 04             	mov    0x4(%eax),%eax
c0107df5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    buddy_virtual_size = 16;
c0107df8:	c7 05 88 df 16 c0 10 	movl   $0x10,0xc016df88
c0107dff:	00 00 00 
    buddy_segment[BUDDY_ROOT] = 16;
c0107e02:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c0107e07:	83 c0 04             	add    $0x4,%eax
c0107e0a:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    assert(BUDDY_LENGTH(6) == 4);
c0107e10:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0107e15:	83 e8 10             	sub    $0x10,%eax
c0107e18:	83 f8 03             	cmp    $0x3,%eax
c0107e1b:	76 24                	jbe    c0107e41 <macro_check+0x62>
c0107e1d:	c7 44 24 0c 1c 2e 12 	movl   $0xc0122e1c,0xc(%esp)
c0107e24:	c0 
c0107e25:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0107e2c:	c0 
c0107e2d:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c0107e34:	00 
c0107e35:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0107e3c:	e8 d5 93 ff ff       	call   c0101216 <__panic>
    assert(BUDDY_BEGIN(6) == 8);
c0107e41:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0107e46:	c1 e8 02             	shr    $0x2,%eax
c0107e49:	01 c0                	add    %eax,%eax
c0107e4b:	83 f8 08             	cmp    $0x8,%eax
c0107e4e:	74 24                	je     c0107e74 <macro_check+0x95>
c0107e50:	c7 44 24 0c 31 2e 12 	movl   $0xc0122e31,0xc(%esp)
c0107e57:	c0 
c0107e58:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0107e5f:	c0 
c0107e60:	c7 44 24 04 e3 00 00 	movl   $0xe3,0x4(%esp)
c0107e67:	00 
c0107e68:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0107e6f:	e8 a2 93 ff ff       	call   c0101216 <__panic>
    assert(BUDDY_END(6) == 12);
c0107e74:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0107e79:	c1 e8 02             	shr    $0x2,%eax
c0107e7c:	89 c2                	mov    %eax,%edx
c0107e7e:	89 d0                	mov    %edx,%eax
c0107e80:	01 c0                	add    %eax,%eax
c0107e82:	01 d0                	add    %edx,%eax
c0107e84:	83 f8 0c             	cmp    $0xc,%eax
c0107e87:	74 24                	je     c0107ead <macro_check+0xce>
c0107e89:	c7 44 24 0c 45 2e 12 	movl   $0xc0122e45,0xc(%esp)
c0107e90:	c0 
c0107e91:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0107e98:	c0 
c0107e99:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c0107ea0:	00 
c0107ea1:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0107ea8:	e8 69 93 ff ff       	call   c0101216 <__panic>
    assert(BUDDY_BLOCK(8, 12) == 6);
c0107ead:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0107eb2:	83 e8 10             	sub    $0x10,%eax
c0107eb5:	83 f8 03             	cmp    $0x3,%eax
c0107eb8:	76 24                	jbe    c0107ede <macro_check+0xff>
c0107eba:	c7 44 24 0c 58 2e 12 	movl   $0xc0122e58,0xc(%esp)
c0107ec1:	c0 
c0107ec2:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0107ec9:	c0 
c0107eca:	c7 44 24 04 e5 00 00 	movl   $0xe5,0x4(%esp)
c0107ed1:	00 
c0107ed2:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0107ed9:	e8 38 93 ff ff       	call   c0101216 <__panic>
    assert(BUDDY_EMPTY(BUDDY_ROOT));
c0107ede:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c0107ee3:	83 c0 04             	add    $0x4,%eax
c0107ee6:	8b 10                	mov    (%eax),%edx
c0107ee8:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0107eed:	39 c2                	cmp    %eax,%edx
c0107eef:	74 24                	je     c0107f15 <macro_check+0x136>
c0107ef1:	c7 44 24 0c 70 2e 12 	movl   $0xc0122e70,0xc(%esp)
c0107ef8:	c0 
c0107ef9:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0107f00:	c0 
c0107f01:	c7 44 24 04 e6 00 00 	movl   $0xe6,0x4(%esp)
c0107f08:	00 
c0107f09:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0107f10:	e8 01 93 ff ff       	call   c0101216 <__panic>
    buddy_virtual_size = buddy_virtual_size_store;
c0107f15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f18:	a3 88 df 16 c0       	mov    %eax,0xc016df88
    buddy_segment[BUDDY_ROOT] = buddy_segment_root_store;
c0107f1d:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c0107f22:	8d 50 04             	lea    0x4(%eax),%edx
c0107f25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f28:	89 02                	mov    %eax,(%edx)
    assert(UINT32_ROUND_UP(0x2321) == 0x4000);
    assert(UINT32_ROUND_UP(0x2000) == 0x2000);
    assert(UINT32_ROUND_DOWN(0x4321) == 0x4000);
    assert(UINT32_ROUND_DOWN(0x4000) == 0x4000);

}
c0107f2a:	c9                   	leave  
c0107f2b:	c3                   	ret    

c0107f2c <size_check>:

static void
size_check(void) {
c0107f2c:	55                   	push   %ebp
c0107f2d:	89 e5                	mov    %esp,%ebp
c0107f2f:	83 ec 28             	sub    $0x28,%esp

    size_t buddy_physical_size_store = buddy_physical_size;
c0107f32:	a1 84 df 16 c0       	mov    0xc016df84,%eax
c0107f37:	89 45 f4             	mov    %eax,-0xc(%ebp)
    buddy_init_size(200);
c0107f3a:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
c0107f41:	e8 e7 cf ff ff       	call   c0104f2d <buddy_init_size>
    assert(buddy_virtual_size == 256);
c0107f46:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0107f4b:	3d 00 01 00 00       	cmp    $0x100,%eax
c0107f50:	74 24                	je     c0107f76 <size_check+0x4a>
c0107f52:	c7 44 24 0c 88 2e 12 	movl   $0xc0122e88,0xc(%esp)
c0107f59:	c0 
c0107f5a:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0107f61:	c0 
c0107f62:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0107f69:	00 
c0107f6a:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0107f71:	e8 a0 92 ff ff       	call   c0101216 <__panic>
    buddy_init_size(1024);
c0107f76:	c7 04 24 00 04 00 00 	movl   $0x400,(%esp)
c0107f7d:	e8 ab cf ff ff       	call   c0104f2d <buddy_init_size>
    assert(buddy_virtual_size == 1024);
c0107f82:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0107f87:	3d 00 04 00 00       	cmp    $0x400,%eax
c0107f8c:	74 24                	je     c0107fb2 <size_check+0x86>
c0107f8e:	c7 44 24 0c a2 2e 12 	movl   $0xc0122ea2,0xc(%esp)
c0107f95:	c0 
c0107f96:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0107f9d:	c0 
c0107f9e:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0107fa5:	00 
c0107fa6:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0107fad:	e8 64 92 ff ff       	call   c0101216 <__panic>
    buddy_init_size(1026);
c0107fb2:	c7 04 24 02 04 00 00 	movl   $0x402,(%esp)
c0107fb9:	e8 6f cf ff ff       	call   c0104f2d <buddy_init_size>
    assert(buddy_virtual_size == 1024);
c0107fbe:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0107fc3:	3d 00 04 00 00       	cmp    $0x400,%eax
c0107fc8:	74 24                	je     c0107fee <size_check+0xc2>
c0107fca:	c7 44 24 0c a2 2e 12 	movl   $0xc0122ea2,0xc(%esp)
c0107fd1:	c0 
c0107fd2:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0107fd9:	c0 
c0107fda:	c7 44 24 04 fe 00 00 	movl   $0xfe,0x4(%esp)
c0107fe1:	00 
c0107fe2:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0107fe9:	e8 28 92 ff ff       	call   c0101216 <__panic>
    buddy_init_size(1028);    
c0107fee:	c7 04 24 04 04 00 00 	movl   $0x404,(%esp)
c0107ff5:	e8 33 cf ff ff       	call   c0104f2d <buddy_init_size>
    assert(buddy_virtual_size == 1024);
c0107ffa:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0107fff:	3d 00 04 00 00       	cmp    $0x400,%eax
c0108004:	74 24                	je     c010802a <size_check+0xfe>
c0108006:	c7 44 24 0c a2 2e 12 	movl   $0xc0122ea2,0xc(%esp)
c010800d:	c0 
c010800e:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108015:	c0 
c0108016:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c010801d:	00 
c010801e:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108025:	e8 ec 91 ff ff       	call   c0101216 <__panic>
    buddy_init_size(1030);    
c010802a:	c7 04 24 06 04 00 00 	movl   $0x406,(%esp)
c0108031:	e8 f7 ce ff ff       	call   c0104f2d <buddy_init_size>
    assert(buddy_virtual_size == 2048);
c0108036:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c010803b:	3d 00 08 00 00       	cmp    $0x800,%eax
c0108040:	74 24                	je     c0108066 <size_check+0x13a>
c0108042:	c7 44 24 0c bd 2e 12 	movl   $0xc0122ebd,0xc(%esp)
c0108049:	c0 
c010804a:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108051:	c0 
c0108052:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c0108059:	00 
c010805a:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108061:	e8 b0 91 ff ff       	call   c0101216 <__panic>
    buddy_init_size(buddy_physical_size_store);   
c0108066:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108069:	89 04 24             	mov    %eax,(%esp)
c010806c:	e8 bc ce ff ff       	call   c0104f2d <buddy_init_size>

}
c0108071:	c9                   	leave  
c0108072:	c3                   	ret    

c0108073 <segment_check>:

static void
segment_check(void) {
c0108073:	55                   	push   %ebp
c0108074:	89 e5                	mov    %esp,%ebp
c0108076:	57                   	push   %edi
c0108077:	56                   	push   %esi
c0108078:	53                   	push   %ebx
c0108079:	83 ec 4c             	sub    $0x4c,%esp

    // Check buddy segment
    size_t total = 0, count = 0;
c010807c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c0108083:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    size_t block;
    for (block = BUDDY_ROOT; block < (buddy_virtual_size<<1); block++)
c010808a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
c0108091:	e9 2f 04 00 00       	jmp    c01084c5 <segment_check+0x452>
        if (BUDDY_EMPTY(block))
c0108096:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c010809b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010809e:	c1 e2 02             	shl    $0x2,%edx
c01080a1:	01 d0                	add    %edx,%eax
c01080a3:	8b 00                	mov    (%eax),%eax
c01080a5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c01080a8:	8b 3d 88 df 16 c0    	mov    0xc016df88,%edi
c01080ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01080b1:	d1 e8                	shr    %eax
c01080b3:	0b 45 dc             	or     -0x24(%ebp),%eax
c01080b6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01080b9:	d1 ea                	shr    %edx
c01080bb:	0b 55 dc             	or     -0x24(%ebp),%edx
c01080be:	c1 ea 02             	shr    $0x2,%edx
c01080c1:	09 d0                	or     %edx,%eax
c01080c3:	89 c1                	mov    %eax,%ecx
c01080c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01080c8:	d1 e8                	shr    %eax
c01080ca:	0b 45 dc             	or     -0x24(%ebp),%eax
c01080cd:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01080d0:	d1 ea                	shr    %edx
c01080d2:	0b 55 dc             	or     -0x24(%ebp),%edx
c01080d5:	c1 ea 02             	shr    $0x2,%edx
c01080d8:	09 d0                	or     %edx,%eax
c01080da:	c1 e8 04             	shr    $0x4,%eax
c01080dd:	09 c1                	or     %eax,%ecx
c01080df:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01080e2:	d1 e8                	shr    %eax
c01080e4:	0b 45 dc             	or     -0x24(%ebp),%eax
c01080e7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01080ea:	d1 ea                	shr    %edx
c01080ec:	0b 55 dc             	or     -0x24(%ebp),%edx
c01080ef:	c1 ea 02             	shr    $0x2,%edx
c01080f2:	09 d0                	or     %edx,%eax
c01080f4:	89 c3                	mov    %eax,%ebx
c01080f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01080f9:	d1 e8                	shr    %eax
c01080fb:	0b 45 dc             	or     -0x24(%ebp),%eax
c01080fe:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108101:	d1 ea                	shr    %edx
c0108103:	0b 55 dc             	or     -0x24(%ebp),%edx
c0108106:	c1 ea 02             	shr    $0x2,%edx
c0108109:	09 d0                	or     %edx,%eax
c010810b:	c1 e8 04             	shr    $0x4,%eax
c010810e:	09 d8                	or     %ebx,%eax
c0108110:	c1 e8 08             	shr    $0x8,%eax
c0108113:	89 cb                	mov    %ecx,%ebx
c0108115:	09 c3                	or     %eax,%ebx
c0108117:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010811a:	d1 e8                	shr    %eax
c010811c:	0b 45 dc             	or     -0x24(%ebp),%eax
c010811f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108122:	d1 ea                	shr    %edx
c0108124:	0b 55 dc             	or     -0x24(%ebp),%edx
c0108127:	c1 ea 02             	shr    $0x2,%edx
c010812a:	09 d0                	or     %edx,%eax
c010812c:	89 c1                	mov    %eax,%ecx
c010812e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108131:	d1 e8                	shr    %eax
c0108133:	0b 45 dc             	or     -0x24(%ebp),%eax
c0108136:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108139:	d1 ea                	shr    %edx
c010813b:	0b 55 dc             	or     -0x24(%ebp),%edx
c010813e:	c1 ea 02             	shr    $0x2,%edx
c0108141:	09 d0                	or     %edx,%eax
c0108143:	c1 e8 04             	shr    $0x4,%eax
c0108146:	09 c1                	or     %eax,%ecx
c0108148:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010814b:	d1 e8                	shr    %eax
c010814d:	0b 45 dc             	or     -0x24(%ebp),%eax
c0108150:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108153:	d1 ea                	shr    %edx
c0108155:	0b 55 dc             	or     -0x24(%ebp),%edx
c0108158:	c1 ea 02             	shr    $0x2,%edx
c010815b:	09 d0                	or     %edx,%eax
c010815d:	89 c6                	mov    %eax,%esi
c010815f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108162:	d1 e8                	shr    %eax
c0108164:	0b 45 dc             	or     -0x24(%ebp),%eax
c0108167:	89 c2                	mov    %eax,%edx
c0108169:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010816c:	d1 e8                	shr    %eax
c010816e:	0b 45 dc             	or     -0x24(%ebp),%eax
c0108171:	c1 e8 02             	shr    $0x2,%eax
c0108174:	09 d0                	or     %edx,%eax
c0108176:	c1 e8 04             	shr    $0x4,%eax
c0108179:	09 f0                	or     %esi,%eax
c010817b:	c1 e8 08             	shr    $0x8,%eax
c010817e:	09 c8                	or     %ecx,%eax
c0108180:	c1 e8 10             	shr    $0x10,%eax
c0108183:	09 d8                	or     %ebx,%eax
c0108185:	d1 e8                	shr    %eax
c0108187:	23 45 dc             	and    -0x24(%ebp),%eax
c010818a:	85 c0                	test   %eax,%eax
c010818c:	0f 84 e2 00 00 00    	je     c0108274 <segment_check+0x201>
c0108192:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108195:	d1 e8                	shr    %eax
c0108197:	0b 45 dc             	or     -0x24(%ebp),%eax
c010819a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010819d:	d1 ea                	shr    %edx
c010819f:	0b 55 dc             	or     -0x24(%ebp),%edx
c01081a2:	c1 ea 02             	shr    $0x2,%edx
c01081a5:	09 d0                	or     %edx,%eax
c01081a7:	89 c1                	mov    %eax,%ecx
c01081a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01081ac:	d1 e8                	shr    %eax
c01081ae:	0b 45 dc             	or     -0x24(%ebp),%eax
c01081b1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01081b4:	d1 ea                	shr    %edx
c01081b6:	0b 55 dc             	or     -0x24(%ebp),%edx
c01081b9:	c1 ea 02             	shr    $0x2,%edx
c01081bc:	09 d0                	or     %edx,%eax
c01081be:	c1 e8 04             	shr    $0x4,%eax
c01081c1:	09 c1                	or     %eax,%ecx
c01081c3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01081c6:	d1 e8                	shr    %eax
c01081c8:	0b 45 dc             	or     -0x24(%ebp),%eax
c01081cb:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01081ce:	d1 ea                	shr    %edx
c01081d0:	0b 55 dc             	or     -0x24(%ebp),%edx
c01081d3:	c1 ea 02             	shr    $0x2,%edx
c01081d6:	09 d0                	or     %edx,%eax
c01081d8:	89 c3                	mov    %eax,%ebx
c01081da:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01081dd:	d1 e8                	shr    %eax
c01081df:	0b 45 dc             	or     -0x24(%ebp),%eax
c01081e2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01081e5:	d1 ea                	shr    %edx
c01081e7:	0b 55 dc             	or     -0x24(%ebp),%edx
c01081ea:	c1 ea 02             	shr    $0x2,%edx
c01081ed:	09 d0                	or     %edx,%eax
c01081ef:	c1 e8 04             	shr    $0x4,%eax
c01081f2:	09 d8                	or     %ebx,%eax
c01081f4:	c1 e8 08             	shr    $0x8,%eax
c01081f7:	89 cb                	mov    %ecx,%ebx
c01081f9:	09 c3                	or     %eax,%ebx
c01081fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01081fe:	d1 e8                	shr    %eax
c0108200:	0b 45 dc             	or     -0x24(%ebp),%eax
c0108203:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108206:	d1 ea                	shr    %edx
c0108208:	0b 55 dc             	or     -0x24(%ebp),%edx
c010820b:	c1 ea 02             	shr    $0x2,%edx
c010820e:	09 d0                	or     %edx,%eax
c0108210:	89 c1                	mov    %eax,%ecx
c0108212:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108215:	d1 e8                	shr    %eax
c0108217:	0b 45 dc             	or     -0x24(%ebp),%eax
c010821a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010821d:	d1 ea                	shr    %edx
c010821f:	0b 55 dc             	or     -0x24(%ebp),%edx
c0108222:	c1 ea 02             	shr    $0x2,%edx
c0108225:	09 d0                	or     %edx,%eax
c0108227:	c1 e8 04             	shr    $0x4,%eax
c010822a:	09 c1                	or     %eax,%ecx
c010822c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010822f:	d1 e8                	shr    %eax
c0108231:	0b 45 dc             	or     -0x24(%ebp),%eax
c0108234:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108237:	d1 ea                	shr    %edx
c0108239:	0b 55 dc             	or     -0x24(%ebp),%edx
c010823c:	c1 ea 02             	shr    $0x2,%edx
c010823f:	09 d0                	or     %edx,%eax
c0108241:	89 c6                	mov    %eax,%esi
c0108243:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108246:	d1 e8                	shr    %eax
c0108248:	0b 45 dc             	or     -0x24(%ebp),%eax
c010824b:	89 c2                	mov    %eax,%edx
c010824d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108250:	d1 e8                	shr    %eax
c0108252:	0b 45 dc             	or     -0x24(%ebp),%eax
c0108255:	c1 e8 02             	shr    $0x2,%eax
c0108258:	09 d0                	or     %edx,%eax
c010825a:	c1 e8 04             	shr    $0x4,%eax
c010825d:	09 f0                	or     %esi,%eax
c010825f:	c1 e8 08             	shr    $0x8,%eax
c0108262:	09 c8                	or     %ecx,%eax
c0108264:	c1 e8 10             	shr    $0x10,%eax
c0108267:	09 d8                	or     %ebx,%eax
c0108269:	d1 e8                	shr    %eax
c010826b:	f7 d0                	not    %eax
c010826d:	23 45 dc             	and    -0x24(%ebp),%eax
c0108270:	89 c6                	mov    %eax,%esi
c0108272:	eb 03                	jmp    c0108277 <segment_check+0x204>
c0108274:	8b 75 dc             	mov    -0x24(%ebp),%esi
c0108277:	89 f8                	mov    %edi,%eax
c0108279:	ba 00 00 00 00       	mov    $0x0,%edx
c010827e:	f7 f6                	div    %esi
c0108280:	39 45 c4             	cmp    %eax,-0x3c(%ebp)
c0108283:	0f 85 d2 01 00 00    	jne    c010845b <segment_check+0x3e8>
            total += BUDDY_LENGTH(block);
c0108289:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c010828e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108291:	d1 ea                	shr    %edx
c0108293:	0b 55 dc             	or     -0x24(%ebp),%edx
c0108296:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0108299:	d1 e9                	shr    %ecx
c010829b:	0b 4d dc             	or     -0x24(%ebp),%ecx
c010829e:	c1 e9 02             	shr    $0x2,%ecx
c01082a1:	89 d3                	mov    %edx,%ebx
c01082a3:	09 cb                	or     %ecx,%ebx
c01082a5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01082a8:	d1 ea                	shr    %edx
c01082aa:	0b 55 dc             	or     -0x24(%ebp),%edx
c01082ad:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01082b0:	d1 e9                	shr    %ecx
c01082b2:	0b 4d dc             	or     -0x24(%ebp),%ecx
c01082b5:	c1 e9 02             	shr    $0x2,%ecx
c01082b8:	09 ca                	or     %ecx,%edx
c01082ba:	c1 ea 04             	shr    $0x4,%edx
c01082bd:	09 d3                	or     %edx,%ebx
c01082bf:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01082c2:	d1 ea                	shr    %edx
c01082c4:	0b 55 dc             	or     -0x24(%ebp),%edx
c01082c7:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01082ca:	d1 e9                	shr    %ecx
c01082cc:	0b 4d dc             	or     -0x24(%ebp),%ecx
c01082cf:	c1 e9 02             	shr    $0x2,%ecx
c01082d2:	89 d6                	mov    %edx,%esi
c01082d4:	09 ce                	or     %ecx,%esi
c01082d6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01082d9:	d1 ea                	shr    %edx
c01082db:	0b 55 dc             	or     -0x24(%ebp),%edx
c01082de:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01082e1:	d1 e9                	shr    %ecx
c01082e3:	0b 4d dc             	or     -0x24(%ebp),%ecx
c01082e6:	c1 e9 02             	shr    $0x2,%ecx
c01082e9:	09 ca                	or     %ecx,%edx
c01082eb:	c1 ea 04             	shr    $0x4,%edx
c01082ee:	09 f2                	or     %esi,%edx
c01082f0:	c1 ea 08             	shr    $0x8,%edx
c01082f3:	09 d3                	or     %edx,%ebx
c01082f5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01082f8:	d1 ea                	shr    %edx
c01082fa:	0b 55 dc             	or     -0x24(%ebp),%edx
c01082fd:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0108300:	d1 e9                	shr    %ecx
c0108302:	0b 4d dc             	or     -0x24(%ebp),%ecx
c0108305:	c1 e9 02             	shr    $0x2,%ecx
c0108308:	89 d6                	mov    %edx,%esi
c010830a:	09 ce                	or     %ecx,%esi
c010830c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010830f:	d1 ea                	shr    %edx
c0108311:	0b 55 dc             	or     -0x24(%ebp),%edx
c0108314:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0108317:	d1 e9                	shr    %ecx
c0108319:	0b 4d dc             	or     -0x24(%ebp),%ecx
c010831c:	c1 e9 02             	shr    $0x2,%ecx
c010831f:	09 ca                	or     %ecx,%edx
c0108321:	c1 ea 04             	shr    $0x4,%edx
c0108324:	09 d6                	or     %edx,%esi
c0108326:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108329:	d1 ea                	shr    %edx
c010832b:	0b 55 dc             	or     -0x24(%ebp),%edx
c010832e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0108331:	d1 e9                	shr    %ecx
c0108333:	0b 4d dc             	or     -0x24(%ebp),%ecx
c0108336:	c1 e9 02             	shr    $0x2,%ecx
c0108339:	89 d7                	mov    %edx,%edi
c010833b:	09 cf                	or     %ecx,%edi
c010833d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108340:	d1 ea                	shr    %edx
c0108342:	0b 55 dc             	or     -0x24(%ebp),%edx
c0108345:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0108348:	d1 e9                	shr    %ecx
c010834a:	0b 4d dc             	or     -0x24(%ebp),%ecx
c010834d:	c1 e9 02             	shr    $0x2,%ecx
c0108350:	09 ca                	or     %ecx,%edx
c0108352:	c1 ea 04             	shr    $0x4,%edx
c0108355:	09 fa                	or     %edi,%edx
c0108357:	c1 ea 08             	shr    $0x8,%edx
c010835a:	09 f2                	or     %esi,%edx
c010835c:	c1 ea 10             	shr    $0x10,%edx
c010835f:	09 da                	or     %ebx,%edx
c0108361:	d1 ea                	shr    %edx
c0108363:	23 55 dc             	and    -0x24(%ebp),%edx
c0108366:	85 d2                	test   %edx,%edx
c0108368:	0f 84 de 00 00 00    	je     c010844c <segment_check+0x3d9>
c010836e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108371:	d1 ea                	shr    %edx
c0108373:	0b 55 dc             	or     -0x24(%ebp),%edx
c0108376:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0108379:	d1 e9                	shr    %ecx
c010837b:	0b 4d dc             	or     -0x24(%ebp),%ecx
c010837e:	c1 e9 02             	shr    $0x2,%ecx
c0108381:	89 d3                	mov    %edx,%ebx
c0108383:	09 cb                	or     %ecx,%ebx
c0108385:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108388:	d1 ea                	shr    %edx
c010838a:	0b 55 dc             	or     -0x24(%ebp),%edx
c010838d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0108390:	d1 e9                	shr    %ecx
c0108392:	0b 4d dc             	or     -0x24(%ebp),%ecx
c0108395:	c1 e9 02             	shr    $0x2,%ecx
c0108398:	09 ca                	or     %ecx,%edx
c010839a:	c1 ea 04             	shr    $0x4,%edx
c010839d:	09 d3                	or     %edx,%ebx
c010839f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01083a2:	d1 ea                	shr    %edx
c01083a4:	0b 55 dc             	or     -0x24(%ebp),%edx
c01083a7:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01083aa:	d1 e9                	shr    %ecx
c01083ac:	0b 4d dc             	or     -0x24(%ebp),%ecx
c01083af:	c1 e9 02             	shr    $0x2,%ecx
c01083b2:	89 d6                	mov    %edx,%esi
c01083b4:	09 ce                	or     %ecx,%esi
c01083b6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01083b9:	d1 ea                	shr    %edx
c01083bb:	0b 55 dc             	or     -0x24(%ebp),%edx
c01083be:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01083c1:	d1 e9                	shr    %ecx
c01083c3:	0b 4d dc             	or     -0x24(%ebp),%ecx
c01083c6:	c1 e9 02             	shr    $0x2,%ecx
c01083c9:	09 ca                	or     %ecx,%edx
c01083cb:	c1 ea 04             	shr    $0x4,%edx
c01083ce:	09 f2                	or     %esi,%edx
c01083d0:	c1 ea 08             	shr    $0x8,%edx
c01083d3:	09 d3                	or     %edx,%ebx
c01083d5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01083d8:	d1 ea                	shr    %edx
c01083da:	0b 55 dc             	or     -0x24(%ebp),%edx
c01083dd:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01083e0:	d1 e9                	shr    %ecx
c01083e2:	0b 4d dc             	or     -0x24(%ebp),%ecx
c01083e5:	c1 e9 02             	shr    $0x2,%ecx
c01083e8:	89 d6                	mov    %edx,%esi
c01083ea:	09 ce                	or     %ecx,%esi
c01083ec:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01083ef:	d1 ea                	shr    %edx
c01083f1:	0b 55 dc             	or     -0x24(%ebp),%edx
c01083f4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01083f7:	d1 e9                	shr    %ecx
c01083f9:	0b 4d dc             	or     -0x24(%ebp),%ecx
c01083fc:	c1 e9 02             	shr    $0x2,%ecx
c01083ff:	09 ca                	or     %ecx,%edx
c0108401:	c1 ea 04             	shr    $0x4,%edx
c0108404:	09 d6                	or     %edx,%esi
c0108406:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108409:	d1 ea                	shr    %edx
c010840b:	0b 55 dc             	or     -0x24(%ebp),%edx
c010840e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0108411:	d1 e9                	shr    %ecx
c0108413:	0b 4d dc             	or     -0x24(%ebp),%ecx
c0108416:	c1 e9 02             	shr    $0x2,%ecx
c0108419:	89 d7                	mov    %edx,%edi
c010841b:	09 cf                	or     %ecx,%edi
c010841d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108420:	d1 ea                	shr    %edx
c0108422:	0b 55 dc             	or     -0x24(%ebp),%edx
c0108425:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0108428:	d1 e9                	shr    %ecx
c010842a:	0b 4d dc             	or     -0x24(%ebp),%ecx
c010842d:	c1 e9 02             	shr    $0x2,%ecx
c0108430:	09 ca                	or     %ecx,%edx
c0108432:	c1 ea 04             	shr    $0x4,%edx
c0108435:	09 fa                	or     %edi,%edx
c0108437:	c1 ea 08             	shr    $0x8,%edx
c010843a:	09 f2                	or     %esi,%edx
c010843c:	c1 ea 10             	shr    $0x10,%edx
c010843f:	09 da                	or     %ebx,%edx
c0108441:	d1 ea                	shr    %edx
c0108443:	f7 d2                	not    %edx
c0108445:	89 d7                	mov    %edx,%edi
c0108447:	23 7d dc             	and    -0x24(%ebp),%edi
c010844a:	eb 03                	jmp    c010844f <segment_check+0x3dc>
c010844c:	8b 7d dc             	mov    -0x24(%ebp),%edi
c010844f:	ba 00 00 00 00       	mov    $0x0,%edx
c0108454:	f7 f7                	div    %edi
c0108456:	01 45 e4             	add    %eax,-0x1c(%ebp)
c0108459:	eb 66                	jmp    c01084c1 <segment_check+0x44e>
        else if (block < buddy_virtual_size)
c010845b:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c0108460:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0108463:	73 5c                	jae    c01084c1 <segment_check+0x44e>
            assert(buddy_segment[block] == (buddy_segment[BUDDY_LEFT(block)] | buddy_segment[BUDDY_RIGHT(block)]));
c0108465:	a1 94 df 16 c0       	mov    0xc016df94,%eax
c010846a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010846d:	c1 e2 02             	shl    $0x2,%edx
c0108470:	01 d0                	add    %edx,%eax
c0108472:	8b 00                	mov    (%eax),%eax
c0108474:	8b 15 94 df 16 c0    	mov    0xc016df94,%edx
c010847a:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010847d:	c1 e1 03             	shl    $0x3,%ecx
c0108480:	01 ca                	add    %ecx,%edx
c0108482:	8b 0a                	mov    (%edx),%ecx
c0108484:	8b 15 94 df 16 c0    	mov    0xc016df94,%edx
c010848a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
c010848d:	c1 e3 03             	shl    $0x3,%ebx
c0108490:	83 c3 04             	add    $0x4,%ebx
c0108493:	01 da                	add    %ebx,%edx
c0108495:	8b 12                	mov    (%edx),%edx
c0108497:	09 ca                	or     %ecx,%edx
c0108499:	39 d0                	cmp    %edx,%eax
c010849b:	74 24                	je     c01084c1 <segment_check+0x44e>
c010849d:	c7 44 24 0c d8 2e 12 	movl   $0xc0122ed8,0xc(%esp)
c01084a4:	c0 
c01084a5:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c01084ac:	c0 
c01084ad:	c7 44 24 04 11 01 00 	movl   $0x111,0x4(%esp)
c01084b4:	00 
c01084b5:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c01084bc:	e8 55 8d ff ff       	call   c0101216 <__panic>
segment_check(void) {

    // Check buddy segment
    size_t total = 0, count = 0;
    size_t block;
    for (block = BUDDY_ROOT; block < (buddy_virtual_size<<1); block++)
c01084c1:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01084c5:	a1 88 df 16 c0       	mov    0xc016df88,%eax
c01084ca:	01 c0                	add    %eax,%eax
c01084cc:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01084cf:	0f 87 c1 fb ff ff    	ja     c0108096 <segment_check+0x23>
        else if (block < buddy_virtual_size)
            assert(buddy_segment[block] == (buddy_segment[BUDDY_LEFT(block)] | buddy_segment[BUDDY_RIGHT(block)]));
    //assert(total == nr_free_pages());

    // Check free list 
    total = 0, count = 0;
c01084d5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c01084dc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    list_entry_t *le = &free_list;
c01084e3:	c7 45 d8 54 11 17 c0 	movl   $0xc0171154,-0x28(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01084ea:	eb 16                	jmp    c0108502 <segment_check+0x48f>
        struct Page *p = le2page(le, page_link);
c01084ec:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01084ef:	83 e8 10             	sub    $0x10,%eax
c01084f2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count ++, total += p->property;
c01084f5:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c01084f9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01084fc:	8b 40 08             	mov    0x8(%eax),%eax
c01084ff:	01 45 e4             	add    %eax,-0x1c(%ebp)
c0108502:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108505:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108508:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010850b:	8b 40 04             	mov    0x4(%eax),%eax
    //assert(total == nr_free_pages());

    // Check free list 
    total = 0, count = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010850e:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108511:	81 7d d8 54 11 17 c0 	cmpl   $0xc0171154,-0x28(%ebp)
c0108518:	75 d2                	jne    c01084ec <segment_check+0x479>
        struct Page *p = le2page(le, page_link);
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c010851a:	e8 db 40 00 00       	call   c010c5fa <nr_free_pages>
c010851f:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0108522:	74 24                	je     c0108548 <segment_check+0x4d5>
c0108524:	c7 44 24 0c 37 2f 12 	movl   $0xc0122f37,0xc(%esp)
c010852b:	c0 
c010852c:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108533:	c0 
c0108534:	c7 44 24 04 1b 01 00 	movl   $0x11b,0x4(%esp)
c010853b:	00 
c010853c:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108543:	e8 ce 8c ff ff       	call   c0101216 <__panic>

}
c0108548:	83 c4 4c             	add    $0x4c,%esp
c010854b:	5b                   	pop    %ebx
c010854c:	5e                   	pop    %esi
c010854d:	5f                   	pop    %edi
c010854e:	5d                   	pop    %ebp
c010854f:	c3                   	ret    

c0108550 <alloc_check>:

static void
alloc_check(void) {
c0108550:	55                   	push   %ebp
c0108551:	89 e5                	mov    %esp,%ebp
c0108553:	83 ec 58             	sub    $0x58,%esp

    // Build buddy system for test
    size_t buddy_physical_size_store = buddy_physical_size;
c0108556:	a1 84 df 16 c0       	mov    0xc016df84,%eax
c010855b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct Page *p;
    for (p = buddy_physical; p < buddy_physical + 1026; p++)
c010855e:	a1 98 df 16 c0       	mov    0xc016df98,%eax
c0108563:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108566:	eb 1d                	jmp    c0108585 <alloc_check+0x35>
        SetPageReserved(p);
c0108568:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010856b:	83 c0 04             	add    $0x4,%eax
c010856e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
c0108575:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0108578:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010857b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010857e:	0f ab 10             	bts    %edx,(%eax)
alloc_check(void) {

    // Build buddy system for test
    size_t buddy_physical_size_store = buddy_physical_size;
    struct Page *p;
    for (p = buddy_physical; p < buddy_physical + 1026; p++)
c0108581:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c0108585:	a1 98 df 16 c0       	mov    0xc016df98,%eax
c010858a:	05 48 90 00 00       	add    $0x9048,%eax
c010858f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108592:	77 d4                	ja     c0108568 <alloc_check+0x18>
        SetPageReserved(p);
    buddy_init();
c0108594:	e8 db d6 ff ff       	call   c0105c74 <buddy_init>
    buddy_init_memmap(buddy_physical, 1026);
c0108599:	a1 98 df 16 c0       	mov    0xc016df98,%eax
c010859e:	c7 44 24 04 02 04 00 	movl   $0x402,0x4(%esp)
c01085a5:	00 
c01085a6:	89 04 24             	mov    %eax,(%esp)
c01085a9:	e8 f3 d6 ff ff       	call   c0105ca1 <buddy_init_memmap>

    // Check allocation
    struct Page *p0, *p1, *p2, *p3;
    p0 = p1 = p2 = NULL;
c01085ae:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01085b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01085b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01085bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01085be:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert((p0 = alloc_page()) != NULL);
c01085c1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01085c8:	e8 90 3f 00 00       	call   c010c55d <alloc_pages>
c01085cd:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01085d0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01085d4:	75 24                	jne    c01085fa <alloc_check+0xaa>
c01085d6:	c7 44 24 0c 50 2f 12 	movl   $0xc0122f50,0xc(%esp)
c01085dd:	c0 
c01085de:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c01085e5:	c0 
c01085e6:	c7 44 24 04 2d 01 00 	movl   $0x12d,0x4(%esp)
c01085ed:	00 
c01085ee:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c01085f5:	e8 1c 8c ff ff       	call   c0101216 <__panic>
    assert((p1 = alloc_page()) != NULL);
c01085fa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0108601:	e8 57 3f 00 00       	call   c010c55d <alloc_pages>
c0108606:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108609:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010860d:	75 24                	jne    c0108633 <alloc_check+0xe3>
c010860f:	c7 44 24 0c 6c 2f 12 	movl   $0xc0122f6c,0xc(%esp)
c0108616:	c0 
c0108617:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c010861e:	c0 
c010861f:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0108626:	00 
c0108627:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c010862e:	e8 e3 8b ff ff       	call   c0101216 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0108633:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010863a:	e8 1e 3f 00 00       	call   c010c55d <alloc_pages>
c010863f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108642:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108646:	75 24                	jne    c010866c <alloc_check+0x11c>
c0108648:	c7 44 24 0c 88 2f 12 	movl   $0xc0122f88,0xc(%esp)
c010864f:	c0 
c0108650:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108657:	c0 
c0108658:	c7 44 24 04 2f 01 00 	movl   $0x12f,0x4(%esp)
c010865f:	00 
c0108660:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108667:	e8 aa 8b ff ff       	call   c0101216 <__panic>
    assert((p3 = alloc_page()) != NULL);
c010866c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0108673:	e8 e5 3e 00 00       	call   c010c55d <alloc_pages>
c0108678:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010867b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010867f:	75 24                	jne    c01086a5 <alloc_check+0x155>
c0108681:	c7 44 24 0c a4 2f 12 	movl   $0xc0122fa4,0xc(%esp)
c0108688:	c0 
c0108689:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108690:	c0 
c0108691:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0108698:	00 
c0108699:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c01086a0:	e8 71 8b ff ff       	call   c0101216 <__panic>

    assert(p0 + 1 == p1);
c01086a5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01086a8:	83 c0 24             	add    $0x24,%eax
c01086ab:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c01086ae:	74 24                	je     c01086d4 <alloc_check+0x184>
c01086b0:	c7 44 24 0c c0 2f 12 	movl   $0xc0122fc0,0xc(%esp)
c01086b7:	c0 
c01086b8:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c01086bf:	c0 
c01086c0:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c01086c7:	00 
c01086c8:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c01086cf:	e8 42 8b ff ff       	call   c0101216 <__panic>
    assert(p1 + 1 == p2);
c01086d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01086d7:	83 c0 24             	add    $0x24,%eax
c01086da:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01086dd:	74 24                	je     c0108703 <alloc_check+0x1b3>
c01086df:	c7 44 24 0c cd 2f 12 	movl   $0xc0122fcd,0xc(%esp)
c01086e6:	c0 
c01086e7:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c01086ee:	c0 
c01086ef:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c01086f6:	00 
c01086f7:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c01086fe:	e8 13 8b ff ff       	call   c0101216 <__panic>
    assert(p2 + 1 == p3);
c0108703:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108706:	83 c0 24             	add    $0x24,%eax
c0108709:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010870c:	74 24                	je     c0108732 <alloc_check+0x1e2>
c010870e:	c7 44 24 0c da 2f 12 	movl   $0xc0122fda,0xc(%esp)
c0108715:	c0 
c0108716:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c010871d:	c0 
c010871e:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
c0108725:	00 
c0108726:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c010872d:	e8 e4 8a ff ff       	call   c0101216 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0 && page_ref(p3) == 0);
c0108732:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108735:	89 04 24             	mov    %eax,(%esp)
c0108738:	e8 d9 c7 ff ff       	call   c0104f16 <page_ref>
c010873d:	85 c0                	test   %eax,%eax
c010873f:	75 2d                	jne    c010876e <alloc_check+0x21e>
c0108741:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108744:	89 04 24             	mov    %eax,(%esp)
c0108747:	e8 ca c7 ff ff       	call   c0104f16 <page_ref>
c010874c:	85 c0                	test   %eax,%eax
c010874e:	75 1e                	jne    c010876e <alloc_check+0x21e>
c0108750:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108753:	89 04 24             	mov    %eax,(%esp)
c0108756:	e8 bb c7 ff ff       	call   c0104f16 <page_ref>
c010875b:	85 c0                	test   %eax,%eax
c010875d:	75 0f                	jne    c010876e <alloc_check+0x21e>
c010875f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108762:	89 04 24             	mov    %eax,(%esp)
c0108765:	e8 ac c7 ff ff       	call   c0104f16 <page_ref>
c010876a:	85 c0                	test   %eax,%eax
c010876c:	74 24                	je     c0108792 <alloc_check+0x242>
c010876e:	c7 44 24 0c e8 2f 12 	movl   $0xc0122fe8,0xc(%esp)
c0108775:	c0 
c0108776:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c010877d:	c0 
c010877e:	c7 44 24 04 35 01 00 	movl   $0x135,0x4(%esp)
c0108785:	00 
c0108786:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c010878d:	e8 84 8a ff ff       	call   c0101216 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0108792:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108795:	89 04 24             	mov    %eax,(%esp)
c0108798:	e8 63 c7 ff ff       	call   c0104f00 <page2pa>
c010879d:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c01087a3:	c1 e2 0c             	shl    $0xc,%edx
c01087a6:	39 d0                	cmp    %edx,%eax
c01087a8:	72 24                	jb     c01087ce <alloc_check+0x27e>
c01087aa:	c7 44 24 0c 39 30 12 	movl   $0xc0123039,0xc(%esp)
c01087b1:	c0 
c01087b2:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c01087b9:	c0 
c01087ba:	c7 44 24 04 37 01 00 	movl   $0x137,0x4(%esp)
c01087c1:	00 
c01087c2:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c01087c9:	e8 48 8a ff ff       	call   c0101216 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c01087ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01087d1:	89 04 24             	mov    %eax,(%esp)
c01087d4:	e8 27 c7 ff ff       	call   c0104f00 <page2pa>
c01087d9:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c01087df:	c1 e2 0c             	shl    $0xc,%edx
c01087e2:	39 d0                	cmp    %edx,%eax
c01087e4:	72 24                	jb     c010880a <alloc_check+0x2ba>
c01087e6:	c7 44 24 0c 56 30 12 	movl   $0xc0123056,0xc(%esp)
c01087ed:	c0 
c01087ee:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c01087f5:	c0 
c01087f6:	c7 44 24 04 38 01 00 	movl   $0x138,0x4(%esp)
c01087fd:	00 
c01087fe:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108805:	e8 0c 8a ff ff       	call   c0101216 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c010880a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010880d:	89 04 24             	mov    %eax,(%esp)
c0108810:	e8 eb c6 ff ff       	call   c0104f00 <page2pa>
c0108815:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c010881b:	c1 e2 0c             	shl    $0xc,%edx
c010881e:	39 d0                	cmp    %edx,%eax
c0108820:	72 24                	jb     c0108846 <alloc_check+0x2f6>
c0108822:	c7 44 24 0c 73 30 12 	movl   $0xc0123073,0xc(%esp)
c0108829:	c0 
c010882a:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108831:	c0 
c0108832:	c7 44 24 04 39 01 00 	movl   $0x139,0x4(%esp)
c0108839:	00 
c010883a:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108841:	e8 d0 89 ff ff       	call   c0101216 <__panic>
    assert(page2pa(p3) < npage * PGSIZE);
c0108846:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108849:	89 04 24             	mov    %eax,(%esp)
c010884c:	e8 af c6 ff ff       	call   c0104f00 <page2pa>
c0108851:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c0108857:	c1 e2 0c             	shl    $0xc,%edx
c010885a:	39 d0                	cmp    %edx,%eax
c010885c:	72 24                	jb     c0108882 <alloc_check+0x332>
c010885e:	c7 44 24 0c 90 30 12 	movl   $0xc0123090,0xc(%esp)
c0108865:	c0 
c0108866:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c010886d:	c0 
c010886e:	c7 44 24 04 3a 01 00 	movl   $0x13a,0x4(%esp)
c0108875:	00 
c0108876:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c010887d:	e8 94 89 ff ff       	call   c0101216 <__panic>

    list_entry_t *le = &free_list;
c0108882:	c7 45 f0 54 11 17 c0 	movl   $0xc0171154,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0108889:	eb 3f                	jmp    c01088ca <alloc_check+0x37a>
        struct Page *p = le2page(le, page_link);
c010888b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010888e:	83 e8 10             	sub    $0x10,%eax
c0108891:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(buddy_alloc_pages(p->property) != NULL);
c0108894:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108897:	8b 40 08             	mov    0x8(%eax),%eax
c010889a:	89 04 24             	mov    %eax,(%esp)
c010889d:	e8 d6 d4 ff ff       	call   c0105d78 <buddy_alloc_pages>
c01088a2:	85 c0                	test   %eax,%eax
c01088a4:	75 24                	jne    c01088ca <alloc_check+0x37a>
c01088a6:	c7 44 24 0c b0 30 12 	movl   $0xc01230b0,0xc(%esp)
c01088ad:	c0 
c01088ae:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c01088b5:	c0 
c01088b6:	c7 44 24 04 3f 01 00 	movl   $0x13f,0x4(%esp)
c01088bd:	00 
c01088be:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c01088c5:	e8 4c 89 ff ff       	call   c0101216 <__panic>
c01088ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01088cd:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01088d0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01088d3:	8b 40 04             	mov    0x4(%eax),%eax
    assert(page2pa(p1) < npage * PGSIZE);
    assert(page2pa(p2) < npage * PGSIZE);
    assert(page2pa(p3) < npage * PGSIZE);

    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01088d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01088d9:	81 7d f0 54 11 17 c0 	cmpl   $0xc0171154,-0x10(%ebp)
c01088e0:	75 a9                	jne    c010888b <alloc_check+0x33b>
        struct Page *p = le2page(le, page_link);
        assert(buddy_alloc_pages(p->property) != NULL);
    }

    assert(alloc_page() == NULL);
c01088e2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01088e9:	e8 6f 3c 00 00       	call   c010c55d <alloc_pages>
c01088ee:	85 c0                	test   %eax,%eax
c01088f0:	74 24                	je     c0108916 <alloc_check+0x3c6>
c01088f2:	c7 44 24 0c d7 30 12 	movl   $0xc01230d7,0xc(%esp)
c01088f9:	c0 
c01088fa:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108901:	c0 
c0108902:	c7 44 24 04 42 01 00 	movl   $0x142,0x4(%esp)
c0108909:	00 
c010890a:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108911:	e8 00 89 ff ff       	call   c0101216 <__panic>

    // Check release
    free_page(p0);
c0108916:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010891d:	00 
c010891e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108921:	89 04 24             	mov    %eax,(%esp)
c0108924:	e8 9f 3c 00 00       	call   c010c5c8 <free_pages>
    free_page(p1);
c0108929:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108930:	00 
c0108931:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108934:	89 04 24             	mov    %eax,(%esp)
c0108937:	e8 8c 3c 00 00       	call   c010c5c8 <free_pages>
    free_page(p2);
c010893c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108943:	00 
c0108944:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108947:	89 04 24             	mov    %eax,(%esp)
c010894a:	e8 79 3c 00 00       	call   c010c5c8 <free_pages>
    assert(nr_free == 3);
c010894f:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0108954:	83 f8 03             	cmp    $0x3,%eax
c0108957:	74 24                	je     c010897d <alloc_check+0x42d>
c0108959:	c7 44 24 0c ec 30 12 	movl   $0xc01230ec,0xc(%esp)
c0108960:	c0 
c0108961:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108968:	c0 
c0108969:	c7 44 24 04 48 01 00 	movl   $0x148,0x4(%esp)
c0108970:	00 
c0108971:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108978:	e8 99 88 ff ff       	call   c0101216 <__panic>

    assert((p1 = alloc_page()) != NULL);
c010897d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0108984:	e8 d4 3b 00 00       	call   c010c55d <alloc_pages>
c0108989:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010898c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108990:	75 24                	jne    c01089b6 <alloc_check+0x466>
c0108992:	c7 44 24 0c 6c 2f 12 	movl   $0xc0122f6c,0xc(%esp)
c0108999:	c0 
c010899a:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c01089a1:	c0 
c01089a2:	c7 44 24 04 4a 01 00 	movl   $0x14a,0x4(%esp)
c01089a9:	00 
c01089aa:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c01089b1:	e8 60 88 ff ff       	call   c0101216 <__panic>
    assert((p0 = alloc_pages(2)) != NULL);
c01089b6:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01089bd:	e8 9b 3b 00 00       	call   c010c55d <alloc_pages>
c01089c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01089c5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01089c9:	75 24                	jne    c01089ef <alloc_check+0x49f>
c01089cb:	c7 44 24 0c f9 30 12 	movl   $0xc01230f9,0xc(%esp)
c01089d2:	c0 
c01089d3:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c01089da:	c0 
c01089db:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c01089e2:	00 
c01089e3:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c01089ea:	e8 27 88 ff ff       	call   c0101216 <__panic>
    assert(p0 + 2 == p1);
c01089ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01089f2:	83 c0 48             	add    $0x48,%eax
c01089f5:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c01089f8:	74 24                	je     c0108a1e <alloc_check+0x4ce>
c01089fa:	c7 44 24 0c 17 31 12 	movl   $0xc0123117,0xc(%esp)
c0108a01:	c0 
c0108a02:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108a09:	c0 
c0108a0a:	c7 44 24 04 4c 01 00 	movl   $0x14c,0x4(%esp)
c0108a11:	00 
c0108a12:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108a19:	e8 f8 87 ff ff       	call   c0101216 <__panic>

    assert(alloc_page() == NULL);
c0108a1e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0108a25:	e8 33 3b 00 00       	call   c010c55d <alloc_pages>
c0108a2a:	85 c0                	test   %eax,%eax
c0108a2c:	74 24                	je     c0108a52 <alloc_check+0x502>
c0108a2e:	c7 44 24 0c d7 30 12 	movl   $0xc01230d7,0xc(%esp)
c0108a35:	c0 
c0108a36:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108a3d:	c0 
c0108a3e:	c7 44 24 04 4e 01 00 	movl   $0x14e,0x4(%esp)
c0108a45:	00 
c0108a46:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108a4d:	e8 c4 87 ff ff       	call   c0101216 <__panic>

    free_pages(p0, 2);
c0108a52:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0108a59:	00 
c0108a5a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108a5d:	89 04 24             	mov    %eax,(%esp)
c0108a60:	e8 63 3b 00 00       	call   c010c5c8 <free_pages>
    free_page(p1);
c0108a65:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108a6c:	00 
c0108a6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108a70:	89 04 24             	mov    %eax,(%esp)
c0108a73:	e8 50 3b 00 00       	call   c010c5c8 <free_pages>
    free_page(p3);
c0108a78:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108a7f:	00 
c0108a80:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108a83:	89 04 24             	mov    %eax,(%esp)
c0108a86:	e8 3d 3b 00 00       	call   c010c5c8 <free_pages>

    assert((p = alloc_pages(4)) == p0);
c0108a8b:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0108a92:	e8 c6 3a 00 00       	call   c010c55d <alloc_pages>
c0108a97:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108a9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a9d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108aa0:	74 24                	je     c0108ac6 <alloc_check+0x576>
c0108aa2:	c7 44 24 0c 24 31 12 	movl   $0xc0123124,0xc(%esp)
c0108aa9:	c0 
c0108aaa:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108ab1:	c0 
c0108ab2:	c7 44 24 04 54 01 00 	movl   $0x154,0x4(%esp)
c0108ab9:	00 
c0108aba:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108ac1:	e8 50 87 ff ff       	call   c0101216 <__panic>
    assert(alloc_page() == NULL);
c0108ac6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0108acd:	e8 8b 3a 00 00       	call   c010c55d <alloc_pages>
c0108ad2:	85 c0                	test   %eax,%eax
c0108ad4:	74 24                	je     c0108afa <alloc_check+0x5aa>
c0108ad6:	c7 44 24 0c d7 30 12 	movl   $0xc01230d7,0xc(%esp)
c0108add:	c0 
c0108ade:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108ae5:	c0 
c0108ae6:	c7 44 24 04 55 01 00 	movl   $0x155,0x4(%esp)
c0108aed:	00 
c0108aee:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108af5:	e8 1c 87 ff ff       	call   c0101216 <__panic>

    assert(nr_free == 0);
c0108afa:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0108aff:	85 c0                	test   %eax,%eax
c0108b01:	74 24                	je     c0108b27 <alloc_check+0x5d7>
c0108b03:	c7 44 24 0c 3f 31 12 	movl   $0xc012313f,0xc(%esp)
c0108b0a:	c0 
c0108b0b:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108b12:	c0 
c0108b13:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0108b1a:	00 
c0108b1b:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108b22:	e8 ef 86 ff ff       	call   c0101216 <__panic>

    // Restore buddy system
    for (p = buddy_physical; p < buddy_physical + buddy_physical_size_store; p++)
c0108b27:	a1 98 df 16 c0       	mov    0xc016df98,%eax
c0108b2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108b2f:	eb 1d                	jmp    c0108b4e <alloc_check+0x5fe>
        SetPageReserved(p);
c0108b31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b34:	83 c0 04             	add    $0x4,%eax
c0108b37:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
c0108b3e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0108b41:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0108b44:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0108b47:	0f ab 10             	bts    %edx,(%eax)
    assert(alloc_page() == NULL);

    assert(nr_free == 0);

    // Restore buddy system
    for (p = buddy_physical; p < buddy_physical + buddy_physical_size_store; p++)
c0108b4a:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c0108b4e:	8b 0d 98 df 16 c0    	mov    0xc016df98,%ecx
c0108b54:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108b57:	89 d0                	mov    %edx,%eax
c0108b59:	c1 e0 03             	shl    $0x3,%eax
c0108b5c:	01 d0                	add    %edx,%eax
c0108b5e:	c1 e0 02             	shl    $0x2,%eax
c0108b61:	01 c8                	add    %ecx,%eax
c0108b63:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108b66:	77 c9                	ja     c0108b31 <alloc_check+0x5e1>
        SetPageReserved(p);
    buddy_init();
c0108b68:	e8 07 d1 ff ff       	call   c0105c74 <buddy_init>
    buddy_init_memmap(buddy_physical, buddy_physical_size_store);
c0108b6d:	a1 98 df 16 c0       	mov    0xc016df98,%eax
c0108b72:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108b75:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108b79:	89 04 24             	mov    %eax,(%esp)
c0108b7c:	e8 20 d1 ff ff       	call   c0105ca1 <buddy_init_memmap>

}
c0108b81:	c9                   	leave  
c0108b82:	c3                   	ret    

c0108b83 <default_check>:

static void
default_check(void) {
c0108b83:	55                   	push   %ebp
c0108b84:	89 e5                	mov    %esp,%ebp
c0108b86:	83 ec 08             	sub    $0x8,%esp

    // Check buddy system
    macro_check();
c0108b89:	e8 51 f2 ff ff       	call   c0107ddf <macro_check>
    size_check();
c0108b8e:	e8 99 f3 ff ff       	call   c0107f2c <size_check>
    segment_check();
c0108b93:	e8 db f4 ff ff       	call   c0108073 <segment_check>
    alloc_check();
c0108b98:	e8 b3 f9 ff ff       	call   c0108550 <alloc_check>
    
}
c0108b9d:	c9                   	leave  
c0108b9e:	c3                   	ret    

c0108b9f <buddy_user_check>:

static void
buddy_user_check(void){
c0108b9f:	55                   	push   %ebp
c0108ba0:	89 e5                	mov    %esp,%ebp
c0108ba2:	83 ec 38             	sub    $0x38,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0108ba5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108bac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108baf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108bb2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108bb5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0108bb8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0108bbf:	e8 99 39 00 00       	call   c010c55d <alloc_pages>
c0108bc4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108bc7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108bcb:	75 24                	jne    c0108bf1 <buddy_user_check+0x52>
c0108bcd:	c7 44 24 0c 50 2f 12 	movl   $0xc0122f50,0xc(%esp)
c0108bd4:	c0 
c0108bd5:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108bdc:	c0 
c0108bdd:	c7 44 24 04 70 01 00 	movl   $0x170,0x4(%esp)
c0108be4:	00 
c0108be5:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108bec:	e8 25 86 ff ff       	call   c0101216 <__panic>
    cprintf("assert((p0 = alloc_page()) != NULL)\n");
c0108bf1:	c7 04 24 4c 31 12 c0 	movl   $0xc012314c,(%esp)
c0108bf8:	e8 f6 77 ff ff       	call   c01003f3 <cprintf>
    assert((p1 = alloc_page()) != NULL);	
c0108bfd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0108c04:	e8 54 39 00 00       	call   c010c55d <alloc_pages>
c0108c09:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108c0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108c10:	75 24                	jne    c0108c36 <buddy_user_check+0x97>
c0108c12:	c7 44 24 0c 6c 2f 12 	movl   $0xc0122f6c,0xc(%esp)
c0108c19:	c0 
c0108c1a:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108c21:	c0 
c0108c22:	c7 44 24 04 72 01 00 	movl   $0x172,0x4(%esp)
c0108c29:	00 
c0108c2a:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108c31:	e8 e0 85 ff ff       	call   c0101216 <__panic>
    cprintf("assert((p1 = alloc_page()) != NULL)\n");
c0108c36:	c7 04 24 74 31 12 c0 	movl   $0xc0123174,(%esp)
c0108c3d:	e8 b1 77 ff ff       	call   c01003f3 <cprintf>
    assert((p2 = alloc_page()) != NULL);
c0108c42:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0108c49:	e8 0f 39 00 00       	call   c010c55d <alloc_pages>
c0108c4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108c51:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108c55:	75 24                	jne    c0108c7b <buddy_user_check+0xdc>
c0108c57:	c7 44 24 0c 88 2f 12 	movl   $0xc0122f88,0xc(%esp)
c0108c5e:	c0 
c0108c5f:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108c66:	c0 
c0108c67:	c7 44 24 04 74 01 00 	movl   $0x174,0x4(%esp)
c0108c6e:	00 
c0108c6f:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108c76:	e8 9b 85 ff ff       	call   c0101216 <__panic>
    cprintf("assert((p2 = alloc_page()) != NULL)\n");
c0108c7b:	c7 04 24 9c 31 12 c0 	movl   $0xc012319c,(%esp)
c0108c82:	e8 6c 77 ff ff       	call   c01003f3 <cprintf>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0108c87:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108c8a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108c8d:	74 10                	je     c0108c9f <buddy_user_check+0x100>
c0108c8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108c92:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108c95:	74 08                	je     c0108c9f <buddy_user_check+0x100>
c0108c97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108c9a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108c9d:	75 24                	jne    c0108cc3 <buddy_user_check+0x124>
c0108c9f:	c7 44 24 0c c4 31 12 	movl   $0xc01231c4,0xc(%esp)
c0108ca6:	c0 
c0108ca7:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108cae:	c0 
c0108caf:	c7 44 24 04 77 01 00 	movl   $0x177,0x4(%esp)
c0108cb6:	00 
c0108cb7:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108cbe:	e8 53 85 ff ff       	call   c0101216 <__panic>
    cprintf("assert(p0 != p1 && p0 != p2 && p1 != p2)\n");
c0108cc3:	c7 04 24 e8 31 12 c0 	movl   $0xc01231e8,(%esp)
c0108cca:	e8 24 77 ff ff       	call   c01003f3 <cprintf>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0108ccf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108cd2:	89 04 24             	mov    %eax,(%esp)
c0108cd5:	e8 3c c2 ff ff       	call   c0104f16 <page_ref>
c0108cda:	85 c0                	test   %eax,%eax
c0108cdc:	75 1e                	jne    c0108cfc <buddy_user_check+0x15d>
c0108cde:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108ce1:	89 04 24             	mov    %eax,(%esp)
c0108ce4:	e8 2d c2 ff ff       	call   c0104f16 <page_ref>
c0108ce9:	85 c0                	test   %eax,%eax
c0108ceb:	75 0f                	jne    c0108cfc <buddy_user_check+0x15d>
c0108ced:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cf0:	89 04 24             	mov    %eax,(%esp)
c0108cf3:	e8 1e c2 ff ff       	call   c0104f16 <page_ref>
c0108cf8:	85 c0                	test   %eax,%eax
c0108cfa:	74 24                	je     c0108d20 <buddy_user_check+0x181>
c0108cfc:	c7 44 24 0c 14 32 12 	movl   $0xc0123214,0xc(%esp)
c0108d03:	c0 
c0108d04:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108d0b:	c0 
c0108d0c:	c7 44 24 04 79 01 00 	movl   $0x179,0x4(%esp)
c0108d13:	00 
c0108d14:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108d1b:	e8 f6 84 ff ff       	call   c0101216 <__panic>
    cprintf("assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0)\n");
c0108d20:	c7 04 24 50 32 12 c0 	movl   $0xc0123250,(%esp)
c0108d27:	e8 c7 76 ff ff       	call   c01003f3 <cprintf>


    assert(page2pa(p0) < npage * PGSIZE);
c0108d2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108d2f:	89 04 24             	mov    %eax,(%esp)
c0108d32:	e8 c9 c1 ff ff       	call   c0104f00 <page2pa>
c0108d37:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c0108d3d:	c1 e2 0c             	shl    $0xc,%edx
c0108d40:	39 d0                	cmp    %edx,%eax
c0108d42:	72 24                	jb     c0108d68 <buddy_user_check+0x1c9>
c0108d44:	c7 44 24 0c 39 30 12 	movl   $0xc0123039,0xc(%esp)
c0108d4b:	c0 
c0108d4c:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108d53:	c0 
c0108d54:	c7 44 24 04 7d 01 00 	movl   $0x17d,0x4(%esp)
c0108d5b:	00 
c0108d5c:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108d63:	e8 ae 84 ff ff       	call   c0101216 <__panic>
    cprintf("assert(page2pa(p0) < npage * PGSIZE)\n");
c0108d68:	c7 04 24 98 32 12 c0 	movl   $0xc0123298,(%esp)
c0108d6f:	e8 7f 76 ff ff       	call   c01003f3 <cprintf>
    assert(page2pa(p1) < npage * PGSIZE);
c0108d74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108d77:	89 04 24             	mov    %eax,(%esp)
c0108d7a:	e8 81 c1 ff ff       	call   c0104f00 <page2pa>
c0108d7f:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c0108d85:	c1 e2 0c             	shl    $0xc,%edx
c0108d88:	39 d0                	cmp    %edx,%eax
c0108d8a:	72 24                	jb     c0108db0 <buddy_user_check+0x211>
c0108d8c:	c7 44 24 0c 56 30 12 	movl   $0xc0123056,0xc(%esp)
c0108d93:	c0 
c0108d94:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108d9b:	c0 
c0108d9c:	c7 44 24 04 7f 01 00 	movl   $0x17f,0x4(%esp)
c0108da3:	00 
c0108da4:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108dab:	e8 66 84 ff ff       	call   c0101216 <__panic>
    cprintf("assert(page2pa(p01) < npage * PGSIZE)\n");
c0108db0:	c7 04 24 c0 32 12 c0 	movl   $0xc01232c0,(%esp)
c0108db7:	e8 37 76 ff ff       	call   c01003f3 <cprintf>
    assert(page2pa(p2) < npage * PGSIZE);
c0108dbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dbf:	89 04 24             	mov    %eax,(%esp)
c0108dc2:	e8 39 c1 ff ff       	call   c0104f00 <page2pa>
c0108dc7:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c0108dcd:	c1 e2 0c             	shl    $0xc,%edx
c0108dd0:	39 d0                	cmp    %edx,%eax
c0108dd2:	72 24                	jb     c0108df8 <buddy_user_check+0x259>
c0108dd4:	c7 44 24 0c 73 30 12 	movl   $0xc0123073,0xc(%esp)
c0108ddb:	c0 
c0108ddc:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108de3:	c0 
c0108de4:	c7 44 24 04 81 01 00 	movl   $0x181,0x4(%esp)
c0108deb:	00 
c0108dec:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108df3:	e8 1e 84 ff ff       	call   c0101216 <__panic>
    cprintf("assert(page2pa(p2) < npage * PGSIZE)\n");
c0108df8:	c7 04 24 e8 32 12 c0 	movl   $0xc01232e8,(%esp)
c0108dff:	e8 ef 75 ff ff       	call   c01003f3 <cprintf>

    list_entry_t free_list_store = free_list;
c0108e04:	a1 54 11 17 c0       	mov    0xc0171154,%eax
c0108e09:	8b 15 58 11 17 c0    	mov    0xc0171158,%edx
c0108e0f:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108e12:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0108e15:	c7 45 e4 54 11 17 c0 	movl   $0xc0171154,-0x1c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0108e1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e1f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108e22:	89 50 04             	mov    %edx,0x4(%eax)
c0108e25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e28:	8b 50 04             	mov    0x4(%eax),%edx
c0108e2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e2e:	89 10                	mov    %edx,(%eax)
c0108e30:	c7 45 e0 54 11 17 c0 	movl   $0xc0171154,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0108e37:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108e3a:	8b 40 04             	mov    0x4(%eax),%eax
c0108e3d:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c0108e40:	0f 94 c0             	sete   %al
c0108e43:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0108e46:	85 c0                	test   %eax,%eax
c0108e48:	75 24                	jne    c0108e6e <buddy_user_check+0x2cf>
c0108e4a:	c7 44 24 0c 0e 33 12 	movl   $0xc012330e,0xc(%esp)
c0108e51:	c0 
c0108e52:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108e59:	c0 
c0108e5a:	c7 44 24 04 86 01 00 	movl   $0x186,0x4(%esp)
c0108e61:	00 
c0108e62:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108e69:	e8 a8 83 ff ff       	call   c0101216 <__panic>

    unsigned int nr_free_store = nr_free;
c0108e6e:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0108e73:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0108e76:	c7 05 5c 11 17 c0 00 	movl   $0x0,0xc017115c
c0108e7d:	00 00 00 
    cprintf("assert(alloc_page() != NULL) because of swap out! \n");
c0108e80:	c7 04 24 28 33 12 c0 	movl   $0xc0123328,(%esp)
c0108e87:	e8 67 75 ff ff       	call   c01003f3 <cprintf>

    free_page(p0);
c0108e8c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108e93:	00 
c0108e94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e97:	89 04 24             	mov    %eax,(%esp)
c0108e9a:	e8 29 37 00 00       	call   c010c5c8 <free_pages>
    cprintf("free_page(p0)\n");
c0108e9f:	c7 04 24 5c 33 12 c0 	movl   $0xc012335c,(%esp)
c0108ea6:	e8 48 75 ff ff       	call   c01003f3 <cprintf>
    free_page(p1);
c0108eab:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108eb2:	00 
c0108eb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108eb6:	89 04 24             	mov    %eax,(%esp)
c0108eb9:	e8 0a 37 00 00       	call   c010c5c8 <free_pages>
    cprintf("free_page(p1)\n");
c0108ebe:	c7 04 24 6b 33 12 c0 	movl   $0xc012336b,(%esp)
c0108ec5:	e8 29 75 ff ff       	call   c01003f3 <cprintf>
    free_page(p2);
c0108eca:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108ed1:	00 
c0108ed2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ed5:	89 04 24             	mov    %eax,(%esp)
c0108ed8:	e8 eb 36 00 00       	call   c010c5c8 <free_pages>
    cprintf("free_page(p2)\n");
c0108edd:	c7 04 24 7a 33 12 c0 	movl   $0xc012337a,(%esp)
c0108ee4:	e8 0a 75 ff ff       	call   c01003f3 <cprintf>
    assert(nr_free == 3);
c0108ee9:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0108eee:	83 f8 03             	cmp    $0x3,%eax
c0108ef1:	74 24                	je     c0108f17 <buddy_user_check+0x378>
c0108ef3:	c7 44 24 0c ec 30 12 	movl   $0xc01230ec,0xc(%esp)
c0108efa:	c0 
c0108efb:	c7 44 24 08 a6 2d 12 	movl   $0xc0122da6,0x8(%esp)
c0108f02:	c0 
c0108f03:	c7 44 24 04 92 01 00 	movl   $0x192,0x4(%esp)
c0108f0a:	00 
c0108f0b:	c7 04 24 bb 2d 12 c0 	movl   $0xc0122dbb,(%esp)
c0108f12:	e8 ff 82 ff ff       	call   c0101216 <__panic>
    cprintf("assert(nr_free == 3)\n");
c0108f17:	c7 04 24 89 33 12 c0 	movl   $0xc0123389,(%esp)
c0108f1e:	e8 d0 74 ff ff       	call   c01003f3 <cprintf>

}
c0108f23:	c9                   	leave  
c0108f24:	c3                   	ret    

c0108f25 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0108f25:	55                   	push   %ebp
c0108f26:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0108f28:	8b 55 08             	mov    0x8(%ebp),%edx
c0108f2b:	a1 6c 11 17 c0       	mov    0xc017116c,%eax
c0108f30:	29 c2                	sub    %eax,%edx
c0108f32:	89 d0                	mov    %edx,%eax
c0108f34:	c1 f8 02             	sar    $0x2,%eax
c0108f37:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0108f3d:	5d                   	pop    %ebp
c0108f3e:	c3                   	ret    

c0108f3f <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0108f3f:	55                   	push   %ebp
c0108f40:	89 e5                	mov    %esp,%ebp
c0108f42:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0108f45:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f48:	89 04 24             	mov    %eax,(%esp)
c0108f4b:	e8 d5 ff ff ff       	call   c0108f25 <page2ppn>
c0108f50:	c1 e0 0c             	shl    $0xc,%eax
}
c0108f53:	c9                   	leave  
c0108f54:	c3                   	ret    

c0108f55 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0108f55:	55                   	push   %ebp
c0108f56:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0108f58:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f5b:	8b 00                	mov    (%eax),%eax
}
c0108f5d:	5d                   	pop    %ebp
c0108f5e:	c3                   	ret    

c0108f5f <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0108f5f:	55                   	push   %ebp
c0108f60:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0108f62:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f65:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f68:	89 10                	mov    %edx,(%eax)
}
c0108f6a:	5d                   	pop    %ebp
c0108f6b:	c3                   	ret    

c0108f6c <firstfit_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
firstfit_init(void) {
c0108f6c:	55                   	push   %ebp
c0108f6d:	89 e5                	mov    %esp,%ebp
c0108f6f:	83 ec 10             	sub    $0x10,%esp
c0108f72:	c7 45 fc 54 11 17 c0 	movl   $0xc0171154,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0108f79:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f7c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108f7f:	89 50 04             	mov    %edx,0x4(%eax)
c0108f82:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f85:	8b 50 04             	mov    0x4(%eax),%edx
c0108f88:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f8b:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0108f8d:	c7 05 5c 11 17 c0 00 	movl   $0x0,0xc017115c
c0108f94:	00 00 00 
}
c0108f97:	c9                   	leave  
c0108f98:	c3                   	ret    

c0108f99 <firstfit_init_memmap>:

static void
firstfit_init_memmap(struct Page *base, size_t n) {
c0108f99:	55                   	push   %ebp
c0108f9a:	89 e5                	mov    %esp,%ebp
c0108f9c:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0108f9f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108fa3:	75 24                	jne    c0108fc9 <firstfit_init_memmap+0x30>
c0108fa5:	c7 44 24 0c e0 33 12 	movl   $0xc01233e0,0xc(%esp)
c0108fac:	c0 
c0108fad:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0108fb4:	c0 
c0108fb5:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0108fbc:	00 
c0108fbd:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0108fc4:	e8 4d 82 ff ff       	call   c0101216 <__panic>
    struct Page *p = base;
c0108fc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0108fcf:	eb 7d                	jmp    c010904e <firstfit_init_memmap+0xb5>
        assert(PageReserved(p));
c0108fd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fd4:	83 c0 04             	add    $0x4,%eax
c0108fd7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0108fde:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0108fe1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108fe4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108fe7:	0f a3 10             	bt     %edx,(%eax)
c0108fea:	19 c0                	sbb    %eax,%eax
c0108fec:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0108fef:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108ff3:	0f 95 c0             	setne  %al
c0108ff6:	0f b6 c0             	movzbl %al,%eax
c0108ff9:	85 c0                	test   %eax,%eax
c0108ffb:	75 24                	jne    c0109021 <firstfit_init_memmap+0x88>
c0108ffd:	c7 44 24 0c 12 34 12 	movl   $0xc0123412,0xc(%esp)
c0109004:	c0 
c0109005:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010900c:	c0 
c010900d:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0109014:	00 
c0109015:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010901c:	e8 f5 81 ff ff       	call   c0101216 <__panic>
        p->flags = p->property = 0;
c0109021:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109024:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c010902b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010902e:	8b 50 08             	mov    0x8(%eax),%edx
c0109031:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109034:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c0109037:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010903e:	00 
c010903f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109042:	89 04 24             	mov    %eax,(%esp)
c0109045:	e8 15 ff ff ff       	call   c0108f5f <set_page_ref>

static void
firstfit_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c010904a:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c010904e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109051:	89 d0                	mov    %edx,%eax
c0109053:	c1 e0 03             	shl    $0x3,%eax
c0109056:	01 d0                	add    %edx,%eax
c0109058:	c1 e0 02             	shl    $0x2,%eax
c010905b:	89 c2                	mov    %eax,%edx
c010905d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109060:	01 d0                	add    %edx,%eax
c0109062:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109065:	0f 85 66 ff ff ff    	jne    c0108fd1 <firstfit_init_memmap+0x38>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c010906b:	8b 45 08             	mov    0x8(%ebp),%eax
c010906e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109071:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0109074:	8b 45 08             	mov    0x8(%ebp),%eax
c0109077:	83 c0 04             	add    $0x4,%eax
c010907a:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0109081:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0109084:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109087:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010908a:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c010908d:	8b 15 5c 11 17 c0    	mov    0xc017115c,%edx
c0109093:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109096:	01 d0                	add    %edx,%eax
c0109098:	a3 5c 11 17 c0       	mov    %eax,0xc017115c
    list_add_before(&free_list, &(base->page_link));
c010909d:	8b 45 08             	mov    0x8(%ebp),%eax
c01090a0:	83 c0 10             	add    $0x10,%eax
c01090a3:	c7 45 dc 54 11 17 c0 	movl   $0xc0171154,-0x24(%ebp)
c01090aa:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01090ad:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01090b0:	8b 00                	mov    (%eax),%eax
c01090b2:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01090b5:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01090b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01090bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01090be:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01090c1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01090c4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01090c7:	89 10                	mov    %edx,(%eax)
c01090c9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01090cc:	8b 10                	mov    (%eax),%edx
c01090ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01090d1:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01090d4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01090d7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01090da:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01090dd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01090e0:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01090e3:	89 10                	mov    %edx,(%eax)
}
c01090e5:	c9                   	leave  
c01090e6:	c3                   	ret    

c01090e7 <firstfit_alloc_pages>:

static struct Page *
firstfit_alloc_pages(size_t n) {
c01090e7:	55                   	push   %ebp
c01090e8:	89 e5                	mov    %esp,%ebp
c01090ea:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c01090ed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01090f1:	75 24                	jne    c0109117 <firstfit_alloc_pages+0x30>
c01090f3:	c7 44 24 0c e0 33 12 	movl   $0xc01233e0,0xc(%esp)
c01090fa:	c0 
c01090fb:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109102:	c0 
c0109103:	c7 44 24 04 7c 00 00 	movl   $0x7c,0x4(%esp)
c010910a:	00 
c010910b:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109112:	e8 ff 80 ff ff       	call   c0101216 <__panic>
    if (n > nr_free) {
c0109117:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010911c:	3b 45 08             	cmp    0x8(%ebp),%eax
c010911f:	73 0a                	jae    c010912b <firstfit_alloc_pages+0x44>
        return NULL;
c0109121:	b8 00 00 00 00       	mov    $0x0,%eax
c0109126:	e9 3d 01 00 00       	jmp    c0109268 <firstfit_alloc_pages+0x181>
    }
    struct Page *page = NULL;
c010912b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c0109132:	c7 45 f0 54 11 17 c0 	movl   $0xc0171154,-0x10(%ebp)
    // TODO: optimize (next-fit)
    while ((le = list_next(le)) != &free_list) {
c0109139:	eb 1c                	jmp    c0109157 <firstfit_alloc_pages+0x70>
        struct Page *p = le2page(le, page_link);
c010913b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010913e:	83 e8 10             	sub    $0x10,%eax
c0109141:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p->property >= n) {
c0109144:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109147:	8b 40 08             	mov    0x8(%eax),%eax
c010914a:	3b 45 08             	cmp    0x8(%ebp),%eax
c010914d:	72 08                	jb     c0109157 <firstfit_alloc_pages+0x70>
            page = p;
c010914f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109152:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c0109155:	eb 18                	jmp    c010916f <firstfit_alloc_pages+0x88>
c0109157:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010915a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010915d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109160:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    // TODO: optimize (next-fit)
    while ((le = list_next(le)) != &free_list) {
c0109163:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109166:	81 7d f0 54 11 17 c0 	cmpl   $0xc0171154,-0x10(%ebp)
c010916d:	75 cc                	jne    c010913b <firstfit_alloc_pages+0x54>
        if (p->property >= n) {
            page = p;
            break;
        }
    }
    if (page != NULL) {
c010916f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109173:	0f 84 ec 00 00 00    	je     c0109265 <firstfit_alloc_pages+0x17e>
        if (page->property > n) {
c0109179:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010917c:	8b 40 08             	mov    0x8(%eax),%eax
c010917f:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109182:	0f 86 8c 00 00 00    	jbe    c0109214 <firstfit_alloc_pages+0x12d>
            struct Page *p = page + n;
c0109188:	8b 55 08             	mov    0x8(%ebp),%edx
c010918b:	89 d0                	mov    %edx,%eax
c010918d:	c1 e0 03             	shl    $0x3,%eax
c0109190:	01 d0                	add    %edx,%eax
c0109192:	c1 e0 02             	shl    $0x2,%eax
c0109195:	89 c2                	mov    %eax,%edx
c0109197:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010919a:	01 d0                	add    %edx,%eax
c010919c:	89 45 e8             	mov    %eax,-0x18(%ebp)
            p->property = page->property - n;
c010919f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091a2:	8b 40 08             	mov    0x8(%eax),%eax
c01091a5:	2b 45 08             	sub    0x8(%ebp),%eax
c01091a8:	89 c2                	mov    %eax,%edx
c01091aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01091ad:	89 50 08             	mov    %edx,0x8(%eax)
            SetPageProperty(p);
c01091b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01091b3:	83 c0 04             	add    $0x4,%eax
c01091b6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c01091bd:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01091c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01091c3:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01091c6:	0f ab 10             	bts    %edx,(%eax)
            list_add_after(&(page->page_link), &(p->page_link));
c01091c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01091cc:	83 c0 10             	add    $0x10,%eax
c01091cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01091d2:	83 c2 10             	add    $0x10,%edx
c01091d5:	89 55 d8             	mov    %edx,-0x28(%ebp)
c01091d8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01091db:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01091de:	8b 40 04             	mov    0x4(%eax),%eax
c01091e1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01091e4:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01091e7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01091ea:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01091ed:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01091f0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01091f3:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01091f6:	89 10                	mov    %edx,(%eax)
c01091f8:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01091fb:	8b 10                	mov    (%eax),%edx
c01091fd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109200:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109203:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109206:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0109209:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010920c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010920f:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0109212:	89 10                	mov    %edx,(%eax)
        }
        list_del(&(page->page_link));
c0109214:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109217:	83 c0 10             	add    $0x10,%eax
c010921a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010921d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0109220:	8b 40 04             	mov    0x4(%eax),%eax
c0109223:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0109226:	8b 12                	mov    (%edx),%edx
c0109228:	89 55 c0             	mov    %edx,-0x40(%ebp)
c010922b:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010922e:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109231:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0109234:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109237:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010923a:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010923d:	89 10                	mov    %edx,(%eax)
        nr_free -= n;
c010923f:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0109244:	2b 45 08             	sub    0x8(%ebp),%eax
c0109247:	a3 5c 11 17 c0       	mov    %eax,0xc017115c
        ClearPageProperty(page);
c010924c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010924f:	83 c0 04             	add    $0x4,%eax
c0109252:	c7 45 b8 01 00 00 00 	movl   $0x1,-0x48(%ebp)
c0109259:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010925c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010925f:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0109262:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c0109265:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109268:	c9                   	leave  
c0109269:	c3                   	ret    

c010926a <firstfit_free_pages>:




static void
firstfit_free_pages(struct Page *base, size_t n) {
c010926a:	55                   	push   %ebp
c010926b:	89 e5                	mov    %esp,%ebp
c010926d:	81 ec 98 00 00 00    	sub    $0x98,%esp
    assert(n > 0);
c0109273:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0109277:	75 24                	jne    c010929d <firstfit_free_pages+0x33>
c0109279:	c7 44 24 0c e0 33 12 	movl   $0xc01233e0,0xc(%esp)
c0109280:	c0 
c0109281:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109288:	c0 
c0109289:	c7 44 24 04 9d 00 00 	movl   $0x9d,0x4(%esp)
c0109290:	00 
c0109291:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109298:	e8 79 7f ff ff       	call   c0101216 <__panic>
    struct Page *p = base;
c010929d:	8b 45 08             	mov    0x8(%ebp),%eax
c01092a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c01092a3:	e9 9d 00 00 00       	jmp    c0109345 <firstfit_free_pages+0xdb>
        assert(!PageReserved(p) && !PageProperty(p));
c01092a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092ab:	83 c0 04             	add    $0x4,%eax
c01092ae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01092b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01092b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01092bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01092be:	0f a3 10             	bt     %edx,(%eax)
c01092c1:	19 c0                	sbb    %eax,%eax
c01092c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c01092c6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01092ca:	0f 95 c0             	setne  %al
c01092cd:	0f b6 c0             	movzbl %al,%eax
c01092d0:	85 c0                	test   %eax,%eax
c01092d2:	75 2c                	jne    c0109300 <firstfit_free_pages+0x96>
c01092d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092d7:	83 c0 04             	add    $0x4,%eax
c01092da:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c01092e1:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01092e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01092e7:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01092ea:	0f a3 10             	bt     %edx,(%eax)
c01092ed:	19 c0                	sbb    %eax,%eax
c01092ef:	89 45 d8             	mov    %eax,-0x28(%ebp)
    return oldbit != 0;
c01092f2:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01092f6:	0f 95 c0             	setne  %al
c01092f9:	0f b6 c0             	movzbl %al,%eax
c01092fc:	85 c0                	test   %eax,%eax
c01092fe:	74 24                	je     c0109324 <firstfit_free_pages+0xba>
c0109300:	c7 44 24 0c 24 34 12 	movl   $0xc0123424,0xc(%esp)
c0109307:	c0 
c0109308:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010930f:	c0 
c0109310:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0109317:	00 
c0109318:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010931f:	e8 f2 7e ff ff       	call   c0101216 <__panic>
        p->flags = 0;
c0109324:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109327:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);
c010932e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109335:	00 
c0109336:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109339:	89 04 24             	mov    %eax,(%esp)
c010933c:	e8 1e fc ff ff       	call   c0108f5f <set_page_ref>

static void
firstfit_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0109341:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c0109345:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109348:	89 d0                	mov    %edx,%eax
c010934a:	c1 e0 03             	shl    $0x3,%eax
c010934d:	01 d0                	add    %edx,%eax
c010934f:	c1 e0 02             	shl    $0x2,%eax
c0109352:	89 c2                	mov    %eax,%edx
c0109354:	8b 45 08             	mov    0x8(%ebp),%eax
c0109357:	01 d0                	add    %edx,%eax
c0109359:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010935c:	0f 85 46 ff ff ff    	jne    c01092a8 <firstfit_free_pages+0x3e>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0109362:	8b 45 08             	mov    0x8(%ebp),%eax
c0109365:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109368:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c010936b:	8b 45 08             	mov    0x8(%ebp),%eax
c010936e:	83 c0 04             	add    $0x4,%eax
c0109371:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0109378:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010937b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010937e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0109381:	0f ab 10             	bts    %edx,(%eax)
c0109384:	c7 45 cc 54 11 17 c0 	movl   $0xc0171154,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010938b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010938e:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *le = list_next(&free_list);
c0109391:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0109394:	e9 08 01 00 00       	jmp    c01094a1 <firstfit_free_pages+0x237>
        p = le2page(le, page_link);
c0109399:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010939c:	83 e8 10             	sub    $0x10,%eax
c010939f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01093a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093a5:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01093a8:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01093ab:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c01093ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (base + base->property == p) {
c01093b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01093b4:	8b 50 08             	mov    0x8(%eax),%edx
c01093b7:	89 d0                	mov    %edx,%eax
c01093b9:	c1 e0 03             	shl    $0x3,%eax
c01093bc:	01 d0                	add    %edx,%eax
c01093be:	c1 e0 02             	shl    $0x2,%eax
c01093c1:	89 c2                	mov    %eax,%edx
c01093c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01093c6:	01 d0                	add    %edx,%eax
c01093c8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01093cb:	75 5a                	jne    c0109427 <firstfit_free_pages+0x1bd>
            base->property += p->property;
c01093cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01093d0:	8b 50 08             	mov    0x8(%eax),%edx
c01093d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093d6:	8b 40 08             	mov    0x8(%eax),%eax
c01093d9:	01 c2                	add    %eax,%edx
c01093db:	8b 45 08             	mov    0x8(%ebp),%eax
c01093de:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(p);
c01093e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093e4:	83 c0 04             	add    $0x4,%eax
c01093e7:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c01093ee:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01093f1:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01093f4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01093f7:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c01093fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093fd:	83 c0 10             	add    $0x10,%eax
c0109400:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109403:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109406:	8b 40 04             	mov    0x4(%eax),%eax
c0109409:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010940c:	8b 12                	mov    (%edx),%edx
c010940e:	89 55 b8             	mov    %edx,-0x48(%ebp)
c0109411:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109414:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0109417:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010941a:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010941d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0109420:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0109423:	89 10                	mov    %edx,(%eax)
c0109425:	eb 7a                	jmp    c01094a1 <firstfit_free_pages+0x237>
        }
        else if (p + p->property == base) {
c0109427:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010942a:	8b 50 08             	mov    0x8(%eax),%edx
c010942d:	89 d0                	mov    %edx,%eax
c010942f:	c1 e0 03             	shl    $0x3,%eax
c0109432:	01 d0                	add    %edx,%eax
c0109434:	c1 e0 02             	shl    $0x2,%eax
c0109437:	89 c2                	mov    %eax,%edx
c0109439:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010943c:	01 d0                	add    %edx,%eax
c010943e:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109441:	75 5e                	jne    c01094a1 <firstfit_free_pages+0x237>
            p->property += base->property;
c0109443:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109446:	8b 50 08             	mov    0x8(%eax),%edx
c0109449:	8b 45 08             	mov    0x8(%ebp),%eax
c010944c:	8b 40 08             	mov    0x8(%eax),%eax
c010944f:	01 c2                	add    %eax,%edx
c0109451:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109454:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(base);
c0109457:	8b 45 08             	mov    0x8(%ebp),%eax
c010945a:	83 c0 04             	add    $0x4,%eax
c010945d:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0109464:	89 45 ac             	mov    %eax,-0x54(%ebp)
c0109467:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010946a:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010946d:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c0109470:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109473:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c0109476:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109479:	83 c0 10             	add    $0x10,%eax
c010947c:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010947f:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0109482:	8b 40 04             	mov    0x4(%eax),%eax
c0109485:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0109488:	8b 12                	mov    (%edx),%edx
c010948a:	89 55 a4             	mov    %edx,-0x5c(%ebp)
c010948d:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109490:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0109493:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0109496:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109499:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010949c:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c010949f:	89 10                	mov    %edx,(%eax)
        set_page_ref(p, 0);
    }
    base->property = n;
    SetPageProperty(base);
    list_entry_t *le = list_next(&free_list);
    while (le != &free_list) {
c01094a1:	81 7d f0 54 11 17 c0 	cmpl   $0xc0171154,-0x10(%ebp)
c01094a8:	0f 85 eb fe ff ff    	jne    c0109399 <firstfit_free_pages+0x12f>
            ClearPageProperty(base);
            base = p;
            list_del(&(p->page_link));
        }
    }
    nr_free += n;
c01094ae:	8b 15 5c 11 17 c0    	mov    0xc017115c,%edx
c01094b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01094b7:	01 d0                	add    %edx,%eax
c01094b9:	a3 5c 11 17 c0       	mov    %eax,0xc017115c
c01094be:	c7 45 9c 54 11 17 c0 	movl   $0xc0171154,-0x64(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01094c5:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01094c8:	8b 40 04             	mov    0x4(%eax),%eax
    le = list_next(&free_list);
c01094cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c01094ce:	eb 76                	jmp    c0109546 <firstfit_free_pages+0x2dc>
        p = le2page(le, page_link);
c01094d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01094d3:	83 e8 10             	sub    $0x10,%eax
c01094d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (base + base->property <= p) {
c01094d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01094dc:	8b 50 08             	mov    0x8(%eax),%edx
c01094df:	89 d0                	mov    %edx,%eax
c01094e1:	c1 e0 03             	shl    $0x3,%eax
c01094e4:	01 d0                	add    %edx,%eax
c01094e6:	c1 e0 02             	shl    $0x2,%eax
c01094e9:	89 c2                	mov    %eax,%edx
c01094eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01094ee:	01 d0                	add    %edx,%eax
c01094f0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01094f3:	77 42                	ja     c0109537 <firstfit_free_pages+0x2cd>
            assert(base + base->property != p);
c01094f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01094f8:	8b 50 08             	mov    0x8(%eax),%edx
c01094fb:	89 d0                	mov    %edx,%eax
c01094fd:	c1 e0 03             	shl    $0x3,%eax
c0109500:	01 d0                	add    %edx,%eax
c0109502:	c1 e0 02             	shl    $0x2,%eax
c0109505:	89 c2                	mov    %eax,%edx
c0109507:	8b 45 08             	mov    0x8(%ebp),%eax
c010950a:	01 d0                	add    %edx,%eax
c010950c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010950f:	75 24                	jne    c0109535 <firstfit_free_pages+0x2cb>
c0109511:	c7 44 24 0c 49 34 12 	movl   $0xc0123449,0xc(%esp)
c0109518:	c0 
c0109519:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109520:	c0 
c0109521:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0109528:	00 
c0109529:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109530:	e8 e1 7c ff ff       	call   c0101216 <__panic>
            break;
c0109535:	eb 18                	jmp    c010954f <firstfit_free_pages+0x2e5>
c0109537:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010953a:	89 45 98             	mov    %eax,-0x68(%ebp)
c010953d:	8b 45 98             	mov    -0x68(%ebp),%eax
c0109540:	8b 40 04             	mov    0x4(%eax),%eax
        }
        le = list_next(le);
c0109543:	89 45 f0             	mov    %eax,-0x10(%ebp)
            list_del(&(p->page_link));
        }
    }
    nr_free += n;
    le = list_next(&free_list);
    while (le != &free_list) {
c0109546:	81 7d f0 54 11 17 c0 	cmpl   $0xc0171154,-0x10(%ebp)
c010954d:	75 81                	jne    c01094d0 <firstfit_free_pages+0x266>
            assert(base + base->property != p);
            break;
        }
        le = list_next(le);
    }
    list_add_before(le, &(base->page_link));
c010954f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109552:	8d 50 10             	lea    0x10(%eax),%edx
c0109555:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109558:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010955b:	89 55 90             	mov    %edx,-0x70(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010955e:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0109561:	8b 00                	mov    (%eax),%eax
c0109563:	8b 55 90             	mov    -0x70(%ebp),%edx
c0109566:	89 55 8c             	mov    %edx,-0x74(%ebp)
c0109569:	89 45 88             	mov    %eax,-0x78(%ebp)
c010956c:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010956f:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109572:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0109575:	8b 55 8c             	mov    -0x74(%ebp),%edx
c0109578:	89 10                	mov    %edx,(%eax)
c010957a:	8b 45 84             	mov    -0x7c(%ebp),%eax
c010957d:	8b 10                	mov    (%eax),%edx
c010957f:	8b 45 88             	mov    -0x78(%ebp),%eax
c0109582:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109585:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0109588:	8b 55 84             	mov    -0x7c(%ebp),%edx
c010958b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010958e:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0109591:	8b 55 88             	mov    -0x78(%ebp),%edx
c0109594:	89 10                	mov    %edx,(%eax)
}
c0109596:	c9                   	leave  
c0109597:	c3                   	ret    

c0109598 <firstfit_nr_free_pages>:



static size_t
firstfit_nr_free_pages(void) {
c0109598:	55                   	push   %ebp
c0109599:	89 e5                	mov    %esp,%ebp
    return nr_free;
c010959b:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
}
c01095a0:	5d                   	pop    %ebp
c01095a1:	c3                   	ret    

c01095a2 <basic_check>:

static void
basic_check(void) {
c01095a2:	55                   	push   %ebp
c01095a3:	89 e5                	mov    %esp,%ebp
c01095a5:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c01095a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01095af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01095b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c01095bb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01095c2:	e8 96 2f 00 00       	call   c010c55d <alloc_pages>
c01095c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01095ca:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01095ce:	75 24                	jne    c01095f4 <basic_check+0x52>
c01095d0:	c7 44 24 0c 64 34 12 	movl   $0xc0123464,0xc(%esp)
c01095d7:	c0 
c01095d8:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c01095df:	c0 
c01095e0:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c01095e7:	00 
c01095e8:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c01095ef:	e8 22 7c ff ff       	call   c0101216 <__panic>
    assert((p1 = alloc_page()) != NULL);
c01095f4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01095fb:	e8 5d 2f 00 00       	call   c010c55d <alloc_pages>
c0109600:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109603:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109607:	75 24                	jne    c010962d <basic_check+0x8b>
c0109609:	c7 44 24 0c 80 34 12 	movl   $0xc0123480,0xc(%esp)
c0109610:	c0 
c0109611:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109618:	c0 
c0109619:	c7 44 24 04 cf 00 00 	movl   $0xcf,0x4(%esp)
c0109620:	00 
c0109621:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109628:	e8 e9 7b ff ff       	call   c0101216 <__panic>
    assert((p2 = alloc_page()) != NULL);
c010962d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109634:	e8 24 2f 00 00       	call   c010c55d <alloc_pages>
c0109639:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010963c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109640:	75 24                	jne    c0109666 <basic_check+0xc4>
c0109642:	c7 44 24 0c 9c 34 12 	movl   $0xc012349c,0xc(%esp)
c0109649:	c0 
c010964a:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109651:	c0 
c0109652:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0109659:	00 
c010965a:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109661:	e8 b0 7b ff ff       	call   c0101216 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0109666:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109669:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010966c:	74 10                	je     c010967e <basic_check+0xdc>
c010966e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109671:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109674:	74 08                	je     c010967e <basic_check+0xdc>
c0109676:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109679:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010967c:	75 24                	jne    c01096a2 <basic_check+0x100>
c010967e:	c7 44 24 0c b8 34 12 	movl   $0xc01234b8,0xc(%esp)
c0109685:	c0 
c0109686:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010968d:	c0 
c010968e:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
c0109695:	00 
c0109696:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010969d:	e8 74 7b ff ff       	call   c0101216 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c01096a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01096a5:	89 04 24             	mov    %eax,(%esp)
c01096a8:	e8 a8 f8 ff ff       	call   c0108f55 <page_ref>
c01096ad:	85 c0                	test   %eax,%eax
c01096af:	75 1e                	jne    c01096cf <basic_check+0x12d>
c01096b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096b4:	89 04 24             	mov    %eax,(%esp)
c01096b7:	e8 99 f8 ff ff       	call   c0108f55 <page_ref>
c01096bc:	85 c0                	test   %eax,%eax
c01096be:	75 0f                	jne    c01096cf <basic_check+0x12d>
c01096c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096c3:	89 04 24             	mov    %eax,(%esp)
c01096c6:	e8 8a f8 ff ff       	call   c0108f55 <page_ref>
c01096cb:	85 c0                	test   %eax,%eax
c01096cd:	74 24                	je     c01096f3 <basic_check+0x151>
c01096cf:	c7 44 24 0c dc 34 12 	movl   $0xc01234dc,0xc(%esp)
c01096d6:	c0 
c01096d7:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c01096de:	c0 
c01096df:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c01096e6:	00 
c01096e7:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c01096ee:	e8 23 7b ff ff       	call   c0101216 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c01096f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01096f6:	89 04 24             	mov    %eax,(%esp)
c01096f9:	e8 41 f8 ff ff       	call   c0108f3f <page2pa>
c01096fe:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c0109704:	c1 e2 0c             	shl    $0xc,%edx
c0109707:	39 d0                	cmp    %edx,%eax
c0109709:	72 24                	jb     c010972f <basic_check+0x18d>
c010970b:	c7 44 24 0c 18 35 12 	movl   $0xc0123518,0xc(%esp)
c0109712:	c0 
c0109713:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010971a:	c0 
c010971b:	c7 44 24 04 d5 00 00 	movl   $0xd5,0x4(%esp)
c0109722:	00 
c0109723:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010972a:	e8 e7 7a ff ff       	call   c0101216 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c010972f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109732:	89 04 24             	mov    %eax,(%esp)
c0109735:	e8 05 f8 ff ff       	call   c0108f3f <page2pa>
c010973a:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c0109740:	c1 e2 0c             	shl    $0xc,%edx
c0109743:	39 d0                	cmp    %edx,%eax
c0109745:	72 24                	jb     c010976b <basic_check+0x1c9>
c0109747:	c7 44 24 0c 35 35 12 	movl   $0xc0123535,0xc(%esp)
c010974e:	c0 
c010974f:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109756:	c0 
c0109757:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c010975e:	00 
c010975f:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109766:	e8 ab 7a ff ff       	call   c0101216 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c010976b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010976e:	89 04 24             	mov    %eax,(%esp)
c0109771:	e8 c9 f7 ff ff       	call   c0108f3f <page2pa>
c0109776:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c010977c:	c1 e2 0c             	shl    $0xc,%edx
c010977f:	39 d0                	cmp    %edx,%eax
c0109781:	72 24                	jb     c01097a7 <basic_check+0x205>
c0109783:	c7 44 24 0c 52 35 12 	movl   $0xc0123552,0xc(%esp)
c010978a:	c0 
c010978b:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109792:	c0 
c0109793:	c7 44 24 04 d7 00 00 	movl   $0xd7,0x4(%esp)
c010979a:	00 
c010979b:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c01097a2:	e8 6f 7a ff ff       	call   c0101216 <__panic>

    list_entry_t free_list_store = free_list;
c01097a7:	a1 54 11 17 c0       	mov    0xc0171154,%eax
c01097ac:	8b 15 58 11 17 c0    	mov    0xc0171158,%edx
c01097b2:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01097b5:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01097b8:	c7 45 e0 54 11 17 c0 	movl   $0xc0171154,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01097bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01097c2:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01097c5:	89 50 04             	mov    %edx,0x4(%eax)
c01097c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01097cb:	8b 50 04             	mov    0x4(%eax),%edx
c01097ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01097d1:	89 10                	mov    %edx,(%eax)
c01097d3:	c7 45 dc 54 11 17 c0 	movl   $0xc0171154,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01097da:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01097dd:	8b 40 04             	mov    0x4(%eax),%eax
c01097e0:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c01097e3:	0f 94 c0             	sete   %al
c01097e6:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01097e9:	85 c0                	test   %eax,%eax
c01097eb:	75 24                	jne    c0109811 <basic_check+0x26f>
c01097ed:	c7 44 24 0c 6f 35 12 	movl   $0xc012356f,0xc(%esp)
c01097f4:	c0 
c01097f5:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c01097fc:	c0 
c01097fd:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c0109804:	00 
c0109805:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010980c:	e8 05 7a ff ff       	call   c0101216 <__panic>

    unsigned int nr_free_store = nr_free;
c0109811:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0109816:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0109819:	c7 05 5c 11 17 c0 00 	movl   $0x0,0xc017115c
c0109820:	00 00 00 

    assert(alloc_page() == NULL);
c0109823:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010982a:	e8 2e 2d 00 00       	call   c010c55d <alloc_pages>
c010982f:	85 c0                	test   %eax,%eax
c0109831:	74 24                	je     c0109857 <basic_check+0x2b5>
c0109833:	c7 44 24 0c 86 35 12 	movl   $0xc0123586,0xc(%esp)
c010983a:	c0 
c010983b:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109842:	c0 
c0109843:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c010984a:	00 
c010984b:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109852:	e8 bf 79 ff ff       	call   c0101216 <__panic>

    free_page(p0);
c0109857:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010985e:	00 
c010985f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109862:	89 04 24             	mov    %eax,(%esp)
c0109865:	e8 5e 2d 00 00       	call   c010c5c8 <free_pages>
    free_page(p1);
c010986a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109871:	00 
c0109872:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109875:	89 04 24             	mov    %eax,(%esp)
c0109878:	e8 4b 2d 00 00       	call   c010c5c8 <free_pages>
    free_page(p2);
c010987d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109884:	00 
c0109885:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109888:	89 04 24             	mov    %eax,(%esp)
c010988b:	e8 38 2d 00 00       	call   c010c5c8 <free_pages>
    assert(nr_free == 3);
c0109890:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0109895:	83 f8 03             	cmp    $0x3,%eax
c0109898:	74 24                	je     c01098be <basic_check+0x31c>
c010989a:	c7 44 24 0c 9b 35 12 	movl   $0xc012359b,0xc(%esp)
c01098a1:	c0 
c01098a2:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c01098a9:	c0 
c01098aa:	c7 44 24 04 e5 00 00 	movl   $0xe5,0x4(%esp)
c01098b1:	00 
c01098b2:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c01098b9:	e8 58 79 ff ff       	call   c0101216 <__panic>

    assert((p0 = alloc_page()) != NULL);
c01098be:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01098c5:	e8 93 2c 00 00       	call   c010c55d <alloc_pages>
c01098ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01098cd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01098d1:	75 24                	jne    c01098f7 <basic_check+0x355>
c01098d3:	c7 44 24 0c 64 34 12 	movl   $0xc0123464,0xc(%esp)
c01098da:	c0 
c01098db:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c01098e2:	c0 
c01098e3:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
c01098ea:	00 
c01098eb:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c01098f2:	e8 1f 79 ff ff       	call   c0101216 <__panic>
    assert((p1 = alloc_page()) != NULL);
c01098f7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01098fe:	e8 5a 2c 00 00       	call   c010c55d <alloc_pages>
c0109903:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109906:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010990a:	75 24                	jne    c0109930 <basic_check+0x38e>
c010990c:	c7 44 24 0c 80 34 12 	movl   $0xc0123480,0xc(%esp)
c0109913:	c0 
c0109914:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010991b:	c0 
c010991c:	c7 44 24 04 e8 00 00 	movl   $0xe8,0x4(%esp)
c0109923:	00 
c0109924:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010992b:	e8 e6 78 ff ff       	call   c0101216 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0109930:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109937:	e8 21 2c 00 00       	call   c010c55d <alloc_pages>
c010993c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010993f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109943:	75 24                	jne    c0109969 <basic_check+0x3c7>
c0109945:	c7 44 24 0c 9c 34 12 	movl   $0xc012349c,0xc(%esp)
c010994c:	c0 
c010994d:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109954:	c0 
c0109955:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c010995c:	00 
c010995d:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109964:	e8 ad 78 ff ff       	call   c0101216 <__panic>

    assert(alloc_page() == NULL);
c0109969:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109970:	e8 e8 2b 00 00       	call   c010c55d <alloc_pages>
c0109975:	85 c0                	test   %eax,%eax
c0109977:	74 24                	je     c010999d <basic_check+0x3fb>
c0109979:	c7 44 24 0c 86 35 12 	movl   $0xc0123586,0xc(%esp)
c0109980:	c0 
c0109981:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109988:	c0 
c0109989:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
c0109990:	00 
c0109991:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109998:	e8 79 78 ff ff       	call   c0101216 <__panic>

    free_page(p0);
c010999d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01099a4:	00 
c01099a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01099a8:	89 04 24             	mov    %eax,(%esp)
c01099ab:	e8 18 2c 00 00       	call   c010c5c8 <free_pages>
c01099b0:	c7 45 d8 54 11 17 c0 	movl   $0xc0171154,-0x28(%ebp)
c01099b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01099ba:	8b 40 04             	mov    0x4(%eax),%eax
c01099bd:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c01099c0:	0f 94 c0             	sete   %al
c01099c3:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c01099c6:	85 c0                	test   %eax,%eax
c01099c8:	74 24                	je     c01099ee <basic_check+0x44c>
c01099ca:	c7 44 24 0c a8 35 12 	movl   $0xc01235a8,0xc(%esp)
c01099d1:	c0 
c01099d2:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c01099d9:	c0 
c01099da:	c7 44 24 04 ee 00 00 	movl   $0xee,0x4(%esp)
c01099e1:	00 
c01099e2:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c01099e9:	e8 28 78 ff ff       	call   c0101216 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c01099ee:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01099f5:	e8 63 2b 00 00       	call   c010c55d <alloc_pages>
c01099fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01099fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109a00:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0109a03:	74 24                	je     c0109a29 <basic_check+0x487>
c0109a05:	c7 44 24 0c c0 35 12 	movl   $0xc01235c0,0xc(%esp)
c0109a0c:	c0 
c0109a0d:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109a14:	c0 
c0109a15:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
c0109a1c:	00 
c0109a1d:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109a24:	e8 ed 77 ff ff       	call   c0101216 <__panic>
    assert(alloc_page() == NULL);
c0109a29:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109a30:	e8 28 2b 00 00       	call   c010c55d <alloc_pages>
c0109a35:	85 c0                	test   %eax,%eax
c0109a37:	74 24                	je     c0109a5d <basic_check+0x4bb>
c0109a39:	c7 44 24 0c 86 35 12 	movl   $0xc0123586,0xc(%esp)
c0109a40:	c0 
c0109a41:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109a48:	c0 
c0109a49:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0109a50:	00 
c0109a51:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109a58:	e8 b9 77 ff ff       	call   c0101216 <__panic>

    assert(nr_free == 0);
c0109a5d:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0109a62:	85 c0                	test   %eax,%eax
c0109a64:	74 24                	je     c0109a8a <basic_check+0x4e8>
c0109a66:	c7 44 24 0c d9 35 12 	movl   $0xc01235d9,0xc(%esp)
c0109a6d:	c0 
c0109a6e:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109a75:	c0 
c0109a76:	c7 44 24 04 f4 00 00 	movl   $0xf4,0x4(%esp)
c0109a7d:	00 
c0109a7e:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109a85:	e8 8c 77 ff ff       	call   c0101216 <__panic>
    free_list = free_list_store;
c0109a8a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109a8d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0109a90:	a3 54 11 17 c0       	mov    %eax,0xc0171154
c0109a95:	89 15 58 11 17 c0    	mov    %edx,0xc0171158
    nr_free = nr_free_store;
c0109a9b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109a9e:	a3 5c 11 17 c0       	mov    %eax,0xc017115c

    free_page(p);
c0109aa3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109aaa:	00 
c0109aab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109aae:	89 04 24             	mov    %eax,(%esp)
c0109ab1:	e8 12 2b 00 00       	call   c010c5c8 <free_pages>
    free_page(p1);
c0109ab6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109abd:	00 
c0109abe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ac1:	89 04 24             	mov    %eax,(%esp)
c0109ac4:	e8 ff 2a 00 00       	call   c010c5c8 <free_pages>
    free_page(p2);
c0109ac9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109ad0:	00 
c0109ad1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ad4:	89 04 24             	mov    %eax,(%esp)
c0109ad7:	e8 ec 2a 00 00       	call   c010c5c8 <free_pages>
}
c0109adc:	c9                   	leave  
c0109add:	c3                   	ret    

c0109ade <firstfit_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, firstfit_check functions!
static void
firstfit_check(void) {
c0109ade:	55                   	push   %ebp
c0109adf:	89 e5                	mov    %esp,%ebp
c0109ae1:	53                   	push   %ebx
c0109ae2:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0109ae8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109aef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0109af6:	c7 45 ec 54 11 17 c0 	movl   $0xc0171154,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0109afd:	eb 6b                	jmp    c0109b6a <firstfit_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0109aff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b02:	83 e8 10             	sub    $0x10,%eax
c0109b05:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0109b08:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b0b:	83 c0 04             	add    $0x4,%eax
c0109b0e:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0109b15:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0109b18:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109b1b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0109b1e:	0f a3 10             	bt     %edx,(%eax)
c0109b21:	19 c0                	sbb    %eax,%eax
c0109b23:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c0109b26:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0109b2a:	0f 95 c0             	setne  %al
c0109b2d:	0f b6 c0             	movzbl %al,%eax
c0109b30:	85 c0                	test   %eax,%eax
c0109b32:	75 24                	jne    c0109b58 <firstfit_check+0x7a>
c0109b34:	c7 44 24 0c e6 35 12 	movl   $0xc01235e6,0xc(%esp)
c0109b3b:	c0 
c0109b3c:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109b43:	c0 
c0109b44:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c0109b4b:	00 
c0109b4c:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109b53:	e8 be 76 ff ff       	call   c0101216 <__panic>
        count ++, total += p->property;
c0109b58:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109b5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b5f:	8b 50 08             	mov    0x8(%eax),%edx
c0109b62:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b65:	01 d0                	add    %edx,%eax
c0109b67:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109b6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b6d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109b70:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0109b73:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, firstfit_check functions!
static void
firstfit_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0109b76:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109b79:	81 7d ec 54 11 17 c0 	cmpl   $0xc0171154,-0x14(%ebp)
c0109b80:	0f 85 79 ff ff ff    	jne    c0109aff <firstfit_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c0109b86:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0109b89:	e8 6c 2a 00 00       	call   c010c5fa <nr_free_pages>
c0109b8e:	39 c3                	cmp    %eax,%ebx
c0109b90:	74 24                	je     c0109bb6 <firstfit_check+0xd8>
c0109b92:	c7 44 24 0c f6 35 12 	movl   $0xc01235f6,0xc(%esp)
c0109b99:	c0 
c0109b9a:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109ba1:	c0 
c0109ba2:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c0109ba9:	00 
c0109baa:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109bb1:	e8 60 76 ff ff       	call   c0101216 <__panic>

    basic_check();
c0109bb6:	e8 e7 f9 ff ff       	call   c01095a2 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0109bbb:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0109bc2:	e8 96 29 00 00       	call   c010c55d <alloc_pages>
c0109bc7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0109bca:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0109bce:	75 24                	jne    c0109bf4 <firstfit_check+0x116>
c0109bd0:	c7 44 24 0c 0f 36 12 	movl   $0xc012360f,0xc(%esp)
c0109bd7:	c0 
c0109bd8:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109bdf:	c0 
c0109be0:	c7 44 24 04 0d 01 00 	movl   $0x10d,0x4(%esp)
c0109be7:	00 
c0109be8:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109bef:	e8 22 76 ff ff       	call   c0101216 <__panic>
    assert(!PageProperty(p0));
c0109bf4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109bf7:	83 c0 04             	add    $0x4,%eax
c0109bfa:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0109c01:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0109c04:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109c07:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0109c0a:	0f a3 10             	bt     %edx,(%eax)
c0109c0d:	19 c0                	sbb    %eax,%eax
c0109c0f:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c0109c12:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0109c16:	0f 95 c0             	setne  %al
c0109c19:	0f b6 c0             	movzbl %al,%eax
c0109c1c:	85 c0                	test   %eax,%eax
c0109c1e:	74 24                	je     c0109c44 <firstfit_check+0x166>
c0109c20:	c7 44 24 0c 1a 36 12 	movl   $0xc012361a,0xc(%esp)
c0109c27:	c0 
c0109c28:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109c2f:	c0 
c0109c30:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c0109c37:	00 
c0109c38:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109c3f:	e8 d2 75 ff ff       	call   c0101216 <__panic>

    list_entry_t free_list_store = free_list;
c0109c44:	a1 54 11 17 c0       	mov    0xc0171154,%eax
c0109c49:	8b 15 58 11 17 c0    	mov    0xc0171158,%edx
c0109c4f:	89 45 80             	mov    %eax,-0x80(%ebp)
c0109c52:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0109c55:	c7 45 b4 54 11 17 c0 	movl   $0xc0171154,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109c5c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0109c5f:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0109c62:	89 50 04             	mov    %edx,0x4(%eax)
c0109c65:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0109c68:	8b 50 04             	mov    0x4(%eax),%edx
c0109c6b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0109c6e:	89 10                	mov    %edx,(%eax)
c0109c70:	c7 45 b0 54 11 17 c0 	movl   $0xc0171154,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109c77:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109c7a:	8b 40 04             	mov    0x4(%eax),%eax
c0109c7d:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c0109c80:	0f 94 c0             	sete   %al
c0109c83:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0109c86:	85 c0                	test   %eax,%eax
c0109c88:	75 24                	jne    c0109cae <firstfit_check+0x1d0>
c0109c8a:	c7 44 24 0c 6f 35 12 	movl   $0xc012356f,0xc(%esp)
c0109c91:	c0 
c0109c92:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109c99:	c0 
c0109c9a:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0109ca1:	00 
c0109ca2:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109ca9:	e8 68 75 ff ff       	call   c0101216 <__panic>
    assert(alloc_page() == NULL);
c0109cae:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109cb5:	e8 a3 28 00 00       	call   c010c55d <alloc_pages>
c0109cba:	85 c0                	test   %eax,%eax
c0109cbc:	74 24                	je     c0109ce2 <firstfit_check+0x204>
c0109cbe:	c7 44 24 0c 86 35 12 	movl   $0xc0123586,0xc(%esp)
c0109cc5:	c0 
c0109cc6:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109ccd:	c0 
c0109cce:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c0109cd5:	00 
c0109cd6:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109cdd:	e8 34 75 ff ff       	call   c0101216 <__panic>

    unsigned int nr_free_store = nr_free;
c0109ce2:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c0109ce7:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0109cea:	c7 05 5c 11 17 c0 00 	movl   $0x0,0xc017115c
c0109cf1:	00 00 00 

    free_pages(p0 + 2, 3);
c0109cf4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109cf7:	83 c0 48             	add    $0x48,%eax
c0109cfa:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0109d01:	00 
c0109d02:	89 04 24             	mov    %eax,(%esp)
c0109d05:	e8 be 28 00 00       	call   c010c5c8 <free_pages>
    assert(alloc_pages(4) == NULL);
c0109d0a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0109d11:	e8 47 28 00 00       	call   c010c55d <alloc_pages>
c0109d16:	85 c0                	test   %eax,%eax
c0109d18:	74 24                	je     c0109d3e <firstfit_check+0x260>
c0109d1a:	c7 44 24 0c 2c 36 12 	movl   $0xc012362c,0xc(%esp)
c0109d21:	c0 
c0109d22:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109d29:	c0 
c0109d2a:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0109d31:	00 
c0109d32:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109d39:	e8 d8 74 ff ff       	call   c0101216 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0109d3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d41:	83 c0 48             	add    $0x48,%eax
c0109d44:	83 c0 04             	add    $0x4,%eax
c0109d47:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c0109d4e:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0109d51:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0109d54:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0109d57:	0f a3 10             	bt     %edx,(%eax)
c0109d5a:	19 c0                	sbb    %eax,%eax
c0109d5c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c0109d5f:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c0109d63:	0f 95 c0             	setne  %al
c0109d66:	0f b6 c0             	movzbl %al,%eax
c0109d69:	85 c0                	test   %eax,%eax
c0109d6b:	74 0e                	je     c0109d7b <firstfit_check+0x29d>
c0109d6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d70:	83 c0 48             	add    $0x48,%eax
c0109d73:	8b 40 08             	mov    0x8(%eax),%eax
c0109d76:	83 f8 03             	cmp    $0x3,%eax
c0109d79:	74 24                	je     c0109d9f <firstfit_check+0x2c1>
c0109d7b:	c7 44 24 0c 44 36 12 	movl   $0xc0123644,0xc(%esp)
c0109d82:	c0 
c0109d83:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109d8a:	c0 
c0109d8b:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c0109d92:	00 
c0109d93:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109d9a:	e8 77 74 ff ff       	call   c0101216 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0109d9f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c0109da6:	e8 b2 27 00 00       	call   c010c55d <alloc_pages>
c0109dab:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109dae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0109db2:	75 24                	jne    c0109dd8 <firstfit_check+0x2fa>
c0109db4:	c7 44 24 0c 70 36 12 	movl   $0xc0123670,0xc(%esp)
c0109dbb:	c0 
c0109dbc:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109dc3:	c0 
c0109dc4:	c7 44 24 04 1b 01 00 	movl   $0x11b,0x4(%esp)
c0109dcb:	00 
c0109dcc:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109dd3:	e8 3e 74 ff ff       	call   c0101216 <__panic>
    assert(alloc_page() == NULL);
c0109dd8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109ddf:	e8 79 27 00 00       	call   c010c55d <alloc_pages>
c0109de4:	85 c0                	test   %eax,%eax
c0109de6:	74 24                	je     c0109e0c <firstfit_check+0x32e>
c0109de8:	c7 44 24 0c 86 35 12 	movl   $0xc0123586,0xc(%esp)
c0109def:	c0 
c0109df0:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109df7:	c0 
c0109df8:	c7 44 24 04 1c 01 00 	movl   $0x11c,0x4(%esp)
c0109dff:	00 
c0109e00:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109e07:	e8 0a 74 ff ff       	call   c0101216 <__panic>
    assert(p0 + 2 == p1);
c0109e0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e0f:	83 c0 48             	add    $0x48,%eax
c0109e12:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0109e15:	74 24                	je     c0109e3b <firstfit_check+0x35d>
c0109e17:	c7 44 24 0c 8e 36 12 	movl   $0xc012368e,0xc(%esp)
c0109e1e:	c0 
c0109e1f:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109e26:	c0 
c0109e27:	c7 44 24 04 1d 01 00 	movl   $0x11d,0x4(%esp)
c0109e2e:	00 
c0109e2f:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109e36:	e8 db 73 ff ff       	call   c0101216 <__panic>

    p2 = p0 + 1;
c0109e3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e3e:	83 c0 24             	add    $0x24,%eax
c0109e41:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c0109e44:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109e4b:	00 
c0109e4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e4f:	89 04 24             	mov    %eax,(%esp)
c0109e52:	e8 71 27 00 00       	call   c010c5c8 <free_pages>
    free_pages(p1, 3);
c0109e57:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0109e5e:	00 
c0109e5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109e62:	89 04 24             	mov    %eax,(%esp)
c0109e65:	e8 5e 27 00 00       	call   c010c5c8 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c0109e6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e6d:	83 c0 04             	add    $0x4,%eax
c0109e70:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c0109e77:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0109e7a:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0109e7d:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0109e80:	0f a3 10             	bt     %edx,(%eax)
c0109e83:	19 c0                	sbb    %eax,%eax
c0109e85:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0109e88:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0109e8c:	0f 95 c0             	setne  %al
c0109e8f:	0f b6 c0             	movzbl %al,%eax
c0109e92:	85 c0                	test   %eax,%eax
c0109e94:	74 0b                	je     c0109ea1 <firstfit_check+0x3c3>
c0109e96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e99:	8b 40 08             	mov    0x8(%eax),%eax
c0109e9c:	83 f8 01             	cmp    $0x1,%eax
c0109e9f:	74 24                	je     c0109ec5 <firstfit_check+0x3e7>
c0109ea1:	c7 44 24 0c 9c 36 12 	movl   $0xc012369c,0xc(%esp)
c0109ea8:	c0 
c0109ea9:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109eb0:	c0 
c0109eb1:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0109eb8:	00 
c0109eb9:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109ec0:	e8 51 73 ff ff       	call   c0101216 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0109ec5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109ec8:	83 c0 04             	add    $0x4,%eax
c0109ecb:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c0109ed2:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0109ed5:	8b 45 90             	mov    -0x70(%ebp),%eax
c0109ed8:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0109edb:	0f a3 10             	bt     %edx,(%eax)
c0109ede:	19 c0                	sbb    %eax,%eax
c0109ee0:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c0109ee3:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0109ee7:	0f 95 c0             	setne  %al
c0109eea:	0f b6 c0             	movzbl %al,%eax
c0109eed:	85 c0                	test   %eax,%eax
c0109eef:	74 0b                	je     c0109efc <firstfit_check+0x41e>
c0109ef1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109ef4:	8b 40 08             	mov    0x8(%eax),%eax
c0109ef7:	83 f8 03             	cmp    $0x3,%eax
c0109efa:	74 24                	je     c0109f20 <firstfit_check+0x442>
c0109efc:	c7 44 24 0c c4 36 12 	movl   $0xc01236c4,0xc(%esp)
c0109f03:	c0 
c0109f04:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109f0b:	c0 
c0109f0c:	c7 44 24 04 23 01 00 	movl   $0x123,0x4(%esp)
c0109f13:	00 
c0109f14:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109f1b:	e8 f6 72 ff ff       	call   c0101216 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0109f20:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109f27:	e8 31 26 00 00       	call   c010c55d <alloc_pages>
c0109f2c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109f2f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109f32:	83 e8 24             	sub    $0x24,%eax
c0109f35:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0109f38:	74 24                	je     c0109f5e <firstfit_check+0x480>
c0109f3a:	c7 44 24 0c ea 36 12 	movl   $0xc01236ea,0xc(%esp)
c0109f41:	c0 
c0109f42:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109f49:	c0 
c0109f4a:	c7 44 24 04 25 01 00 	movl   $0x125,0x4(%esp)
c0109f51:	00 
c0109f52:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109f59:	e8 b8 72 ff ff       	call   c0101216 <__panic>
    free_page(p0);
c0109f5e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109f65:	00 
c0109f66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109f69:	89 04 24             	mov    %eax,(%esp)
c0109f6c:	e8 57 26 00 00       	call   c010c5c8 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0109f71:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0109f78:	e8 e0 25 00 00       	call   c010c55d <alloc_pages>
c0109f7d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109f80:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109f83:	83 c0 24             	add    $0x24,%eax
c0109f86:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0109f89:	74 24                	je     c0109faf <firstfit_check+0x4d1>
c0109f8b:	c7 44 24 0c 08 37 12 	movl   $0xc0123708,0xc(%esp)
c0109f92:	c0 
c0109f93:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109f9a:	c0 
c0109f9b:	c7 44 24 04 27 01 00 	movl   $0x127,0x4(%esp)
c0109fa2:	00 
c0109fa3:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c0109faa:	e8 67 72 ff ff       	call   c0101216 <__panic>

    free_pages(p0, 2);
c0109faf:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0109fb6:	00 
c0109fb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109fba:	89 04 24             	mov    %eax,(%esp)
c0109fbd:	e8 06 26 00 00       	call   c010c5c8 <free_pages>
    free_page(p2);
c0109fc2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109fc9:	00 
c0109fca:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109fcd:	89 04 24             	mov    %eax,(%esp)
c0109fd0:	e8 f3 25 00 00       	call   c010c5c8 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c0109fd5:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0109fdc:	e8 7c 25 00 00       	call   c010c55d <alloc_pages>
c0109fe1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109fe4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0109fe8:	75 24                	jne    c010a00e <firstfit_check+0x530>
c0109fea:	c7 44 24 0c 28 37 12 	movl   $0xc0123728,0xc(%esp)
c0109ff1:	c0 
c0109ff2:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c0109ff9:	c0 
c0109ffa:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c010a001:	00 
c010a002:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010a009:	e8 08 72 ff ff       	call   c0101216 <__panic>
    assert(alloc_page() == NULL);
c010a00e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a015:	e8 43 25 00 00       	call   c010c55d <alloc_pages>
c010a01a:	85 c0                	test   %eax,%eax
c010a01c:	74 24                	je     c010a042 <firstfit_check+0x564>
c010a01e:	c7 44 24 0c 86 35 12 	movl   $0xc0123586,0xc(%esp)
c010a025:	c0 
c010a026:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010a02d:	c0 
c010a02e:	c7 44 24 04 2d 01 00 	movl   $0x12d,0x4(%esp)
c010a035:	00 
c010a036:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010a03d:	e8 d4 71 ff ff       	call   c0101216 <__panic>

    assert(nr_free == 0);
c010a042:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010a047:	85 c0                	test   %eax,%eax
c010a049:	74 24                	je     c010a06f <firstfit_check+0x591>
c010a04b:	c7 44 24 0c d9 35 12 	movl   $0xc01235d9,0xc(%esp)
c010a052:	c0 
c010a053:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010a05a:	c0 
c010a05b:	c7 44 24 04 2f 01 00 	movl   $0x12f,0x4(%esp)
c010a062:	00 
c010a063:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010a06a:	e8 a7 71 ff ff       	call   c0101216 <__panic>
    nr_free = nr_free_store;
c010a06f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a072:	a3 5c 11 17 c0       	mov    %eax,0xc017115c

    free_list = free_list_store;
c010a077:	8b 45 80             	mov    -0x80(%ebp),%eax
c010a07a:	8b 55 84             	mov    -0x7c(%ebp),%edx
c010a07d:	a3 54 11 17 c0       	mov    %eax,0xc0171154
c010a082:	89 15 58 11 17 c0    	mov    %edx,0xc0171158
    free_pages(p0, 5);
c010a088:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c010a08f:	00 
c010a090:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a093:	89 04 24             	mov    %eax,(%esp)
c010a096:	e8 2d 25 00 00       	call   c010c5c8 <free_pages>

    le = &free_list;
c010a09b:	c7 45 ec 54 11 17 c0 	movl   $0xc0171154,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010a0a2:	eb 1d                	jmp    c010a0c1 <firstfit_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c010a0a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0a7:	83 e8 10             	sub    $0x10,%eax
c010a0aa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c010a0ad:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010a0b1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a0b4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a0b7:	8b 40 08             	mov    0x8(%eax),%eax
c010a0ba:	29 c2                	sub    %eax,%edx
c010a0bc:	89 d0                	mov    %edx,%eax
c010a0be:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a0c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0c4:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a0c7:	8b 45 88             	mov    -0x78(%ebp),%eax
c010a0ca:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010a0cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a0d0:	81 7d ec 54 11 17 c0 	cmpl   $0xc0171154,-0x14(%ebp)
c010a0d7:	75 cb                	jne    c010a0a4 <firstfit_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c010a0d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0dd:	74 24                	je     c010a103 <firstfit_check+0x625>
c010a0df:	c7 44 24 0c 46 37 12 	movl   $0xc0123746,0xc(%esp)
c010a0e6:	c0 
c010a0e7:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010a0ee:	c0 
c010a0ef:	c7 44 24 04 3a 01 00 	movl   $0x13a,0x4(%esp)
c010a0f6:	00 
c010a0f7:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010a0fe:	e8 13 71 ff ff       	call   c0101216 <__panic>
    assert(total == 0);
c010a103:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a107:	74 24                	je     c010a12d <firstfit_check+0x64f>
c010a109:	c7 44 24 0c 51 37 12 	movl   $0xc0123751,0xc(%esp)
c010a110:	c0 
c010a111:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010a118:	c0 
c010a119:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c010a120:	00 
c010a121:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010a128:	e8 e9 70 ff ff       	call   c0101216 <__panic>
}
c010a12d:	81 c4 94 00 00 00    	add    $0x94,%esp
c010a133:	5b                   	pop    %ebx
c010a134:	5d                   	pop    %ebp
c010a135:	c3                   	ret    

c010a136 <firstfit_user_check>:

static void
firstfit_user_check(void){
c010a136:	55                   	push   %ebp
c010a137:	89 e5                	mov    %esp,%ebp
c010a139:	83 ec 38             	sub    $0x38,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c010a13c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a143:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a146:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a149:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a14c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c010a14f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a156:	e8 02 24 00 00       	call   c010c55d <alloc_pages>
c010a15b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a15e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a162:	75 24                	jne    c010a188 <firstfit_user_check+0x52>
c010a164:	c7 44 24 0c 64 34 12 	movl   $0xc0123464,0xc(%esp)
c010a16b:	c0 
c010a16c:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010a173:	c0 
c010a174:	c7 44 24 04 42 01 00 	movl   $0x142,0x4(%esp)
c010a17b:	00 
c010a17c:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010a183:	e8 8e 70 ff ff       	call   c0101216 <__panic>
    cprintf("assert((p0 = alloc_page()) != NULL)\n");
c010a188:	c7 04 24 5c 37 12 c0 	movl   $0xc012375c,(%esp)
c010a18f:	e8 5f 62 ff ff       	call   c01003f3 <cprintf>
    assert((p1 = alloc_page()) != NULL);	
c010a194:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a19b:	e8 bd 23 00 00       	call   c010c55d <alloc_pages>
c010a1a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a1a3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a1a7:	75 24                	jne    c010a1cd <firstfit_user_check+0x97>
c010a1a9:	c7 44 24 0c 80 34 12 	movl   $0xc0123480,0xc(%esp)
c010a1b0:	c0 
c010a1b1:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010a1b8:	c0 
c010a1b9:	c7 44 24 04 44 01 00 	movl   $0x144,0x4(%esp)
c010a1c0:	00 
c010a1c1:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010a1c8:	e8 49 70 ff ff       	call   c0101216 <__panic>
    cprintf("assert((p1 = alloc_page()) != NULL)\n");
c010a1cd:	c7 04 24 84 37 12 c0 	movl   $0xc0123784,(%esp)
c010a1d4:	e8 1a 62 ff ff       	call   c01003f3 <cprintf>
    assert((p2 = alloc_page()) != NULL);
c010a1d9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a1e0:	e8 78 23 00 00       	call   c010c55d <alloc_pages>
c010a1e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a1e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a1ec:	75 24                	jne    c010a212 <firstfit_user_check+0xdc>
c010a1ee:	c7 44 24 0c 9c 34 12 	movl   $0xc012349c,0xc(%esp)
c010a1f5:	c0 
c010a1f6:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010a1fd:	c0 
c010a1fe:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c010a205:	00 
c010a206:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010a20d:	e8 04 70 ff ff       	call   c0101216 <__panic>
    cprintf("assert((p2 = alloc_page()) != NULL)\n");
c010a212:	c7 04 24 ac 37 12 c0 	movl   $0xc01237ac,(%esp)
c010a219:	e8 d5 61 ff ff       	call   c01003f3 <cprintf>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c010a21e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a221:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010a224:	74 10                	je     c010a236 <firstfit_user_check+0x100>
c010a226:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a229:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010a22c:	74 08                	je     c010a236 <firstfit_user_check+0x100>
c010a22e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a231:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010a234:	75 24                	jne    c010a25a <firstfit_user_check+0x124>
c010a236:	c7 44 24 0c b8 34 12 	movl   $0xc01234b8,0xc(%esp)
c010a23d:	c0 
c010a23e:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010a245:	c0 
c010a246:	c7 44 24 04 49 01 00 	movl   $0x149,0x4(%esp)
c010a24d:	00 
c010a24e:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010a255:	e8 bc 6f ff ff       	call   c0101216 <__panic>
    cprintf("assert(p0 != p1 && p0 != p2 && p1 != p2)\n");
c010a25a:	c7 04 24 d4 37 12 c0 	movl   $0xc01237d4,(%esp)
c010a261:	e8 8d 61 ff ff       	call   c01003f3 <cprintf>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c010a266:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a269:	89 04 24             	mov    %eax,(%esp)
c010a26c:	e8 e4 ec ff ff       	call   c0108f55 <page_ref>
c010a271:	85 c0                	test   %eax,%eax
c010a273:	75 1e                	jne    c010a293 <firstfit_user_check+0x15d>
c010a275:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a278:	89 04 24             	mov    %eax,(%esp)
c010a27b:	e8 d5 ec ff ff       	call   c0108f55 <page_ref>
c010a280:	85 c0                	test   %eax,%eax
c010a282:	75 0f                	jne    c010a293 <firstfit_user_check+0x15d>
c010a284:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a287:	89 04 24             	mov    %eax,(%esp)
c010a28a:	e8 c6 ec ff ff       	call   c0108f55 <page_ref>
c010a28f:	85 c0                	test   %eax,%eax
c010a291:	74 24                	je     c010a2b7 <firstfit_user_check+0x181>
c010a293:	c7 44 24 0c dc 34 12 	movl   $0xc01234dc,0xc(%esp)
c010a29a:	c0 
c010a29b:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010a2a2:	c0 
c010a2a3:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c010a2aa:	00 
c010a2ab:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010a2b2:	e8 5f 6f ff ff       	call   c0101216 <__panic>
    cprintf("assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0)\n");
c010a2b7:	c7 04 24 00 38 12 c0 	movl   $0xc0123800,(%esp)
c010a2be:	e8 30 61 ff ff       	call   c01003f3 <cprintf>


    assert(page2pa(p0) < npage * PGSIZE);
c010a2c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2c6:	89 04 24             	mov    %eax,(%esp)
c010a2c9:	e8 71 ec ff ff       	call   c0108f3f <page2pa>
c010a2ce:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c010a2d4:	c1 e2 0c             	shl    $0xc,%edx
c010a2d7:	39 d0                	cmp    %edx,%eax
c010a2d9:	72 24                	jb     c010a2ff <firstfit_user_check+0x1c9>
c010a2db:	c7 44 24 0c 18 35 12 	movl   $0xc0123518,0xc(%esp)
c010a2e2:	c0 
c010a2e3:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010a2ea:	c0 
c010a2eb:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c010a2f2:	00 
c010a2f3:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010a2fa:	e8 17 6f ff ff       	call   c0101216 <__panic>
    cprintf("assert(page2pa(p0) < npage * PGSIZE)\n");
c010a2ff:	c7 04 24 48 38 12 c0 	movl   $0xc0123848,(%esp)
c010a306:	e8 e8 60 ff ff       	call   c01003f3 <cprintf>
    assert(page2pa(p1) < npage * PGSIZE);
c010a30b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a30e:	89 04 24             	mov    %eax,(%esp)
c010a311:	e8 29 ec ff ff       	call   c0108f3f <page2pa>
c010a316:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c010a31c:	c1 e2 0c             	shl    $0xc,%edx
c010a31f:	39 d0                	cmp    %edx,%eax
c010a321:	72 24                	jb     c010a347 <firstfit_user_check+0x211>
c010a323:	c7 44 24 0c 35 35 12 	movl   $0xc0123535,0xc(%esp)
c010a32a:	c0 
c010a32b:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010a332:	c0 
c010a333:	c7 44 24 04 51 01 00 	movl   $0x151,0x4(%esp)
c010a33a:	00 
c010a33b:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010a342:	e8 cf 6e ff ff       	call   c0101216 <__panic>
    cprintf("assert(page2pa(p01) < npage * PGSIZE)\n");
c010a347:	c7 04 24 70 38 12 c0 	movl   $0xc0123870,(%esp)
c010a34e:	e8 a0 60 ff ff       	call   c01003f3 <cprintf>
    assert(page2pa(p2) < npage * PGSIZE);
c010a353:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a356:	89 04 24             	mov    %eax,(%esp)
c010a359:	e8 e1 eb ff ff       	call   c0108f3f <page2pa>
c010a35e:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c010a364:	c1 e2 0c             	shl    $0xc,%edx
c010a367:	39 d0                	cmp    %edx,%eax
c010a369:	72 24                	jb     c010a38f <firstfit_user_check+0x259>
c010a36b:	c7 44 24 0c 52 35 12 	movl   $0xc0123552,0xc(%esp)
c010a372:	c0 
c010a373:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010a37a:	c0 
c010a37b:	c7 44 24 04 53 01 00 	movl   $0x153,0x4(%esp)
c010a382:	00 
c010a383:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010a38a:	e8 87 6e ff ff       	call   c0101216 <__panic>
    cprintf("assert(page2pa(p2) < npage * PGSIZE)\n");
c010a38f:	c7 04 24 98 38 12 c0 	movl   $0xc0123898,(%esp)
c010a396:	e8 58 60 ff ff       	call   c01003f3 <cprintf>

    list_entry_t free_list_store = free_list;
c010a39b:	a1 54 11 17 c0       	mov    0xc0171154,%eax
c010a3a0:	8b 15 58 11 17 c0    	mov    0xc0171158,%edx
c010a3a6:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010a3a9:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010a3ac:	c7 45 e4 54 11 17 c0 	movl   $0xc0171154,-0x1c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010a3b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a3b6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a3b9:	89 50 04             	mov    %edx,0x4(%eax)
c010a3bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a3bf:	8b 50 04             	mov    0x4(%eax),%edx
c010a3c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a3c5:	89 10                	mov    %edx,(%eax)
c010a3c7:	c7 45 e0 54 11 17 c0 	movl   $0xc0171154,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a3ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a3d1:	8b 40 04             	mov    0x4(%eax),%eax
c010a3d4:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010a3d7:	0f 94 c0             	sete   %al
c010a3da:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c010a3dd:	85 c0                	test   %eax,%eax
c010a3df:	75 24                	jne    c010a405 <firstfit_user_check+0x2cf>
c010a3e1:	c7 44 24 0c 6f 35 12 	movl   $0xc012356f,0xc(%esp)
c010a3e8:	c0 
c010a3e9:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010a3f0:	c0 
c010a3f1:	c7 44 24 04 58 01 00 	movl   $0x158,0x4(%esp)
c010a3f8:	00 
c010a3f9:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010a400:	e8 11 6e ff ff       	call   c0101216 <__panic>

    unsigned int nr_free_store = nr_free;
c010a405:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010a40a:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c010a40d:	c7 05 5c 11 17 c0 00 	movl   $0x0,0xc017115c
c010a414:	00 00 00 
    cprintf("assert(alloc_page() != NULL) because of swap out! \n");
c010a417:	c7 04 24 c0 38 12 c0 	movl   $0xc01238c0,(%esp)
c010a41e:	e8 d0 5f ff ff       	call   c01003f3 <cprintf>

    free_page(p0);
c010a423:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010a42a:	00 
c010a42b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a42e:	89 04 24             	mov    %eax,(%esp)
c010a431:	e8 92 21 00 00       	call   c010c5c8 <free_pages>
    cprintf("free_page(p0)\n");
c010a436:	c7 04 24 f4 38 12 c0 	movl   $0xc01238f4,(%esp)
c010a43d:	e8 b1 5f ff ff       	call   c01003f3 <cprintf>
    free_page(p1);
c010a442:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010a449:	00 
c010a44a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a44d:	89 04 24             	mov    %eax,(%esp)
c010a450:	e8 73 21 00 00       	call   c010c5c8 <free_pages>
    cprintf("free_page(p1)\n");
c010a455:	c7 04 24 03 39 12 c0 	movl   $0xc0123903,(%esp)
c010a45c:	e8 92 5f ff ff       	call   c01003f3 <cprintf>
    free_page(p2);
c010a461:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010a468:	00 
c010a469:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a46c:	89 04 24             	mov    %eax,(%esp)
c010a46f:	e8 54 21 00 00       	call   c010c5c8 <free_pages>
    cprintf("free_page(p2)\n");
c010a474:	c7 04 24 12 39 12 c0 	movl   $0xc0123912,(%esp)
c010a47b:	e8 73 5f ff ff       	call   c01003f3 <cprintf>
    assert(nr_free == 3);
c010a480:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010a485:	83 f8 03             	cmp    $0x3,%eax
c010a488:	74 24                	je     c010a4ae <firstfit_user_check+0x378>
c010a48a:	c7 44 24 0c 9b 35 12 	movl   $0xc012359b,0xc(%esp)
c010a491:	c0 
c010a492:	c7 44 24 08 e6 33 12 	movl   $0xc01233e6,0x8(%esp)
c010a499:	c0 
c010a49a:	c7 44 24 04 64 01 00 	movl   $0x164,0x4(%esp)
c010a4a1:	00 
c010a4a2:	c7 04 24 fb 33 12 c0 	movl   $0xc01233fb,(%esp)
c010a4a9:	e8 68 6d ff ff       	call   c0101216 <__panic>
    cprintf("assert(nr_free == 3)\n");
c010a4ae:	c7 04 24 21 39 12 c0 	movl   $0xc0123921,(%esp)
c010a4b5:	e8 39 5f ff ff       	call   c01003f3 <cprintf>

}
c010a4ba:	c9                   	leave  
c010a4bb:	c3                   	ret    

c010a4bc <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010a4bc:	55                   	push   %ebp
c010a4bd:	89 e5                	mov    %esp,%ebp
c010a4bf:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010a4c2:	9c                   	pushf  
c010a4c3:	58                   	pop    %eax
c010a4c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010a4c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010a4ca:	25 00 02 00 00       	and    $0x200,%eax
c010a4cf:	85 c0                	test   %eax,%eax
c010a4d1:	74 0c                	je     c010a4df <__intr_save+0x23>
        intr_disable();
c010a4d3:	e8 c9 7f ff ff       	call   c01024a1 <intr_disable>
        return 1;
c010a4d8:	b8 01 00 00 00       	mov    $0x1,%eax
c010a4dd:	eb 05                	jmp    c010a4e4 <__intr_save+0x28>
    }
    return 0;
c010a4df:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a4e4:	c9                   	leave  
c010a4e5:	c3                   	ret    

c010a4e6 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010a4e6:	55                   	push   %ebp
c010a4e7:	89 e5                	mov    %esp,%ebp
c010a4e9:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010a4ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a4f0:	74 05                	je     c010a4f7 <__intr_restore+0x11>
        intr_enable();
c010a4f2:	e8 a4 7f ff ff       	call   c010249b <intr_enable>
    }
}
c010a4f7:	c9                   	leave  
c010a4f8:	c3                   	ret    

c010a4f9 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a4f9:	55                   	push   %ebp
c010a4fa:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a4fc:	8b 55 08             	mov    0x8(%ebp),%edx
c010a4ff:	a1 6c 11 17 c0       	mov    0xc017116c,%eax
c010a504:	29 c2                	sub    %eax,%edx
c010a506:	89 d0                	mov    %edx,%eax
c010a508:	c1 f8 02             	sar    $0x2,%eax
c010a50b:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010a511:	5d                   	pop    %ebp
c010a512:	c3                   	ret    

c010a513 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a513:	55                   	push   %ebp
c010a514:	89 e5                	mov    %esp,%ebp
c010a516:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a519:	8b 45 08             	mov    0x8(%ebp),%eax
c010a51c:	89 04 24             	mov    %eax,(%esp)
c010a51f:	e8 d5 ff ff ff       	call   c010a4f9 <page2ppn>
c010a524:	c1 e0 0c             	shl    $0xc,%eax
}
c010a527:	c9                   	leave  
c010a528:	c3                   	ret    

c010a529 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010a529:	55                   	push   %ebp
c010a52a:	89 e5                	mov    %esp,%ebp
c010a52c:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010a52f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a532:	c1 e8 0c             	shr    $0xc,%eax
c010a535:	89 c2                	mov    %eax,%edx
c010a537:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c010a53c:	39 c2                	cmp    %eax,%edx
c010a53e:	72 1c                	jb     c010a55c <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010a540:	c7 44 24 08 80 39 12 	movl   $0xc0123980,0x8(%esp)
c010a547:	c0 
c010a548:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c010a54f:	00 
c010a550:	c7 04 24 9f 39 12 c0 	movl   $0xc012399f,(%esp)
c010a557:	e8 ba 6c ff ff       	call   c0101216 <__panic>
    }
    return &pages[PPN(pa)];
c010a55c:	8b 0d 6c 11 17 c0    	mov    0xc017116c,%ecx
c010a562:	8b 45 08             	mov    0x8(%ebp),%eax
c010a565:	c1 e8 0c             	shr    $0xc,%eax
c010a568:	89 c2                	mov    %eax,%edx
c010a56a:	89 d0                	mov    %edx,%eax
c010a56c:	c1 e0 03             	shl    $0x3,%eax
c010a56f:	01 d0                	add    %edx,%eax
c010a571:	c1 e0 02             	shl    $0x2,%eax
c010a574:	01 c8                	add    %ecx,%eax
}
c010a576:	c9                   	leave  
c010a577:	c3                   	ret    

c010a578 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010a578:	55                   	push   %ebp
c010a579:	89 e5                	mov    %esp,%ebp
c010a57b:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a57e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a581:	89 04 24             	mov    %eax,(%esp)
c010a584:	e8 8a ff ff ff       	call   c010a513 <page2pa>
c010a589:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a58c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a58f:	c1 e8 0c             	shr    $0xc,%eax
c010a592:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a595:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c010a59a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a59d:	72 23                	jb     c010a5c2 <page2kva+0x4a>
c010a59f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5a2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a5a6:	c7 44 24 08 b0 39 12 	movl   $0xc01239b0,0x8(%esp)
c010a5ad:	c0 
c010a5ae:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010a5b5:	00 
c010a5b6:	c7 04 24 9f 39 12 c0 	movl   $0xc012399f,(%esp)
c010a5bd:	e8 54 6c ff ff       	call   c0101216 <__panic>
c010a5c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5c5:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a5ca:	c9                   	leave  
c010a5cb:	c3                   	ret    

c010a5cc <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010a5cc:	55                   	push   %ebp
c010a5cd:	89 e5                	mov    %esp,%ebp
c010a5cf:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010a5d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a5d8:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010a5df:	77 23                	ja     c010a604 <kva2page+0x38>
c010a5e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5e4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a5e8:	c7 44 24 08 d4 39 12 	movl   $0xc01239d4,0x8(%esp)
c010a5ef:	c0 
c010a5f0:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c010a5f7:	00 
c010a5f8:	c7 04 24 9f 39 12 c0 	movl   $0xc012399f,(%esp)
c010a5ff:	e8 12 6c ff ff       	call   c0101216 <__panic>
c010a604:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a607:	05 00 00 00 40       	add    $0x40000000,%eax
c010a60c:	89 04 24             	mov    %eax,(%esp)
c010a60f:	e8 15 ff ff ff       	call   c010a529 <pa2page>
}
c010a614:	c9                   	leave  
c010a615:	c3                   	ret    

c010a616 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c010a616:	55                   	push   %ebp
c010a617:	89 e5                	mov    %esp,%ebp
c010a619:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c010a61c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a61f:	ba 01 00 00 00       	mov    $0x1,%edx
c010a624:	89 c1                	mov    %eax,%ecx
c010a626:	d3 e2                	shl    %cl,%edx
c010a628:	89 d0                	mov    %edx,%eax
c010a62a:	89 04 24             	mov    %eax,(%esp)
c010a62d:	e8 2b 1f 00 00       	call   c010c55d <alloc_pages>
c010a632:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c010a635:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a639:	75 07                	jne    c010a642 <__slob_get_free_pages+0x2c>
    return NULL;
c010a63b:	b8 00 00 00 00       	mov    $0x0,%eax
c010a640:	eb 0b                	jmp    c010a64d <__slob_get_free_pages+0x37>
  return page2kva(page);
c010a642:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a645:	89 04 24             	mov    %eax,(%esp)
c010a648:	e8 2b ff ff ff       	call   c010a578 <page2kva>
}
c010a64d:	c9                   	leave  
c010a64e:	c3                   	ret    

c010a64f <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c010a64f:	55                   	push   %ebp
c010a650:	89 e5                	mov    %esp,%ebp
c010a652:	53                   	push   %ebx
c010a653:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c010a656:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a659:	ba 01 00 00 00       	mov    $0x1,%edx
c010a65e:	89 c1                	mov    %eax,%ecx
c010a660:	d3 e2                	shl    %cl,%edx
c010a662:	89 d0                	mov    %edx,%eax
c010a664:	89 c3                	mov    %eax,%ebx
c010a666:	8b 45 08             	mov    0x8(%ebp),%eax
c010a669:	89 04 24             	mov    %eax,(%esp)
c010a66c:	e8 5b ff ff ff       	call   c010a5cc <kva2page>
c010a671:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c010a675:	89 04 24             	mov    %eax,(%esp)
c010a678:	e8 4b 1f 00 00       	call   c010c5c8 <free_pages>
}
c010a67d:	83 c4 14             	add    $0x14,%esp
c010a680:	5b                   	pop    %ebx
c010a681:	5d                   	pop    %ebp
c010a682:	c3                   	ret    

c010a683 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c010a683:	55                   	push   %ebp
c010a684:	89 e5                	mov    %esp,%ebp
c010a686:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c010a689:	8b 45 08             	mov    0x8(%ebp),%eax
c010a68c:	83 c0 08             	add    $0x8,%eax
c010a68f:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010a694:	76 24                	jbe    c010a6ba <slob_alloc+0x37>
c010a696:	c7 44 24 0c f8 39 12 	movl   $0xc01239f8,0xc(%esp)
c010a69d:	c0 
c010a69e:	c7 44 24 08 17 3a 12 	movl   $0xc0123a17,0x8(%esp)
c010a6a5:	c0 
c010a6a6:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c010a6ad:	00 
c010a6ae:	c7 04 24 2c 3a 12 c0 	movl   $0xc0123a2c,(%esp)
c010a6b5:	e8 5c 6b ff ff       	call   c0101216 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c010a6ba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c010a6c1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010a6c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6cb:	83 c0 07             	add    $0x7,%eax
c010a6ce:	c1 e8 03             	shr    $0x3,%eax
c010a6d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c010a6d4:	e8 e3 fd ff ff       	call   c010a4bc <__intr_save>
c010a6d9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c010a6dc:	a1 e8 a9 16 c0       	mov    0xc016a9e8,%eax
c010a6e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c010a6e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6e7:	8b 40 04             	mov    0x4(%eax),%eax
c010a6ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c010a6ed:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a6f1:	74 25                	je     c010a718 <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c010a6f3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a6f6:	8b 45 10             	mov    0x10(%ebp),%eax
c010a6f9:	01 d0                	add    %edx,%eax
c010a6fb:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a6fe:	8b 45 10             	mov    0x10(%ebp),%eax
c010a701:	f7 d8                	neg    %eax
c010a703:	21 d0                	and    %edx,%eax
c010a705:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c010a708:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a70b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a70e:	29 c2                	sub    %eax,%edx
c010a710:	89 d0                	mov    %edx,%eax
c010a712:	c1 f8 03             	sar    $0x3,%eax
c010a715:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c010a718:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a71b:	8b 00                	mov    (%eax),%eax
c010a71d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a720:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010a723:	01 ca                	add    %ecx,%edx
c010a725:	39 d0                	cmp    %edx,%eax
c010a727:	0f 8c aa 00 00 00    	jl     c010a7d7 <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c010a72d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010a731:	74 38                	je     c010a76b <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c010a733:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a736:	8b 00                	mov    (%eax),%eax
c010a738:	2b 45 e8             	sub    -0x18(%ebp),%eax
c010a73b:	89 c2                	mov    %eax,%edx
c010a73d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a740:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c010a742:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a745:	8b 50 04             	mov    0x4(%eax),%edx
c010a748:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a74b:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c010a74e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a751:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a754:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c010a757:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a75a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a75d:	89 10                	mov    %edx,(%eax)
				prev = cur;
c010a75f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a762:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c010a765:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a768:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c010a76b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a76e:	8b 00                	mov    (%eax),%eax
c010a770:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010a773:	75 0e                	jne    c010a783 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c010a775:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a778:	8b 50 04             	mov    0x4(%eax),%edx
c010a77b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a77e:	89 50 04             	mov    %edx,0x4(%eax)
c010a781:	eb 3c                	jmp    c010a7bf <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c010a783:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a786:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010a78d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a790:	01 c2                	add    %eax,%edx
c010a792:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a795:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c010a798:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a79b:	8b 40 04             	mov    0x4(%eax),%eax
c010a79e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a7a1:	8b 12                	mov    (%edx),%edx
c010a7a3:	2b 55 e0             	sub    -0x20(%ebp),%edx
c010a7a6:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c010a7a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7ab:	8b 40 04             	mov    0x4(%eax),%eax
c010a7ae:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a7b1:	8b 52 04             	mov    0x4(%edx),%edx
c010a7b4:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c010a7b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a7ba:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a7bd:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c010a7bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7c2:	a3 e8 a9 16 c0       	mov    %eax,0xc016a9e8
			spin_unlock_irqrestore(&slob_lock, flags);
c010a7c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a7ca:	89 04 24             	mov    %eax,(%esp)
c010a7cd:	e8 14 fd ff ff       	call   c010a4e6 <__intr_restore>
			return cur;
c010a7d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a7d5:	eb 7f                	jmp    c010a856 <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c010a7d7:	a1 e8 a9 16 c0       	mov    0xc016a9e8,%eax
c010a7dc:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a7df:	75 61                	jne    c010a842 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c010a7e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a7e4:	89 04 24             	mov    %eax,(%esp)
c010a7e7:	e8 fa fc ff ff       	call   c010a4e6 <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c010a7ec:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c010a7f3:	75 07                	jne    c010a7fc <slob_alloc+0x179>
				return 0;
c010a7f5:	b8 00 00 00 00       	mov    $0x0,%eax
c010a7fa:	eb 5a                	jmp    c010a856 <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c010a7fc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a803:	00 
c010a804:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a807:	89 04 24             	mov    %eax,(%esp)
c010a80a:	e8 07 fe ff ff       	call   c010a616 <__slob_get_free_pages>
c010a80f:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c010a812:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a816:	75 07                	jne    c010a81f <slob_alloc+0x19c>
				return 0;
c010a818:	b8 00 00 00 00       	mov    $0x0,%eax
c010a81d:	eb 37                	jmp    c010a856 <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c010a81f:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010a826:	00 
c010a827:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a82a:	89 04 24             	mov    %eax,(%esp)
c010a82d:	e8 26 00 00 00       	call   c010a858 <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c010a832:	e8 85 fc ff ff       	call   c010a4bc <__intr_save>
c010a837:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c010a83a:	a1 e8 a9 16 c0       	mov    0xc016a9e8,%eax
c010a83f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c010a842:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a845:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a848:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a84b:	8b 40 04             	mov    0x4(%eax),%eax
c010a84e:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c010a851:	e9 97 fe ff ff       	jmp    c010a6ed <slob_alloc+0x6a>
}
c010a856:	c9                   	leave  
c010a857:	c3                   	ret    

c010a858 <slob_free>:

static void slob_free(void *block, int size)
{
c010a858:	55                   	push   %ebp
c010a859:	89 e5                	mov    %esp,%ebp
c010a85b:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c010a85e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a861:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c010a864:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a868:	75 05                	jne    c010a86f <slob_free+0x17>
		return;
c010a86a:	e9 ff 00 00 00       	jmp    c010a96e <slob_free+0x116>

	if (size)
c010a86f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a873:	74 10                	je     c010a885 <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c010a875:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a878:	83 c0 07             	add    $0x7,%eax
c010a87b:	c1 e8 03             	shr    $0x3,%eax
c010a87e:	89 c2                	mov    %eax,%edx
c010a880:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a883:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c010a885:	e8 32 fc ff ff       	call   c010a4bc <__intr_save>
c010a88a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c010a88d:	a1 e8 a9 16 c0       	mov    0xc016a9e8,%eax
c010a892:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a895:	eb 27                	jmp    c010a8be <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c010a897:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a89a:	8b 40 04             	mov    0x4(%eax),%eax
c010a89d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010a8a0:	77 13                	ja     c010a8b5 <slob_free+0x5d>
c010a8a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8a5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010a8a8:	77 27                	ja     c010a8d1 <slob_free+0x79>
c010a8aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8ad:	8b 40 04             	mov    0x4(%eax),%eax
c010a8b0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010a8b3:	77 1c                	ja     c010a8d1 <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c010a8b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8b8:	8b 40 04             	mov    0x4(%eax),%eax
c010a8bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a8be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8c1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010a8c4:	76 d1                	jbe    c010a897 <slob_free+0x3f>
c010a8c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8c9:	8b 40 04             	mov    0x4(%eax),%eax
c010a8cc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010a8cf:	76 c6                	jbe    c010a897 <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c010a8d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8d4:	8b 00                	mov    (%eax),%eax
c010a8d6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010a8dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8e0:	01 c2                	add    %eax,%edx
c010a8e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8e5:	8b 40 04             	mov    0x4(%eax),%eax
c010a8e8:	39 c2                	cmp    %eax,%edx
c010a8ea:	75 25                	jne    c010a911 <slob_free+0xb9>
		b->units += cur->next->units;
c010a8ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8ef:	8b 10                	mov    (%eax),%edx
c010a8f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8f4:	8b 40 04             	mov    0x4(%eax),%eax
c010a8f7:	8b 00                	mov    (%eax),%eax
c010a8f9:	01 c2                	add    %eax,%edx
c010a8fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8fe:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c010a900:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a903:	8b 40 04             	mov    0x4(%eax),%eax
c010a906:	8b 50 04             	mov    0x4(%eax),%edx
c010a909:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a90c:	89 50 04             	mov    %edx,0x4(%eax)
c010a90f:	eb 0c                	jmp    c010a91d <slob_free+0xc5>
	} else
		b->next = cur->next;
c010a911:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a914:	8b 50 04             	mov    0x4(%eax),%edx
c010a917:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a91a:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c010a91d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a920:	8b 00                	mov    (%eax),%eax
c010a922:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010a929:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a92c:	01 d0                	add    %edx,%eax
c010a92e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010a931:	75 1f                	jne    c010a952 <slob_free+0xfa>
		cur->units += b->units;
c010a933:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a936:	8b 10                	mov    (%eax),%edx
c010a938:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a93b:	8b 00                	mov    (%eax),%eax
c010a93d:	01 c2                	add    %eax,%edx
c010a93f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a942:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c010a944:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a947:	8b 50 04             	mov    0x4(%eax),%edx
c010a94a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a94d:	89 50 04             	mov    %edx,0x4(%eax)
c010a950:	eb 09                	jmp    c010a95b <slob_free+0x103>
	} else
		cur->next = b;
c010a952:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a955:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a958:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c010a95b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a95e:	a3 e8 a9 16 c0       	mov    %eax,0xc016a9e8

	spin_unlock_irqrestore(&slob_lock, flags);
c010a963:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a966:	89 04 24             	mov    %eax,(%esp)
c010a969:	e8 78 fb ff ff       	call   c010a4e6 <__intr_restore>
}
c010a96e:	c9                   	leave  
c010a96f:	c3                   	ret    

c010a970 <check_slab>:



void check_slab(void) {
c010a970:	55                   	push   %ebp
c010a971:	89 e5                	mov    %esp,%ebp
  //cprintf("check_slab() success\n");
}
c010a973:	5d                   	pop    %ebp
c010a974:	c3                   	ret    

c010a975 <slab_init>:

void
slab_init(void) {
c010a975:	55                   	push   %ebp
c010a976:	89 e5                	mov    %esp,%ebp
  //cprintf("use SLOB allocator\n");
  check_slab();
c010a978:	e8 f3 ff ff ff       	call   c010a970 <check_slab>
}
c010a97d:	5d                   	pop    %ebp
c010a97e:	c3                   	ret    

c010a97f <kmalloc_init>:

inline void 
kmalloc_init(void) {
c010a97f:	55                   	push   %ebp
c010a980:	89 e5                	mov    %esp,%ebp
    slab_init();
c010a982:	e8 ee ff ff ff       	call   c010a975 <slab_init>
    //cprintf("kmalloc_init() succeeded!\n");
}
c010a987:	5d                   	pop    %ebp
c010a988:	c3                   	ret    

c010a989 <slab_allocated>:

size_t
slab_allocated(void) {
c010a989:	55                   	push   %ebp
c010a98a:	89 e5                	mov    %esp,%ebp
  return 0;
c010a98c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a991:	5d                   	pop    %ebp
c010a992:	c3                   	ret    

c010a993 <kallocated>:

size_t
kallocated(void) {
c010a993:	55                   	push   %ebp
c010a994:	89 e5                	mov    %esp,%ebp
   return slab_allocated();
c010a996:	e8 ee ff ff ff       	call   c010a989 <slab_allocated>
}
c010a99b:	5d                   	pop    %ebp
c010a99c:	c3                   	ret    

c010a99d <find_order>:

static int find_order(int size)
{
c010a99d:	55                   	push   %ebp
c010a99e:	89 e5                	mov    %esp,%ebp
c010a9a0:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c010a9a3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c010a9aa:	eb 07                	jmp    c010a9b3 <find_order+0x16>
		order++;
c010a9ac:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c010a9b0:	d1 7d 08             	sarl   0x8(%ebp)
c010a9b3:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c010a9ba:	7f f0                	jg     c010a9ac <find_order+0xf>
		order++;
	return order;
c010a9bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010a9bf:	c9                   	leave  
c010a9c0:	c3                   	ret    

c010a9c1 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c010a9c1:	55                   	push   %ebp
c010a9c2:	89 e5                	mov    %esp,%ebp
c010a9c4:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c010a9c7:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c010a9ce:	77 38                	ja     c010aa08 <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c010a9d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9d3:	8d 50 08             	lea    0x8(%eax),%edx
c010a9d6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010a9dd:	00 
c010a9de:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a9e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a9e5:	89 14 24             	mov    %edx,(%esp)
c010a9e8:	e8 96 fc ff ff       	call   c010a683 <slob_alloc>
c010a9ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c010a9f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a9f4:	74 08                	je     c010a9fe <__kmalloc+0x3d>
c010a9f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9f9:	83 c0 08             	add    $0x8,%eax
c010a9fc:	eb 05                	jmp    c010aa03 <__kmalloc+0x42>
c010a9fe:	b8 00 00 00 00       	mov    $0x0,%eax
c010aa03:	e9 a6 00 00 00       	jmp    c010aaae <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c010aa08:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010aa0f:	00 
c010aa10:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa13:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa17:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c010aa1e:	e8 60 fc ff ff       	call   c010a683 <slob_alloc>
c010aa23:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c010aa26:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010aa2a:	75 07                	jne    c010aa33 <__kmalloc+0x72>
		return 0;
c010aa2c:	b8 00 00 00 00       	mov    $0x0,%eax
c010aa31:	eb 7b                	jmp    c010aaae <__kmalloc+0xed>

	bb->order = find_order(size);
c010aa33:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa36:	89 04 24             	mov    %eax,(%esp)
c010aa39:	e8 5f ff ff ff       	call   c010a99d <find_order>
c010aa3e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010aa41:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c010aa43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa46:	8b 00                	mov    (%eax),%eax
c010aa48:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa4c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa4f:	89 04 24             	mov    %eax,(%esp)
c010aa52:	e8 bf fb ff ff       	call   c010a616 <__slob_get_free_pages>
c010aa57:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010aa5a:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c010aa5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa60:	8b 40 04             	mov    0x4(%eax),%eax
c010aa63:	85 c0                	test   %eax,%eax
c010aa65:	74 2f                	je     c010aa96 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c010aa67:	e8 50 fa ff ff       	call   c010a4bc <__intr_save>
c010aa6c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c010aa6f:	8b 15 a0 df 16 c0    	mov    0xc016dfa0,%edx
c010aa75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa78:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c010aa7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa7e:	a3 a0 df 16 c0       	mov    %eax,0xc016dfa0
		spin_unlock_irqrestore(&block_lock, flags);
c010aa83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa86:	89 04 24             	mov    %eax,(%esp)
c010aa89:	e8 58 fa ff ff       	call   c010a4e6 <__intr_restore>
		return bb->pages;
c010aa8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa91:	8b 40 04             	mov    0x4(%eax),%eax
c010aa94:	eb 18                	jmp    c010aaae <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c010aa96:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c010aa9d:	00 
c010aa9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aaa1:	89 04 24             	mov    %eax,(%esp)
c010aaa4:	e8 af fd ff ff       	call   c010a858 <slob_free>
	return 0;
c010aaa9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010aaae:	c9                   	leave  
c010aaaf:	c3                   	ret    

c010aab0 <kmalloc>:

void *
kmalloc(size_t size)
{
c010aab0:	55                   	push   %ebp
c010aab1:	89 e5                	mov    %esp,%ebp
c010aab3:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c010aab6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010aabd:	00 
c010aabe:	8b 45 08             	mov    0x8(%ebp),%eax
c010aac1:	89 04 24             	mov    %eax,(%esp)
c010aac4:	e8 f8 fe ff ff       	call   c010a9c1 <__kmalloc>
}
c010aac9:	c9                   	leave  
c010aaca:	c3                   	ret    

c010aacb <kfree>:


void kfree(void *block)
{
c010aacb:	55                   	push   %ebp
c010aacc:	89 e5                	mov    %esp,%ebp
c010aace:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c010aad1:	c7 45 f0 a0 df 16 c0 	movl   $0xc016dfa0,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c010aad8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010aadc:	75 05                	jne    c010aae3 <kfree+0x18>
		return;
c010aade:	e9 a2 00 00 00       	jmp    c010ab85 <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c010aae3:	8b 45 08             	mov    0x8(%ebp),%eax
c010aae6:	25 ff 0f 00 00       	and    $0xfff,%eax
c010aaeb:	85 c0                	test   %eax,%eax
c010aaed:	75 7f                	jne    c010ab6e <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c010aaef:	e8 c8 f9 ff ff       	call   c010a4bc <__intr_save>
c010aaf4:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c010aaf7:	a1 a0 df 16 c0       	mov    0xc016dfa0,%eax
c010aafc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aaff:	eb 5c                	jmp    c010ab5d <kfree+0x92>
			if (bb->pages == block) {
c010ab01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab04:	8b 40 04             	mov    0x4(%eax),%eax
c010ab07:	3b 45 08             	cmp    0x8(%ebp),%eax
c010ab0a:	75 3f                	jne    c010ab4b <kfree+0x80>
				*last = bb->next;
c010ab0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab0f:	8b 50 08             	mov    0x8(%eax),%edx
c010ab12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab15:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c010ab17:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab1a:	89 04 24             	mov    %eax,(%esp)
c010ab1d:	e8 c4 f9 ff ff       	call   c010a4e6 <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c010ab22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab25:	8b 10                	mov    (%eax),%edx
c010ab27:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab2a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ab2e:	89 04 24             	mov    %eax,(%esp)
c010ab31:	e8 19 fb ff ff       	call   c010a64f <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c010ab36:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c010ab3d:	00 
c010ab3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab41:	89 04 24             	mov    %eax,(%esp)
c010ab44:	e8 0f fd ff ff       	call   c010a858 <slob_free>
				return;
c010ab49:	eb 3a                	jmp    c010ab85 <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c010ab4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab4e:	83 c0 08             	add    $0x8,%eax
c010ab51:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ab54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab57:	8b 40 08             	mov    0x8(%eax),%eax
c010ab5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ab5d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ab61:	75 9e                	jne    c010ab01 <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c010ab63:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab66:	89 04 24             	mov    %eax,(%esp)
c010ab69:	e8 78 f9 ff ff       	call   c010a4e6 <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c010ab6e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab71:	83 e8 08             	sub    $0x8,%eax
c010ab74:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ab7b:	00 
c010ab7c:	89 04 24             	mov    %eax,(%esp)
c010ab7f:	e8 d4 fc ff ff       	call   c010a858 <slob_free>
	return;
c010ab84:	90                   	nop
}
c010ab85:	c9                   	leave  
c010ab86:	c3                   	ret    

c010ab87 <ksize>:


unsigned int ksize(const void *block)
{
c010ab87:	55                   	push   %ebp
c010ab88:	89 e5                	mov    %esp,%ebp
c010ab8a:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c010ab8d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ab91:	75 07                	jne    c010ab9a <ksize+0x13>
		return 0;
c010ab93:	b8 00 00 00 00       	mov    $0x0,%eax
c010ab98:	eb 6b                	jmp    c010ac05 <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c010ab9a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab9d:	25 ff 0f 00 00       	and    $0xfff,%eax
c010aba2:	85 c0                	test   %eax,%eax
c010aba4:	75 54                	jne    c010abfa <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c010aba6:	e8 11 f9 ff ff       	call   c010a4bc <__intr_save>
c010abab:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c010abae:	a1 a0 df 16 c0       	mov    0xc016dfa0,%eax
c010abb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010abb6:	eb 31                	jmp    c010abe9 <ksize+0x62>
			if (bb->pages == block) {
c010abb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abbb:	8b 40 04             	mov    0x4(%eax),%eax
c010abbe:	3b 45 08             	cmp    0x8(%ebp),%eax
c010abc1:	75 1d                	jne    c010abe0 <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c010abc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010abc6:	89 04 24             	mov    %eax,(%esp)
c010abc9:	e8 18 f9 ff ff       	call   c010a4e6 <__intr_restore>
				return PAGE_SIZE << bb->order;
c010abce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abd1:	8b 00                	mov    (%eax),%eax
c010abd3:	ba 00 10 00 00       	mov    $0x1000,%edx
c010abd8:	89 c1                	mov    %eax,%ecx
c010abda:	d3 e2                	shl    %cl,%edx
c010abdc:	89 d0                	mov    %edx,%eax
c010abde:	eb 25                	jmp    c010ac05 <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c010abe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abe3:	8b 40 08             	mov    0x8(%eax),%eax
c010abe6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010abe9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010abed:	75 c9                	jne    c010abb8 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c010abef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010abf2:	89 04 24             	mov    %eax,(%esp)
c010abf5:	e8 ec f8 ff ff       	call   c010a4e6 <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c010abfa:	8b 45 08             	mov    0x8(%ebp),%eax
c010abfd:	83 e8 08             	sub    $0x8,%eax
c010ac00:	8b 00                	mov    (%eax),%eax
c010ac02:	c1 e0 03             	shl    $0x3,%eax
}
c010ac05:	c9                   	leave  
c010ac06:	c3                   	ret    

c010ac07 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010ac07:	55                   	push   %ebp
c010ac08:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010ac0a:	8b 55 08             	mov    0x8(%ebp),%edx
c010ac0d:	a1 6c 11 17 c0       	mov    0xc017116c,%eax
c010ac12:	29 c2                	sub    %eax,%edx
c010ac14:	89 d0                	mov    %edx,%eax
c010ac16:	c1 f8 02             	sar    $0x2,%eax
c010ac19:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010ac1f:	5d                   	pop    %ebp
c010ac20:	c3                   	ret    

c010ac21 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010ac21:	55                   	push   %ebp
c010ac22:	89 e5                	mov    %esp,%ebp
c010ac24:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010ac27:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac2a:	89 04 24             	mov    %eax,(%esp)
c010ac2d:	e8 d5 ff ff ff       	call   c010ac07 <page2ppn>
c010ac32:	c1 e0 0c             	shl    $0xc,%eax
}
c010ac35:	c9                   	leave  
c010ac36:	c3                   	ret    

c010ac37 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c010ac37:	55                   	push   %ebp
c010ac38:	89 e5                	mov    %esp,%ebp
    return page->ref;
c010ac3a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac3d:	8b 00                	mov    (%eax),%eax
}
c010ac3f:	5d                   	pop    %ebp
c010ac40:	c3                   	ret    

c010ac41 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c010ac41:	55                   	push   %ebp
c010ac42:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c010ac44:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac47:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ac4a:	89 10                	mov    %edx,(%eax)
}
c010ac4c:	5d                   	pop    %ebp
c010ac4d:	c3                   	ret    

c010ac4e <next_init>:

list_entry_t *Record;


static void
next_init(void) {
c010ac4e:	55                   	push   %ebp
c010ac4f:	89 e5                	mov    %esp,%ebp
c010ac51:	83 ec 10             	sub    $0x10,%esp
c010ac54:	c7 45 fc 54 11 17 c0 	movl   $0xc0171154,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010ac5b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ac5e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010ac61:	89 50 04             	mov    %edx,0x4(%eax)
c010ac64:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ac67:	8b 50 04             	mov    0x4(%eax),%edx
c010ac6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ac6d:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    Record = &free_list;
c010ac6f:	c7 05 60 11 17 c0 54 	movl   $0xc0171154,0xc0171160
c010ac76:	11 17 c0 
    nr_free = 0;
c010ac79:	c7 05 5c 11 17 c0 00 	movl   $0x0,0xc017115c
c010ac80:	00 00 00 
}
c010ac83:	c9                   	leave  
c010ac84:	c3                   	ret    

c010ac85 <next_init_memmap>:

static void
next_init_memmap(struct Page *base, size_t n) {
c010ac85:	55                   	push   %ebp
c010ac86:	89 e5                	mov    %esp,%ebp
c010ac88:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c010ac8b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ac8f:	75 24                	jne    c010acb5 <next_init_memmap+0x30>
c010ac91:	c7 44 24 0c 40 3a 12 	movl   $0xc0123a40,0xc(%esp)
c010ac98:	c0 
c010ac99:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010aca0:	c0 
c010aca1:	c7 44 24 04 17 00 00 	movl   $0x17,0x4(%esp)
c010aca8:	00 
c010aca9:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010acb0:	e8 61 65 ff ff       	call   c0101216 <__panic>
    struct Page *p = base;
c010acb5:	8b 45 08             	mov    0x8(%ebp),%eax
c010acb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c010acbb:	eb 7d                	jmp    c010ad3a <next_init_memmap+0xb5>
        assert(PageReserved(p));
c010acbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010acc0:	83 c0 04             	add    $0x4,%eax
c010acc3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010acca:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010accd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010acd0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010acd3:	0f a3 10             	bt     %edx,(%eax)
c010acd6:	19 c0                	sbb    %eax,%eax
c010acd8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c010acdb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010acdf:	0f 95 c0             	setne  %al
c010ace2:	0f b6 c0             	movzbl %al,%eax
c010ace5:	85 c0                	test   %eax,%eax
c010ace7:	75 24                	jne    c010ad0d <next_init_memmap+0x88>
c010ace9:	c7 44 24 0c 71 3a 12 	movl   $0xc0123a71,0xc(%esp)
c010acf0:	c0 
c010acf1:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010acf8:	c0 
c010acf9:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c010ad00:	00 
c010ad01:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010ad08:	e8 09 65 ff ff       	call   c0101216 <__panic>
        p->flags = p->property = 0;
c010ad0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad10:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c010ad17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad1a:	8b 50 08             	mov    0x8(%eax),%edx
c010ad1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad20:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c010ad23:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ad2a:	00 
c010ad2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad2e:	89 04 24             	mov    %eax,(%esp)
c010ad31:	e8 0b ff ff ff       	call   c010ac41 <set_page_ref>

static void
next_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c010ad36:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c010ad3a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ad3d:	89 d0                	mov    %edx,%eax
c010ad3f:	c1 e0 03             	shl    $0x3,%eax
c010ad42:	01 d0                	add    %edx,%eax
c010ad44:	c1 e0 02             	shl    $0x2,%eax
c010ad47:	89 c2                	mov    %eax,%edx
c010ad49:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad4c:	01 d0                	add    %edx,%eax
c010ad4e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010ad51:	0f 85 66 ff ff ff    	jne    c010acbd <next_init_memmap+0x38>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c010ad57:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad5a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ad5d:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c010ad60:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad63:	83 c0 04             	add    $0x4,%eax
c010ad66:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c010ad6d:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010ad70:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ad73:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ad76:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c010ad79:	8b 15 5c 11 17 c0    	mov    0xc017115c,%edx
c010ad7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ad82:	01 d0                	add    %edx,%eax
c010ad84:	a3 5c 11 17 c0       	mov    %eax,0xc017115c
    list_add_before(&free_list, &(base->page_link));
c010ad89:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad8c:	83 c0 10             	add    $0x10,%eax
c010ad8f:	c7 45 dc 54 11 17 c0 	movl   $0xc0171154,-0x24(%ebp)
c010ad96:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010ad99:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ad9c:	8b 00                	mov    (%eax),%eax
c010ad9e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ada1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010ada4:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010ada7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010adaa:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010adad:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010adb0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010adb3:	89 10                	mov    %edx,(%eax)
c010adb5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010adb8:	8b 10                	mov    (%eax),%edx
c010adba:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010adbd:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010adc0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010adc3:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010adc6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010adc9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010adcc:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010adcf:	89 10                	mov    %edx,(%eax)
}
c010add1:	c9                   	leave  
c010add2:	c3                   	ret    

c010add3 <next_alloc_pages>:
/*
    循环首次适应分配算法
*/

static struct Page *next_alloc_pages(size_t n)
{
c010add3:	55                   	push   %ebp
c010add4:	89 e5                	mov    %esp,%ebp
c010add6:	83 ec 78             	sub    $0x78,%esp
    assert(n > 0);
c010add9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010addd:	75 24                	jne    c010ae03 <next_alloc_pages+0x30>
c010addf:	c7 44 24 0c 40 3a 12 	movl   $0xc0123a40,0xc(%esp)
c010ade6:	c0 
c010ade7:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010adee:	c0 
c010adef:	c7 44 24 04 76 00 00 	movl   $0x76,0x4(%esp)
c010adf6:	00 
c010adf7:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010adfe:	e8 13 64 ff ff       	call   c0101216 <__panic>
    if(n > nr_free) //如果需要分配的页少于空闲页的总数，返回NULL
c010ae03:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010ae08:	3b 45 08             	cmp    0x8(%ebp),%eax
c010ae0b:	73 0a                	jae    c010ae17 <next_alloc_pages+0x44>
    {
        return NULL;
c010ae0d:	b8 00 00 00 00       	mov    $0x0,%eax
c010ae12:	e9 db 01 00 00       	jmp    c010aff2 <next_alloc_pages+0x21f>
    }
     
    struct Page *page = NULL;
c010ae17:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le;
    le = Record;
c010ae1e:	a1 60 11 17 c0       	mov    0xc0171160,%eax
c010ae23:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(n == nr_free)	//
c010ae26:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010ae2b:	3b 45 08             	cmp    0x8(%ebp),%eax
c010ae2e:	75 77                	jne    c010aea7 <next_alloc_pages+0xd4>
    {
        struct Page *p = le2page(le, page_link);    //转换为页
c010ae30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae33:	83 e8 10             	sub    $0x10,%eax
c010ae36:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(p->property == n)
c010ae39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae3c:	8b 40 08             	mov    0x8(%eax),%eax
c010ae3f:	3b 45 08             	cmp    0x8(%ebp),%eax
c010ae42:	75 63                	jne    c010aea7 <next_alloc_pages+0xd4>
	{
        	list_del(&(p->page_link));
c010ae44:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae47:	83 c0 10             	add    $0x10,%eax
c010ae4a:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010ae4d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ae50:	8b 40 04             	mov    0x4(%eax),%eax
c010ae53:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010ae56:	8b 12                	mov    (%edx),%edx
c010ae58:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010ae5b:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010ae5e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ae61:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ae64:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010ae67:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ae6a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010ae6d:	89 10                	mov    %edx,(%eax)
        	nr_free -= n;
c010ae6f:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010ae74:	2b 45 08             	sub    0x8(%ebp),%eax
c010ae77:	a3 5c 11 17 c0       	mov    %eax,0xc017115c
        	ClearPageProperty(p);
c010ae7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae7f:	83 c0 04             	add    $0x4,%eax
c010ae82:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c010ae89:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010ae8c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ae8f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ae92:	0f b3 10             	btr    %edx,(%eax)
    		Record = le->prev;
c010ae95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae98:	8b 00                	mov    (%eax),%eax
c010ae9a:	a3 60 11 17 c0       	mov    %eax,0xc0171160
		return p;
c010ae9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aea2:	e9 4b 01 00 00       	jmp    c010aff2 <next_alloc_pages+0x21f>
	}	
    }

    while((le = list_next(le)) != Record) //遍历整个链表
c010aea7:	eb 1c                	jmp    c010aec5 <next_alloc_pages+0xf2>
    {   
        struct Page *p = le2page(le, page_link);    //转换为页
c010aea9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aeac:	83 e8 10             	sub    $0x10,%eax
c010aeaf:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if(p->property >= n)    //找到页(whose first 'n' pages can be malloced)
c010aeb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aeb5:	8b 40 08             	mov    0x8(%eax),%eax
c010aeb8:	3b 45 08             	cmp    0x8(%ebp),%eax
c010aebb:	72 08                	jb     c010aec5 <next_alloc_pages+0xf2>
        {
            page = p;
c010aebd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aec0:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c010aec3:	eb 19                	jmp    c010aede <next_alloc_pages+0x10b>
c010aec5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aec8:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010aecb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010aece:	8b 40 04             	mov    0x4(%eax),%eax
    		Record = le->prev;
		return p;
	}	
    }

    while((le = list_next(le)) != Record) //遍历整个链表
c010aed1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010aed4:	a1 60 11 17 c0       	mov    0xc0171160,%eax
c010aed9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010aedc:	75 cb                	jne    c010aea9 <next_alloc_pages+0xd6>
            page = p;
            break;
        }
    }
 //   Record =  list_next(le);
    if(page != NULL)
c010aede:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aee2:	0f 84 07 01 00 00    	je     c010afef <next_alloc_pages+0x21c>
c010aee8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aeeb:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010aeee:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010aef1:	8b 40 04             	mov    0x4(%eax),%eax
    {
    	Record =  list_next(le);
c010aef4:	a3 60 11 17 c0       	mov    %eax,0xc0171160
        if(page->property > n)
c010aef9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aefc:	8b 40 08             	mov    0x8(%eax),%eax
c010aeff:	3b 45 08             	cmp    0x8(%ebp),%eax
c010af02:	0f 86 8c 00 00 00    	jbe    c010af94 <next_alloc_pages+0x1c1>
        {
            struct Page *p = page + n;
c010af08:	8b 55 08             	mov    0x8(%ebp),%edx
c010af0b:	89 d0                	mov    %edx,%eax
c010af0d:	c1 e0 03             	shl    $0x3,%eax
c010af10:	01 d0                	add    %edx,%eax
c010af12:	c1 e0 02             	shl    $0x2,%eax
c010af15:	89 c2                	mov    %eax,%edx
c010af17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af1a:	01 d0                	add    %edx,%eax
c010af1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            p->property = page->property - n;
c010af1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af22:	8b 40 08             	mov    0x8(%eax),%eax
c010af25:	2b 45 08             	sub    0x8(%ebp),%eax
c010af28:	89 c2                	mov    %eax,%edx
c010af2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010af2d:	89 50 08             	mov    %edx,0x8(%eax)
            SetPageProperty(p);
c010af30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010af33:	83 c0 04             	add    $0x4,%eax
c010af36:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c010af3d:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010af40:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010af43:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010af46:	0f ab 10             	bts    %edx,(%eax)
            list_add_after(&(page->page_link), &(p->page_link));
c010af49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010af4c:	83 c0 10             	add    $0x10,%eax
c010af4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010af52:	83 c2 10             	add    $0x10,%edx
c010af55:	89 55 bc             	mov    %edx,-0x44(%ebp)
c010af58:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010af5b:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010af5e:	8b 40 04             	mov    0x4(%eax),%eax
c010af61:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010af64:	89 55 b4             	mov    %edx,-0x4c(%ebp)
c010af67:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010af6a:	89 55 b0             	mov    %edx,-0x50(%ebp)
c010af6d:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010af70:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010af73:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010af76:	89 10                	mov    %edx,(%eax)
c010af78:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010af7b:	8b 10                	mov    (%eax),%edx
c010af7d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010af80:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010af83:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010af86:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010af89:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010af8c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010af8f:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010af92:	89 10                	mov    %edx,(%eax)
        }
        list_del(&(page->page_link));
c010af94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af97:	83 c0 10             	add    $0x10,%eax
c010af9a:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010af9d:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010afa0:	8b 40 04             	mov    0x4(%eax),%eax
c010afa3:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010afa6:	8b 12                	mov    (%edx),%edx
c010afa8:	89 55 a4             	mov    %edx,-0x5c(%ebp)
c010afab:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010afae:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010afb1:	8b 55 a0             	mov    -0x60(%ebp),%edx
c010afb4:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010afb7:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010afba:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c010afbd:	89 10                	mov    %edx,(%eax)
        nr_free -= n;
c010afbf:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010afc4:	2b 45 08             	sub    0x8(%ebp),%eax
c010afc7:	a3 5c 11 17 c0       	mov    %eax,0xc017115c
        ClearPageProperty(page);
c010afcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afcf:	83 c0 04             	add    $0x4,%eax
c010afd2:	c7 45 9c 01 00 00 00 	movl   $0x1,-0x64(%ebp)
c010afd9:	89 45 98             	mov    %eax,-0x68(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010afdc:	8b 45 98             	mov    -0x68(%ebp),%eax
c010afdf:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010afe2:	0f b3 10             	btr    %edx,(%eax)
    	Record = le->prev;
c010afe5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010afe8:	8b 00                	mov    (%eax),%eax
c010afea:	a3 60 11 17 c0       	mov    %eax,0xc0171160
    }
     
  //  Record = le->prev;
    return page;
c010afef:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aff2:	c9                   	leave  
c010aff3:	c3                   	ret    

c010aff4 <next_free_pages>:

static void
next_free_pages(struct Page *base, size_t n) {
c010aff4:	55                   	push   %ebp
c010aff5:	89 e5                	mov    %esp,%ebp
c010aff7:	81 ec 98 00 00 00    	sub    $0x98,%esp
    assert(n > 0);
c010affd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b001:	75 24                	jne    c010b027 <next_free_pages+0x33>
c010b003:	c7 44 24 0c 40 3a 12 	movl   $0xc0123a40,0xc(%esp)
c010b00a:	c0 
c010b00b:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b012:	c0 
c010b013:	c7 44 24 04 ac 00 00 	movl   $0xac,0x4(%esp)
c010b01a:	00 
c010b01b:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b022:	e8 ef 61 ff ff       	call   c0101216 <__panic>
    struct Page *p = base;
c010b027:	8b 45 08             	mov    0x8(%ebp),%eax
c010b02a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c010b02d:	e9 9d 00 00 00       	jmp    c010b0cf <next_free_pages+0xdb>
        assert(!PageReserved(p) && !PageProperty(p));
c010b032:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b035:	83 c0 04             	add    $0x4,%eax
c010b038:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010b03f:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010b042:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b045:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b048:	0f a3 10             	bt     %edx,(%eax)
c010b04b:	19 c0                	sbb    %eax,%eax
c010b04d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c010b050:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b054:	0f 95 c0             	setne  %al
c010b057:	0f b6 c0             	movzbl %al,%eax
c010b05a:	85 c0                	test   %eax,%eax
c010b05c:	75 2c                	jne    c010b08a <next_free_pages+0x96>
c010b05e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b061:	83 c0 04             	add    $0x4,%eax
c010b064:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c010b06b:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010b06e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b071:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010b074:	0f a3 10             	bt     %edx,(%eax)
c010b077:	19 c0                	sbb    %eax,%eax
c010b079:	89 45 d8             	mov    %eax,-0x28(%ebp)
    return oldbit != 0;
c010b07c:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c010b080:	0f 95 c0             	setne  %al
c010b083:	0f b6 c0             	movzbl %al,%eax
c010b086:	85 c0                	test   %eax,%eax
c010b088:	74 24                	je     c010b0ae <next_free_pages+0xba>
c010b08a:	c7 44 24 0c 84 3a 12 	movl   $0xc0123a84,0xc(%esp)
c010b091:	c0 
c010b092:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b099:	c0 
c010b09a:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c010b0a1:	00 
c010b0a2:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b0a9:	e8 68 61 ff ff       	call   c0101216 <__panic>
        p->flags = 0;
c010b0ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0b1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);
c010b0b8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b0bf:	00 
c010b0c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0c3:	89 04 24             	mov    %eax,(%esp)
c010b0c6:	e8 76 fb ff ff       	call   c010ac41 <set_page_ref>

static void
next_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c010b0cb:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c010b0cf:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b0d2:	89 d0                	mov    %edx,%eax
c010b0d4:	c1 e0 03             	shl    $0x3,%eax
c010b0d7:	01 d0                	add    %edx,%eax
c010b0d9:	c1 e0 02             	shl    $0x2,%eax
c010b0dc:	89 c2                	mov    %eax,%edx
c010b0de:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0e1:	01 d0                	add    %edx,%eax
c010b0e3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010b0e6:	0f 85 46 ff ff ff    	jne    c010b032 <next_free_pages+0x3e>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c010b0ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0ef:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b0f2:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c010b0f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0f8:	83 c0 04             	add    $0x4,%eax
c010b0fb:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c010b102:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010b105:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b108:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b10b:	0f ab 10             	bts    %edx,(%eax)
c010b10e:	c7 45 cc 54 11 17 c0 	movl   $0xc0171154,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b115:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b118:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *le = list_next(&free_list);
c010b11b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c010b11e:	e9 08 01 00 00       	jmp    c010b22b <next_free_pages+0x237>
        p = le2page(le, page_link);
c010b123:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b126:	83 e8 10             	sub    $0x10,%eax
c010b129:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b12c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b12f:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010b132:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010b135:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c010b138:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (base + base->property == p) {
c010b13b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b13e:	8b 50 08             	mov    0x8(%eax),%edx
c010b141:	89 d0                	mov    %edx,%eax
c010b143:	c1 e0 03             	shl    $0x3,%eax
c010b146:	01 d0                	add    %edx,%eax
c010b148:	c1 e0 02             	shl    $0x2,%eax
c010b14b:	89 c2                	mov    %eax,%edx
c010b14d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b150:	01 d0                	add    %edx,%eax
c010b152:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010b155:	75 5a                	jne    c010b1b1 <next_free_pages+0x1bd>
            base->property += p->property;
c010b157:	8b 45 08             	mov    0x8(%ebp),%eax
c010b15a:	8b 50 08             	mov    0x8(%eax),%edx
c010b15d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b160:	8b 40 08             	mov    0x8(%eax),%eax
c010b163:	01 c2                	add    %eax,%edx
c010b165:	8b 45 08             	mov    0x8(%ebp),%eax
c010b168:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(p);
c010b16b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b16e:	83 c0 04             	add    $0x4,%eax
c010b171:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c010b178:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010b17b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b17e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010b181:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c010b184:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b187:	83 c0 10             	add    $0x10,%eax
c010b18a:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010b18d:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010b190:	8b 40 04             	mov    0x4(%eax),%eax
c010b193:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b196:	8b 12                	mov    (%edx),%edx
c010b198:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010b19b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010b19e:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010b1a1:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010b1a4:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010b1a7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b1aa:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010b1ad:	89 10                	mov    %edx,(%eax)
c010b1af:	eb 7a                	jmp    c010b22b <next_free_pages+0x237>
        }
        else if (p + p->property == base) {
c010b1b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1b4:	8b 50 08             	mov    0x8(%eax),%edx
c010b1b7:	89 d0                	mov    %edx,%eax
c010b1b9:	c1 e0 03             	shl    $0x3,%eax
c010b1bc:	01 d0                	add    %edx,%eax
c010b1be:	c1 e0 02             	shl    $0x2,%eax
c010b1c1:	89 c2                	mov    %eax,%edx
c010b1c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1c6:	01 d0                	add    %edx,%eax
c010b1c8:	3b 45 08             	cmp    0x8(%ebp),%eax
c010b1cb:	75 5e                	jne    c010b22b <next_free_pages+0x237>
            p->property += base->property;
c010b1cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1d0:	8b 50 08             	mov    0x8(%eax),%edx
c010b1d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1d6:	8b 40 08             	mov    0x8(%eax),%eax
c010b1d9:	01 c2                	add    %eax,%edx
c010b1db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1de:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(base);
c010b1e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1e4:	83 c0 04             	add    $0x4,%eax
c010b1e7:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c010b1ee:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010b1f1:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010b1f4:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010b1f7:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c010b1fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1fd:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c010b200:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b203:	83 c0 10             	add    $0x10,%eax
c010b206:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010b209:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010b20c:	8b 40 04             	mov    0x4(%eax),%eax
c010b20f:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010b212:	8b 12                	mov    (%edx),%edx
c010b214:	89 55 a4             	mov    %edx,-0x5c(%ebp)
c010b217:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010b21a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010b21d:	8b 55 a0             	mov    -0x60(%ebp),%edx
c010b220:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010b223:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010b226:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c010b229:	89 10                	mov    %edx,(%eax)
        set_page_ref(p, 0);
    }
    base->property = n;
    SetPageProperty(base);
    list_entry_t *le = list_next(&free_list);
    while (le != &free_list) {
c010b22b:	81 7d f0 54 11 17 c0 	cmpl   $0xc0171154,-0x10(%ebp)
c010b232:	0f 85 eb fe ff ff    	jne    c010b123 <next_free_pages+0x12f>
            ClearPageProperty(base);
            base = p;
            list_del(&(p->page_link));
        }
    }
    nr_free += n;
c010b238:	8b 15 5c 11 17 c0    	mov    0xc017115c,%edx
c010b23e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b241:	01 d0                	add    %edx,%eax
c010b243:	a3 5c 11 17 c0       	mov    %eax,0xc017115c
c010b248:	c7 45 9c 54 11 17 c0 	movl   $0xc0171154,-0x64(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b24f:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010b252:	8b 40 04             	mov    0x4(%eax),%eax
    le = list_next(&free_list);
c010b255:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c010b258:	eb 76                	jmp    c010b2d0 <next_free_pages+0x2dc>
        p = le2page(le, page_link);
c010b25a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b25d:	83 e8 10             	sub    $0x10,%eax
c010b260:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (base + base->property <= p) {
c010b263:	8b 45 08             	mov    0x8(%ebp),%eax
c010b266:	8b 50 08             	mov    0x8(%eax),%edx
c010b269:	89 d0                	mov    %edx,%eax
c010b26b:	c1 e0 03             	shl    $0x3,%eax
c010b26e:	01 d0                	add    %edx,%eax
c010b270:	c1 e0 02             	shl    $0x2,%eax
c010b273:	89 c2                	mov    %eax,%edx
c010b275:	8b 45 08             	mov    0x8(%ebp),%eax
c010b278:	01 d0                	add    %edx,%eax
c010b27a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010b27d:	77 42                	ja     c010b2c1 <next_free_pages+0x2cd>
            assert(base + base->property != p);
c010b27f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b282:	8b 50 08             	mov    0x8(%eax),%edx
c010b285:	89 d0                	mov    %edx,%eax
c010b287:	c1 e0 03             	shl    $0x3,%eax
c010b28a:	01 d0                	add    %edx,%eax
c010b28c:	c1 e0 02             	shl    $0x2,%eax
c010b28f:	89 c2                	mov    %eax,%edx
c010b291:	8b 45 08             	mov    0x8(%ebp),%eax
c010b294:	01 d0                	add    %edx,%eax
c010b296:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010b299:	75 24                	jne    c010b2bf <next_free_pages+0x2cb>
c010b29b:	c7 44 24 0c a9 3a 12 	movl   $0xc0123aa9,0xc(%esp)
c010b2a2:	c0 
c010b2a3:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b2aa:	c0 
c010b2ab:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c010b2b2:	00 
c010b2b3:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b2ba:	e8 57 5f ff ff       	call   c0101216 <__panic>
            break;
c010b2bf:	eb 18                	jmp    c010b2d9 <next_free_pages+0x2e5>
c010b2c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2c4:	89 45 98             	mov    %eax,-0x68(%ebp)
c010b2c7:	8b 45 98             	mov    -0x68(%ebp),%eax
c010b2ca:	8b 40 04             	mov    0x4(%eax),%eax
        }
        le = list_next(le);
c010b2cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
            list_del(&(p->page_link));
        }
    }
    nr_free += n;
    le = list_next(&free_list);
    while (le != &free_list) {
c010b2d0:	81 7d f0 54 11 17 c0 	cmpl   $0xc0171154,-0x10(%ebp)
c010b2d7:	75 81                	jne    c010b25a <next_free_pages+0x266>
            assert(base + base->property != p);
            break;
        }
        le = list_next(le);
    }
    list_add_before(le, &(base->page_link));
c010b2d9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2dc:	8d 50 10             	lea    0x10(%eax),%edx
c010b2df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2e2:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010b2e5:	89 55 90             	mov    %edx,-0x70(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010b2e8:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010b2eb:	8b 00                	mov    (%eax),%eax
c010b2ed:	8b 55 90             	mov    -0x70(%ebp),%edx
c010b2f0:	89 55 8c             	mov    %edx,-0x74(%ebp)
c010b2f3:	89 45 88             	mov    %eax,-0x78(%ebp)
c010b2f6:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010b2f9:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010b2fc:	8b 45 84             	mov    -0x7c(%ebp),%eax
c010b2ff:	8b 55 8c             	mov    -0x74(%ebp),%edx
c010b302:	89 10                	mov    %edx,(%eax)
c010b304:	8b 45 84             	mov    -0x7c(%ebp),%eax
c010b307:	8b 10                	mov    (%eax),%edx
c010b309:	8b 45 88             	mov    -0x78(%ebp),%eax
c010b30c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010b30f:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010b312:	8b 55 84             	mov    -0x7c(%ebp),%edx
c010b315:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010b318:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010b31b:	8b 55 88             	mov    -0x78(%ebp),%edx
c010b31e:	89 10                	mov    %edx,(%eax)
}
c010b320:	c9                   	leave  
c010b321:	c3                   	ret    

c010b322 <next_nr_free_pages>:



static size_t
next_nr_free_pages(void) {
c010b322:	55                   	push   %ebp
c010b323:	89 e5                	mov    %esp,%ebp
    return nr_free;
c010b325:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
}
c010b32a:	5d                   	pop    %ebp
c010b32b:	c3                   	ret    

c010b32c <basic_check>:

static void
basic_check(void) {
c010b32c:	55                   	push   %ebp
c010b32d:	89 e5                	mov    %esp,%ebp
c010b32f:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c010b332:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b339:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b33c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b33f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b342:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c010b345:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010b34c:	e8 0c 12 00 00       	call   c010c55d <alloc_pages>
c010b351:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b354:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b358:	75 24                	jne    c010b37e <basic_check+0x52>
c010b35a:	c7 44 24 0c c4 3a 12 	movl   $0xc0123ac4,0xc(%esp)
c010b361:	c0 
c010b362:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b369:	c0 
c010b36a:	c7 44 24 04 dd 00 00 	movl   $0xdd,0x4(%esp)
c010b371:	00 
c010b372:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b379:	e8 98 5e ff ff       	call   c0101216 <__panic>
    assert((p1 = alloc_page()) != NULL);
c010b37e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010b385:	e8 d3 11 00 00       	call   c010c55d <alloc_pages>
c010b38a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b38d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b391:	75 24                	jne    c010b3b7 <basic_check+0x8b>
c010b393:	c7 44 24 0c e0 3a 12 	movl   $0xc0123ae0,0xc(%esp)
c010b39a:	c0 
c010b39b:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b3a2:	c0 
c010b3a3:	c7 44 24 04 de 00 00 	movl   $0xde,0x4(%esp)
c010b3aa:	00 
c010b3ab:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b3b2:	e8 5f 5e ff ff       	call   c0101216 <__panic>
    assert((p2 = alloc_page()) != NULL);
c010b3b7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010b3be:	e8 9a 11 00 00       	call   c010c55d <alloc_pages>
c010b3c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b3c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b3ca:	75 24                	jne    c010b3f0 <basic_check+0xc4>
c010b3cc:	c7 44 24 0c fc 3a 12 	movl   $0xc0123afc,0xc(%esp)
c010b3d3:	c0 
c010b3d4:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b3db:	c0 
c010b3dc:	c7 44 24 04 df 00 00 	movl   $0xdf,0x4(%esp)
c010b3e3:	00 
c010b3e4:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b3eb:	e8 26 5e ff ff       	call   c0101216 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c010b3f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3f3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010b3f6:	74 10                	je     c010b408 <basic_check+0xdc>
c010b3f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3fb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010b3fe:	74 08                	je     c010b408 <basic_check+0xdc>
c010b400:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b403:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010b406:	75 24                	jne    c010b42c <basic_check+0x100>
c010b408:	c7 44 24 0c 18 3b 12 	movl   $0xc0123b18,0xc(%esp)
c010b40f:	c0 
c010b410:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b417:	c0 
c010b418:	c7 44 24 04 e1 00 00 	movl   $0xe1,0x4(%esp)
c010b41f:	00 
c010b420:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b427:	e8 ea 5d ff ff       	call   c0101216 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c010b42c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b42f:	89 04 24             	mov    %eax,(%esp)
c010b432:	e8 00 f8 ff ff       	call   c010ac37 <page_ref>
c010b437:	85 c0                	test   %eax,%eax
c010b439:	75 1e                	jne    c010b459 <basic_check+0x12d>
c010b43b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b43e:	89 04 24             	mov    %eax,(%esp)
c010b441:	e8 f1 f7 ff ff       	call   c010ac37 <page_ref>
c010b446:	85 c0                	test   %eax,%eax
c010b448:	75 0f                	jne    c010b459 <basic_check+0x12d>
c010b44a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b44d:	89 04 24             	mov    %eax,(%esp)
c010b450:	e8 e2 f7 ff ff       	call   c010ac37 <page_ref>
c010b455:	85 c0                	test   %eax,%eax
c010b457:	74 24                	je     c010b47d <basic_check+0x151>
c010b459:	c7 44 24 0c 3c 3b 12 	movl   $0xc0123b3c,0xc(%esp)
c010b460:	c0 
c010b461:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b468:	c0 
c010b469:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c010b470:	00 
c010b471:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b478:	e8 99 5d ff ff       	call   c0101216 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c010b47d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b480:	89 04 24             	mov    %eax,(%esp)
c010b483:	e8 99 f7 ff ff       	call   c010ac21 <page2pa>
c010b488:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c010b48e:	c1 e2 0c             	shl    $0xc,%edx
c010b491:	39 d0                	cmp    %edx,%eax
c010b493:	72 24                	jb     c010b4b9 <basic_check+0x18d>
c010b495:	c7 44 24 0c 78 3b 12 	movl   $0xc0123b78,0xc(%esp)
c010b49c:	c0 
c010b49d:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b4a4:	c0 
c010b4a5:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c010b4ac:	00 
c010b4ad:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b4b4:	e8 5d 5d ff ff       	call   c0101216 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c010b4b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b4bc:	89 04 24             	mov    %eax,(%esp)
c010b4bf:	e8 5d f7 ff ff       	call   c010ac21 <page2pa>
c010b4c4:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c010b4ca:	c1 e2 0c             	shl    $0xc,%edx
c010b4cd:	39 d0                	cmp    %edx,%eax
c010b4cf:	72 24                	jb     c010b4f5 <basic_check+0x1c9>
c010b4d1:	c7 44 24 0c 95 3b 12 	movl   $0xc0123b95,0xc(%esp)
c010b4d8:	c0 
c010b4d9:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b4e0:	c0 
c010b4e1:	c7 44 24 04 e5 00 00 	movl   $0xe5,0x4(%esp)
c010b4e8:	00 
c010b4e9:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b4f0:	e8 21 5d ff ff       	call   c0101216 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c010b4f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4f8:	89 04 24             	mov    %eax,(%esp)
c010b4fb:	e8 21 f7 ff ff       	call   c010ac21 <page2pa>
c010b500:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c010b506:	c1 e2 0c             	shl    $0xc,%edx
c010b509:	39 d0                	cmp    %edx,%eax
c010b50b:	72 24                	jb     c010b531 <basic_check+0x205>
c010b50d:	c7 44 24 0c b2 3b 12 	movl   $0xc0123bb2,0xc(%esp)
c010b514:	c0 
c010b515:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b51c:	c0 
c010b51d:	c7 44 24 04 e6 00 00 	movl   $0xe6,0x4(%esp)
c010b524:	00 
c010b525:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b52c:	e8 e5 5c ff ff       	call   c0101216 <__panic>

    list_entry_t free_list_store = free_list;
c010b531:	a1 54 11 17 c0       	mov    0xc0171154,%eax
c010b536:	8b 15 58 11 17 c0    	mov    0xc0171158,%edx
c010b53c:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b53f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010b542:	c7 45 e0 54 11 17 c0 	movl   $0xc0171154,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b549:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b54c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010b54f:	89 50 04             	mov    %edx,0x4(%eax)
c010b552:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b555:	8b 50 04             	mov    0x4(%eax),%edx
c010b558:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b55b:	89 10                	mov    %edx,(%eax)
c010b55d:	c7 45 dc 54 11 17 c0 	movl   $0xc0171154,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010b564:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b567:	8b 40 04             	mov    0x4(%eax),%eax
c010b56a:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010b56d:	0f 94 c0             	sete   %al
c010b570:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c010b573:	85 c0                	test   %eax,%eax
c010b575:	75 24                	jne    c010b59b <basic_check+0x26f>
c010b577:	c7 44 24 0c cf 3b 12 	movl   $0xc0123bcf,0xc(%esp)
c010b57e:	c0 
c010b57f:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b586:	c0 
c010b587:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
c010b58e:	00 
c010b58f:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b596:	e8 7b 5c ff ff       	call   c0101216 <__panic>

    unsigned int nr_free_store = nr_free;
c010b59b:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010b5a0:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c010b5a3:	c7 05 5c 11 17 c0 00 	movl   $0x0,0xc017115c
c010b5aa:	00 00 00 

    assert(alloc_page() == NULL);
c010b5ad:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010b5b4:	e8 a4 0f 00 00       	call   c010c55d <alloc_pages>
c010b5b9:	85 c0                	test   %eax,%eax
c010b5bb:	74 24                	je     c010b5e1 <basic_check+0x2b5>
c010b5bd:	c7 44 24 0c e6 3b 12 	movl   $0xc0123be6,0xc(%esp)
c010b5c4:	c0 
c010b5c5:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b5cc:	c0 
c010b5cd:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c010b5d4:	00 
c010b5d5:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b5dc:	e8 35 5c ff ff       	call   c0101216 <__panic>

    free_page(p0);
c010b5e1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b5e8:	00 
c010b5e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5ec:	89 04 24             	mov    %eax,(%esp)
c010b5ef:	e8 d4 0f 00 00       	call   c010c5c8 <free_pages>
    free_page(p1);
c010b5f4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b5fb:	00 
c010b5fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b5ff:	89 04 24             	mov    %eax,(%esp)
c010b602:	e8 c1 0f 00 00       	call   c010c5c8 <free_pages>
    free_page(p2);
c010b607:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b60e:	00 
c010b60f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b612:	89 04 24             	mov    %eax,(%esp)
c010b615:	e8 ae 0f 00 00       	call   c010c5c8 <free_pages>
    assert(nr_free == 3);
c010b61a:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010b61f:	83 f8 03             	cmp    $0x3,%eax
c010b622:	74 24                	je     c010b648 <basic_check+0x31c>
c010b624:	c7 44 24 0c fb 3b 12 	movl   $0xc0123bfb,0xc(%esp)
c010b62b:	c0 
c010b62c:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b633:	c0 
c010b634:	c7 44 24 04 f4 00 00 	movl   $0xf4,0x4(%esp)
c010b63b:	00 
c010b63c:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b643:	e8 ce 5b ff ff       	call   c0101216 <__panic>

    assert((p0 = alloc_page()) != NULL);
c010b648:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010b64f:	e8 09 0f 00 00       	call   c010c55d <alloc_pages>
c010b654:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b657:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b65b:	75 24                	jne    c010b681 <basic_check+0x355>
c010b65d:	c7 44 24 0c c4 3a 12 	movl   $0xc0123ac4,0xc(%esp)
c010b664:	c0 
c010b665:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b66c:	c0 
c010b66d:	c7 44 24 04 f6 00 00 	movl   $0xf6,0x4(%esp)
c010b674:	00 
c010b675:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b67c:	e8 95 5b ff ff       	call   c0101216 <__panic>
    assert((p1 = alloc_page()) != NULL);
c010b681:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010b688:	e8 d0 0e 00 00       	call   c010c55d <alloc_pages>
c010b68d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b690:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b694:	75 24                	jne    c010b6ba <basic_check+0x38e>
c010b696:	c7 44 24 0c e0 3a 12 	movl   $0xc0123ae0,0xc(%esp)
c010b69d:	c0 
c010b69e:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b6a5:	c0 
c010b6a6:	c7 44 24 04 f7 00 00 	movl   $0xf7,0x4(%esp)
c010b6ad:	00 
c010b6ae:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b6b5:	e8 5c 5b ff ff       	call   c0101216 <__panic>
    assert((p2 = alloc_page()) != NULL);
c010b6ba:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010b6c1:	e8 97 0e 00 00       	call   c010c55d <alloc_pages>
c010b6c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b6c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b6cd:	75 24                	jne    c010b6f3 <basic_check+0x3c7>
c010b6cf:	c7 44 24 0c fc 3a 12 	movl   $0xc0123afc,0xc(%esp)
c010b6d6:	c0 
c010b6d7:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b6de:	c0 
c010b6df:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c010b6e6:	00 
c010b6e7:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b6ee:	e8 23 5b ff ff       	call   c0101216 <__panic>

    assert(alloc_page() == NULL);
c010b6f3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010b6fa:	e8 5e 0e 00 00       	call   c010c55d <alloc_pages>
c010b6ff:	85 c0                	test   %eax,%eax
c010b701:	74 24                	je     c010b727 <basic_check+0x3fb>
c010b703:	c7 44 24 0c e6 3b 12 	movl   $0xc0123be6,0xc(%esp)
c010b70a:	c0 
c010b70b:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b712:	c0 
c010b713:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c010b71a:	00 
c010b71b:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b722:	e8 ef 5a ff ff       	call   c0101216 <__panic>

    free_page(p0);
c010b727:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b72e:	00 
c010b72f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b732:	89 04 24             	mov    %eax,(%esp)
c010b735:	e8 8e 0e 00 00       	call   c010c5c8 <free_pages>
c010b73a:	c7 45 d8 54 11 17 c0 	movl   $0xc0171154,-0x28(%ebp)
c010b741:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b744:	8b 40 04             	mov    0x4(%eax),%eax
c010b747:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c010b74a:	0f 94 c0             	sete   %al
c010b74d:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c010b750:	85 c0                	test   %eax,%eax
c010b752:	74 24                	je     c010b778 <basic_check+0x44c>
c010b754:	c7 44 24 0c 08 3c 12 	movl   $0xc0123c08,0xc(%esp)
c010b75b:	c0 
c010b75c:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b763:	c0 
c010b764:	c7 44 24 04 fd 00 00 	movl   $0xfd,0x4(%esp)
c010b76b:	00 
c010b76c:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b773:	e8 9e 5a ff ff       	call   c0101216 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c010b778:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010b77f:	e8 d9 0d 00 00       	call   c010c55d <alloc_pages>
c010b784:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010b787:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b78a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010b78d:	74 24                	je     c010b7b3 <basic_check+0x487>
c010b78f:	c7 44 24 0c 20 3c 12 	movl   $0xc0123c20,0xc(%esp)
c010b796:	c0 
c010b797:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b79e:	c0 
c010b79f:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c010b7a6:	00 
c010b7a7:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b7ae:	e8 63 5a ff ff       	call   c0101216 <__panic>
    assert(alloc_page() == NULL);
c010b7b3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010b7ba:	e8 9e 0d 00 00       	call   c010c55d <alloc_pages>
c010b7bf:	85 c0                	test   %eax,%eax
c010b7c1:	74 24                	je     c010b7e7 <basic_check+0x4bb>
c010b7c3:	c7 44 24 0c e6 3b 12 	movl   $0xc0123be6,0xc(%esp)
c010b7ca:	c0 
c010b7cb:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b7d2:	c0 
c010b7d3:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c010b7da:	00 
c010b7db:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b7e2:	e8 2f 5a ff ff       	call   c0101216 <__panic>

    assert(nr_free == 0);
c010b7e7:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010b7ec:	85 c0                	test   %eax,%eax
c010b7ee:	74 24                	je     c010b814 <basic_check+0x4e8>
c010b7f0:	c7 44 24 0c 39 3c 12 	movl   $0xc0123c39,0xc(%esp)
c010b7f7:	c0 
c010b7f8:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b7ff:	c0 
c010b800:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
c010b807:	00 
c010b808:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b80f:	e8 02 5a ff ff       	call   c0101216 <__panic>
    free_list = free_list_store;
c010b814:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b817:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b81a:	a3 54 11 17 c0       	mov    %eax,0xc0171154
c010b81f:	89 15 58 11 17 c0    	mov    %edx,0xc0171158
    nr_free = nr_free_store;
c010b825:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b828:	a3 5c 11 17 c0       	mov    %eax,0xc017115c

    free_page(p);
c010b82d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b834:	00 
c010b835:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b838:	89 04 24             	mov    %eax,(%esp)
c010b83b:	e8 88 0d 00 00       	call   c010c5c8 <free_pages>
    free_page(p1);
c010b840:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b847:	00 
c010b848:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b84b:	89 04 24             	mov    %eax,(%esp)
c010b84e:	e8 75 0d 00 00       	call   c010c5c8 <free_pages>
    free_page(p2);
c010b853:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b85a:	00 
c010b85b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b85e:	89 04 24             	mov    %eax,(%esp)
c010b861:	e8 62 0d 00 00       	call   c010c5c8 <free_pages>
}
c010b866:	c9                   	leave  
c010b867:	c3                   	ret    

c010b868 <next_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, next_check functions!
static void
next_check(void) {
c010b868:	55                   	push   %ebp
c010b869:	89 e5                	mov    %esp,%ebp
c010b86b:	53                   	push   %ebx
c010b86c:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c010b872:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b879:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c010b880:	c7 45 ec 54 11 17 c0 	movl   $0xc0171154,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010b887:	eb 6b                	jmp    c010b8f4 <next_check+0x8c>
        struct Page *p = le2page(le, page_link);
c010b889:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b88c:	83 e8 10             	sub    $0x10,%eax
c010b88f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c010b892:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b895:	83 c0 04             	add    $0x4,%eax
c010b898:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c010b89f:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010b8a2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b8a5:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b8a8:	0f a3 10             	bt     %edx,(%eax)
c010b8ab:	19 c0                	sbb    %eax,%eax
c010b8ad:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c010b8b0:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010b8b4:	0f 95 c0             	setne  %al
c010b8b7:	0f b6 c0             	movzbl %al,%eax
c010b8ba:	85 c0                	test   %eax,%eax
c010b8bc:	75 24                	jne    c010b8e2 <next_check+0x7a>
c010b8be:	c7 44 24 0c 46 3c 12 	movl   $0xc0123c46,0xc(%esp)
c010b8c5:	c0 
c010b8c6:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b8cd:	c0 
c010b8ce:	c7 44 24 04 14 01 00 	movl   $0x114,0x4(%esp)
c010b8d5:	00 
c010b8d6:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b8dd:	e8 34 59 ff ff       	call   c0101216 <__panic>
        count ++, total += p->property;
c010b8e2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b8e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b8e9:	8b 50 08             	mov    0x8(%eax),%edx
c010b8ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8ef:	01 d0                	add    %edx,%eax
c010b8f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b8f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8f7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b8fa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010b8fd:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, next_check functions!
static void
next_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010b900:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b903:	81 7d ec 54 11 17 c0 	cmpl   $0xc0171154,-0x14(%ebp)
c010b90a:	0f 85 79 ff ff ff    	jne    c010b889 <next_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c010b910:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010b913:	e8 e2 0c 00 00       	call   c010c5fa <nr_free_pages>
c010b918:	39 c3                	cmp    %eax,%ebx
c010b91a:	74 24                	je     c010b940 <next_check+0xd8>
c010b91c:	c7 44 24 0c 56 3c 12 	movl   $0xc0123c56,0xc(%esp)
c010b923:	c0 
c010b924:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b92b:	c0 
c010b92c:	c7 44 24 04 17 01 00 	movl   $0x117,0x4(%esp)
c010b933:	00 
c010b934:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b93b:	e8 d6 58 ff ff       	call   c0101216 <__panic>

    basic_check();
c010b940:	e8 e7 f9 ff ff       	call   c010b32c <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c010b945:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010b94c:	e8 0c 0c 00 00       	call   c010c55d <alloc_pages>
c010b951:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c010b954:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b958:	75 24                	jne    c010b97e <next_check+0x116>
c010b95a:	c7 44 24 0c 6f 3c 12 	movl   $0xc0123c6f,0xc(%esp)
c010b961:	c0 
c010b962:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b969:	c0 
c010b96a:	c7 44 24 04 1c 01 00 	movl   $0x11c,0x4(%esp)
c010b971:	00 
c010b972:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b979:	e8 98 58 ff ff       	call   c0101216 <__panic>
    assert(!PageProperty(p0));
c010b97e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b981:	83 c0 04             	add    $0x4,%eax
c010b984:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c010b98b:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010b98e:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010b991:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b994:	0f a3 10             	bt     %edx,(%eax)
c010b997:	19 c0                	sbb    %eax,%eax
c010b999:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c010b99c:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010b9a0:	0f 95 c0             	setne  %al
c010b9a3:	0f b6 c0             	movzbl %al,%eax
c010b9a6:	85 c0                	test   %eax,%eax
c010b9a8:	74 24                	je     c010b9ce <next_check+0x166>
c010b9aa:	c7 44 24 0c 7a 3c 12 	movl   $0xc0123c7a,0xc(%esp)
c010b9b1:	c0 
c010b9b2:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010b9b9:	c0 
c010b9ba:	c7 44 24 04 1d 01 00 	movl   $0x11d,0x4(%esp)
c010b9c1:	00 
c010b9c2:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010b9c9:	e8 48 58 ff ff       	call   c0101216 <__panic>

    list_entry_t free_list_store = free_list;
c010b9ce:	a1 54 11 17 c0       	mov    0xc0171154,%eax
c010b9d3:	8b 15 58 11 17 c0    	mov    0xc0171158,%edx
c010b9d9:	89 45 80             	mov    %eax,-0x80(%ebp)
c010b9dc:	89 55 84             	mov    %edx,-0x7c(%ebp)
c010b9df:	c7 45 b4 54 11 17 c0 	movl   $0xc0171154,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b9e6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b9e9:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010b9ec:	89 50 04             	mov    %edx,0x4(%eax)
c010b9ef:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b9f2:	8b 50 04             	mov    0x4(%eax),%edx
c010b9f5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b9f8:	89 10                	mov    %edx,(%eax)
c010b9fa:	c7 45 b0 54 11 17 c0 	movl   $0xc0171154,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010ba01:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ba04:	8b 40 04             	mov    0x4(%eax),%eax
c010ba07:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c010ba0a:	0f 94 c0             	sete   %al
c010ba0d:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c010ba10:	85 c0                	test   %eax,%eax
c010ba12:	75 24                	jne    c010ba38 <next_check+0x1d0>
c010ba14:	c7 44 24 0c cf 3b 12 	movl   $0xc0123bcf,0xc(%esp)
c010ba1b:	c0 
c010ba1c:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010ba23:	c0 
c010ba24:	c7 44 24 04 21 01 00 	movl   $0x121,0x4(%esp)
c010ba2b:	00 
c010ba2c:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010ba33:	e8 de 57 ff ff       	call   c0101216 <__panic>
    assert(alloc_page() == NULL);
c010ba38:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010ba3f:	e8 19 0b 00 00       	call   c010c55d <alloc_pages>
c010ba44:	85 c0                	test   %eax,%eax
c010ba46:	74 24                	je     c010ba6c <next_check+0x204>
c010ba48:	c7 44 24 0c e6 3b 12 	movl   $0xc0123be6,0xc(%esp)
c010ba4f:	c0 
c010ba50:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010ba57:	c0 
c010ba58:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c010ba5f:	00 
c010ba60:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010ba67:	e8 aa 57 ff ff       	call   c0101216 <__panic>

    unsigned int nr_free_store = nr_free;
c010ba6c:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010ba71:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c010ba74:	c7 05 5c 11 17 c0 00 	movl   $0x0,0xc017115c
c010ba7b:	00 00 00 

    free_pages(p0 + 2, 3);
c010ba7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ba81:	83 c0 48             	add    $0x48,%eax
c010ba84:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010ba8b:	00 
c010ba8c:	89 04 24             	mov    %eax,(%esp)
c010ba8f:	e8 34 0b 00 00       	call   c010c5c8 <free_pages>
    assert(alloc_pages(4) == NULL);
c010ba94:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010ba9b:	e8 bd 0a 00 00       	call   c010c55d <alloc_pages>
c010baa0:	85 c0                	test   %eax,%eax
c010baa2:	74 24                	je     c010bac8 <next_check+0x260>
c010baa4:	c7 44 24 0c 8c 3c 12 	movl   $0xc0123c8c,0xc(%esp)
c010baab:	c0 
c010baac:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010bab3:	c0 
c010bab4:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c010babb:	00 
c010babc:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010bac3:	e8 4e 57 ff ff       	call   c0101216 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c010bac8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bacb:	83 c0 48             	add    $0x48,%eax
c010bace:	83 c0 04             	add    $0x4,%eax
c010bad1:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c010bad8:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010badb:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010bade:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010bae1:	0f a3 10             	bt     %edx,(%eax)
c010bae4:	19 c0                	sbb    %eax,%eax
c010bae6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c010bae9:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c010baed:	0f 95 c0             	setne  %al
c010baf0:	0f b6 c0             	movzbl %al,%eax
c010baf3:	85 c0                	test   %eax,%eax
c010baf5:	74 0e                	je     c010bb05 <next_check+0x29d>
c010baf7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bafa:	83 c0 48             	add    $0x48,%eax
c010bafd:	8b 40 08             	mov    0x8(%eax),%eax
c010bb00:	83 f8 03             	cmp    $0x3,%eax
c010bb03:	74 24                	je     c010bb29 <next_check+0x2c1>
c010bb05:	c7 44 24 0c a4 3c 12 	movl   $0xc0123ca4,0xc(%esp)
c010bb0c:	c0 
c010bb0d:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010bb14:	c0 
c010bb15:	c7 44 24 04 29 01 00 	movl   $0x129,0x4(%esp)
c010bb1c:	00 
c010bb1d:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010bb24:	e8 ed 56 ff ff       	call   c0101216 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c010bb29:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010bb30:	e8 28 0a 00 00       	call   c010c55d <alloc_pages>
c010bb35:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010bb38:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010bb3c:	75 24                	jne    c010bb62 <next_check+0x2fa>
c010bb3e:	c7 44 24 0c d0 3c 12 	movl   $0xc0123cd0,0xc(%esp)
c010bb45:	c0 
c010bb46:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010bb4d:	c0 
c010bb4e:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c010bb55:	00 
c010bb56:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010bb5d:	e8 b4 56 ff ff       	call   c0101216 <__panic>
    assert(alloc_page() == NULL);
c010bb62:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010bb69:	e8 ef 09 00 00       	call   c010c55d <alloc_pages>
c010bb6e:	85 c0                	test   %eax,%eax
c010bb70:	74 24                	je     c010bb96 <next_check+0x32e>
c010bb72:	c7 44 24 0c e6 3b 12 	movl   $0xc0123be6,0xc(%esp)
c010bb79:	c0 
c010bb7a:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010bb81:	c0 
c010bb82:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
c010bb89:	00 
c010bb8a:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010bb91:	e8 80 56 ff ff       	call   c0101216 <__panic>
    assert(p0 + 2 == p1);
c010bb96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bb99:	83 c0 48             	add    $0x48,%eax
c010bb9c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010bb9f:	74 24                	je     c010bbc5 <next_check+0x35d>
c010bba1:	c7 44 24 0c ee 3c 12 	movl   $0xc0123cee,0xc(%esp)
c010bba8:	c0 
c010bba9:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010bbb0:	c0 
c010bbb1:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c010bbb8:	00 
c010bbb9:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010bbc0:	e8 51 56 ff ff       	call   c0101216 <__panic>

    p2 = p0 + 1;
c010bbc5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bbc8:	83 c0 24             	add    $0x24,%eax
c010bbcb:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c010bbce:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010bbd5:	00 
c010bbd6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bbd9:	89 04 24             	mov    %eax,(%esp)
c010bbdc:	e8 e7 09 00 00       	call   c010c5c8 <free_pages>
    free_pages(p1, 3);
c010bbe1:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010bbe8:	00 
c010bbe9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010bbec:	89 04 24             	mov    %eax,(%esp)
c010bbef:	e8 d4 09 00 00       	call   c010c5c8 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c010bbf4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bbf7:	83 c0 04             	add    $0x4,%eax
c010bbfa:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c010bc01:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010bc04:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010bc07:	8b 55 a0             	mov    -0x60(%ebp),%edx
c010bc0a:	0f a3 10             	bt     %edx,(%eax)
c010bc0d:	19 c0                	sbb    %eax,%eax
c010bc0f:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c010bc12:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c010bc16:	0f 95 c0             	setne  %al
c010bc19:	0f b6 c0             	movzbl %al,%eax
c010bc1c:	85 c0                	test   %eax,%eax
c010bc1e:	74 0b                	je     c010bc2b <next_check+0x3c3>
c010bc20:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bc23:	8b 40 08             	mov    0x8(%eax),%eax
c010bc26:	83 f8 01             	cmp    $0x1,%eax
c010bc29:	74 24                	je     c010bc4f <next_check+0x3e7>
c010bc2b:	c7 44 24 0c fc 3c 12 	movl   $0xc0123cfc,0xc(%esp)
c010bc32:	c0 
c010bc33:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010bc3a:	c0 
c010bc3b:	c7 44 24 04 31 01 00 	movl   $0x131,0x4(%esp)
c010bc42:	00 
c010bc43:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010bc4a:	e8 c7 55 ff ff       	call   c0101216 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c010bc4f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010bc52:	83 c0 04             	add    $0x4,%eax
c010bc55:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c010bc5c:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010bc5f:	8b 45 90             	mov    -0x70(%ebp),%eax
c010bc62:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010bc65:	0f a3 10             	bt     %edx,(%eax)
c010bc68:	19 c0                	sbb    %eax,%eax
c010bc6a:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c010bc6d:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c010bc71:	0f 95 c0             	setne  %al
c010bc74:	0f b6 c0             	movzbl %al,%eax
c010bc77:	85 c0                	test   %eax,%eax
c010bc79:	74 0b                	je     c010bc86 <next_check+0x41e>
c010bc7b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010bc7e:	8b 40 08             	mov    0x8(%eax),%eax
c010bc81:	83 f8 03             	cmp    $0x3,%eax
c010bc84:	74 24                	je     c010bcaa <next_check+0x442>
c010bc86:	c7 44 24 0c 24 3d 12 	movl   $0xc0123d24,0xc(%esp)
c010bc8d:	c0 
c010bc8e:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010bc95:	c0 
c010bc96:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c010bc9d:	00 
c010bc9e:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010bca5:	e8 6c 55 ff ff       	call   c0101216 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c010bcaa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010bcb1:	e8 a7 08 00 00       	call   c010c55d <alloc_pages>
c010bcb6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010bcb9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010bcbc:	83 e8 24             	sub    $0x24,%eax
c010bcbf:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010bcc2:	74 24                	je     c010bce8 <next_check+0x480>
c010bcc4:	c7 44 24 0c 4a 3d 12 	movl   $0xc0123d4a,0xc(%esp)
c010bccb:	c0 
c010bccc:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010bcd3:	c0 
c010bcd4:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
c010bcdb:	00 
c010bcdc:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010bce3:	e8 2e 55 ff ff       	call   c0101216 <__panic>
    free_page(p0);
c010bce8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010bcef:	00 
c010bcf0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bcf3:	89 04 24             	mov    %eax,(%esp)
c010bcf6:	e8 cd 08 00 00       	call   c010c5c8 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c010bcfb:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010bd02:	e8 56 08 00 00       	call   c010c55d <alloc_pages>
c010bd07:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010bd0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010bd0d:	83 c0 24             	add    $0x24,%eax
c010bd10:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010bd13:	74 24                	je     c010bd39 <next_check+0x4d1>
c010bd15:	c7 44 24 0c 68 3d 12 	movl   $0xc0123d68,0xc(%esp)
c010bd1c:	c0 
c010bd1d:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010bd24:	c0 
c010bd25:	c7 44 24 04 36 01 00 	movl   $0x136,0x4(%esp)
c010bd2c:	00 
c010bd2d:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010bd34:	e8 dd 54 ff ff       	call   c0101216 <__panic>

    free_pages(p0, 2);
c010bd39:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010bd40:	00 
c010bd41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bd44:	89 04 24             	mov    %eax,(%esp)
c010bd47:	e8 7c 08 00 00       	call   c010c5c8 <free_pages>
    free_page(p2);
c010bd4c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010bd53:	00 
c010bd54:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010bd57:	89 04 24             	mov    %eax,(%esp)
c010bd5a:	e8 69 08 00 00       	call   c010c5c8 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c010bd5f:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010bd66:	e8 f2 07 00 00       	call   c010c55d <alloc_pages>
c010bd6b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010bd6e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010bd72:	75 24                	jne    c010bd98 <next_check+0x530>
c010bd74:	c7 44 24 0c 88 3d 12 	movl   $0xc0123d88,0xc(%esp)
c010bd7b:	c0 
c010bd7c:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010bd83:	c0 
c010bd84:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c010bd8b:	00 
c010bd8c:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010bd93:	e8 7e 54 ff ff       	call   c0101216 <__panic>
    assert(alloc_page() == NULL);
c010bd98:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010bd9f:	e8 b9 07 00 00       	call   c010c55d <alloc_pages>
c010bda4:	85 c0                	test   %eax,%eax
c010bda6:	74 24                	je     c010bdcc <next_check+0x564>
c010bda8:	c7 44 24 0c e6 3b 12 	movl   $0xc0123be6,0xc(%esp)
c010bdaf:	c0 
c010bdb0:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010bdb7:	c0 
c010bdb8:	c7 44 24 04 3c 01 00 	movl   $0x13c,0x4(%esp)
c010bdbf:	00 
c010bdc0:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010bdc7:	e8 4a 54 ff ff       	call   c0101216 <__panic>

    assert(nr_free == 0);
c010bdcc:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010bdd1:	85 c0                	test   %eax,%eax
c010bdd3:	74 24                	je     c010bdf9 <next_check+0x591>
c010bdd5:	c7 44 24 0c 39 3c 12 	movl   $0xc0123c39,0xc(%esp)
c010bddc:	c0 
c010bddd:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010bde4:	c0 
c010bde5:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c010bdec:	00 
c010bded:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010bdf4:	e8 1d 54 ff ff       	call   c0101216 <__panic>
    nr_free = nr_free_store;
c010bdf9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bdfc:	a3 5c 11 17 c0       	mov    %eax,0xc017115c

    free_list = free_list_store;
c010be01:	8b 45 80             	mov    -0x80(%ebp),%eax
c010be04:	8b 55 84             	mov    -0x7c(%ebp),%edx
c010be07:	a3 54 11 17 c0       	mov    %eax,0xc0171154
c010be0c:	89 15 58 11 17 c0    	mov    %edx,0xc0171158
    free_pages(p0, 5);
c010be12:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c010be19:	00 
c010be1a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010be1d:	89 04 24             	mov    %eax,(%esp)
c010be20:	e8 a3 07 00 00       	call   c010c5c8 <free_pages>

    le = &free_list;
c010be25:	c7 45 ec 54 11 17 c0 	movl   $0xc0171154,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010be2c:	eb 1d                	jmp    c010be4b <next_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c010be2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010be31:	83 e8 10             	sub    $0x10,%eax
c010be34:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c010be37:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010be3b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010be3e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010be41:	8b 40 08             	mov    0x8(%eax),%eax
c010be44:	29 c2                	sub    %eax,%edx
c010be46:	89 d0                	mov    %edx,%eax
c010be48:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010be4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010be4e:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010be51:	8b 45 88             	mov    -0x78(%ebp),%eax
c010be54:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010be57:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010be5a:	81 7d ec 54 11 17 c0 	cmpl   $0xc0171154,-0x14(%ebp)
c010be61:	75 cb                	jne    c010be2e <next_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c010be63:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010be67:	74 24                	je     c010be8d <next_check+0x625>
c010be69:	c7 44 24 0c a6 3d 12 	movl   $0xc0123da6,0xc(%esp)
c010be70:	c0 
c010be71:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010be78:	c0 
c010be79:	c7 44 24 04 49 01 00 	movl   $0x149,0x4(%esp)
c010be80:	00 
c010be81:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010be88:	e8 89 53 ff ff       	call   c0101216 <__panic>
    assert(total == 0);
c010be8d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010be91:	74 24                	je     c010beb7 <next_check+0x64f>
c010be93:	c7 44 24 0c b1 3d 12 	movl   $0xc0123db1,0xc(%esp)
c010be9a:	c0 
c010be9b:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010bea2:	c0 
c010bea3:	c7 44 24 04 4a 01 00 	movl   $0x14a,0x4(%esp)
c010beaa:	00 
c010beab:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010beb2:	e8 5f 53 ff ff       	call   c0101216 <__panic>
}
c010beb7:	81 c4 94 00 00 00    	add    $0x94,%esp
c010bebd:	5b                   	pop    %ebx
c010bebe:	5d                   	pop    %ebp
c010bebf:	c3                   	ret    

c010bec0 <nextfit_user_check>:

static void
nextfit_user_check(void){
c010bec0:	55                   	push   %ebp
c010bec1:	89 e5                	mov    %esp,%ebp
c010bec3:	83 ec 38             	sub    $0x38,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c010bec6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010becd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bed3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bed6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c010bed9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010bee0:	e8 78 06 00 00       	call   c010c55d <alloc_pages>
c010bee5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bee8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010beec:	75 24                	jne    c010bf12 <nextfit_user_check+0x52>
c010beee:	c7 44 24 0c c4 3a 12 	movl   $0xc0123ac4,0xc(%esp)
c010bef5:	c0 
c010bef6:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010befd:	c0 
c010befe:	c7 44 24 04 51 01 00 	movl   $0x151,0x4(%esp)
c010bf05:	00 
c010bf06:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010bf0d:	e8 04 53 ff ff       	call   c0101216 <__panic>
    cprintf("assert((p0 = alloc_page()) != NULL)\n");
c010bf12:	c7 04 24 bc 3d 12 c0 	movl   $0xc0123dbc,(%esp)
c010bf19:	e8 d5 44 ff ff       	call   c01003f3 <cprintf>
    assert((p1 = alloc_page()) != NULL);	
c010bf1e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010bf25:	e8 33 06 00 00       	call   c010c55d <alloc_pages>
c010bf2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bf2d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bf31:	75 24                	jne    c010bf57 <nextfit_user_check+0x97>
c010bf33:	c7 44 24 0c e0 3a 12 	movl   $0xc0123ae0,0xc(%esp)
c010bf3a:	c0 
c010bf3b:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010bf42:	c0 
c010bf43:	c7 44 24 04 53 01 00 	movl   $0x153,0x4(%esp)
c010bf4a:	00 
c010bf4b:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010bf52:	e8 bf 52 ff ff       	call   c0101216 <__panic>
    cprintf("assert((p1 = alloc_page()) != NULL)\n");
c010bf57:	c7 04 24 e4 3d 12 c0 	movl   $0xc0123de4,(%esp)
c010bf5e:	e8 90 44 ff ff       	call   c01003f3 <cprintf>
    assert((p2 = alloc_page()) != NULL);
c010bf63:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010bf6a:	e8 ee 05 00 00       	call   c010c55d <alloc_pages>
c010bf6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bf72:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bf76:	75 24                	jne    c010bf9c <nextfit_user_check+0xdc>
c010bf78:	c7 44 24 0c fc 3a 12 	movl   $0xc0123afc,0xc(%esp)
c010bf7f:	c0 
c010bf80:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010bf87:	c0 
c010bf88:	c7 44 24 04 55 01 00 	movl   $0x155,0x4(%esp)
c010bf8f:	00 
c010bf90:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010bf97:	e8 7a 52 ff ff       	call   c0101216 <__panic>
    cprintf("assert((p2 = alloc_page()) != NULL)\n");
c010bf9c:	c7 04 24 0c 3e 12 c0 	movl   $0xc0123e0c,(%esp)
c010bfa3:	e8 4b 44 ff ff       	call   c01003f3 <cprintf>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c010bfa8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bfab:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010bfae:	74 10                	je     c010bfc0 <nextfit_user_check+0x100>
c010bfb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bfb3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010bfb6:	74 08                	je     c010bfc0 <nextfit_user_check+0x100>
c010bfb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bfbb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010bfbe:	75 24                	jne    c010bfe4 <nextfit_user_check+0x124>
c010bfc0:	c7 44 24 0c 18 3b 12 	movl   $0xc0123b18,0xc(%esp)
c010bfc7:	c0 
c010bfc8:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010bfcf:	c0 
c010bfd0:	c7 44 24 04 58 01 00 	movl   $0x158,0x4(%esp)
c010bfd7:	00 
c010bfd8:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010bfdf:	e8 32 52 ff ff       	call   c0101216 <__panic>
    cprintf("assert(p0 != p1 && p0 != p2 && p1 != p2)\n");
c010bfe4:	c7 04 24 34 3e 12 c0 	movl   $0xc0123e34,(%esp)
c010bfeb:	e8 03 44 ff ff       	call   c01003f3 <cprintf>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c010bff0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bff3:	89 04 24             	mov    %eax,(%esp)
c010bff6:	e8 3c ec ff ff       	call   c010ac37 <page_ref>
c010bffb:	85 c0                	test   %eax,%eax
c010bffd:	75 1e                	jne    c010c01d <nextfit_user_check+0x15d>
c010bfff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c002:	89 04 24             	mov    %eax,(%esp)
c010c005:	e8 2d ec ff ff       	call   c010ac37 <page_ref>
c010c00a:	85 c0                	test   %eax,%eax
c010c00c:	75 0f                	jne    c010c01d <nextfit_user_check+0x15d>
c010c00e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c011:	89 04 24             	mov    %eax,(%esp)
c010c014:	e8 1e ec ff ff       	call   c010ac37 <page_ref>
c010c019:	85 c0                	test   %eax,%eax
c010c01b:	74 24                	je     c010c041 <nextfit_user_check+0x181>
c010c01d:	c7 44 24 0c 3c 3b 12 	movl   $0xc0123b3c,0xc(%esp)
c010c024:	c0 
c010c025:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010c02c:	c0 
c010c02d:	c7 44 24 04 5a 01 00 	movl   $0x15a,0x4(%esp)
c010c034:	00 
c010c035:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010c03c:	e8 d5 51 ff ff       	call   c0101216 <__panic>
    cprintf("assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0)\n");
c010c041:	c7 04 24 60 3e 12 c0 	movl   $0xc0123e60,(%esp)
c010c048:	e8 a6 43 ff ff       	call   c01003f3 <cprintf>


    assert(page2pa(p0) < npage * PGSIZE);
c010c04d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c050:	89 04 24             	mov    %eax,(%esp)
c010c053:	e8 c9 eb ff ff       	call   c010ac21 <page2pa>
c010c058:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c010c05e:	c1 e2 0c             	shl    $0xc,%edx
c010c061:	39 d0                	cmp    %edx,%eax
c010c063:	72 24                	jb     c010c089 <nextfit_user_check+0x1c9>
c010c065:	c7 44 24 0c 78 3b 12 	movl   $0xc0123b78,0xc(%esp)
c010c06c:	c0 
c010c06d:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010c074:	c0 
c010c075:	c7 44 24 04 5e 01 00 	movl   $0x15e,0x4(%esp)
c010c07c:	00 
c010c07d:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010c084:	e8 8d 51 ff ff       	call   c0101216 <__panic>
    cprintf("assert(page2pa(p0) < npage * PGSIZE)\n");
c010c089:	c7 04 24 a8 3e 12 c0 	movl   $0xc0123ea8,(%esp)
c010c090:	e8 5e 43 ff ff       	call   c01003f3 <cprintf>
    assert(page2pa(p1) < npage * PGSIZE);
c010c095:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c098:	89 04 24             	mov    %eax,(%esp)
c010c09b:	e8 81 eb ff ff       	call   c010ac21 <page2pa>
c010c0a0:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c010c0a6:	c1 e2 0c             	shl    $0xc,%edx
c010c0a9:	39 d0                	cmp    %edx,%eax
c010c0ab:	72 24                	jb     c010c0d1 <nextfit_user_check+0x211>
c010c0ad:	c7 44 24 0c 95 3b 12 	movl   $0xc0123b95,0xc(%esp)
c010c0b4:	c0 
c010c0b5:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010c0bc:	c0 
c010c0bd:	c7 44 24 04 60 01 00 	movl   $0x160,0x4(%esp)
c010c0c4:	00 
c010c0c5:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010c0cc:	e8 45 51 ff ff       	call   c0101216 <__panic>
    cprintf("assert(page2pa(p01) < npage * PGSIZE)\n");
c010c0d1:	c7 04 24 d0 3e 12 c0 	movl   $0xc0123ed0,(%esp)
c010c0d8:	e8 16 43 ff ff       	call   c01003f3 <cprintf>
    assert(page2pa(p2) < npage * PGSIZE);
c010c0dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0e0:	89 04 24             	mov    %eax,(%esp)
c010c0e3:	e8 39 eb ff ff       	call   c010ac21 <page2pa>
c010c0e8:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c010c0ee:	c1 e2 0c             	shl    $0xc,%edx
c010c0f1:	39 d0                	cmp    %edx,%eax
c010c0f3:	72 24                	jb     c010c119 <nextfit_user_check+0x259>
c010c0f5:	c7 44 24 0c b2 3b 12 	movl   $0xc0123bb2,0xc(%esp)
c010c0fc:	c0 
c010c0fd:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010c104:	c0 
c010c105:	c7 44 24 04 62 01 00 	movl   $0x162,0x4(%esp)
c010c10c:	00 
c010c10d:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010c114:	e8 fd 50 ff ff       	call   c0101216 <__panic>
    cprintf("assert(page2pa(p2) < npage * PGSIZE)\n");
c010c119:	c7 04 24 f8 3e 12 c0 	movl   $0xc0123ef8,(%esp)
c010c120:	e8 ce 42 ff ff       	call   c01003f3 <cprintf>

    list_entry_t free_list_store = free_list;
c010c125:	a1 54 11 17 c0       	mov    0xc0171154,%eax
c010c12a:	8b 15 58 11 17 c0    	mov    0xc0171158,%edx
c010c130:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010c133:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010c136:	c7 45 e4 54 11 17 c0 	movl   $0xc0171154,-0x1c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010c13d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c140:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c143:	89 50 04             	mov    %edx,0x4(%eax)
c010c146:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c149:	8b 50 04             	mov    0x4(%eax),%edx
c010c14c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c14f:	89 10                	mov    %edx,(%eax)
c010c151:	c7 45 e0 54 11 17 c0 	movl   $0xc0171154,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c158:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c15b:	8b 40 04             	mov    0x4(%eax),%eax
c010c15e:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010c161:	0f 94 c0             	sete   %al
c010c164:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c010c167:	85 c0                	test   %eax,%eax
c010c169:	75 24                	jne    c010c18f <nextfit_user_check+0x2cf>
c010c16b:	c7 44 24 0c cf 3b 12 	movl   $0xc0123bcf,0xc(%esp)
c010c172:	c0 
c010c173:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010c17a:	c0 
c010c17b:	c7 44 24 04 67 01 00 	movl   $0x167,0x4(%esp)
c010c182:	00 
c010c183:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010c18a:	e8 87 50 ff ff       	call   c0101216 <__panic>

    unsigned int nr_free_store = nr_free;
c010c18f:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010c194:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c010c197:	c7 05 5c 11 17 c0 00 	movl   $0x0,0xc017115c
c010c19e:	00 00 00 
    cprintf("assert(alloc_page() != NULL) because of swap out! \n");
c010c1a1:	c7 04 24 20 3f 12 c0 	movl   $0xc0123f20,(%esp)
c010c1a8:	e8 46 42 ff ff       	call   c01003f3 <cprintf>

    free_page(p0);
c010c1ad:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c1b4:	00 
c010c1b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c1b8:	89 04 24             	mov    %eax,(%esp)
c010c1bb:	e8 08 04 00 00       	call   c010c5c8 <free_pages>
    cprintf("free_page(p0)\n");
c010c1c0:	c7 04 24 54 3f 12 c0 	movl   $0xc0123f54,(%esp)
c010c1c7:	e8 27 42 ff ff       	call   c01003f3 <cprintf>
    free_page(p1);
c010c1cc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c1d3:	00 
c010c1d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c1d7:	89 04 24             	mov    %eax,(%esp)
c010c1da:	e8 e9 03 00 00       	call   c010c5c8 <free_pages>
    cprintf("free_page(p1)\n");
c010c1df:	c7 04 24 63 3f 12 c0 	movl   $0xc0123f63,(%esp)
c010c1e6:	e8 08 42 ff ff       	call   c01003f3 <cprintf>
    free_page(p2);
c010c1eb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c1f2:	00 
c010c1f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1f6:	89 04 24             	mov    %eax,(%esp)
c010c1f9:	e8 ca 03 00 00       	call   c010c5c8 <free_pages>
    cprintf("free_page(p2)\n");
c010c1fe:	c7 04 24 72 3f 12 c0 	movl   $0xc0123f72,(%esp)
c010c205:	e8 e9 41 ff ff       	call   c01003f3 <cprintf>
    assert(nr_free == 3);
c010c20a:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010c20f:	83 f8 03             	cmp    $0x3,%eax
c010c212:	74 24                	je     c010c238 <nextfit_user_check+0x378>
c010c214:	c7 44 24 0c fb 3b 12 	movl   $0xc0123bfb,0xc(%esp)
c010c21b:	c0 
c010c21c:	c7 44 24 08 46 3a 12 	movl   $0xc0123a46,0x8(%esp)
c010c223:	c0 
c010c224:	c7 44 24 04 73 01 00 	movl   $0x173,0x4(%esp)
c010c22b:	00 
c010c22c:	c7 04 24 5b 3a 12 c0 	movl   $0xc0123a5b,(%esp)
c010c233:	e8 de 4f ff ff       	call   c0101216 <__panic>
    cprintf("assert(nr_free == 3)\n");
c010c238:	c7 04 24 81 3f 12 c0 	movl   $0xc0123f81,(%esp)
c010c23f:	e8 af 41 ff ff       	call   c01003f3 <cprintf>
}
c010c244:	c9                   	leave  
c010c245:	c3                   	ret    

c010c246 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010c246:	55                   	push   %ebp
c010c247:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010c249:	8b 55 08             	mov    0x8(%ebp),%edx
c010c24c:	a1 6c 11 17 c0       	mov    0xc017116c,%eax
c010c251:	29 c2                	sub    %eax,%edx
c010c253:	89 d0                	mov    %edx,%eax
c010c255:	c1 f8 02             	sar    $0x2,%eax
c010c258:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c010c25e:	5d                   	pop    %ebp
c010c25f:	c3                   	ret    

c010c260 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010c260:	55                   	push   %ebp
c010c261:	89 e5                	mov    %esp,%ebp
c010c263:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010c266:	8b 45 08             	mov    0x8(%ebp),%eax
c010c269:	89 04 24             	mov    %eax,(%esp)
c010c26c:	e8 d5 ff ff ff       	call   c010c246 <page2ppn>
c010c271:	c1 e0 0c             	shl    $0xc,%eax
}
c010c274:	c9                   	leave  
c010c275:	c3                   	ret    

c010c276 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010c276:	55                   	push   %ebp
c010c277:	89 e5                	mov    %esp,%ebp
c010c279:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010c27c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c27f:	c1 e8 0c             	shr    $0xc,%eax
c010c282:	89 c2                	mov    %eax,%edx
c010c284:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c010c289:	39 c2                	cmp    %eax,%edx
c010c28b:	72 1c                	jb     c010c2a9 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010c28d:	c7 44 24 08 e0 3f 12 	movl   $0xc0123fe0,0x8(%esp)
c010c294:	c0 
c010c295:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c010c29c:	00 
c010c29d:	c7 04 24 ff 3f 12 c0 	movl   $0xc0123fff,(%esp)
c010c2a4:	e8 6d 4f ff ff       	call   c0101216 <__panic>
    }
    return &pages[PPN(pa)];
c010c2a9:	8b 0d 6c 11 17 c0    	mov    0xc017116c,%ecx
c010c2af:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2b2:	c1 e8 0c             	shr    $0xc,%eax
c010c2b5:	89 c2                	mov    %eax,%edx
c010c2b7:	89 d0                	mov    %edx,%eax
c010c2b9:	c1 e0 03             	shl    $0x3,%eax
c010c2bc:	01 d0                	add    %edx,%eax
c010c2be:	c1 e0 02             	shl    $0x2,%eax
c010c2c1:	01 c8                	add    %ecx,%eax
}
c010c2c3:	c9                   	leave  
c010c2c4:	c3                   	ret    

c010c2c5 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010c2c5:	55                   	push   %ebp
c010c2c6:	89 e5                	mov    %esp,%ebp
c010c2c8:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010c2cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2ce:	89 04 24             	mov    %eax,(%esp)
c010c2d1:	e8 8a ff ff ff       	call   c010c260 <page2pa>
c010c2d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c2d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2dc:	c1 e8 0c             	shr    $0xc,%eax
c010c2df:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c2e2:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c010c2e7:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010c2ea:	72 23                	jb     c010c30f <page2kva+0x4a>
c010c2ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c2f3:	c7 44 24 08 10 40 12 	movl   $0xc0124010,0x8(%esp)
c010c2fa:	c0 
c010c2fb:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010c302:	00 
c010c303:	c7 04 24 ff 3f 12 c0 	movl   $0xc0123fff,(%esp)
c010c30a:	e8 07 4f ff ff       	call   c0101216 <__panic>
c010c30f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c312:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010c317:	c9                   	leave  
c010c318:	c3                   	ret    

c010c319 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c010c319:	55                   	push   %ebp
c010c31a:	89 e5                	mov    %esp,%ebp
c010c31c:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c010c31f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c322:	83 e0 01             	and    $0x1,%eax
c010c325:	85 c0                	test   %eax,%eax
c010c327:	75 1c                	jne    c010c345 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c010c329:	c7 44 24 08 34 40 12 	movl   $0xc0124034,0x8(%esp)
c010c330:	c0 
c010c331:	c7 44 24 04 76 00 00 	movl   $0x76,0x4(%esp)
c010c338:	00 
c010c339:	c7 04 24 ff 3f 12 c0 	movl   $0xc0123fff,(%esp)
c010c340:	e8 d1 4e ff ff       	call   c0101216 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c010c345:	8b 45 08             	mov    0x8(%ebp),%eax
c010c348:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010c34d:	89 04 24             	mov    %eax,(%esp)
c010c350:	e8 21 ff ff ff       	call   c010c276 <pa2page>
}
c010c355:	c9                   	leave  
c010c356:	c3                   	ret    

c010c357 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c010c357:	55                   	push   %ebp
c010c358:	89 e5                	mov    %esp,%ebp
c010c35a:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c010c35d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c360:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010c365:	89 04 24             	mov    %eax,(%esp)
c010c368:	e8 09 ff ff ff       	call   c010c276 <pa2page>
}
c010c36d:	c9                   	leave  
c010c36e:	c3                   	ret    

c010c36f <page_ref>:

static inline int
page_ref(struct Page *page) {
c010c36f:	55                   	push   %ebp
c010c370:	89 e5                	mov    %esp,%ebp
    return page->ref;
c010c372:	8b 45 08             	mov    0x8(%ebp),%eax
c010c375:	8b 00                	mov    (%eax),%eax
}
c010c377:	5d                   	pop    %ebp
c010c378:	c3                   	ret    

c010c379 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c010c379:	55                   	push   %ebp
c010c37a:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c010c37c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c37f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c382:	89 10                	mov    %edx,(%eax)
}
c010c384:	5d                   	pop    %ebp
c010c385:	c3                   	ret    

c010c386 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c010c386:	55                   	push   %ebp
c010c387:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c010c389:	8b 45 08             	mov    0x8(%ebp),%eax
c010c38c:	8b 00                	mov    (%eax),%eax
c010c38e:	8d 50 01             	lea    0x1(%eax),%edx
c010c391:	8b 45 08             	mov    0x8(%ebp),%eax
c010c394:	89 10                	mov    %edx,(%eax)
    return page->ref;
c010c396:	8b 45 08             	mov    0x8(%ebp),%eax
c010c399:	8b 00                	mov    (%eax),%eax
}
c010c39b:	5d                   	pop    %ebp
c010c39c:	c3                   	ret    

c010c39d <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c010c39d:	55                   	push   %ebp
c010c39e:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c010c3a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3a3:	8b 00                	mov    (%eax),%eax
c010c3a5:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c3a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3ab:	89 10                	mov    %edx,(%eax)
    return page->ref;
c010c3ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3b0:	8b 00                	mov    (%eax),%eax
}
c010c3b2:	5d                   	pop    %ebp
c010c3b3:	c3                   	ret    

c010c3b4 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010c3b4:	55                   	push   %ebp
c010c3b5:	89 e5                	mov    %esp,%ebp
c010c3b7:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010c3ba:	9c                   	pushf  
c010c3bb:	58                   	pop    %eax
c010c3bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010c3bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010c3c2:	25 00 02 00 00       	and    $0x200,%eax
c010c3c7:	85 c0                	test   %eax,%eax
c010c3c9:	74 0c                	je     c010c3d7 <__intr_save+0x23>
        intr_disable();
c010c3cb:	e8 d1 60 ff ff       	call   c01024a1 <intr_disable>
        return 1;
c010c3d0:	b8 01 00 00 00       	mov    $0x1,%eax
c010c3d5:	eb 05                	jmp    c010c3dc <__intr_save+0x28>
    }
    return 0;
c010c3d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c3dc:	c9                   	leave  
c010c3dd:	c3                   	ret    

c010c3de <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010c3de:	55                   	push   %ebp
c010c3df:	89 e5                	mov    %esp,%ebp
c010c3e1:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010c3e4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c3e8:	74 05                	je     c010c3ef <__intr_restore+0x11>
        intr_enable();
c010c3ea:	e8 ac 60 ff ff       	call   c010249b <intr_enable>
    }
}
c010c3ef:	c9                   	leave  
c010c3f0:	c3                   	ret    

c010c3f1 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c010c3f1:	55                   	push   %ebp
c010c3f2:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c010c3f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3f7:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c010c3fa:	b8 23 00 00 00       	mov    $0x23,%eax
c010c3ff:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c010c401:	b8 23 00 00 00       	mov    $0x23,%eax
c010c406:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c010c408:	b8 10 00 00 00       	mov    $0x10,%eax
c010c40d:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c010c40f:	b8 10 00 00 00       	mov    $0x10,%eax
c010c414:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c010c416:	b8 10 00 00 00       	mov    $0x10,%eax
c010c41b:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c010c41d:	ea 24 c4 10 c0 08 00 	ljmp   $0x8,$0xc010c424
}
c010c424:	5d                   	pop    %ebp
c010c425:	c3                   	ret    

c010c426 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c010c426:	55                   	push   %ebp
c010c427:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c010c429:	8b 45 08             	mov    0x8(%ebp),%eax
c010c42c:	a3 e4 df 16 c0       	mov    %eax,0xc016dfe4
}
c010c431:	5d                   	pop    %ebp
c010c432:	c3                   	ret    

c010c433 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c010c433:	55                   	push   %ebp
c010c434:	89 e5                	mov    %esp,%ebp
c010c436:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c010c439:	b8 00 a0 16 c0       	mov    $0xc016a000,%eax
c010c43e:	89 04 24             	mov    %eax,(%esp)
c010c441:	e8 e0 ff ff ff       	call   c010c426 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c010c446:	66 c7 05 e8 df 16 c0 	movw   $0x10,0xc016dfe8
c010c44d:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c010c44f:	66 c7 05 48 aa 16 c0 	movw   $0x68,0xc016aa48
c010c456:	68 00 
c010c458:	b8 e0 df 16 c0       	mov    $0xc016dfe0,%eax
c010c45d:	66 a3 4a aa 16 c0    	mov    %ax,0xc016aa4a
c010c463:	b8 e0 df 16 c0       	mov    $0xc016dfe0,%eax
c010c468:	c1 e8 10             	shr    $0x10,%eax
c010c46b:	a2 4c aa 16 c0       	mov    %al,0xc016aa4c
c010c470:	0f b6 05 4d aa 16 c0 	movzbl 0xc016aa4d,%eax
c010c477:	83 e0 f0             	and    $0xfffffff0,%eax
c010c47a:	83 c8 09             	or     $0x9,%eax
c010c47d:	a2 4d aa 16 c0       	mov    %al,0xc016aa4d
c010c482:	0f b6 05 4d aa 16 c0 	movzbl 0xc016aa4d,%eax
c010c489:	83 e0 ef             	and    $0xffffffef,%eax
c010c48c:	a2 4d aa 16 c0       	mov    %al,0xc016aa4d
c010c491:	0f b6 05 4d aa 16 c0 	movzbl 0xc016aa4d,%eax
c010c498:	83 e0 9f             	and    $0xffffff9f,%eax
c010c49b:	a2 4d aa 16 c0       	mov    %al,0xc016aa4d
c010c4a0:	0f b6 05 4d aa 16 c0 	movzbl 0xc016aa4d,%eax
c010c4a7:	83 c8 80             	or     $0xffffff80,%eax
c010c4aa:	a2 4d aa 16 c0       	mov    %al,0xc016aa4d
c010c4af:	0f b6 05 4e aa 16 c0 	movzbl 0xc016aa4e,%eax
c010c4b6:	83 e0 f0             	and    $0xfffffff0,%eax
c010c4b9:	a2 4e aa 16 c0       	mov    %al,0xc016aa4e
c010c4be:	0f b6 05 4e aa 16 c0 	movzbl 0xc016aa4e,%eax
c010c4c5:	83 e0 ef             	and    $0xffffffef,%eax
c010c4c8:	a2 4e aa 16 c0       	mov    %al,0xc016aa4e
c010c4cd:	0f b6 05 4e aa 16 c0 	movzbl 0xc016aa4e,%eax
c010c4d4:	83 e0 df             	and    $0xffffffdf,%eax
c010c4d7:	a2 4e aa 16 c0       	mov    %al,0xc016aa4e
c010c4dc:	0f b6 05 4e aa 16 c0 	movzbl 0xc016aa4e,%eax
c010c4e3:	83 c8 40             	or     $0x40,%eax
c010c4e6:	a2 4e aa 16 c0       	mov    %al,0xc016aa4e
c010c4eb:	0f b6 05 4e aa 16 c0 	movzbl 0xc016aa4e,%eax
c010c4f2:	83 e0 7f             	and    $0x7f,%eax
c010c4f5:	a2 4e aa 16 c0       	mov    %al,0xc016aa4e
c010c4fa:	b8 e0 df 16 c0       	mov    $0xc016dfe0,%eax
c010c4ff:	c1 e8 18             	shr    $0x18,%eax
c010c502:	a2 4f aa 16 c0       	mov    %al,0xc016aa4f

    // reload all segment registers
    lgdt(&gdt_pd);
c010c507:	c7 04 24 50 aa 16 c0 	movl   $0xc016aa50,(%esp)
c010c50e:	e8 de fe ff ff       	call   c010c3f1 <lgdt>
c010c513:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c010c519:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c010c51d:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c010c520:	c9                   	leave  
c010c521:	c3                   	ret    

c010c522 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c010c522:	55                   	push   %ebp
c010c523:	89 e5                	mov    %esp,%ebp
c010c525:	83 ec 08             	sub    $0x8,%esp
    pmm_manager = &firstfit_pmm_manager;
c010c528:	c7 05 64 11 17 c0 60 	movl   $0xc0123960,0xc0171164
c010c52f:	39 12 c0 
    //cprintf("memory management: %s\n", pmm_manager->name);
    pmm_manager->init();
c010c532:	a1 64 11 17 c0       	mov    0xc0171164,%eax
c010c537:	8b 40 04             	mov    0x4(%eax),%eax
c010c53a:	ff d0                	call   *%eax
}
c010c53c:	c9                   	leave  
c010c53d:	c3                   	ret    

c010c53e <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c010c53e:	55                   	push   %ebp
c010c53f:	89 e5                	mov    %esp,%ebp
c010c541:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c010c544:	a1 64 11 17 c0       	mov    0xc0171164,%eax
c010c549:	8b 40 08             	mov    0x8(%eax),%eax
c010c54c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c54f:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c553:	8b 55 08             	mov    0x8(%ebp),%edx
c010c556:	89 14 24             	mov    %edx,(%esp)
c010c559:	ff d0                	call   *%eax
}
c010c55b:	c9                   	leave  
c010c55c:	c3                   	ret    

c010c55d <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c010c55d:	55                   	push   %ebp
c010c55e:	89 e5                	mov    %esp,%ebp
c010c560:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c010c563:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c010c56a:	e8 45 fe ff ff       	call   c010c3b4 <__intr_save>
c010c56f:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c010c572:	a1 64 11 17 c0       	mov    0xc0171164,%eax
c010c577:	8b 40 0c             	mov    0xc(%eax),%eax
c010c57a:	8b 55 08             	mov    0x8(%ebp),%edx
c010c57d:	89 14 24             	mov    %edx,(%esp)
c010c580:	ff d0                	call   *%eax
c010c582:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c010c585:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c588:	89 04 24             	mov    %eax,(%esp)
c010c58b:	e8 4e fe ff ff       	call   c010c3de <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c010c590:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c594:	75 2d                	jne    c010c5c3 <alloc_pages+0x66>
c010c596:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010c59a:	77 27                	ja     c010c5c3 <alloc_pages+0x66>
c010c59c:	a1 4c e0 16 c0       	mov    0xc016e04c,%eax
c010c5a1:	85 c0                	test   %eax,%eax
c010c5a3:	74 1e                	je     c010c5c3 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c010c5a5:	8b 55 08             	mov    0x8(%ebp),%edx
c010c5a8:	a1 50 12 17 c0       	mov    0xc0171250,%eax
c010c5ad:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010c5b4:	00 
c010c5b5:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c5b9:	89 04 24             	mov    %eax,(%esp)
c010c5bc:	e8 c0 1c 00 00       	call   c010e281 <swap_out>
    }
c010c5c1:	eb a7                	jmp    c010c56a <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c010c5c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c5c6:	c9                   	leave  
c010c5c7:	c3                   	ret    

c010c5c8 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c010c5c8:	55                   	push   %ebp
c010c5c9:	89 e5                	mov    %esp,%ebp
c010c5cb:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c5ce:	e8 e1 fd ff ff       	call   c010c3b4 <__intr_save>
c010c5d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c010c5d6:	a1 64 11 17 c0       	mov    0xc0171164,%eax
c010c5db:	8b 40 10             	mov    0x10(%eax),%eax
c010c5de:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c5e1:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c5e5:	8b 55 08             	mov    0x8(%ebp),%edx
c010c5e8:	89 14 24             	mov    %edx,(%esp)
c010c5eb:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c010c5ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5f0:	89 04 24             	mov    %eax,(%esp)
c010c5f3:	e8 e6 fd ff ff       	call   c010c3de <__intr_restore>
}
c010c5f8:	c9                   	leave  
c010c5f9:	c3                   	ret    

c010c5fa <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c010c5fa:	55                   	push   %ebp
c010c5fb:	89 e5                	mov    %esp,%ebp
c010c5fd:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c010c600:	e8 af fd ff ff       	call   c010c3b4 <__intr_save>
c010c605:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c010c608:	a1 64 11 17 c0       	mov    0xc0171164,%eax
c010c60d:	8b 40 14             	mov    0x14(%eax),%eax
c010c610:	ff d0                	call   *%eax
c010c612:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c010c615:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c618:	89 04 24             	mov    %eax,(%esp)
c010c61b:	e8 be fd ff ff       	call   c010c3de <__intr_restore>
    return ret;
c010c620:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c623:	c9                   	leave  
c010c624:	c3                   	ret    

c010c625 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c010c625:	55                   	push   %ebp
c010c626:	89 e5                	mov    %esp,%ebp
c010c628:	57                   	push   %edi
c010c629:	56                   	push   %esi
c010c62a:	53                   	push   %ebx
c010c62b:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c010c631:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c010c638:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c010c63f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    cprintf("\n2.打印物理内存分布\n");
c010c646:	c7 04 24 60 40 12 c0 	movl   $0xc0124060,(%esp)
c010c64d:	e8 a1 3d ff ff       	call   c01003f3 <cprintf>
    cprintf("max physical space %x\n", KMEMSIZE);
c010c652:	c7 44 24 04 00 00 00 	movl   $0x38000000,0x4(%esp)
c010c659:	38 
c010c65a:	c7 04 24 7d 40 12 c0 	movl   $0xc012407d,(%esp)
c010c661:	e8 8d 3d ff ff       	call   c01003f3 <cprintf>
    cprintf("e820map:\n");
c010c666:	c7 04 24 94 40 12 c0 	movl   $0xc0124094,(%esp)
c010c66d:	e8 81 3d ff ff       	call   c01003f3 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c010c672:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010c679:	e9 15 01 00 00       	jmp    c010c793 <page_init+0x16e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010c67e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010c681:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c684:	89 d0                	mov    %edx,%eax
c010c686:	c1 e0 02             	shl    $0x2,%eax
c010c689:	01 d0                	add    %edx,%eax
c010c68b:	c1 e0 02             	shl    $0x2,%eax
c010c68e:	01 c8                	add    %ecx,%eax
c010c690:	8b 50 08             	mov    0x8(%eax),%edx
c010c693:	8b 40 04             	mov    0x4(%eax),%eax
c010c696:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010c699:	89 55 bc             	mov    %edx,-0x44(%ebp)
c010c69c:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010c69f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c6a2:	89 d0                	mov    %edx,%eax
c010c6a4:	c1 e0 02             	shl    $0x2,%eax
c010c6a7:	01 d0                	add    %edx,%eax
c010c6a9:	c1 e0 02             	shl    $0x2,%eax
c010c6ac:	01 c8                	add    %ecx,%eax
c010c6ae:	8b 48 0c             	mov    0xc(%eax),%ecx
c010c6b1:	8b 58 10             	mov    0x10(%eax),%ebx
c010c6b4:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010c6b7:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010c6ba:	01 c8                	add    %ecx,%eax
c010c6bc:	11 da                	adc    %ebx,%edx
c010c6be:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010c6c1:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c010c6c4:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010c6c7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c6ca:	89 d0                	mov    %edx,%eax
c010c6cc:	c1 e0 02             	shl    $0x2,%eax
c010c6cf:	01 d0                	add    %edx,%eax
c010c6d1:	c1 e0 02             	shl    $0x2,%eax
c010c6d4:	01 c8                	add    %ecx,%eax
c010c6d6:	83 c0 14             	add    $0x14,%eax
c010c6d9:	8b 00                	mov    (%eax),%eax
c010c6db:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c010c6e1:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010c6e4:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010c6e7:	83 c0 ff             	add    $0xffffffff,%eax
c010c6ea:	83 d2 ff             	adc    $0xffffffff,%edx
c010c6ed:	89 c6                	mov    %eax,%esi
c010c6ef:	89 d7                	mov    %edx,%edi
c010c6f1:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010c6f4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c6f7:	89 d0                	mov    %edx,%eax
c010c6f9:	c1 e0 02             	shl    $0x2,%eax
c010c6fc:	01 d0                	add    %edx,%eax
c010c6fe:	c1 e0 02             	shl    $0x2,%eax
c010c701:	01 c8                	add    %ecx,%eax
c010c703:	8b 48 0c             	mov    0xc(%eax),%ecx
c010c706:	8b 58 10             	mov    0x10(%eax),%ebx
c010c709:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c010c70f:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c010c713:	89 74 24 14          	mov    %esi,0x14(%esp)
c010c717:	89 7c 24 18          	mov    %edi,0x18(%esp)
c010c71b:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010c71e:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010c721:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c725:	89 54 24 10          	mov    %edx,0x10(%esp)
c010c729:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c72d:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c010c731:	c7 04 24 a0 40 12 c0 	movl   $0xc01240a0,(%esp)
c010c738:	e8 b6 3c ff ff       	call   c01003f3 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c010c73d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010c740:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c743:	89 d0                	mov    %edx,%eax
c010c745:	c1 e0 02             	shl    $0x2,%eax
c010c748:	01 d0                	add    %edx,%eax
c010c74a:	c1 e0 02             	shl    $0x2,%eax
c010c74d:	01 c8                	add    %ecx,%eax
c010c74f:	83 c0 14             	add    $0x14,%eax
c010c752:	8b 00                	mov    (%eax),%eax
c010c754:	83 f8 01             	cmp    $0x1,%eax
c010c757:	75 36                	jne    c010c78f <page_init+0x16a>
            if (maxpa < end && begin < KMEMSIZE) {
c010c759:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c75c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c75f:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010c762:	77 2b                	ja     c010c78f <page_init+0x16a>
c010c764:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010c767:	72 05                	jb     c010c76e <page_init+0x149>
c010c769:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c010c76c:	73 21                	jae    c010c78f <page_init+0x16a>
c010c76e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010c772:	77 1b                	ja     c010c78f <page_init+0x16a>
c010c774:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010c778:	72 09                	jb     c010c783 <page_init+0x15e>
c010c77a:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c010c781:	77 0c                	ja     c010c78f <page_init+0x16a>
                maxpa = end;
c010c783:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010c786:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010c789:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c78c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    uint64_t maxpa = 0;
    cprintf("\n2.打印物理内存分布\n");
    cprintf("max physical space %x\n", KMEMSIZE);
    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c010c78f:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010c793:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010c796:	8b 00                	mov    (%eax),%eax
c010c798:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010c79b:	0f 8f dd fe ff ff    	jg     c010c67e <page_init+0x59>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c010c7a1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c7a5:	72 1d                	jb     c010c7c4 <page_init+0x19f>
c010c7a7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c7ab:	77 09                	ja     c010c7b6 <page_init+0x191>
c010c7ad:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c010c7b4:	76 0e                	jbe    c010c7c4 <page_init+0x19f>
        maxpa = KMEMSIZE;
c010c7b6:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c010c7bd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c010c7c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c7c7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c7ca:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010c7ce:	c1 ea 0c             	shr    $0xc,%edx
c010c7d1:	a3 c0 df 16 c0       	mov    %eax,0xc016dfc0
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c010c7d6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c010c7dd:	b8 48 13 17 c0       	mov    $0xc0171348,%eax
c010c7e2:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c7e5:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010c7e8:	01 d0                	add    %edx,%eax
c010c7ea:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010c7ed:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010c7f0:	ba 00 00 00 00       	mov    $0x0,%edx
c010c7f5:	f7 75 ac             	divl   -0x54(%ebp)
c010c7f8:	89 d0                	mov    %edx,%eax
c010c7fa:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010c7fd:	29 c2                	sub    %eax,%edx
c010c7ff:	89 d0                	mov    %edx,%eax
c010c801:	a3 6c 11 17 c0       	mov    %eax,0xc017116c

    for (i = 0; i < npage; i ++) {
c010c806:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010c80d:	eb 2f                	jmp    c010c83e <page_init+0x219>
        SetPageReserved(pages + i);
c010c80f:	8b 0d 6c 11 17 c0    	mov    0xc017116c,%ecx
c010c815:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c818:	89 d0                	mov    %edx,%eax
c010c81a:	c1 e0 03             	shl    $0x3,%eax
c010c81d:	01 d0                	add    %edx,%eax
c010c81f:	c1 e0 02             	shl    $0x2,%eax
c010c822:	01 c8                	add    %ecx,%eax
c010c824:	83 c0 04             	add    $0x4,%eax
c010c827:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c010c82e:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010c831:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010c834:	8b 55 90             	mov    -0x70(%ebp),%edx
c010c837:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c010c83a:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010c83e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c841:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c010c846:	39 c2                	cmp    %eax,%edx
c010c848:	72 c5                	jb     c010c80f <page_init+0x1ea>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c010c84a:	8b 15 c0 df 16 c0    	mov    0xc016dfc0,%edx
c010c850:	89 d0                	mov    %edx,%eax
c010c852:	c1 e0 03             	shl    $0x3,%eax
c010c855:	01 d0                	add    %edx,%eax
c010c857:	c1 e0 02             	shl    $0x2,%eax
c010c85a:	89 c2                	mov    %eax,%edx
c010c85c:	a1 6c 11 17 c0       	mov    0xc017116c,%eax
c010c861:	01 d0                	add    %edx,%eax
c010c863:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010c866:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c010c86d:	77 23                	ja     c010c892 <page_init+0x26d>
c010c86f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010c872:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c876:	c7 44 24 08 d0 40 12 	movl   $0xc01240d0,0x8(%esp)
c010c87d:	c0 
c010c87e:	c7 44 24 04 ee 00 00 	movl   $0xee,0x4(%esp)
c010c885:	00 
c010c886:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010c88d:	e8 84 49 ff ff       	call   c0101216 <__panic>
c010c892:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010c895:	05 00 00 00 40       	add    $0x40000000,%eax
c010c89a:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c010c89d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010c8a4:	e9 74 01 00 00       	jmp    c010ca1d <page_init+0x3f8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010c8a9:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010c8ac:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c8af:	89 d0                	mov    %edx,%eax
c010c8b1:	c1 e0 02             	shl    $0x2,%eax
c010c8b4:	01 d0                	add    %edx,%eax
c010c8b6:	c1 e0 02             	shl    $0x2,%eax
c010c8b9:	01 c8                	add    %ecx,%eax
c010c8bb:	8b 50 08             	mov    0x8(%eax),%edx
c010c8be:	8b 40 04             	mov    0x4(%eax),%eax
c010c8c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c8c4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c8c7:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010c8ca:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c8cd:	89 d0                	mov    %edx,%eax
c010c8cf:	c1 e0 02             	shl    $0x2,%eax
c010c8d2:	01 d0                	add    %edx,%eax
c010c8d4:	c1 e0 02             	shl    $0x2,%eax
c010c8d7:	01 c8                	add    %ecx,%eax
c010c8d9:	8b 48 0c             	mov    0xc(%eax),%ecx
c010c8dc:	8b 58 10             	mov    0x10(%eax),%ebx
c010c8df:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c8e2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c8e5:	01 c8                	add    %ecx,%eax
c010c8e7:	11 da                	adc    %ebx,%edx
c010c8e9:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010c8ec:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c010c8ef:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010c8f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c8f5:	89 d0                	mov    %edx,%eax
c010c8f7:	c1 e0 02             	shl    $0x2,%eax
c010c8fa:	01 d0                	add    %edx,%eax
c010c8fc:	c1 e0 02             	shl    $0x2,%eax
c010c8ff:	01 c8                	add    %ecx,%eax
c010c901:	83 c0 14             	add    $0x14,%eax
c010c904:	8b 00                	mov    (%eax),%eax
c010c906:	83 f8 01             	cmp    $0x1,%eax
c010c909:	0f 85 0a 01 00 00    	jne    c010ca19 <page_init+0x3f4>
            if (begin < freemem) {
c010c90f:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010c912:	ba 00 00 00 00       	mov    $0x0,%edx
c010c917:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010c91a:	72 17                	jb     c010c933 <page_init+0x30e>
c010c91c:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010c91f:	77 05                	ja     c010c926 <page_init+0x301>
c010c921:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010c924:	76 0d                	jbe    c010c933 <page_init+0x30e>
                begin = freemem;
c010c926:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010c929:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c92c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c010c933:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010c937:	72 1d                	jb     c010c956 <page_init+0x331>
c010c939:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010c93d:	77 09                	ja     c010c948 <page_init+0x323>
c010c93f:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c010c946:	76 0e                	jbe    c010c956 <page_init+0x331>
                end = KMEMSIZE;
c010c948:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c010c94f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c010c956:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c959:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c95c:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010c95f:	0f 87 b4 00 00 00    	ja     c010ca19 <page_init+0x3f4>
c010c965:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010c968:	72 09                	jb     c010c973 <page_init+0x34e>
c010c96a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010c96d:	0f 83 a6 00 00 00    	jae    c010ca19 <page_init+0x3f4>
                begin = ROUNDUP(begin, PGSIZE);
c010c973:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c010c97a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010c97d:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010c980:	01 d0                	add    %edx,%eax
c010c982:	83 e8 01             	sub    $0x1,%eax
c010c985:	89 45 98             	mov    %eax,-0x68(%ebp)
c010c988:	8b 45 98             	mov    -0x68(%ebp),%eax
c010c98b:	ba 00 00 00 00       	mov    $0x0,%edx
c010c990:	f7 75 9c             	divl   -0x64(%ebp)
c010c993:	89 d0                	mov    %edx,%eax
c010c995:	8b 55 98             	mov    -0x68(%ebp),%edx
c010c998:	29 c2                	sub    %eax,%edx
c010c99a:	89 d0                	mov    %edx,%eax
c010c99c:	ba 00 00 00 00       	mov    $0x0,%edx
c010c9a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c9a4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c010c9a7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c9aa:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010c9ad:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010c9b0:	ba 00 00 00 00       	mov    $0x0,%edx
c010c9b5:	89 c7                	mov    %eax,%edi
c010c9b7:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c010c9bd:	89 7d 80             	mov    %edi,-0x80(%ebp)
c010c9c0:	89 d0                	mov    %edx,%eax
c010c9c2:	83 e0 00             	and    $0x0,%eax
c010c9c5:	89 45 84             	mov    %eax,-0x7c(%ebp)
c010c9c8:	8b 45 80             	mov    -0x80(%ebp),%eax
c010c9cb:	8b 55 84             	mov    -0x7c(%ebp),%edx
c010c9ce:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010c9d1:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c010c9d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c9d7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c9da:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010c9dd:	77 3a                	ja     c010ca19 <page_init+0x3f4>
c010c9df:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010c9e2:	72 05                	jb     c010c9e9 <page_init+0x3c4>
c010c9e4:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010c9e7:	73 30                	jae    c010ca19 <page_init+0x3f4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c010c9e9:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010c9ec:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c010c9ef:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c9f2:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010c9f5:	29 c8                	sub    %ecx,%eax
c010c9f7:	19 da                	sbb    %ebx,%edx
c010c9f9:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010c9fd:	c1 ea 0c             	shr    $0xc,%edx
c010ca00:	89 c3                	mov    %eax,%ebx
c010ca02:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ca05:	89 04 24             	mov    %eax,(%esp)
c010ca08:	e8 69 f8 ff ff       	call   c010c276 <pa2page>
c010ca0d:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c010ca11:	89 04 24             	mov    %eax,(%esp)
c010ca14:	e8 25 fb ff ff       	call   c010c53e <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c010ca19:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010ca1d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010ca20:	8b 00                	mov    (%eax),%eax
c010ca22:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010ca25:	0f 8f 7e fe ff ff    	jg     c010c8a9 <page_init+0x284>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c010ca2b:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c010ca31:	5b                   	pop    %ebx
c010ca32:	5e                   	pop    %esi
c010ca33:	5f                   	pop    %edi
c010ca34:	5d                   	pop    %ebp
c010ca35:	c3                   	ret    

c010ca36 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c010ca36:	55                   	push   %ebp
c010ca37:	89 e5                	mov    %esp,%ebp
c010ca39:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c010ca3c:	8b 45 14             	mov    0x14(%ebp),%eax
c010ca3f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ca42:	31 d0                	xor    %edx,%eax
c010ca44:	25 ff 0f 00 00       	and    $0xfff,%eax
c010ca49:	85 c0                	test   %eax,%eax
c010ca4b:	74 24                	je     c010ca71 <boot_map_segment+0x3b>
c010ca4d:	c7 44 24 0c 02 41 12 	movl   $0xc0124102,0xc(%esp)
c010ca54:	c0 
c010ca55:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010ca5c:	c0 
c010ca5d:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c010ca64:	00 
c010ca65:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010ca6c:	e8 a5 47 ff ff       	call   c0101216 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c010ca71:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c010ca78:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca7b:	25 ff 0f 00 00       	and    $0xfff,%eax
c010ca80:	89 c2                	mov    %eax,%edx
c010ca82:	8b 45 10             	mov    0x10(%ebp),%eax
c010ca85:	01 c2                	add    %eax,%edx
c010ca87:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca8a:	01 d0                	add    %edx,%eax
c010ca8c:	83 e8 01             	sub    $0x1,%eax
c010ca8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ca92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ca95:	ba 00 00 00 00       	mov    $0x0,%edx
c010ca9a:	f7 75 f0             	divl   -0x10(%ebp)
c010ca9d:	89 d0                	mov    %edx,%eax
c010ca9f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010caa2:	29 c2                	sub    %eax,%edx
c010caa4:	89 d0                	mov    %edx,%eax
c010caa6:	c1 e8 0c             	shr    $0xc,%eax
c010caa9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c010caac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010caaf:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cab2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cab5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010caba:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c010cabd:	8b 45 14             	mov    0x14(%ebp),%eax
c010cac0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010cac3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cac6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010cacb:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c010cace:	eb 6b                	jmp    c010cb3b <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c010cad0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010cad7:	00 
c010cad8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cadb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cadf:	8b 45 08             	mov    0x8(%ebp),%eax
c010cae2:	89 04 24             	mov    %eax,(%esp)
c010cae5:	e8 b6 01 00 00       	call   c010cca0 <get_pte>
c010caea:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c010caed:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010caf1:	75 24                	jne    c010cb17 <boot_map_segment+0xe1>
c010caf3:	c7 44 24 0c 2e 41 12 	movl   $0xc012412e,0xc(%esp)
c010cafa:	c0 
c010cafb:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010cb02:	c0 
c010cb03:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c010cb0a:	00 
c010cb0b:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010cb12:	e8 ff 46 ff ff       	call   c0101216 <__panic>
        *ptep = pa | PTE_P | perm;
c010cb17:	8b 45 18             	mov    0x18(%ebp),%eax
c010cb1a:	8b 55 14             	mov    0x14(%ebp),%edx
c010cb1d:	09 d0                	or     %edx,%eax
c010cb1f:	83 c8 01             	or     $0x1,%eax
c010cb22:	89 c2                	mov    %eax,%edx
c010cb24:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cb27:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c010cb29:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010cb2d:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c010cb34:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c010cb3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cb3f:	75 8f                	jne    c010cad0 <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c010cb41:	c9                   	leave  
c010cb42:	c3                   	ret    

c010cb43 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c010cb43:	55                   	push   %ebp
c010cb44:	89 e5                	mov    %esp,%ebp
c010cb46:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c010cb49:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010cb50:	e8 08 fa ff ff       	call   c010c55d <alloc_pages>
c010cb55:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c010cb58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cb5c:	75 1c                	jne    c010cb7a <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c010cb5e:	c7 44 24 08 3b 41 12 	movl   $0xc012413b,0x8(%esp)
c010cb65:	c0 
c010cb66:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c010cb6d:	00 
c010cb6e:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010cb75:	e8 9c 46 ff ff       	call   c0101216 <__panic>
    }
    return page2kva(p);
c010cb7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb7d:	89 04 24             	mov    %eax,(%esp)
c010cb80:	e8 40 f7 ff ff       	call   c010c2c5 <page2kva>
}
c010cb85:	c9                   	leave  
c010cb86:	c3                   	ret    

c010cb87 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c010cb87:	55                   	push   %ebp
c010cb88:	89 e5                	mov    %esp,%ebp
c010cb8a:	83 ec 38             	sub    $0x38,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c010cb8d:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010cb92:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cb95:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010cb9c:	77 23                	ja     c010cbc1 <pmm_init+0x3a>
c010cb9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cba1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cba5:	c7 44 24 08 d0 40 12 	movl   $0xc01240d0,0x8(%esp)
c010cbac:	c0 
c010cbad:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c010cbb4:	00 
c010cbb5:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010cbbc:	e8 55 46 ff ff       	call   c0101216 <__panic>
c010cbc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbc4:	05 00 00 00 40       	add    $0x40000000,%eax
c010cbc9:	a3 68 11 17 c0       	mov    %eax,0xc0171168
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c010cbce:	e8 4f f9 ff ff       	call   c010c522 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c010cbd3:	e8 4d fa ff ff       	call   c010c625 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c010cbd8:	e8 01 09 00 00       	call   c010d4de <check_alloc_page>

    check_pgdir();
c010cbdd:	e8 0e 09 00 00       	call   c010d4f0 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c010cbe2:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010cbe7:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010cbed:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010cbf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cbf5:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c010cbfc:	77 23                	ja     c010cc21 <pmm_init+0x9a>
c010cbfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc01:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cc05:	c7 44 24 08 d0 40 12 	movl   $0xc01240d0,0x8(%esp)
c010cc0c:	c0 
c010cc0d:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c010cc14:	00 
c010cc15:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010cc1c:	e8 f5 45 ff ff       	call   c0101216 <__panic>
c010cc21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc24:	05 00 00 00 40       	add    $0x40000000,%eax
c010cc29:	83 c8 03             	or     $0x3,%eax
c010cc2c:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c010cc2e:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010cc33:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c010cc3a:	00 
c010cc3b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010cc42:	00 
c010cc43:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c010cc4a:	38 
c010cc4b:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c010cc52:	c0 
c010cc53:	89 04 24             	mov    %eax,(%esp)
c010cc56:	e8 db fd ff ff       	call   c010ca36 <boot_map_segment>

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c010cc5b:	e8 d3 f7 ff ff       	call   c010c433 <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c010cc60:	e8 4b 0e 00 00       	call   c010dab0 <check_boot_pgdir>
    
    cprintf("\n3. 打印初始页目录表\n");
c010cc65:	c7 04 24 54 41 12 c0 	movl   $0xc0124154,(%esp)
c010cc6c:	e8 82 37 ff ff       	call   c01003f3 <cprintf>
    print_pgdir();
c010cc71:	e8 e5 12 00 00       	call   c010df5b <print_pgdir>
   
    cprintf("\n4. 物理内存管理器\n");
c010cc76:	c7 04 24 72 41 12 c0 	movl   $0xc0124172,(%esp)
c010cc7d:	e8 71 37 ff ff       	call   c01003f3 <cprintf>
    cprintf("memory management: %s\n", pmm_manager->name);
c010cc82:	a1 64 11 17 c0       	mov    0xc0171164,%eax
c010cc87:	8b 00                	mov    (%eax),%eax
c010cc89:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc8d:	c7 04 24 8d 41 12 c0 	movl   $0xc012418d,(%esp)
c010cc94:	e8 5a 37 ff ff       	call   c01003f3 <cprintf>
    
    kmalloc_init();
c010cc99:	e8 e1 dc ff ff       	call   c010a97f <kmalloc_init>

}
c010cc9e:	c9                   	leave  
c010cc9f:	c3                   	ret    

c010cca0 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c010cca0:	55                   	push   %ebp
c010cca1:	89 e5                	mov    %esp,%ebp
c010cca3:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c010cca6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cca9:	c1 e8 16             	shr    $0x16,%eax
c010ccac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ccb3:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccb6:	01 d0                	add    %edx,%eax
c010ccb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c010ccbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ccbe:	8b 00                	mov    (%eax),%eax
c010ccc0:	83 e0 01             	and    $0x1,%eax
c010ccc3:	85 c0                	test   %eax,%eax
c010ccc5:	0f 85 af 00 00 00    	jne    c010cd7a <get_pte+0xda>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c010cccb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010cccf:	74 15                	je     c010cce6 <get_pte+0x46>
c010ccd1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010ccd8:	e8 80 f8 ff ff       	call   c010c55d <alloc_pages>
c010ccdd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cce0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cce4:	75 0a                	jne    c010ccf0 <get_pte+0x50>
            return NULL;
c010cce6:	b8 00 00 00 00       	mov    $0x0,%eax
c010cceb:	e9 e6 00 00 00       	jmp    c010cdd6 <get_pte+0x136>
        }
        set_page_ref(page, 1);
c010ccf0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010ccf7:	00 
c010ccf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ccfb:	89 04 24             	mov    %eax,(%esp)
c010ccfe:	e8 76 f6 ff ff       	call   c010c379 <set_page_ref>
        uintptr_t pa = page2pa(page);
c010cd03:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cd06:	89 04 24             	mov    %eax,(%esp)
c010cd09:	e8 52 f5 ff ff       	call   c010c260 <page2pa>
c010cd0e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c010cd11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd14:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cd17:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cd1a:	c1 e8 0c             	shr    $0xc,%eax
c010cd1d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010cd20:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c010cd25:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010cd28:	72 23                	jb     c010cd4d <get_pte+0xad>
c010cd2a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cd2d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cd31:	c7 44 24 08 10 40 12 	movl   $0xc0124010,0x8(%esp)
c010cd38:	c0 
c010cd39:	c7 44 24 04 8a 01 00 	movl   $0x18a,0x4(%esp)
c010cd40:	00 
c010cd41:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010cd48:	e8 c9 44 ff ff       	call   c0101216 <__panic>
c010cd4d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cd50:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010cd55:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010cd5c:	00 
c010cd5d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010cd64:	00 
c010cd65:	89 04 24             	mov    %eax,(%esp)
c010cd68:	e8 92 43 01 00       	call   c01210ff <memset>
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c010cd6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd70:	83 c8 07             	or     $0x7,%eax
c010cd73:	89 c2                	mov    %eax,%edx
c010cd75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd78:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c010cd7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd7d:	8b 00                	mov    (%eax),%eax
c010cd7f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010cd84:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cd87:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cd8a:	c1 e8 0c             	shr    $0xc,%eax
c010cd8d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010cd90:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c010cd95:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010cd98:	72 23                	jb     c010cdbd <get_pte+0x11d>
c010cd9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cd9d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cda1:	c7 44 24 08 10 40 12 	movl   $0xc0124010,0x8(%esp)
c010cda8:	c0 
c010cda9:	c7 44 24 04 8d 01 00 	movl   $0x18d,0x4(%esp)
c010cdb0:	00 
c010cdb1:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010cdb8:	e8 59 44 ff ff       	call   c0101216 <__panic>
c010cdbd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cdc0:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010cdc5:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cdc8:	c1 ea 0c             	shr    $0xc,%edx
c010cdcb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c010cdd1:	c1 e2 02             	shl    $0x2,%edx
c010cdd4:	01 d0                	add    %edx,%eax
}
c010cdd6:	c9                   	leave  
c010cdd7:	c3                   	ret    

c010cdd8 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c010cdd8:	55                   	push   %ebp
c010cdd9:	89 e5                	mov    %esp,%ebp
c010cddb:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c010cdde:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010cde5:	00 
c010cde6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cde9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cded:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdf0:	89 04 24             	mov    %eax,(%esp)
c010cdf3:	e8 a8 fe ff ff       	call   c010cca0 <get_pte>
c010cdf8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c010cdfb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010cdff:	74 08                	je     c010ce09 <get_page+0x31>
        *ptep_store = ptep;
c010ce01:	8b 45 10             	mov    0x10(%ebp),%eax
c010ce04:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ce07:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c010ce09:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ce0d:	74 1b                	je     c010ce2a <get_page+0x52>
c010ce0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce12:	8b 00                	mov    (%eax),%eax
c010ce14:	83 e0 01             	and    $0x1,%eax
c010ce17:	85 c0                	test   %eax,%eax
c010ce19:	74 0f                	je     c010ce2a <get_page+0x52>
        return pte2page(*ptep);
c010ce1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce1e:	8b 00                	mov    (%eax),%eax
c010ce20:	89 04 24             	mov    %eax,(%esp)
c010ce23:	e8 f1 f4 ff ff       	call   c010c319 <pte2page>
c010ce28:	eb 05                	jmp    c010ce2f <get_page+0x57>
    }
    return NULL;
c010ce2a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ce2f:	c9                   	leave  
c010ce30:	c3                   	ret    

c010ce31 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c010ce31:	55                   	push   %ebp
c010ce32:	89 e5                	mov    %esp,%ebp
c010ce34:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c010ce37:	8b 45 10             	mov    0x10(%ebp),%eax
c010ce3a:	8b 00                	mov    (%eax),%eax
c010ce3c:	83 e0 01             	and    $0x1,%eax
c010ce3f:	85 c0                	test   %eax,%eax
c010ce41:	74 4d                	je     c010ce90 <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep);
c010ce43:	8b 45 10             	mov    0x10(%ebp),%eax
c010ce46:	8b 00                	mov    (%eax),%eax
c010ce48:	89 04 24             	mov    %eax,(%esp)
c010ce4b:	e8 c9 f4 ff ff       	call   c010c319 <pte2page>
c010ce50:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c010ce53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce56:	89 04 24             	mov    %eax,(%esp)
c010ce59:	e8 3f f5 ff ff       	call   c010c39d <page_ref_dec>
c010ce5e:	85 c0                	test   %eax,%eax
c010ce60:	75 13                	jne    c010ce75 <page_remove_pte+0x44>
            free_page(page);
c010ce62:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010ce69:	00 
c010ce6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce6d:	89 04 24             	mov    %eax,(%esp)
c010ce70:	e8 53 f7 ff ff       	call   c010c5c8 <free_pages>
        }
        *ptep = 0;
c010ce75:	8b 45 10             	mov    0x10(%ebp),%eax
c010ce78:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c010ce7e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce81:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce85:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce88:	89 04 24             	mov    %eax,(%esp)
c010ce8b:	e8 1d 05 00 00       	call   c010d3ad <tlb_invalidate>
    }
}
c010ce90:	c9                   	leave  
c010ce91:	c3                   	ret    

c010ce92 <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c010ce92:	55                   	push   %ebp
c010ce93:	89 e5                	mov    %esp,%ebp
c010ce95:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c010ce98:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce9b:	25 ff 0f 00 00       	and    $0xfff,%eax
c010cea0:	85 c0                	test   %eax,%eax
c010cea2:	75 0c                	jne    c010ceb0 <unmap_range+0x1e>
c010cea4:	8b 45 10             	mov    0x10(%ebp),%eax
c010cea7:	25 ff 0f 00 00       	and    $0xfff,%eax
c010ceac:	85 c0                	test   %eax,%eax
c010ceae:	74 24                	je     c010ced4 <unmap_range+0x42>
c010ceb0:	c7 44 24 0c a4 41 12 	movl   $0xc01241a4,0xc(%esp)
c010ceb7:	c0 
c010ceb8:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010cebf:	c0 
c010cec0:	c7 44 24 04 c7 01 00 	movl   $0x1c7,0x4(%esp)
c010cec7:	00 
c010cec8:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010cecf:	e8 42 43 ff ff       	call   c0101216 <__panic>
    assert(USER_ACCESS(start, end));
c010ced4:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010cedb:	76 11                	jbe    c010ceee <unmap_range+0x5c>
c010cedd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cee0:	3b 45 10             	cmp    0x10(%ebp),%eax
c010cee3:	73 09                	jae    c010ceee <unmap_range+0x5c>
c010cee5:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c010ceec:	76 24                	jbe    c010cf12 <unmap_range+0x80>
c010ceee:	c7 44 24 0c cd 41 12 	movl   $0xc01241cd,0xc(%esp)
c010cef5:	c0 
c010cef6:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010cefd:	c0 
c010cefe:	c7 44 24 04 c8 01 00 	movl   $0x1c8,0x4(%esp)
c010cf05:	00 
c010cf06:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010cf0d:	e8 04 43 ff ff       	call   c0101216 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c010cf12:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010cf19:	00 
c010cf1a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf1d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf21:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf24:	89 04 24             	mov    %eax,(%esp)
c010cf27:	e8 74 fd ff ff       	call   c010cca0 <get_pte>
c010cf2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c010cf2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf33:	75 18                	jne    c010cf4d <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c010cf35:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf38:	05 00 00 40 00       	add    $0x400000,%eax
c010cf3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cf40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cf43:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c010cf48:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c010cf4b:	eb 29                	jmp    c010cf76 <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c010cf4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf50:	8b 00                	mov    (%eax),%eax
c010cf52:	85 c0                	test   %eax,%eax
c010cf54:	74 19                	je     c010cf6f <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c010cf56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf59:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cf5d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf60:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf64:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf67:	89 04 24             	mov    %eax,(%esp)
c010cf6a:	e8 c2 fe ff ff       	call   c010ce31 <page_remove_pte>
        }
        start += PGSIZE;
c010cf6f:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c010cf76:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010cf7a:	74 08                	je     c010cf84 <unmap_range+0xf2>
c010cf7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf7f:	3b 45 10             	cmp    0x10(%ebp),%eax
c010cf82:	72 8e                	jb     c010cf12 <unmap_range+0x80>
}
c010cf84:	c9                   	leave  
c010cf85:	c3                   	ret    

c010cf86 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c010cf86:	55                   	push   %ebp
c010cf87:	89 e5                	mov    %esp,%ebp
c010cf89:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c010cf8c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf8f:	25 ff 0f 00 00       	and    $0xfff,%eax
c010cf94:	85 c0                	test   %eax,%eax
c010cf96:	75 0c                	jne    c010cfa4 <exit_range+0x1e>
c010cf98:	8b 45 10             	mov    0x10(%ebp),%eax
c010cf9b:	25 ff 0f 00 00       	and    $0xfff,%eax
c010cfa0:	85 c0                	test   %eax,%eax
c010cfa2:	74 24                	je     c010cfc8 <exit_range+0x42>
c010cfa4:	c7 44 24 0c a4 41 12 	movl   $0xc01241a4,0xc(%esp)
c010cfab:	c0 
c010cfac:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010cfb3:	c0 
c010cfb4:	c7 44 24 04 d9 01 00 	movl   $0x1d9,0x4(%esp)
c010cfbb:	00 
c010cfbc:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010cfc3:	e8 4e 42 ff ff       	call   c0101216 <__panic>
    assert(USER_ACCESS(start, end));
c010cfc8:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010cfcf:	76 11                	jbe    c010cfe2 <exit_range+0x5c>
c010cfd1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cfd4:	3b 45 10             	cmp    0x10(%ebp),%eax
c010cfd7:	73 09                	jae    c010cfe2 <exit_range+0x5c>
c010cfd9:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c010cfe0:	76 24                	jbe    c010d006 <exit_range+0x80>
c010cfe2:	c7 44 24 0c cd 41 12 	movl   $0xc01241cd,0xc(%esp)
c010cfe9:	c0 
c010cfea:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010cff1:	c0 
c010cff2:	c7 44 24 04 da 01 00 	movl   $0x1da,0x4(%esp)
c010cff9:	00 
c010cffa:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d001:	e8 10 42 ff ff       	call   c0101216 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c010d006:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d009:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d00c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d00f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c010d014:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c010d017:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d01a:	c1 e8 16             	shr    $0x16,%eax
c010d01d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c010d020:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d023:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d02a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d02d:	01 d0                	add    %edx,%eax
c010d02f:	8b 00                	mov    (%eax),%eax
c010d031:	83 e0 01             	and    $0x1,%eax
c010d034:	85 c0                	test   %eax,%eax
c010d036:	74 3e                	je     c010d076 <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c010d038:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d03b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d042:	8b 45 08             	mov    0x8(%ebp),%eax
c010d045:	01 d0                	add    %edx,%eax
c010d047:	8b 00                	mov    (%eax),%eax
c010d049:	89 04 24             	mov    %eax,(%esp)
c010d04c:	e8 06 f3 ff ff       	call   c010c357 <pde2page>
c010d051:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010d058:	00 
c010d059:	89 04 24             	mov    %eax,(%esp)
c010d05c:	e8 67 f5 ff ff       	call   c010c5c8 <free_pages>
            pgdir[pde_idx] = 0;
c010d061:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d064:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d06b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d06e:	01 d0                	add    %edx,%eax
c010d070:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c010d076:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c010d07d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d081:	74 08                	je     c010d08b <exit_range+0x105>
c010d083:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d086:	3b 45 10             	cmp    0x10(%ebp),%eax
c010d089:	72 8c                	jb     c010d017 <exit_range+0x91>
}
c010d08b:	c9                   	leave  
c010d08c:	c3                   	ret    

c010d08d <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c010d08d:	55                   	push   %ebp
c010d08e:	89 e5                	mov    %esp,%ebp
c010d090:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c010d093:	8b 45 10             	mov    0x10(%ebp),%eax
c010d096:	25 ff 0f 00 00       	and    $0xfff,%eax
c010d09b:	85 c0                	test   %eax,%eax
c010d09d:	75 0c                	jne    c010d0ab <copy_range+0x1e>
c010d09f:	8b 45 14             	mov    0x14(%ebp),%eax
c010d0a2:	25 ff 0f 00 00       	and    $0xfff,%eax
c010d0a7:	85 c0                	test   %eax,%eax
c010d0a9:	74 24                	je     c010d0cf <copy_range+0x42>
c010d0ab:	c7 44 24 0c a4 41 12 	movl   $0xc01241a4,0xc(%esp)
c010d0b2:	c0 
c010d0b3:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d0ba:	c0 
c010d0bb:	c7 44 24 04 ef 01 00 	movl   $0x1ef,0x4(%esp)
c010d0c2:	00 
c010d0c3:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d0ca:	e8 47 41 ff ff       	call   c0101216 <__panic>
    assert(USER_ACCESS(start, end));
c010d0cf:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c010d0d6:	76 11                	jbe    c010d0e9 <copy_range+0x5c>
c010d0d8:	8b 45 10             	mov    0x10(%ebp),%eax
c010d0db:	3b 45 14             	cmp    0x14(%ebp),%eax
c010d0de:	73 09                	jae    c010d0e9 <copy_range+0x5c>
c010d0e0:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c010d0e7:	76 24                	jbe    c010d10d <copy_range+0x80>
c010d0e9:	c7 44 24 0c cd 41 12 	movl   $0xc01241cd,0xc(%esp)
c010d0f0:	c0 
c010d0f1:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d0f8:	c0 
c010d0f9:	c7 44 24 04 f0 01 00 	movl   $0x1f0,0x4(%esp)
c010d100:	00 
c010d101:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d108:	e8 09 41 ff ff       	call   c0101216 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c010d10d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010d114:	00 
c010d115:	8b 45 10             	mov    0x10(%ebp),%eax
c010d118:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d11c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d11f:	89 04 24             	mov    %eax,(%esp)
c010d122:	e8 79 fb ff ff       	call   c010cca0 <get_pte>
c010d127:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c010d12a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d12e:	75 1b                	jne    c010d14b <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c010d130:	8b 45 10             	mov    0x10(%ebp),%eax
c010d133:	05 00 00 40 00       	add    $0x400000,%eax
c010d138:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d13b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d13e:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c010d143:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c010d146:	e9 4c 01 00 00       	jmp    c010d297 <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c010d14b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d14e:	8b 00                	mov    (%eax),%eax
c010d150:	83 e0 01             	and    $0x1,%eax
c010d153:	85 c0                	test   %eax,%eax
c010d155:	0f 84 35 01 00 00    	je     c010d290 <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c010d15b:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010d162:	00 
c010d163:	8b 45 10             	mov    0x10(%ebp),%eax
c010d166:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d16a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d16d:	89 04 24             	mov    %eax,(%esp)
c010d170:	e8 2b fb ff ff       	call   c010cca0 <get_pte>
c010d175:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d178:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d17c:	75 0a                	jne    c010d188 <copy_range+0xfb>
                return -E_NO_MEM;
c010d17e:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010d183:	e9 26 01 00 00       	jmp    c010d2ae <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c010d188:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d18b:	8b 00                	mov    (%eax),%eax
c010d18d:	83 e0 07             	and    $0x7,%eax
c010d190:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c010d193:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d196:	8b 00                	mov    (%eax),%eax
c010d198:	89 04 24             	mov    %eax,(%esp)
c010d19b:	e8 79 f1 ff ff       	call   c010c319 <pte2page>
c010d1a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c010d1a3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010d1aa:	e8 ae f3 ff ff       	call   c010c55d <alloc_pages>
c010d1af:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c010d1b2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d1b6:	75 24                	jne    c010d1dc <copy_range+0x14f>
c010d1b8:	c7 44 24 0c e5 41 12 	movl   $0xc01241e5,0xc(%esp)
c010d1bf:	c0 
c010d1c0:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d1c7:	c0 
c010d1c8:	c7 44 24 04 03 02 00 	movl   $0x203,0x4(%esp)
c010d1cf:	00 
c010d1d0:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d1d7:	e8 3a 40 ff ff       	call   c0101216 <__panic>
        assert(npage!=NULL);
c010d1dc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010d1e0:	75 24                	jne    c010d206 <copy_range+0x179>
c010d1e2:	c7 44 24 0c f0 41 12 	movl   $0xc01241f0,0xc(%esp)
c010d1e9:	c0 
c010d1ea:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d1f1:	c0 
c010d1f2:	c7 44 24 04 04 02 00 	movl   $0x204,0x4(%esp)
c010d1f9:	00 
c010d1fa:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d201:	e8 10 40 ff ff       	call   c0101216 <__panic>
        int ret=0;
c010d206:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void * kva_src = page2kva(page);
c010d20d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d210:	89 04 24             	mov    %eax,(%esp)
c010d213:	e8 ad f0 ff ff       	call   c010c2c5 <page2kva>
c010d218:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void * kva_dst = page2kva(npage);
c010d21b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d21e:	89 04 24             	mov    %eax,(%esp)
c010d221:	e8 9f f0 ff ff       	call   c010c2c5 <page2kva>
c010d226:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    
        memcpy(kva_dst, kva_src, PGSIZE);
c010d229:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010d230:	00 
c010d231:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d234:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d238:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d23b:	89 04 24             	mov    %eax,(%esp)
c010d23e:	e8 9e 3f 01 00       	call   c01211e1 <memcpy>

        ret = page_insert(to, npage, start, perm);
c010d243:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d246:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d24a:	8b 45 10             	mov    0x10(%ebp),%eax
c010d24d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d251:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d254:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d258:	8b 45 08             	mov    0x8(%ebp),%eax
c010d25b:	89 04 24             	mov    %eax,(%esp)
c010d25e:	e8 91 00 00 00       	call   c010d2f4 <page_insert>
c010d263:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c010d266:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010d26a:	74 24                	je     c010d290 <copy_range+0x203>
c010d26c:	c7 44 24 0c fc 41 12 	movl   $0xc01241fc,0xc(%esp)
c010d273:	c0 
c010d274:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d27b:	c0 
c010d27c:	c7 44 24 04 1a 02 00 	movl   $0x21a,0x4(%esp)
c010d283:	00 
c010d284:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d28b:	e8 86 3f ff ff       	call   c0101216 <__panic>
        }
        start += PGSIZE;
c010d290:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c010d297:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d29b:	74 0c                	je     c010d2a9 <copy_range+0x21c>
c010d29d:	8b 45 10             	mov    0x10(%ebp),%eax
c010d2a0:	3b 45 14             	cmp    0x14(%ebp),%eax
c010d2a3:	0f 82 64 fe ff ff    	jb     c010d10d <copy_range+0x80>
    return 0;
c010d2a9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d2ae:	c9                   	leave  
c010d2af:	c3                   	ret    

c010d2b0 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c010d2b0:	55                   	push   %ebp
c010d2b1:	89 e5                	mov    %esp,%ebp
c010d2b3:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c010d2b6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010d2bd:	00 
c010d2be:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d2c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2c8:	89 04 24             	mov    %eax,(%esp)
c010d2cb:	e8 d0 f9 ff ff       	call   c010cca0 <get_pte>
c010d2d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c010d2d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d2d7:	74 19                	je     c010d2f2 <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c010d2d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d2dc:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d2e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2e3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d2e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2ea:	89 04 24             	mov    %eax,(%esp)
c010d2ed:	e8 3f fb ff ff       	call   c010ce31 <page_remove_pte>
    }
}
c010d2f2:	c9                   	leave  
c010d2f3:	c3                   	ret    

c010d2f4 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c010d2f4:	55                   	push   %ebp
c010d2f5:	89 e5                	mov    %esp,%ebp
c010d2f7:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c010d2fa:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010d301:	00 
c010d302:	8b 45 10             	mov    0x10(%ebp),%eax
c010d305:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d309:	8b 45 08             	mov    0x8(%ebp),%eax
c010d30c:	89 04 24             	mov    %eax,(%esp)
c010d30f:	e8 8c f9 ff ff       	call   c010cca0 <get_pte>
c010d314:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c010d317:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d31b:	75 0a                	jne    c010d327 <page_insert+0x33>
        return -E_NO_MEM;
c010d31d:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010d322:	e9 84 00 00 00       	jmp    c010d3ab <page_insert+0xb7>
    }
    page_ref_inc(page);
c010d327:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d32a:	89 04 24             	mov    %eax,(%esp)
c010d32d:	e8 54 f0 ff ff       	call   c010c386 <page_ref_inc>
    if (*ptep & PTE_P) {
c010d332:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d335:	8b 00                	mov    (%eax),%eax
c010d337:	83 e0 01             	and    $0x1,%eax
c010d33a:	85 c0                	test   %eax,%eax
c010d33c:	74 3e                	je     c010d37c <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c010d33e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d341:	8b 00                	mov    (%eax),%eax
c010d343:	89 04 24             	mov    %eax,(%esp)
c010d346:	e8 ce ef ff ff       	call   c010c319 <pte2page>
c010d34b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c010d34e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d351:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d354:	75 0d                	jne    c010d363 <page_insert+0x6f>
            page_ref_dec(page);
c010d356:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d359:	89 04 24             	mov    %eax,(%esp)
c010d35c:	e8 3c f0 ff ff       	call   c010c39d <page_ref_dec>
c010d361:	eb 19                	jmp    c010d37c <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c010d363:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d366:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d36a:	8b 45 10             	mov    0x10(%ebp),%eax
c010d36d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d371:	8b 45 08             	mov    0x8(%ebp),%eax
c010d374:	89 04 24             	mov    %eax,(%esp)
c010d377:	e8 b5 fa ff ff       	call   c010ce31 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c010d37c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d37f:	89 04 24             	mov    %eax,(%esp)
c010d382:	e8 d9 ee ff ff       	call   c010c260 <page2pa>
c010d387:	0b 45 14             	or     0x14(%ebp),%eax
c010d38a:	83 c8 01             	or     $0x1,%eax
c010d38d:	89 c2                	mov    %eax,%edx
c010d38f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d392:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c010d394:	8b 45 10             	mov    0x10(%ebp),%eax
c010d397:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d39b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d39e:	89 04 24             	mov    %eax,(%esp)
c010d3a1:	e8 07 00 00 00       	call   c010d3ad <tlb_invalidate>
    return 0;
c010d3a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d3ab:	c9                   	leave  
c010d3ac:	c3                   	ret    

c010d3ad <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c010d3ad:	55                   	push   %ebp
c010d3ae:	89 e5                	mov    %esp,%ebp
c010d3b0:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c010d3b3:	0f 20 d8             	mov    %cr3,%eax
c010d3b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c010d3b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c010d3bc:	89 c2                	mov    %eax,%edx
c010d3be:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d3c4:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010d3cb:	77 23                	ja     c010d3f0 <tlb_invalidate+0x43>
c010d3cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d3d0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d3d4:	c7 44 24 08 d0 40 12 	movl   $0xc01240d0,0x8(%esp)
c010d3db:	c0 
c010d3dc:	c7 44 24 04 4b 02 00 	movl   $0x24b,0x4(%esp)
c010d3e3:	00 
c010d3e4:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d3eb:	e8 26 3e ff ff       	call   c0101216 <__panic>
c010d3f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d3f3:	05 00 00 00 40       	add    $0x40000000,%eax
c010d3f8:	39 c2                	cmp    %eax,%edx
c010d3fa:	75 0c                	jne    c010d408 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c010d3fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d3ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c010d402:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d405:	0f 01 38             	invlpg (%eax)
    }
}
c010d408:	c9                   	leave  
c010d409:	c3                   	ret    

c010d40a <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c010d40a:	55                   	push   %ebp
c010d40b:	89 e5                	mov    %esp,%ebp
c010d40d:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c010d410:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010d417:	e8 41 f1 ff ff       	call   c010c55d <alloc_pages>
c010d41c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010d41f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d423:	0f 84 b0 00 00 00    	je     c010d4d9 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c010d429:	8b 45 10             	mov    0x10(%ebp),%eax
c010d42c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d430:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d433:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d437:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d43a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d43e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d441:	89 04 24             	mov    %eax,(%esp)
c010d444:	e8 ab fe ff ff       	call   c010d2f4 <page_insert>
c010d449:	85 c0                	test   %eax,%eax
c010d44b:	74 1a                	je     c010d467 <pgdir_alloc_page+0x5d>
            free_page(page);
c010d44d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010d454:	00 
c010d455:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d458:	89 04 24             	mov    %eax,(%esp)
c010d45b:	e8 68 f1 ff ff       	call   c010c5c8 <free_pages>
            return NULL;
c010d460:	b8 00 00 00 00       	mov    $0x0,%eax
c010d465:	eb 75                	jmp    c010d4dc <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c010d467:	a1 4c e0 16 c0       	mov    0xc016e04c,%eax
c010d46c:	85 c0                	test   %eax,%eax
c010d46e:	74 69                	je     c010d4d9 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c010d470:	a1 50 12 17 c0       	mov    0xc0171250,%eax
c010d475:	85 c0                	test   %eax,%eax
c010d477:	74 60                	je     c010d4d9 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c010d479:	a1 50 12 17 c0       	mov    0xc0171250,%eax
c010d47e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010d485:	00 
c010d486:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d489:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d48d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d490:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d494:	89 04 24             	mov    %eax,(%esp)
c010d497:	e8 99 0d 00 00       	call   c010e235 <swap_map_swappable>
                page->pra_vaddr=la;
c010d49c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d49f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d4a2:	89 50 20             	mov    %edx,0x20(%eax)
                assert(page_ref(page) == 1);
c010d4a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d4a8:	89 04 24             	mov    %eax,(%esp)
c010d4ab:	e8 bf ee ff ff       	call   c010c36f <page_ref>
c010d4b0:	83 f8 01             	cmp    $0x1,%eax
c010d4b3:	74 24                	je     c010d4d9 <pgdir_alloc_page+0xcf>
c010d4b5:	c7 44 24 0c 05 42 12 	movl   $0xc0124205,0xc(%esp)
c010d4bc:	c0 
c010d4bd:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d4c4:	c0 
c010d4c5:	c7 44 24 04 5f 02 00 	movl   $0x25f,0x4(%esp)
c010d4cc:	00 
c010d4cd:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d4d4:	e8 3d 3d ff ff       	call   c0101216 <__panic>
            }
        }

    }

    return page;
c010d4d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d4dc:	c9                   	leave  
c010d4dd:	c3                   	ret    

c010d4de <check_alloc_page>:

void
check_alloc_page(void) {
c010d4de:	55                   	push   %ebp
c010d4df:	89 e5                	mov    %esp,%ebp
c010d4e1:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->check();
c010d4e4:	a1 64 11 17 c0       	mov    0xc0171164,%eax
c010d4e9:	8b 40 18             	mov    0x18(%eax),%eax
c010d4ec:	ff d0                	call   *%eax
    //cprintf("check_alloc_page() succeeded!\n");
}
c010d4ee:	c9                   	leave  
c010d4ef:	c3                   	ret    

c010d4f0 <check_pgdir>:

void
check_pgdir(void) {
c010d4f0:	55                   	push   %ebp
c010d4f1:	89 e5                	mov    %esp,%ebp
c010d4f3:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c010d4f6:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c010d4fb:	3d 00 80 03 00       	cmp    $0x38000,%eax
c010d500:	76 24                	jbe    c010d526 <check_pgdir+0x36>
c010d502:	c7 44 24 0c 19 42 12 	movl   $0xc0124219,0xc(%esp)
c010d509:	c0 
c010d50a:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d511:	c0 
c010d512:	c7 44 24 04 77 02 00 	movl   $0x277,0x4(%esp)
c010d519:	00 
c010d51a:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d521:	e8 f0 3c ff ff       	call   c0101216 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c010d526:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010d52b:	85 c0                	test   %eax,%eax
c010d52d:	74 0e                	je     c010d53d <check_pgdir+0x4d>
c010d52f:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010d534:	25 ff 0f 00 00       	and    $0xfff,%eax
c010d539:	85 c0                	test   %eax,%eax
c010d53b:	74 24                	je     c010d561 <check_pgdir+0x71>
c010d53d:	c7 44 24 0c 34 42 12 	movl   $0xc0124234,0xc(%esp)
c010d544:	c0 
c010d545:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d54c:	c0 
c010d54d:	c7 44 24 04 78 02 00 	movl   $0x278,0x4(%esp)
c010d554:	00 
c010d555:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d55c:	e8 b5 3c ff ff       	call   c0101216 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c010d561:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010d566:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010d56d:	00 
c010d56e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d575:	00 
c010d576:	89 04 24             	mov    %eax,(%esp)
c010d579:	e8 5a f8 ff ff       	call   c010cdd8 <get_page>
c010d57e:	85 c0                	test   %eax,%eax
c010d580:	74 24                	je     c010d5a6 <check_pgdir+0xb6>
c010d582:	c7 44 24 0c 6c 42 12 	movl   $0xc012426c,0xc(%esp)
c010d589:	c0 
c010d58a:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d591:	c0 
c010d592:	c7 44 24 04 79 02 00 	movl   $0x279,0x4(%esp)
c010d599:	00 
c010d59a:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d5a1:	e8 70 3c ff ff       	call   c0101216 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c010d5a6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010d5ad:	e8 ab ef ff ff       	call   c010c55d <alloc_pages>
c010d5b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c010d5b5:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010d5ba:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010d5c1:	00 
c010d5c2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010d5c9:	00 
c010d5ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d5cd:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d5d1:	89 04 24             	mov    %eax,(%esp)
c010d5d4:	e8 1b fd ff ff       	call   c010d2f4 <page_insert>
c010d5d9:	85 c0                	test   %eax,%eax
c010d5db:	74 24                	je     c010d601 <check_pgdir+0x111>
c010d5dd:	c7 44 24 0c 94 42 12 	movl   $0xc0124294,0xc(%esp)
c010d5e4:	c0 
c010d5e5:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d5ec:	c0 
c010d5ed:	c7 44 24 04 7d 02 00 	movl   $0x27d,0x4(%esp)
c010d5f4:	00 
c010d5f5:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d5fc:	e8 15 3c ff ff       	call   c0101216 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c010d601:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010d606:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010d60d:	00 
c010d60e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d615:	00 
c010d616:	89 04 24             	mov    %eax,(%esp)
c010d619:	e8 82 f6 ff ff       	call   c010cca0 <get_pte>
c010d61e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d621:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d625:	75 24                	jne    c010d64b <check_pgdir+0x15b>
c010d627:	c7 44 24 0c c0 42 12 	movl   $0xc01242c0,0xc(%esp)
c010d62e:	c0 
c010d62f:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d636:	c0 
c010d637:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
c010d63e:	00 
c010d63f:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d646:	e8 cb 3b ff ff       	call   c0101216 <__panic>
    assert(pte2page(*ptep) == p1);
c010d64b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d64e:	8b 00                	mov    (%eax),%eax
c010d650:	89 04 24             	mov    %eax,(%esp)
c010d653:	e8 c1 ec ff ff       	call   c010c319 <pte2page>
c010d658:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010d65b:	74 24                	je     c010d681 <check_pgdir+0x191>
c010d65d:	c7 44 24 0c ed 42 12 	movl   $0xc01242ed,0xc(%esp)
c010d664:	c0 
c010d665:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d66c:	c0 
c010d66d:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c010d674:	00 
c010d675:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d67c:	e8 95 3b ff ff       	call   c0101216 <__panic>
    //cprintf("page_ref(p1) = %d\n", page_ref(p1));
    //assert(page_ref(p1) == 2);

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c010d681:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010d686:	8b 00                	mov    (%eax),%eax
c010d688:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010d68d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d690:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d693:	c1 e8 0c             	shr    $0xc,%eax
c010d696:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d699:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c010d69e:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010d6a1:	72 23                	jb     c010d6c6 <check_pgdir+0x1d6>
c010d6a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d6a6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d6aa:	c7 44 24 08 10 40 12 	movl   $0xc0124010,0x8(%esp)
c010d6b1:	c0 
c010d6b2:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
c010d6b9:	00 
c010d6ba:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d6c1:	e8 50 3b ff ff       	call   c0101216 <__panic>
c010d6c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d6c9:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010d6ce:	83 c0 04             	add    $0x4,%eax
c010d6d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c010d6d4:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010d6d9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010d6e0:	00 
c010d6e1:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d6e8:	00 
c010d6e9:	89 04 24             	mov    %eax,(%esp)
c010d6ec:	e8 af f5 ff ff       	call   c010cca0 <get_pte>
c010d6f1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010d6f4:	74 24                	je     c010d71a <check_pgdir+0x22a>
c010d6f6:	c7 44 24 0c 04 43 12 	movl   $0xc0124304,0xc(%esp)
c010d6fd:	c0 
c010d6fe:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d705:	c0 
c010d706:	c7 44 24 04 86 02 00 	movl   $0x286,0x4(%esp)
c010d70d:	00 
c010d70e:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d715:	e8 fc 3a ff ff       	call   c0101216 <__panic>

    p2 = alloc_page();
c010d71a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010d721:	e8 37 ee ff ff       	call   c010c55d <alloc_pages>
c010d726:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c010d729:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010d72e:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c010d735:	00 
c010d736:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010d73d:	00 
c010d73e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d741:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d745:	89 04 24             	mov    %eax,(%esp)
c010d748:	e8 a7 fb ff ff       	call   c010d2f4 <page_insert>
c010d74d:	85 c0                	test   %eax,%eax
c010d74f:	74 24                	je     c010d775 <check_pgdir+0x285>
c010d751:	c7 44 24 0c 2c 43 12 	movl   $0xc012432c,0xc(%esp)
c010d758:	c0 
c010d759:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d760:	c0 
c010d761:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c010d768:	00 
c010d769:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d770:	e8 a1 3a ff ff       	call   c0101216 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010d775:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010d77a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010d781:	00 
c010d782:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d789:	00 
c010d78a:	89 04 24             	mov    %eax,(%esp)
c010d78d:	e8 0e f5 ff ff       	call   c010cca0 <get_pte>
c010d792:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d795:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d799:	75 24                	jne    c010d7bf <check_pgdir+0x2cf>
c010d79b:	c7 44 24 0c 64 43 12 	movl   $0xc0124364,0xc(%esp)
c010d7a2:	c0 
c010d7a3:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d7aa:	c0 
c010d7ab:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c010d7b2:	00 
c010d7b3:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d7ba:	e8 57 3a ff ff       	call   c0101216 <__panic>
    assert(*ptep & PTE_U);
c010d7bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7c2:	8b 00                	mov    (%eax),%eax
c010d7c4:	83 e0 04             	and    $0x4,%eax
c010d7c7:	85 c0                	test   %eax,%eax
c010d7c9:	75 24                	jne    c010d7ef <check_pgdir+0x2ff>
c010d7cb:	c7 44 24 0c 94 43 12 	movl   $0xc0124394,0xc(%esp)
c010d7d2:	c0 
c010d7d3:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d7da:	c0 
c010d7db:	c7 44 24 04 8b 02 00 	movl   $0x28b,0x4(%esp)
c010d7e2:	00 
c010d7e3:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d7ea:	e8 27 3a ff ff       	call   c0101216 <__panic>
    assert(*ptep & PTE_W);
c010d7ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7f2:	8b 00                	mov    (%eax),%eax
c010d7f4:	83 e0 02             	and    $0x2,%eax
c010d7f7:	85 c0                	test   %eax,%eax
c010d7f9:	75 24                	jne    c010d81f <check_pgdir+0x32f>
c010d7fb:	c7 44 24 0c a2 43 12 	movl   $0xc01243a2,0xc(%esp)
c010d802:	c0 
c010d803:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d80a:	c0 
c010d80b:	c7 44 24 04 8c 02 00 	movl   $0x28c,0x4(%esp)
c010d812:	00 
c010d813:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d81a:	e8 f7 39 ff ff       	call   c0101216 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c010d81f:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010d824:	8b 00                	mov    (%eax),%eax
c010d826:	83 e0 04             	and    $0x4,%eax
c010d829:	85 c0                	test   %eax,%eax
c010d82b:	75 24                	jne    c010d851 <check_pgdir+0x361>
c010d82d:	c7 44 24 0c b0 43 12 	movl   $0xc01243b0,0xc(%esp)
c010d834:	c0 
c010d835:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d83c:	c0 
c010d83d:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c010d844:	00 
c010d845:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d84c:	e8 c5 39 ff ff       	call   c0101216 <__panic>
    assert(page_ref(p2) == 1);
c010d851:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d854:	89 04 24             	mov    %eax,(%esp)
c010d857:	e8 13 eb ff ff       	call   c010c36f <page_ref>
c010d85c:	83 f8 01             	cmp    $0x1,%eax
c010d85f:	74 24                	je     c010d885 <check_pgdir+0x395>
c010d861:	c7 44 24 0c c6 43 12 	movl   $0xc01243c6,0xc(%esp)
c010d868:	c0 
c010d869:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d870:	c0 
c010d871:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
c010d878:	00 
c010d879:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d880:	e8 91 39 ff ff       	call   c0101216 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c010d885:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010d88a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010d891:	00 
c010d892:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010d899:	00 
c010d89a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d89d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d8a1:	89 04 24             	mov    %eax,(%esp)
c010d8a4:	e8 4b fa ff ff       	call   c010d2f4 <page_insert>
c010d8a9:	85 c0                	test   %eax,%eax
c010d8ab:	74 24                	je     c010d8d1 <check_pgdir+0x3e1>
c010d8ad:	c7 44 24 0c d8 43 12 	movl   $0xc01243d8,0xc(%esp)
c010d8b4:	c0 
c010d8b5:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d8bc:	c0 
c010d8bd:	c7 44 24 04 90 02 00 	movl   $0x290,0x4(%esp)
c010d8c4:	00 
c010d8c5:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d8cc:	e8 45 39 ff ff       	call   c0101216 <__panic>
    //assert(page_ref(p1) == 1);
    assert(page_ref(p2) == 0);
c010d8d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d8d4:	89 04 24             	mov    %eax,(%esp)
c010d8d7:	e8 93 ea ff ff       	call   c010c36f <page_ref>
c010d8dc:	85 c0                	test   %eax,%eax
c010d8de:	74 24                	je     c010d904 <check_pgdir+0x414>
c010d8e0:	c7 44 24 0c 04 44 12 	movl   $0xc0124404,0xc(%esp)
c010d8e7:	c0 
c010d8e8:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d8ef:	c0 
c010d8f0:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c010d8f7:	00 
c010d8f8:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d8ff:	e8 12 39 ff ff       	call   c0101216 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010d904:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010d909:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010d910:	00 
c010d911:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d918:	00 
c010d919:	89 04 24             	mov    %eax,(%esp)
c010d91c:	e8 7f f3 ff ff       	call   c010cca0 <get_pte>
c010d921:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d924:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d928:	75 24                	jne    c010d94e <check_pgdir+0x45e>
c010d92a:	c7 44 24 0c 64 43 12 	movl   $0xc0124364,0xc(%esp)
c010d931:	c0 
c010d932:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d939:	c0 
c010d93a:	c7 44 24 04 93 02 00 	movl   $0x293,0x4(%esp)
c010d941:	00 
c010d942:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d949:	e8 c8 38 ff ff       	call   c0101216 <__panic>
    assert(pte2page(*ptep) == p1);
c010d94e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d951:	8b 00                	mov    (%eax),%eax
c010d953:	89 04 24             	mov    %eax,(%esp)
c010d956:	e8 be e9 ff ff       	call   c010c319 <pte2page>
c010d95b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010d95e:	74 24                	je     c010d984 <check_pgdir+0x494>
c010d960:	c7 44 24 0c ed 42 12 	movl   $0xc01242ed,0xc(%esp)
c010d967:	c0 
c010d968:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d96f:	c0 
c010d970:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c010d977:	00 
c010d978:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d97f:	e8 92 38 ff ff       	call   c0101216 <__panic>
    assert((*ptep & PTE_U) == 0);
c010d984:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d987:	8b 00                	mov    (%eax),%eax
c010d989:	83 e0 04             	and    $0x4,%eax
c010d98c:	85 c0                	test   %eax,%eax
c010d98e:	74 24                	je     c010d9b4 <check_pgdir+0x4c4>
c010d990:	c7 44 24 0c 16 44 12 	movl   $0xc0124416,0xc(%esp)
c010d997:	c0 
c010d998:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d99f:	c0 
c010d9a0:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c010d9a7:	00 
c010d9a8:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d9af:	e8 62 38 ff ff       	call   c0101216 <__panic>

    page_remove(boot_pgdir, 0x0);
c010d9b4:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010d9b9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d9c0:	00 
c010d9c1:	89 04 24             	mov    %eax,(%esp)
c010d9c4:	e8 e7 f8 ff ff       	call   c010d2b0 <page_remove>
    //assert(page_ref(p1) == 0);
    assert(page_ref(p2) == 0);
c010d9c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d9cc:	89 04 24             	mov    %eax,(%esp)
c010d9cf:	e8 9b e9 ff ff       	call   c010c36f <page_ref>
c010d9d4:	85 c0                	test   %eax,%eax
c010d9d6:	74 24                	je     c010d9fc <check_pgdir+0x50c>
c010d9d8:	c7 44 24 0c 04 44 12 	movl   $0xc0124404,0xc(%esp)
c010d9df:	c0 
c010d9e0:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010d9e7:	c0 
c010d9e8:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
c010d9ef:	00 
c010d9f0:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010d9f7:	e8 1a 38 ff ff       	call   c0101216 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c010d9fc:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010da01:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010da08:	00 
c010da09:	89 04 24             	mov    %eax,(%esp)
c010da0c:	e8 9f f8 ff ff       	call   c010d2b0 <page_remove>
    //assert(page_ref(p1) == 0);
    assert(page_ref(p2) == 0);
c010da11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010da14:	89 04 24             	mov    %eax,(%esp)
c010da17:	e8 53 e9 ff ff       	call   c010c36f <page_ref>
c010da1c:	85 c0                	test   %eax,%eax
c010da1e:	74 24                	je     c010da44 <check_pgdir+0x554>
c010da20:	c7 44 24 0c 04 44 12 	movl   $0xc0124404,0xc(%esp)
c010da27:	c0 
c010da28:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010da2f:	c0 
c010da30:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c010da37:	00 
c010da38:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010da3f:	e8 d2 37 ff ff       	call   c0101216 <__panic>
    
    

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c010da44:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010da49:	8b 00                	mov    (%eax),%eax
c010da4b:	89 04 24             	mov    %eax,(%esp)
c010da4e:	e8 04 e9 ff ff       	call   c010c357 <pde2page>
c010da53:	89 04 24             	mov    %eax,(%esp)
c010da56:	e8 14 e9 ff ff       	call   c010c36f <page_ref>
c010da5b:	83 f8 01             	cmp    $0x1,%eax
c010da5e:	74 24                	je     c010da84 <check_pgdir+0x594>
c010da60:	c7 44 24 0c 2c 44 12 	movl   $0xc012442c,0xc(%esp)
c010da67:	c0 
c010da68:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010da6f:	c0 
c010da70:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c010da77:	00 
c010da78:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010da7f:	e8 92 37 ff ff       	call   c0101216 <__panic>
    free_page(pde2page(boot_pgdir[0]));
c010da84:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010da89:	8b 00                	mov    (%eax),%eax
c010da8b:	89 04 24             	mov    %eax,(%esp)
c010da8e:	e8 c4 e8 ff ff       	call   c010c357 <pde2page>
c010da93:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010da9a:	00 
c010da9b:	89 04 24             	mov    %eax,(%esp)
c010da9e:	e8 25 eb ff ff       	call   c010c5c8 <free_pages>
    boot_pgdir[0] = 0;
c010daa3:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010daa8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //cprintf("check_pgdir() succeeded!\n");
}
c010daae:	c9                   	leave  
c010daaf:	c3                   	ret    

c010dab0 <check_boot_pgdir>:

void
check_boot_pgdir(void) {
c010dab0:	55                   	push   %ebp
c010dab1:	89 e5                	mov    %esp,%ebp
c010dab3:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c010dab6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010dabd:	e9 ca 00 00 00       	jmp    c010db8c <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c010dac2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dac5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010dac8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dacb:	c1 e8 0c             	shr    $0xc,%eax
c010dace:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010dad1:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c010dad6:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c010dad9:	72 23                	jb     c010dafe <check_boot_pgdir+0x4e>
c010dadb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dade:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010dae2:	c7 44 24 08 10 40 12 	movl   $0xc0124010,0x8(%esp)
c010dae9:	c0 
c010daea:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
c010daf1:	00 
c010daf2:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010daf9:	e8 18 37 ff ff       	call   c0101216 <__panic>
c010dafe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010db01:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010db06:	89 c2                	mov    %eax,%edx
c010db08:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010db0d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010db14:	00 
c010db15:	89 54 24 04          	mov    %edx,0x4(%esp)
c010db19:	89 04 24             	mov    %eax,(%esp)
c010db1c:	e8 7f f1 ff ff       	call   c010cca0 <get_pte>
c010db21:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010db24:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010db28:	75 24                	jne    c010db4e <check_boot_pgdir+0x9e>
c010db2a:	c7 44 24 0c 54 44 12 	movl   $0xc0124454,0xc(%esp)
c010db31:	c0 
c010db32:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010db39:	c0 
c010db3a:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
c010db41:	00 
c010db42:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010db49:	e8 c8 36 ff ff       	call   c0101216 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c010db4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010db51:	8b 00                	mov    (%eax),%eax
c010db53:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010db58:	89 c2                	mov    %eax,%edx
c010db5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db5d:	39 c2                	cmp    %eax,%edx
c010db5f:	74 24                	je     c010db85 <check_boot_pgdir+0xd5>
c010db61:	c7 44 24 0c 91 44 12 	movl   $0xc0124491,0xc(%esp)
c010db68:	c0 
c010db69:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010db70:	c0 
c010db71:	c7 44 24 04 ae 02 00 	movl   $0x2ae,0x4(%esp)
c010db78:	00 
c010db79:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010db80:	e8 91 36 ff ff       	call   c0101216 <__panic>

void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c010db85:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c010db8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010db8f:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c010db94:	39 c2                	cmp    %eax,%edx
c010db96:	0f 82 26 ff ff ff    	jb     c010dac2 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c010db9c:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010dba1:	05 ac 0f 00 00       	add    $0xfac,%eax
c010dba6:	8b 00                	mov    (%eax),%eax
c010dba8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010dbad:	89 c2                	mov    %eax,%edx
c010dbaf:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010dbb4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010dbb7:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c010dbbe:	77 23                	ja     c010dbe3 <check_boot_pgdir+0x133>
c010dbc0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010dbc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010dbc7:	c7 44 24 08 d0 40 12 	movl   $0xc01240d0,0x8(%esp)
c010dbce:	c0 
c010dbcf:	c7 44 24 04 b1 02 00 	movl   $0x2b1,0x4(%esp)
c010dbd6:	00 
c010dbd7:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010dbde:	e8 33 36 ff ff       	call   c0101216 <__panic>
c010dbe3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010dbe6:	05 00 00 00 40       	add    $0x40000000,%eax
c010dbeb:	39 c2                	cmp    %eax,%edx
c010dbed:	74 24                	je     c010dc13 <check_boot_pgdir+0x163>
c010dbef:	c7 44 24 0c a8 44 12 	movl   $0xc01244a8,0xc(%esp)
c010dbf6:	c0 
c010dbf7:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010dbfe:	c0 
c010dbff:	c7 44 24 04 b1 02 00 	movl   $0x2b1,0x4(%esp)
c010dc06:	00 
c010dc07:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010dc0e:	e8 03 36 ff ff       	call   c0101216 <__panic>

    assert(boot_pgdir[0] == 0);
c010dc13:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010dc18:	8b 00                	mov    (%eax),%eax
c010dc1a:	85 c0                	test   %eax,%eax
c010dc1c:	74 24                	je     c010dc42 <check_boot_pgdir+0x192>
c010dc1e:	c7 44 24 0c dc 44 12 	movl   $0xc01244dc,0xc(%esp)
c010dc25:	c0 
c010dc26:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010dc2d:	c0 
c010dc2e:	c7 44 24 04 b3 02 00 	movl   $0x2b3,0x4(%esp)
c010dc35:	00 
c010dc36:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010dc3d:	e8 d4 35 ff ff       	call   c0101216 <__panic>

    struct Page *p;
    p = alloc_page();
c010dc42:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010dc49:	e8 0f e9 ff ff       	call   c010c55d <alloc_pages>
c010dc4e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c010dc51:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010dc56:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010dc5d:	00 
c010dc5e:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c010dc65:	00 
c010dc66:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010dc69:	89 54 24 04          	mov    %edx,0x4(%esp)
c010dc6d:	89 04 24             	mov    %eax,(%esp)
c010dc70:	e8 7f f6 ff ff       	call   c010d2f4 <page_insert>
c010dc75:	85 c0                	test   %eax,%eax
c010dc77:	74 24                	je     c010dc9d <check_boot_pgdir+0x1ed>
c010dc79:	c7 44 24 0c f0 44 12 	movl   $0xc01244f0,0xc(%esp)
c010dc80:	c0 
c010dc81:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010dc88:	c0 
c010dc89:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c010dc90:	00 
c010dc91:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010dc98:	e8 79 35 ff ff       	call   c0101216 <__panic>
    assert(page_ref(p) == 1);
c010dc9d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010dca0:	89 04 24             	mov    %eax,(%esp)
c010dca3:	e8 c7 e6 ff ff       	call   c010c36f <page_ref>
c010dca8:	83 f8 01             	cmp    $0x1,%eax
c010dcab:	74 24                	je     c010dcd1 <check_boot_pgdir+0x221>
c010dcad:	c7 44 24 0c 1e 45 12 	movl   $0xc012451e,0xc(%esp)
c010dcb4:	c0 
c010dcb5:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010dcbc:	c0 
c010dcbd:	c7 44 24 04 b8 02 00 	movl   $0x2b8,0x4(%esp)
c010dcc4:	00 
c010dcc5:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010dccc:	e8 45 35 ff ff       	call   c0101216 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c010dcd1:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010dcd6:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010dcdd:	00 
c010dcde:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c010dce5:	00 
c010dce6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010dce9:	89 54 24 04          	mov    %edx,0x4(%esp)
c010dced:	89 04 24             	mov    %eax,(%esp)
c010dcf0:	e8 ff f5 ff ff       	call   c010d2f4 <page_insert>
c010dcf5:	85 c0                	test   %eax,%eax
c010dcf7:	74 24                	je     c010dd1d <check_boot_pgdir+0x26d>
c010dcf9:	c7 44 24 0c 30 45 12 	movl   $0xc0124530,0xc(%esp)
c010dd00:	c0 
c010dd01:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010dd08:	c0 
c010dd09:	c7 44 24 04 b9 02 00 	movl   $0x2b9,0x4(%esp)
c010dd10:	00 
c010dd11:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010dd18:	e8 f9 34 ff ff       	call   c0101216 <__panic>
    assert(page_ref(p) == 2);
c010dd1d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010dd20:	89 04 24             	mov    %eax,(%esp)
c010dd23:	e8 47 e6 ff ff       	call   c010c36f <page_ref>
c010dd28:	83 f8 02             	cmp    $0x2,%eax
c010dd2b:	74 24                	je     c010dd51 <check_boot_pgdir+0x2a1>
c010dd2d:	c7 44 24 0c 67 45 12 	movl   $0xc0124567,0xc(%esp)
c010dd34:	c0 
c010dd35:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010dd3c:	c0 
c010dd3d:	c7 44 24 04 ba 02 00 	movl   $0x2ba,0x4(%esp)
c010dd44:	00 
c010dd45:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010dd4c:	e8 c5 34 ff ff       	call   c0101216 <__panic>

    const char *str = "ucore: Hello world!!";
c010dd51:	c7 45 dc 78 45 12 c0 	movl   $0xc0124578,-0x24(%ebp)
    strcpy((void *)0x100, str);
c010dd58:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010dd5b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dd5f:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c010dd66:	e8 bd 30 01 00       	call   c0120e28 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c010dd6b:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c010dd72:	00 
c010dd73:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c010dd7a:	e8 22 31 01 00       	call   c0120ea1 <strcmp>
c010dd7f:	85 c0                	test   %eax,%eax
c010dd81:	74 24                	je     c010dda7 <check_boot_pgdir+0x2f7>
c010dd83:	c7 44 24 0c 90 45 12 	movl   $0xc0124590,0xc(%esp)
c010dd8a:	c0 
c010dd8b:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010dd92:	c0 
c010dd93:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
c010dd9a:	00 
c010dd9b:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010dda2:	e8 6f 34 ff ff       	call   c0101216 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c010dda7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ddaa:	89 04 24             	mov    %eax,(%esp)
c010ddad:	e8 13 e5 ff ff       	call   c010c2c5 <page2kva>
c010ddb2:	05 00 01 00 00       	add    $0x100,%eax
c010ddb7:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c010ddba:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c010ddc1:	e8 e3 2f 01 00       	call   c0120da9 <strlen>
c010ddc6:	85 c0                	test   %eax,%eax
c010ddc8:	74 24                	je     c010ddee <check_boot_pgdir+0x33e>
c010ddca:	c7 44 24 0c c8 45 12 	movl   $0xc01245c8,0xc(%esp)
c010ddd1:	c0 
c010ddd2:	c7 44 24 08 19 41 12 	movl   $0xc0124119,0x8(%esp)
c010ddd9:	c0 
c010ddda:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c010dde1:	00 
c010dde2:	c7 04 24 f4 40 12 c0 	movl   $0xc01240f4,(%esp)
c010dde9:	e8 28 34 ff ff       	call   c0101216 <__panic>

    free_page(p);
c010ddee:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010ddf5:	00 
c010ddf6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ddf9:	89 04 24             	mov    %eax,(%esp)
c010ddfc:	e8 c7 e7 ff ff       	call   c010c5c8 <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c010de01:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010de06:	8b 00                	mov    (%eax),%eax
c010de08:	89 04 24             	mov    %eax,(%esp)
c010de0b:	e8 47 e5 ff ff       	call   c010c357 <pde2page>
c010de10:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010de17:	00 
c010de18:	89 04 24             	mov    %eax,(%esp)
c010de1b:	e8 a8 e7 ff ff       	call   c010c5c8 <free_pages>
    boot_pgdir[0] = 0;
c010de20:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010de25:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    
    tlb_invalidate(boot_pgdir, 0x100);
c010de2b:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010de30:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c010de37:	00 
c010de38:	89 04 24             	mov    %eax,(%esp)
c010de3b:	e8 6d f5 ff ff       	call   c010d3ad <tlb_invalidate>
    tlb_invalidate(boot_pgdir, 0x100+PGSIZE);
c010de40:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c010de45:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c010de4c:	00 
c010de4d:	89 04 24             	mov    %eax,(%esp)
c010de50:	e8 58 f5 ff ff       	call   c010d3ad <tlb_invalidate>
    
    //cprintf("check_boot_pgdir() succeeded!\n");
}
c010de55:	c9                   	leave  
c010de56:	c3                   	ret    

c010de57 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c010de57:	55                   	push   %ebp
c010de58:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c010de5a:	8b 45 08             	mov    0x8(%ebp),%eax
c010de5d:	83 e0 04             	and    $0x4,%eax
c010de60:	85 c0                	test   %eax,%eax
c010de62:	74 07                	je     c010de6b <perm2str+0x14>
c010de64:	b8 75 00 00 00       	mov    $0x75,%eax
c010de69:	eb 05                	jmp    c010de70 <perm2str+0x19>
c010de6b:	b8 2d 00 00 00       	mov    $0x2d,%eax
c010de70:	a2 48 e0 16 c0       	mov    %al,0xc016e048
    str[1] = 'r';
c010de75:	c6 05 49 e0 16 c0 72 	movb   $0x72,0xc016e049
    str[2] = (perm & PTE_W) ? 'w' : '-';
c010de7c:	8b 45 08             	mov    0x8(%ebp),%eax
c010de7f:	83 e0 02             	and    $0x2,%eax
c010de82:	85 c0                	test   %eax,%eax
c010de84:	74 07                	je     c010de8d <perm2str+0x36>
c010de86:	b8 77 00 00 00       	mov    $0x77,%eax
c010de8b:	eb 05                	jmp    c010de92 <perm2str+0x3b>
c010de8d:	b8 2d 00 00 00       	mov    $0x2d,%eax
c010de92:	a2 4a e0 16 c0       	mov    %al,0xc016e04a
    str[3] = '\0';
c010de97:	c6 05 4b e0 16 c0 00 	movb   $0x0,0xc016e04b
    return str;
c010de9e:	b8 48 e0 16 c0       	mov    $0xc016e048,%eax
}
c010dea3:	5d                   	pop    %ebp
c010dea4:	c3                   	ret    

c010dea5 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c010dea5:	55                   	push   %ebp
c010dea6:	89 e5                	mov    %esp,%ebp
c010dea8:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c010deab:	8b 45 10             	mov    0x10(%ebp),%eax
c010deae:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010deb1:	72 0a                	jb     c010debd <get_pgtable_items+0x18>
        return 0;
c010deb3:	b8 00 00 00 00       	mov    $0x0,%eax
c010deb8:	e9 9c 00 00 00       	jmp    c010df59 <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c010debd:	eb 04                	jmp    c010dec3 <get_pgtable_items+0x1e>
        start ++;
c010debf:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c010dec3:	8b 45 10             	mov    0x10(%ebp),%eax
c010dec6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010dec9:	73 18                	jae    c010dee3 <get_pgtable_items+0x3e>
c010decb:	8b 45 10             	mov    0x10(%ebp),%eax
c010dece:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010ded5:	8b 45 14             	mov    0x14(%ebp),%eax
c010ded8:	01 d0                	add    %edx,%eax
c010deda:	8b 00                	mov    (%eax),%eax
c010dedc:	83 e0 01             	and    $0x1,%eax
c010dedf:	85 c0                	test   %eax,%eax
c010dee1:	74 dc                	je     c010debf <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c010dee3:	8b 45 10             	mov    0x10(%ebp),%eax
c010dee6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010dee9:	73 69                	jae    c010df54 <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c010deeb:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010deef:	74 08                	je     c010def9 <get_pgtable_items+0x54>
            *left_store = start;
c010def1:	8b 45 18             	mov    0x18(%ebp),%eax
c010def4:	8b 55 10             	mov    0x10(%ebp),%edx
c010def7:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c010def9:	8b 45 10             	mov    0x10(%ebp),%eax
c010defc:	8d 50 01             	lea    0x1(%eax),%edx
c010deff:	89 55 10             	mov    %edx,0x10(%ebp)
c010df02:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010df09:	8b 45 14             	mov    0x14(%ebp),%eax
c010df0c:	01 d0                	add    %edx,%eax
c010df0e:	8b 00                	mov    (%eax),%eax
c010df10:	83 e0 07             	and    $0x7,%eax
c010df13:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c010df16:	eb 04                	jmp    c010df1c <get_pgtable_items+0x77>
            start ++;
c010df18:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c010df1c:	8b 45 10             	mov    0x10(%ebp),%eax
c010df1f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010df22:	73 1d                	jae    c010df41 <get_pgtable_items+0x9c>
c010df24:	8b 45 10             	mov    0x10(%ebp),%eax
c010df27:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010df2e:	8b 45 14             	mov    0x14(%ebp),%eax
c010df31:	01 d0                	add    %edx,%eax
c010df33:	8b 00                	mov    (%eax),%eax
c010df35:	83 e0 07             	and    $0x7,%eax
c010df38:	89 c2                	mov    %eax,%edx
c010df3a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010df3d:	39 c2                	cmp    %eax,%edx
c010df3f:	74 d7                	je     c010df18 <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c010df41:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010df45:	74 08                	je     c010df4f <get_pgtable_items+0xaa>
            *right_store = start;
c010df47:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010df4a:	8b 55 10             	mov    0x10(%ebp),%edx
c010df4d:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c010df4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010df52:	eb 05                	jmp    c010df59 <get_pgtable_items+0xb4>
    }
    return 0;
c010df54:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010df59:	c9                   	leave  
c010df5a:	c3                   	ret    

c010df5b <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c010df5b:	55                   	push   %ebp
c010df5c:	89 e5                	mov    %esp,%ebp
c010df5e:	57                   	push   %edi
c010df5f:	56                   	push   %esi
c010df60:	53                   	push   %ebx
c010df61:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c010df64:	c7 04 24 ec 45 12 c0 	movl   $0xc01245ec,(%esp)
c010df6b:	e8 83 24 ff ff       	call   c01003f3 <cprintf>
    size_t left, right = 0, perm;
c010df70:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c010df77:	e9 fa 00 00 00       	jmp    c010e076 <print_pgdir+0x11b>
        cprintf("Page Directory Entry(%03x) %08x-%08x %08x %s\n", right - left,
c010df7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010df7f:	89 04 24             	mov    %eax,(%esp)
c010df82:	e8 d0 fe ff ff       	call   c010de57 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c010df87:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010df8a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010df8d:	29 d1                	sub    %edx,%ecx
c010df8f:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("Page Directory Entry(%03x) %08x-%08x %08x %s\n", right - left,
c010df91:	89 d6                	mov    %edx,%esi
c010df93:	c1 e6 16             	shl    $0x16,%esi
c010df96:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010df99:	89 d3                	mov    %edx,%ebx
c010df9b:	c1 e3 16             	shl    $0x16,%ebx
c010df9e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010dfa1:	89 d1                	mov    %edx,%ecx
c010dfa3:	c1 e1 16             	shl    $0x16,%ecx
c010dfa6:	8b 7d dc             	mov    -0x24(%ebp),%edi
c010dfa9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010dfac:	29 d7                	sub    %edx,%edi
c010dfae:	89 fa                	mov    %edi,%edx
c010dfb0:	89 44 24 14          	mov    %eax,0x14(%esp)
c010dfb4:	89 74 24 10          	mov    %esi,0x10(%esp)
c010dfb8:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010dfbc:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010dfc0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010dfc4:	c7 04 24 20 46 12 c0 	movl   $0xc0124620,(%esp)
c010dfcb:	e8 23 24 ff ff       	call   c01003f3 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c010dfd0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010dfd3:	c1 e0 0a             	shl    $0xa,%eax
c010dfd6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c010dfd9:	eb 54                	jmp    c010e02f <print_pgdir+0xd4>
            cprintf("  |-- Page Directory Entry(%05x) %08x-%08x %08x %s\n", r - l,
c010dfdb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010dfde:	89 04 24             	mov    %eax,(%esp)
c010dfe1:	e8 71 fe ff ff       	call   c010de57 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c010dfe6:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010dfe9:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010dfec:	29 d1                	sub    %edx,%ecx
c010dfee:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("Page Directory Entry(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- Page Directory Entry(%05x) %08x-%08x %08x %s\n", r - l,
c010dff0:	89 d6                	mov    %edx,%esi
c010dff2:	c1 e6 0c             	shl    $0xc,%esi
c010dff5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010dff8:	89 d3                	mov    %edx,%ebx
c010dffa:	c1 e3 0c             	shl    $0xc,%ebx
c010dffd:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e000:	c1 e2 0c             	shl    $0xc,%edx
c010e003:	89 d1                	mov    %edx,%ecx
c010e005:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c010e008:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e00b:	29 d7                	sub    %edx,%edi
c010e00d:	89 fa                	mov    %edi,%edx
c010e00f:	89 44 24 14          	mov    %eax,0x14(%esp)
c010e013:	89 74 24 10          	mov    %esi,0x10(%esp)
c010e017:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010e01b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010e01f:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e023:	c7 04 24 50 46 12 c0 	movl   $0xc0124650,(%esp)
c010e02a:	e8 c4 23 ff ff       	call   c01003f3 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("Page Directory Entry(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c010e02f:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c010e034:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e037:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010e03a:	89 ce                	mov    %ecx,%esi
c010e03c:	c1 e6 0a             	shl    $0xa,%esi
c010e03f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010e042:	89 cb                	mov    %ecx,%ebx
c010e044:	c1 e3 0a             	shl    $0xa,%ebx
c010e047:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c010e04a:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c010e04e:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c010e051:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c010e055:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010e059:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e05d:	89 74 24 04          	mov    %esi,0x4(%esp)
c010e061:	89 1c 24             	mov    %ebx,(%esp)
c010e064:	e8 3c fe ff ff       	call   c010dea5 <get_pgtable_items>
c010e069:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010e06c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010e070:	0f 85 65 ff ff ff    	jne    c010dfdb <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c010e076:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c010e07b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e07e:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c010e081:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c010e085:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c010e088:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c010e08c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010e090:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e094:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c010e09b:	00 
c010e09c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010e0a3:	e8 fd fd ff ff       	call   c010dea5 <get_pgtable_items>
c010e0a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010e0ab:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010e0af:	0f 85 c7 fe ff ff    	jne    c010df7c <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- Page Directory Entry(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c010e0b5:	c7 04 24 84 46 12 c0 	movl   $0xc0124684,(%esp)
c010e0bc:	e8 32 23 ff ff       	call   c01003f3 <cprintf>
}
c010e0c1:	83 c4 4c             	add    $0x4c,%esp
c010e0c4:	5b                   	pop    %ebx
c010e0c5:	5e                   	pop    %esi
c010e0c6:	5f                   	pop    %edi
c010e0c7:	5d                   	pop    %ebp
c010e0c8:	c3                   	ret    

c010e0c9 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c010e0c9:	55                   	push   %ebp
c010e0ca:	89 e5                	mov    %esp,%ebp
c010e0cc:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010e0cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0d2:	c1 e8 0c             	shr    $0xc,%eax
c010e0d5:	89 c2                	mov    %eax,%edx
c010e0d7:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c010e0dc:	39 c2                	cmp    %eax,%edx
c010e0de:	72 1c                	jb     c010e0fc <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010e0e0:	c7 44 24 08 b8 46 12 	movl   $0xc01246b8,0x8(%esp)
c010e0e7:	c0 
c010e0e8:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c010e0ef:	00 
c010e0f0:	c7 04 24 d7 46 12 c0 	movl   $0xc01246d7,(%esp)
c010e0f7:	e8 1a 31 ff ff       	call   c0101216 <__panic>
    }
    return &pages[PPN(pa)];
c010e0fc:	8b 0d 6c 11 17 c0    	mov    0xc017116c,%ecx
c010e102:	8b 45 08             	mov    0x8(%ebp),%eax
c010e105:	c1 e8 0c             	shr    $0xc,%eax
c010e108:	89 c2                	mov    %eax,%edx
c010e10a:	89 d0                	mov    %edx,%eax
c010e10c:	c1 e0 03             	shl    $0x3,%eax
c010e10f:	01 d0                	add    %edx,%eax
c010e111:	c1 e0 02             	shl    $0x2,%eax
c010e114:	01 c8                	add    %ecx,%eax
}
c010e116:	c9                   	leave  
c010e117:	c3                   	ret    

c010e118 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c010e118:	55                   	push   %ebp
c010e119:	89 e5                	mov    %esp,%ebp
c010e11b:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c010e11e:	8b 45 08             	mov    0x8(%ebp),%eax
c010e121:	83 e0 01             	and    $0x1,%eax
c010e124:	85 c0                	test   %eax,%eax
c010e126:	75 1c                	jne    c010e144 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c010e128:	c7 44 24 08 e8 46 12 	movl   $0xc01246e8,0x8(%esp)
c010e12f:	c0 
c010e130:	c7 44 24 04 76 00 00 	movl   $0x76,0x4(%esp)
c010e137:	00 
c010e138:	c7 04 24 d7 46 12 c0 	movl   $0xc01246d7,(%esp)
c010e13f:	e8 d2 30 ff ff       	call   c0101216 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c010e144:	8b 45 08             	mov    0x8(%ebp),%eax
c010e147:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010e14c:	89 04 24             	mov    %eax,(%esp)
c010e14f:	e8 75 ff ff ff       	call   c010e0c9 <pa2page>
}
c010e154:	c9                   	leave  
c010e155:	c3                   	ret    

c010e156 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c010e156:	55                   	push   %ebp
c010e157:	89 e5                	mov    %esp,%ebp
c010e159:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c010e15c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e15f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010e164:	89 04 24             	mov    %eax,(%esp)
c010e167:	e8 5d ff ff ff       	call   c010e0c9 <pa2page>
}
c010e16c:	c9                   	leave  
c010e16d:	c3                   	ret    

c010e16e <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c010e16e:	55                   	push   %ebp
c010e16f:	89 e5                	mov    %esp,%ebp
c010e171:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c010e174:	e8 38 b3 00 00       	call   c01194b1 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c010e179:	a1 1c 12 17 c0       	mov    0xc017121c,%eax
c010e17e:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c010e183:	76 0c                	jbe    c010e191 <swap_init+0x23>
c010e185:	a1 1c 12 17 c0       	mov    0xc017121c,%eax
c010e18a:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c010e18f:	76 25                	jbe    c010e1b6 <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c010e191:	a1 1c 12 17 c0       	mov    0xc017121c,%eax
c010e196:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010e19a:	c7 44 24 08 09 47 12 	movl   $0xc0124709,0x8(%esp)
c010e1a1:	c0 
c010e1a2:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%esp)
c010e1a9:	00 
c010e1aa:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e1b1:	e8 60 30 ff ff       	call   c0101216 <__panic>
     }
     

     sm = &swap_manager_fifo;
c010e1b6:	c7 05 34 12 17 c0 a0 	movl   $0xc016aaa0,0xc0171234
c010e1bd:	aa 16 c0 
     int r = sm->init();
c010e1c0:	a1 34 12 17 c0       	mov    0xc0171234,%eax
c010e1c5:	8b 40 04             	mov    0x4(%eax),%eax
c010e1c8:	ff d0                	call   *%eax
c010e1ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c010e1cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e1d1:	75 2d                	jne    c010e200 <swap_init+0x92>
     {
          swap_init_ok = 1;
c010e1d3:	c7 05 4c e0 16 c0 01 	movl   $0x1,0xc016e04c
c010e1da:	00 00 00 
          cprintf("\n7.虚拟内存管理器\n");
c010e1dd:	c7 04 24 33 47 12 c0 	movl   $0xc0124733,(%esp)
c010e1e4:	e8 0a 22 ff ff       	call   c01003f3 <cprintf>
          cprintf("SWAP: manager = %s\n", sm->name);
c010e1e9:	a1 34 12 17 c0       	mov    0xc0171234,%eax
c010e1ee:	8b 00                	mov    (%eax),%eax
c010e1f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e1f4:	c7 04 24 4d 47 12 c0 	movl   $0xc012474d,(%esp)
c010e1fb:	e8 f3 21 ff ff       	call   c01003f3 <cprintf>
          //check_swap();
     }

     return r;
c010e200:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010e203:	c9                   	leave  
c010e204:	c3                   	ret    

c010e205 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c010e205:	55                   	push   %ebp
c010e206:	89 e5                	mov    %esp,%ebp
c010e208:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c010e20b:	a1 34 12 17 c0       	mov    0xc0171234,%eax
c010e210:	8b 40 08             	mov    0x8(%eax),%eax
c010e213:	8b 55 08             	mov    0x8(%ebp),%edx
c010e216:	89 14 24             	mov    %edx,(%esp)
c010e219:	ff d0                	call   *%eax
}
c010e21b:	c9                   	leave  
c010e21c:	c3                   	ret    

c010e21d <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c010e21d:	55                   	push   %ebp
c010e21e:	89 e5                	mov    %esp,%ebp
c010e220:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c010e223:	a1 34 12 17 c0       	mov    0xc0171234,%eax
c010e228:	8b 40 0c             	mov    0xc(%eax),%eax
c010e22b:	8b 55 08             	mov    0x8(%ebp),%edx
c010e22e:	89 14 24             	mov    %edx,(%esp)
c010e231:	ff d0                	call   *%eax
}
c010e233:	c9                   	leave  
c010e234:	c3                   	ret    

c010e235 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c010e235:	55                   	push   %ebp
c010e236:	89 e5                	mov    %esp,%ebp
c010e238:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c010e23b:	a1 34 12 17 c0       	mov    0xc0171234,%eax
c010e240:	8b 40 10             	mov    0x10(%eax),%eax
c010e243:	8b 55 14             	mov    0x14(%ebp),%edx
c010e246:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010e24a:	8b 55 10             	mov    0x10(%ebp),%edx
c010e24d:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e251:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e254:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e258:	8b 55 08             	mov    0x8(%ebp),%edx
c010e25b:	89 14 24             	mov    %edx,(%esp)
c010e25e:	ff d0                	call   *%eax
}
c010e260:	c9                   	leave  
c010e261:	c3                   	ret    

c010e262 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c010e262:	55                   	push   %ebp
c010e263:	89 e5                	mov    %esp,%ebp
c010e265:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c010e268:	a1 34 12 17 c0       	mov    0xc0171234,%eax
c010e26d:	8b 40 14             	mov    0x14(%eax),%eax
c010e270:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e273:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e277:	8b 55 08             	mov    0x8(%ebp),%edx
c010e27a:	89 14 24             	mov    %edx,(%esp)
c010e27d:	ff d0                	call   *%eax
}
c010e27f:	c9                   	leave  
c010e280:	c3                   	ret    

c010e281 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c010e281:	55                   	push   %ebp
c010e282:	89 e5                	mov    %esp,%ebp
c010e284:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c010e287:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010e28e:	e9 5a 01 00 00       	jmp    c010e3ed <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c010e293:	a1 34 12 17 c0       	mov    0xc0171234,%eax
c010e298:	8b 40 18             	mov    0x18(%eax),%eax
c010e29b:	8b 55 10             	mov    0x10(%ebp),%edx
c010e29e:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e2a2:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010e2a5:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e2a9:	8b 55 08             	mov    0x8(%ebp),%edx
c010e2ac:	89 14 24             	mov    %edx,(%esp)
c010e2af:	ff d0                	call   *%eax
c010e2b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c010e2b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e2b8:	74 18                	je     c010e2d2 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c010e2ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e2bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e2c1:	c7 04 24 64 47 12 c0 	movl   $0xc0124764,(%esp)
c010e2c8:	e8 26 21 ff ff       	call   c01003f3 <cprintf>
c010e2cd:	e9 27 01 00 00       	jmp    c010e3f9 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c010e2d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e2d5:	8b 40 20             	mov    0x20(%eax),%eax
c010e2d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c010e2db:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2de:	8b 40 0c             	mov    0xc(%eax),%eax
c010e2e1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010e2e8:	00 
c010e2e9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e2ec:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e2f0:	89 04 24             	mov    %eax,(%esp)
c010e2f3:	e8 a8 e9 ff ff       	call   c010cca0 <get_pte>
c010e2f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c010e2fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e2fe:	8b 00                	mov    (%eax),%eax
c010e300:	83 e0 01             	and    $0x1,%eax
c010e303:	85 c0                	test   %eax,%eax
c010e305:	75 24                	jne    c010e32b <swap_out+0xaa>
c010e307:	c7 44 24 0c 91 47 12 	movl   $0xc0124791,0xc(%esp)
c010e30e:	c0 
c010e30f:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e316:	c0 
c010e317:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010e31e:	00 
c010e31f:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e326:	e8 eb 2e ff ff       	call   c0101216 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c010e32b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e32e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e331:	8b 52 20             	mov    0x20(%edx),%edx
c010e334:	c1 ea 0c             	shr    $0xc,%edx
c010e337:	83 c2 01             	add    $0x1,%edx
c010e33a:	c1 e2 08             	shl    $0x8,%edx
c010e33d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e341:	89 14 24             	mov    %edx,(%esp)
c010e344:	e8 22 b2 00 00       	call   c011956b <swapfs_write>
c010e349:	85 c0                	test   %eax,%eax
c010e34b:	74 34                	je     c010e381 <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c010e34d:	c7 04 24 bb 47 12 c0 	movl   $0xc01247bb,(%esp)
c010e354:	e8 9a 20 ff ff       	call   c01003f3 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c010e359:	a1 34 12 17 c0       	mov    0xc0171234,%eax
c010e35e:	8b 40 10             	mov    0x10(%eax),%eax
c010e361:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e364:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010e36b:	00 
c010e36c:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e370:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e373:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e377:	8b 55 08             	mov    0x8(%ebp),%edx
c010e37a:	89 14 24             	mov    %edx,(%esp)
c010e37d:	ff d0                	call   *%eax
c010e37f:	eb 68                	jmp    c010e3e9 <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c010e381:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e384:	8b 40 20             	mov    0x20(%eax),%eax
c010e387:	c1 e8 0c             	shr    $0xc,%eax
c010e38a:	83 c0 01             	add    $0x1,%eax
c010e38d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010e391:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e394:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e398:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e39b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e39f:	c7 04 24 d4 47 12 c0 	movl   $0xc01247d4,(%esp)
c010e3a6:	e8 48 20 ff ff       	call   c01003f3 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c010e3ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e3ae:	8b 40 20             	mov    0x20(%eax),%eax
c010e3b1:	c1 e8 0c             	shr    $0xc,%eax
c010e3b4:	83 c0 01             	add    $0x1,%eax
c010e3b7:	c1 e0 08             	shl    $0x8,%eax
c010e3ba:	89 c2                	mov    %eax,%edx
c010e3bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e3bf:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c010e3c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e3c4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010e3cb:	00 
c010e3cc:	89 04 24             	mov    %eax,(%esp)
c010e3cf:	e8 f4 e1 ff ff       	call   c010c5c8 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c010e3d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010e3d7:	8b 40 0c             	mov    0xc(%eax),%eax
c010e3da:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e3dd:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e3e1:	89 04 24             	mov    %eax,(%esp)
c010e3e4:	e8 c4 ef ff ff       	call   c010d3ad <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c010e3e9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010e3ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e3f0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010e3f3:	0f 85 9a fe ff ff    	jne    c010e293 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c010e3f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010e3fc:	c9                   	leave  
c010e3fd:	c3                   	ret    

c010e3fe <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c010e3fe:	55                   	push   %ebp
c010e3ff:	89 e5                	mov    %esp,%ebp
c010e401:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c010e404:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010e40b:	e8 4d e1 ff ff       	call   c010c55d <alloc_pages>
c010e410:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c010e413:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e417:	75 24                	jne    c010e43d <swap_in+0x3f>
c010e419:	c7 44 24 0c 14 48 12 	movl   $0xc0124814,0xc(%esp)
c010e420:	c0 
c010e421:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e428:	c0 
c010e429:	c7 44 24 04 82 00 00 	movl   $0x82,0x4(%esp)
c010e430:	00 
c010e431:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e438:	e8 d9 2d ff ff       	call   c0101216 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c010e43d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e440:	8b 40 0c             	mov    0xc(%eax),%eax
c010e443:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010e44a:	00 
c010e44b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e44e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e452:	89 04 24             	mov    %eax,(%esp)
c010e455:	e8 46 e8 ff ff       	call   c010cca0 <get_pte>
c010e45a:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c010e45d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e460:	8b 00                	mov    (%eax),%eax
c010e462:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e465:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e469:	89 04 24             	mov    %eax,(%esp)
c010e46c:	e8 88 b0 00 00       	call   c01194f9 <swapfs_read>
c010e471:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e474:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010e478:	74 2a                	je     c010e4a4 <swap_in+0xa6>
     {
        assert(r!=0);
c010e47a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010e47e:	75 24                	jne    c010e4a4 <swap_in+0xa6>
c010e480:	c7 44 24 0c 21 48 12 	movl   $0xc0124821,0xc(%esp)
c010e487:	c0 
c010e488:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e48f:	c0 
c010e490:	c7 44 24 04 8a 00 00 	movl   $0x8a,0x4(%esp)
c010e497:	00 
c010e498:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e49f:	e8 72 2d ff ff       	call   c0101216 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c010e4a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e4a7:	8b 00                	mov    (%eax),%eax
c010e4a9:	c1 e8 08             	shr    $0x8,%eax
c010e4ac:	89 c2                	mov    %eax,%edx
c010e4ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e4b1:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e4b5:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e4b9:	c7 04 24 28 48 12 c0 	movl   $0xc0124828,(%esp)
c010e4c0:	e8 2e 1f ff ff       	call   c01003f3 <cprintf>
     *ptr_result=result;
c010e4c5:	8b 45 10             	mov    0x10(%ebp),%eax
c010e4c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e4cb:	89 10                	mov    %edx,(%eax)
     return 0;
c010e4cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e4d2:	c9                   	leave  
c010e4d3:	c3                   	ret    

c010e4d4 <check_content_set>:



static inline void
check_content_set(void)
{
c010e4d4:	55                   	push   %ebp
c010e4d5:	89 e5                	mov    %esp,%ebp
c010e4d7:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c010e4da:	b8 00 10 00 00       	mov    $0x1000,%eax
c010e4df:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010e4e2:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010e4e7:	83 f8 01             	cmp    $0x1,%eax
c010e4ea:	74 24                	je     c010e510 <check_content_set+0x3c>
c010e4ec:	c7 44 24 0c 66 48 12 	movl   $0xc0124866,0xc(%esp)
c010e4f3:	c0 
c010e4f4:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e4fb:	c0 
c010e4fc:	c7 44 24 04 97 00 00 	movl   $0x97,0x4(%esp)
c010e503:	00 
c010e504:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e50b:	e8 06 2d ff ff       	call   c0101216 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c010e510:	b8 10 10 00 00       	mov    $0x1010,%eax
c010e515:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010e518:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010e51d:	83 f8 01             	cmp    $0x1,%eax
c010e520:	74 24                	je     c010e546 <check_content_set+0x72>
c010e522:	c7 44 24 0c 66 48 12 	movl   $0xc0124866,0xc(%esp)
c010e529:	c0 
c010e52a:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e531:	c0 
c010e532:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
c010e539:	00 
c010e53a:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e541:	e8 d0 2c ff ff       	call   c0101216 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c010e546:	b8 00 20 00 00       	mov    $0x2000,%eax
c010e54b:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c010e54e:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010e553:	83 f8 02             	cmp    $0x2,%eax
c010e556:	74 24                	je     c010e57c <check_content_set+0xa8>
c010e558:	c7 44 24 0c 75 48 12 	movl   $0xc0124875,0xc(%esp)
c010e55f:	c0 
c010e560:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e567:	c0 
c010e568:	c7 44 24 04 9b 00 00 	movl   $0x9b,0x4(%esp)
c010e56f:	00 
c010e570:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e577:	e8 9a 2c ff ff       	call   c0101216 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c010e57c:	b8 10 20 00 00       	mov    $0x2010,%eax
c010e581:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c010e584:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010e589:	83 f8 02             	cmp    $0x2,%eax
c010e58c:	74 24                	je     c010e5b2 <check_content_set+0xde>
c010e58e:	c7 44 24 0c 75 48 12 	movl   $0xc0124875,0xc(%esp)
c010e595:	c0 
c010e596:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e59d:	c0 
c010e59e:	c7 44 24 04 9d 00 00 	movl   $0x9d,0x4(%esp)
c010e5a5:	00 
c010e5a6:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e5ad:	e8 64 2c ff ff       	call   c0101216 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c010e5b2:	b8 00 30 00 00       	mov    $0x3000,%eax
c010e5b7:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010e5ba:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010e5bf:	83 f8 03             	cmp    $0x3,%eax
c010e5c2:	74 24                	je     c010e5e8 <check_content_set+0x114>
c010e5c4:	c7 44 24 0c 84 48 12 	movl   $0xc0124884,0xc(%esp)
c010e5cb:	c0 
c010e5cc:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e5d3:	c0 
c010e5d4:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c010e5db:	00 
c010e5dc:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e5e3:	e8 2e 2c ff ff       	call   c0101216 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c010e5e8:	b8 10 30 00 00       	mov    $0x3010,%eax
c010e5ed:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010e5f0:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010e5f5:	83 f8 03             	cmp    $0x3,%eax
c010e5f8:	74 24                	je     c010e61e <check_content_set+0x14a>
c010e5fa:	c7 44 24 0c 84 48 12 	movl   $0xc0124884,0xc(%esp)
c010e601:	c0 
c010e602:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e609:	c0 
c010e60a:	c7 44 24 04 a1 00 00 	movl   $0xa1,0x4(%esp)
c010e611:	00 
c010e612:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e619:	e8 f8 2b ff ff       	call   c0101216 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c010e61e:	b8 00 40 00 00       	mov    $0x4000,%eax
c010e623:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c010e626:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010e62b:	83 f8 04             	cmp    $0x4,%eax
c010e62e:	74 24                	je     c010e654 <check_content_set+0x180>
c010e630:	c7 44 24 0c 93 48 12 	movl   $0xc0124893,0xc(%esp)
c010e637:	c0 
c010e638:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e63f:	c0 
c010e640:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c010e647:	00 
c010e648:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e64f:	e8 c2 2b ff ff       	call   c0101216 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c010e654:	b8 10 40 00 00       	mov    $0x4010,%eax
c010e659:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c010e65c:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010e661:	83 f8 04             	cmp    $0x4,%eax
c010e664:	74 24                	je     c010e68a <check_content_set+0x1b6>
c010e666:	c7 44 24 0c 93 48 12 	movl   $0xc0124893,0xc(%esp)
c010e66d:	c0 
c010e66e:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e675:	c0 
c010e676:	c7 44 24 04 a5 00 00 	movl   $0xa5,0x4(%esp)
c010e67d:	00 
c010e67e:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e685:	e8 8c 2b ff ff       	call   c0101216 <__panic>
}
c010e68a:	c9                   	leave  
c010e68b:	c3                   	ret    

c010e68c <check_content_access>:

static inline int
check_content_access(void)
{
c010e68c:	55                   	push   %ebp
c010e68d:	89 e5                	mov    %esp,%ebp
c010e68f:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c010e692:	a1 34 12 17 c0       	mov    0xc0171234,%eax
c010e697:	8b 40 1c             	mov    0x1c(%eax),%eax
c010e69a:	ff d0                	call   *%eax
c010e69c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c010e69f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010e6a2:	c9                   	leave  
c010e6a3:	c3                   	ret    

c010e6a4 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c010e6a4:	55                   	push   %ebp
c010e6a5:	89 e5                	mov    %esp,%ebp
c010e6a7:	53                   	push   %ebx
c010e6a8:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c010e6ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010e6b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c010e6b9:	c7 45 e8 54 11 17 c0 	movl   $0xc0171154,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010e6c0:	eb 6b                	jmp    c010e72d <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c010e6c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e6c5:	83 e8 10             	sub    $0x10,%eax
c010e6c8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c010e6cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e6ce:	83 c0 04             	add    $0x4,%eax
c010e6d1:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c010e6d8:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010e6db:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010e6de:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010e6e1:	0f a3 10             	bt     %edx,(%eax)
c010e6e4:	19 c0                	sbb    %eax,%eax
c010e6e6:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c010e6e9:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010e6ed:	0f 95 c0             	setne  %al
c010e6f0:	0f b6 c0             	movzbl %al,%eax
c010e6f3:	85 c0                	test   %eax,%eax
c010e6f5:	75 24                	jne    c010e71b <check_swap+0x77>
c010e6f7:	c7 44 24 0c a2 48 12 	movl   $0xc01248a2,0xc(%esp)
c010e6fe:	c0 
c010e6ff:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e706:	c0 
c010e707:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c010e70e:	00 
c010e70f:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e716:	e8 fb 2a ff ff       	call   c0101216 <__panic>
        count ++, total += p->property;
c010e71b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010e71f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e722:	8b 50 08             	mov    0x8(%eax),%edx
c010e725:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e728:	01 d0                	add    %edx,%eax
c010e72a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e72d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e730:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e733:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010e736:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c010e739:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010e73c:	81 7d e8 54 11 17 c0 	cmpl   $0xc0171154,-0x18(%ebp)
c010e743:	0f 85 79 ff ff ff    	jne    c010e6c2 <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c010e749:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010e74c:	e8 a9 de ff ff       	call   c010c5fa <nr_free_pages>
c010e751:	39 c3                	cmp    %eax,%ebx
c010e753:	74 24                	je     c010e779 <check_swap+0xd5>
c010e755:	c7 44 24 0c b2 48 12 	movl   $0xc01248b2,0xc(%esp)
c010e75c:	c0 
c010e75d:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e764:	c0 
c010e765:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c010e76c:	00 
c010e76d:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e774:	e8 9d 2a ff ff       	call   c0101216 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c010e779:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e77c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e780:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e783:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e787:	c7 04 24 cc 48 12 c0 	movl   $0xc01248cc,(%esp)
c010e78e:	e8 60 1c ff ff       	call   c01003f3 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c010e793:	e8 6f 26 00 00       	call   c0110e07 <mm_create>
c010e798:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c010e79b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010e79f:	75 24                	jne    c010e7c5 <check_swap+0x121>
c010e7a1:	c7 44 24 0c f2 48 12 	movl   $0xc01248f2,0xc(%esp)
c010e7a8:	c0 
c010e7a9:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e7b0:	c0 
c010e7b1:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c010e7b8:	00 
c010e7b9:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e7c0:	e8 51 2a ff ff       	call   c0101216 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c010e7c5:	a1 50 12 17 c0       	mov    0xc0171250,%eax
c010e7ca:	85 c0                	test   %eax,%eax
c010e7cc:	74 24                	je     c010e7f2 <check_swap+0x14e>
c010e7ce:	c7 44 24 0c fd 48 12 	movl   $0xc01248fd,0xc(%esp)
c010e7d5:	c0 
c010e7d6:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e7dd:	c0 
c010e7de:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c010e7e5:	00 
c010e7e6:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e7ed:	e8 24 2a ff ff       	call   c0101216 <__panic>

     check_mm_struct = mm;
c010e7f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e7f5:	a3 50 12 17 c0       	mov    %eax,0xc0171250

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c010e7fa:	8b 15 00 aa 16 c0    	mov    0xc016aa00,%edx
c010e800:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e803:	89 50 0c             	mov    %edx,0xc(%eax)
c010e806:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e809:	8b 40 0c             	mov    0xc(%eax),%eax
c010e80c:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c010e80f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e812:	8b 00                	mov    (%eax),%eax
c010e814:	85 c0                	test   %eax,%eax
c010e816:	74 24                	je     c010e83c <check_swap+0x198>
c010e818:	c7 44 24 0c 15 49 12 	movl   $0xc0124915,0xc(%esp)
c010e81f:	c0 
c010e820:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e827:	c0 
c010e828:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c010e82f:	00 
c010e830:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e837:	e8 da 29 ff ff       	call   c0101216 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c010e83c:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c010e843:	00 
c010e844:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c010e84b:	00 
c010e84c:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010e853:	e8 5e 26 00 00       	call   c0110eb6 <vma_create>
c010e858:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c010e85b:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c010e85f:	75 24                	jne    c010e885 <check_swap+0x1e1>
c010e861:	c7 44 24 0c 23 49 12 	movl   $0xc0124923,0xc(%esp)
c010e868:	c0 
c010e869:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e870:	c0 
c010e871:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c010e878:	00 
c010e879:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e880:	e8 91 29 ff ff       	call   c0101216 <__panic>

     insert_vma_struct(mm, vma);
c010e885:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e888:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e88c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e88f:	89 04 24             	mov    %eax,(%esp)
c010e892:	e8 c5 27 00 00       	call   c011105c <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c010e897:	c7 04 24 30 49 12 c0 	movl   $0xc0124930,(%esp)
c010e89e:	e8 50 1b ff ff       	call   c01003f3 <cprintf>
     pte_t *temp_ptep=NULL;
c010e8a3:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c010e8aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e8ad:	8b 40 0c             	mov    0xc(%eax),%eax
c010e8b0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010e8b7:	00 
c010e8b8:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010e8bf:	00 
c010e8c0:	89 04 24             	mov    %eax,(%esp)
c010e8c3:	e8 d8 e3 ff ff       	call   c010cca0 <get_pte>
c010e8c8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c010e8cb:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c010e8cf:	75 24                	jne    c010e8f5 <check_swap+0x251>
c010e8d1:	c7 44 24 0c 64 49 12 	movl   $0xc0124964,0xc(%esp)
c010e8d8:	c0 
c010e8d9:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e8e0:	c0 
c010e8e1:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c010e8e8:	00 
c010e8e9:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e8f0:	e8 21 29 ff ff       	call   c0101216 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c010e8f5:	c7 04 24 78 49 12 c0 	movl   $0xc0124978,(%esp)
c010e8fc:	e8 f2 1a ff ff       	call   c01003f3 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010e901:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010e908:	e9 a3 00 00 00       	jmp    c010e9b0 <check_swap+0x30c>
          check_rp[i] = alloc_page();
c010e90d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010e914:	e8 44 dc ff ff       	call   c010c55d <alloc_pages>
c010e919:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e91c:	89 04 95 80 11 17 c0 	mov    %eax,-0x3fe8ee80(,%edx,4)
          assert(check_rp[i] != NULL );
c010e923:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e926:	8b 04 85 80 11 17 c0 	mov    -0x3fe8ee80(,%eax,4),%eax
c010e92d:	85 c0                	test   %eax,%eax
c010e92f:	75 24                	jne    c010e955 <check_swap+0x2b1>
c010e931:	c7 44 24 0c 9c 49 12 	movl   $0xc012499c,0xc(%esp)
c010e938:	c0 
c010e939:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e940:	c0 
c010e941:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c010e948:	00 
c010e949:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e950:	e8 c1 28 ff ff       	call   c0101216 <__panic>
          assert(!PageProperty(check_rp[i]));
c010e955:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e958:	8b 04 85 80 11 17 c0 	mov    -0x3fe8ee80(,%eax,4),%eax
c010e95f:	83 c0 04             	add    $0x4,%eax
c010e962:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c010e969:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010e96c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010e96f:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010e972:	0f a3 10             	bt     %edx,(%eax)
c010e975:	19 c0                	sbb    %eax,%eax
c010e977:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c010e97a:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c010e97e:	0f 95 c0             	setne  %al
c010e981:	0f b6 c0             	movzbl %al,%eax
c010e984:	85 c0                	test   %eax,%eax
c010e986:	74 24                	je     c010e9ac <check_swap+0x308>
c010e988:	c7 44 24 0c b0 49 12 	movl   $0xc01249b0,0xc(%esp)
c010e98f:	c0 
c010e990:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010e997:	c0 
c010e998:	c7 44 24 04 e1 00 00 	movl   $0xe1,0x4(%esp)
c010e99f:	00 
c010e9a0:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010e9a7:	e8 6a 28 ff ff       	call   c0101216 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010e9ac:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010e9b0:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010e9b4:	0f 8e 53 ff ff ff    	jle    c010e90d <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c010e9ba:	a1 54 11 17 c0       	mov    0xc0171154,%eax
c010e9bf:	8b 15 58 11 17 c0    	mov    0xc0171158,%edx
c010e9c5:	89 45 98             	mov    %eax,-0x68(%ebp)
c010e9c8:	89 55 9c             	mov    %edx,-0x64(%ebp)
c010e9cb:	c7 45 a8 54 11 17 c0 	movl   $0xc0171154,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010e9d2:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010e9d5:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010e9d8:	89 50 04             	mov    %edx,0x4(%eax)
c010e9db:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010e9de:	8b 50 04             	mov    0x4(%eax),%edx
c010e9e1:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010e9e4:	89 10                	mov    %edx,(%eax)
c010e9e6:	c7 45 a4 54 11 17 c0 	movl   $0xc0171154,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e9ed:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010e9f0:	8b 40 04             	mov    0x4(%eax),%eax
c010e9f3:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c010e9f6:	0f 94 c0             	sete   %al
c010e9f9:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c010e9fc:	85 c0                	test   %eax,%eax
c010e9fe:	75 24                	jne    c010ea24 <check_swap+0x380>
c010ea00:	c7 44 24 0c cb 49 12 	movl   $0xc01249cb,0xc(%esp)
c010ea07:	c0 
c010ea08:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010ea0f:	c0 
c010ea10:	c7 44 24 04 e5 00 00 	movl   $0xe5,0x4(%esp)
c010ea17:	00 
c010ea18:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010ea1f:	e8 f2 27 ff ff       	call   c0101216 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c010ea24:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010ea29:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c010ea2c:	c7 05 5c 11 17 c0 00 	movl   $0x0,0xc017115c
c010ea33:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010ea36:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010ea3d:	eb 1e                	jmp    c010ea5d <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c010ea3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ea42:	8b 04 85 80 11 17 c0 	mov    -0x3fe8ee80(,%eax,4),%eax
c010ea49:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010ea50:	00 
c010ea51:	89 04 24             	mov    %eax,(%esp)
c010ea54:	e8 6f db ff ff       	call   c010c5c8 <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010ea59:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010ea5d:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010ea61:	7e dc                	jle    c010ea3f <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c010ea63:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010ea68:	83 f8 04             	cmp    $0x4,%eax
c010ea6b:	74 24                	je     c010ea91 <check_swap+0x3ed>
c010ea6d:	c7 44 24 0c e4 49 12 	movl   $0xc01249e4,0xc(%esp)
c010ea74:	c0 
c010ea75:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010ea7c:	c0 
c010ea7d:	c7 44 24 04 ee 00 00 	movl   $0xee,0x4(%esp)
c010ea84:	00 
c010ea85:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010ea8c:	e8 85 27 ff ff       	call   c0101216 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c010ea91:	c7 04 24 08 4a 12 c0 	movl   $0xc0124a08,(%esp)
c010ea98:	e8 56 19 ff ff       	call   c01003f3 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c010ea9d:	c7 05 58 e0 16 c0 00 	movl   $0x0,0xc016e058
c010eaa4:	00 00 00 
     
     check_content_set();
c010eaa7:	e8 28 fa ff ff       	call   c010e4d4 <check_content_set>
     assert( nr_free == 0);         
c010eaac:	a1 5c 11 17 c0       	mov    0xc017115c,%eax
c010eab1:	85 c0                	test   %eax,%eax
c010eab3:	74 24                	je     c010ead9 <check_swap+0x435>
c010eab5:	c7 44 24 0c 2f 4a 12 	movl   $0xc0124a2f,0xc(%esp)
c010eabc:	c0 
c010eabd:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010eac4:	c0 
c010eac5:	c7 44 24 04 f7 00 00 	movl   $0xf7,0x4(%esp)
c010eacc:	00 
c010eacd:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010ead4:	e8 3d 27 ff ff       	call   c0101216 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c010ead9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010eae0:	eb 26                	jmp    c010eb08 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c010eae2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eae5:	c7 04 85 a0 11 17 c0 	movl   $0xffffffff,-0x3fe8ee60(,%eax,4)
c010eaec:	ff ff ff ff 
c010eaf0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eaf3:	8b 14 85 a0 11 17 c0 	mov    -0x3fe8ee60(,%eax,4),%edx
c010eafa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eafd:	89 14 85 e0 11 17 c0 	mov    %edx,-0x3fe8ee20(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c010eb04:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010eb08:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c010eb0c:	7e d4                	jle    c010eae2 <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010eb0e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010eb15:	e9 eb 00 00 00       	jmp    c010ec05 <check_swap+0x561>
         check_ptep[i]=0;
c010eb1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eb1d:	c7 04 85 38 12 17 c0 	movl   $0x0,-0x3fe8edc8(,%eax,4)
c010eb24:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c010eb28:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eb2b:	83 c0 01             	add    $0x1,%eax
c010eb2e:	c1 e0 0c             	shl    $0xc,%eax
c010eb31:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010eb38:	00 
c010eb39:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eb3d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010eb40:	89 04 24             	mov    %eax,(%esp)
c010eb43:	e8 58 e1 ff ff       	call   c010cca0 <get_pte>
c010eb48:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010eb4b:	89 04 95 38 12 17 c0 	mov    %eax,-0x3fe8edc8(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c010eb52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eb55:	8b 04 85 38 12 17 c0 	mov    -0x3fe8edc8(,%eax,4),%eax
c010eb5c:	85 c0                	test   %eax,%eax
c010eb5e:	75 24                	jne    c010eb84 <check_swap+0x4e0>
c010eb60:	c7 44 24 0c 3c 4a 12 	movl   $0xc0124a3c,0xc(%esp)
c010eb67:	c0 
c010eb68:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010eb6f:	c0 
c010eb70:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
c010eb77:	00 
c010eb78:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010eb7f:	e8 92 26 ff ff       	call   c0101216 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c010eb84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eb87:	8b 04 85 38 12 17 c0 	mov    -0x3fe8edc8(,%eax,4),%eax
c010eb8e:	8b 00                	mov    (%eax),%eax
c010eb90:	89 04 24             	mov    %eax,(%esp)
c010eb93:	e8 80 f5 ff ff       	call   c010e118 <pte2page>
c010eb98:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010eb9b:	8b 14 95 80 11 17 c0 	mov    -0x3fe8ee80(,%edx,4),%edx
c010eba2:	39 d0                	cmp    %edx,%eax
c010eba4:	74 24                	je     c010ebca <check_swap+0x526>
c010eba6:	c7 44 24 0c 54 4a 12 	movl   $0xc0124a54,0xc(%esp)
c010ebad:	c0 
c010ebae:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010ebb5:	c0 
c010ebb6:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c010ebbd:	00 
c010ebbe:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010ebc5:	e8 4c 26 ff ff       	call   c0101216 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c010ebca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ebcd:	8b 04 85 38 12 17 c0 	mov    -0x3fe8edc8(,%eax,4),%eax
c010ebd4:	8b 00                	mov    (%eax),%eax
c010ebd6:	83 e0 01             	and    $0x1,%eax
c010ebd9:	85 c0                	test   %eax,%eax
c010ebdb:	75 24                	jne    c010ec01 <check_swap+0x55d>
c010ebdd:	c7 44 24 0c 7c 4a 12 	movl   $0xc0124a7c,0xc(%esp)
c010ebe4:	c0 
c010ebe5:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010ebec:	c0 
c010ebed:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c010ebf4:	00 
c010ebf5:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010ebfc:	e8 15 26 ff ff       	call   c0101216 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010ec01:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010ec05:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010ec09:	0f 8e 0b ff ff ff    	jle    c010eb1a <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c010ec0f:	c7 04 24 98 4a 12 c0 	movl   $0xc0124a98,(%esp)
c010ec16:	e8 d8 17 ff ff       	call   c01003f3 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c010ec1b:	e8 6c fa ff ff       	call   c010e68c <check_content_access>
c010ec20:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c010ec23:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010ec27:	74 24                	je     c010ec4d <check_swap+0x5a9>
c010ec29:	c7 44 24 0c be 4a 12 	movl   $0xc0124abe,0xc(%esp)
c010ec30:	c0 
c010ec31:	c7 44 24 08 a6 47 12 	movl   $0xc01247a6,0x8(%esp)
c010ec38:	c0 
c010ec39:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
c010ec40:	00 
c010ec41:	c7 04 24 24 47 12 c0 	movl   $0xc0124724,(%esp)
c010ec48:	e8 c9 25 ff ff       	call   c0101216 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010ec4d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010ec54:	eb 1e                	jmp    c010ec74 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c010ec56:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ec59:	8b 04 85 80 11 17 c0 	mov    -0x3fe8ee80(,%eax,4),%eax
c010ec60:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010ec67:	00 
c010ec68:	89 04 24             	mov    %eax,(%esp)
c010ec6b:	e8 58 d9 ff ff       	call   c010c5c8 <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010ec70:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010ec74:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010ec78:	7e dc                	jle    c010ec56 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c010ec7a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ec7d:	8b 00                	mov    (%eax),%eax
c010ec7f:	89 04 24             	mov    %eax,(%esp)
c010ec82:	e8 cf f4 ff ff       	call   c010e156 <pde2page>
c010ec87:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010ec8e:	00 
c010ec8f:	89 04 24             	mov    %eax,(%esp)
c010ec92:	e8 31 d9 ff ff       	call   c010c5c8 <free_pages>
     pgdir[0] = 0;
c010ec97:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ec9a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c010eca0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010eca3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c010ecaa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ecad:	89 04 24             	mov    %eax,(%esp)
c010ecb0:	e8 d7 24 00 00       	call   c011118c <mm_destroy>
     check_mm_struct = NULL;
c010ecb5:	c7 05 50 12 17 c0 00 	movl   $0x0,0xc0171250
c010ecbc:	00 00 00 
     
     nr_free = nr_free_store;
c010ecbf:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ecc2:	a3 5c 11 17 c0       	mov    %eax,0xc017115c
     free_list = free_list_store;
c010ecc7:	8b 45 98             	mov    -0x68(%ebp),%eax
c010ecca:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010eccd:	a3 54 11 17 c0       	mov    %eax,0xc0171154
c010ecd2:	89 15 58 11 17 c0    	mov    %edx,0xc0171158

     
     le = &free_list;
c010ecd8:	c7 45 e8 54 11 17 c0 	movl   $0xc0171154,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010ecdf:	eb 1d                	jmp    c010ecfe <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c010ece1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ece4:	83 e8 10             	sub    $0x10,%eax
c010ece7:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c010ecea:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010ecee:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ecf1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010ecf4:	8b 40 08             	mov    0x8(%eax),%eax
c010ecf7:	29 c2                	sub    %eax,%edx
c010ecf9:	89 d0                	mov    %edx,%eax
c010ecfb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ecfe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ed01:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ed04:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010ed07:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c010ed0a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ed0d:	81 7d e8 54 11 17 c0 	cmpl   $0xc0171154,-0x18(%ebp)
c010ed14:	75 cb                	jne    c010ece1 <check_swap+0x63d>
     }
     //cprintf("count is %d, total is %d\n",count,total);
     //assert(count == 0);
     
     //cprintf("check_swap() succeeded!\n");
}
c010ed16:	83 c4 74             	add    $0x74,%esp
c010ed19:	5b                   	pop    %ebx
c010ed1a:	5d                   	pop    %ebp
c010ed1b:	c3                   	ret    

c010ed1c <do_change_swap>:

void do_change_swap(unsigned int mode)
{
c010ed1c:	55                   	push   %ebp
c010ed1d:	89 e5                	mov    %esp,%ebp
c010ed1f:	83 ec 18             	sub    $0x18,%esp
     //cprintf("mode:%u",mode);
     switch (mode)
c010ed22:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed25:	83 f8 02             	cmp    $0x2,%eax
c010ed28:	74 16                	je     c010ed40 <do_change_swap+0x24>
c010ed2a:	83 f8 03             	cmp    $0x3,%eax
c010ed2d:	74 1d                	je     c010ed4c <do_change_swap+0x30>
c010ed2f:	83 f8 01             	cmp    $0x1,%eax
c010ed32:	75 24                	jne    c010ed58 <do_change_swap+0x3c>
     {
     case 1:
          sm=&swap_manager_clock;
c010ed34:	c7 05 34 12 17 c0 60 	movl   $0xc016aa60,0xc0171234
c010ed3b:	aa 16 c0 
          break;
c010ed3e:	eb 25                	jmp    c010ed65 <do_change_swap+0x49>
     case 2:
          sm=&swap_manager_fifo;
c010ed40:	c7 05 34 12 17 c0 a0 	movl   $0xc016aaa0,0xc0171234
c010ed47:	aa 16 c0 
          break;
c010ed4a:	eb 19                	jmp    c010ed65 <do_change_swap+0x49>
     case 3:
          sm=&swap_manager_lru;
c010ed4c:	c7 05 34 12 17 c0 e0 	movl   $0xc016aae0,0xc0171234
c010ed53:	aa 16 c0 
          break;
c010ed56:	eb 0d                	jmp    c010ed65 <do_change_swap+0x49>
     default:
          cprintf("bad argument!\n");
c010ed58:	c7 04 24 c5 4a 12 c0 	movl   $0xc0124ac5,(%esp)
c010ed5f:	e8 8f 16 ff ff       	call   c01003f3 <cprintf>
          break;
c010ed64:	90                   	nop
     }
     cprintf("\nchange swap: %s !\n",sm->name);
c010ed65:	a1 34 12 17 c0       	mov    0xc0171234,%eax
c010ed6a:	8b 00                	mov    (%eax),%eax
c010ed6c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ed70:	c7 04 24 d4 4a 12 c0 	movl   $0xc0124ad4,(%esp)
c010ed77:	e8 77 16 ff ff       	call   c01003f3 <cprintf>
}
c010ed7c:	c9                   	leave  
c010ed7d:	c3                   	ret    

c010ed7e <_clock_init_mm>:
 * (2) _clock_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access clock PRA
 */
static int
_clock_init_mm(struct mm_struct *mm)
{     
c010ed7e:	55                   	push   %ebp
c010ed7f:	89 e5                	mov    %esp,%ebp
c010ed81:	83 ec 10             	sub    $0x10,%esp
c010ed84:	c7 45 fc 48 12 17 c0 	movl   $0xc0171248,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010ed8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ed8e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010ed91:	89 50 04             	mov    %edx,0x4(%eax)
c010ed94:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ed97:	8b 50 04             	mov    0x4(%eax),%edx
c010ed9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ed9d:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c010ed9f:	8b 45 08             	mov    0x8(%ebp),%eax
c010eda2:	c7 40 14 48 12 17 c0 	movl   $0xc0171248,0x14(%eax)
     //cprintf(" mm->sm_priv %x in clock_init_mm\n",mm->sm_priv);
     return 0;
c010eda9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010edae:	c9                   	leave  
c010edaf:	c3                   	ret    

c010edb0 <_clock_map_swappable>:
/*
 * (3)_clock_map_swappable: According clock PRA, we should link the most rceent arrival page at the back of pra_list_head qeueue
 */
static int
_clock_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c010edb0:	55                   	push   %ebp
c010edb1:	89 e5                	mov    %esp,%ebp
c010edb3:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c010edb6:	8b 45 08             	mov    0x8(%ebp),%eax
c010edb9:	8b 40 14             	mov    0x14(%eax),%eax
c010edbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c010edbf:	8b 45 10             	mov    0x10(%ebp),%eax
c010edc2:	83 c0 18             	add    $0x18,%eax
c010edc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c010edc8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010edcc:	74 06                	je     c010edd4 <_clock_map_swappable+0x24>
c010edce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010edd2:	75 24                	jne    c010edf8 <_clock_map_swappable+0x48>
c010edd4:	c7 44 24 0c e8 4a 12 	movl   $0xc0124ae8,0xc(%esp)
c010eddb:	c0 
c010eddc:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010ede3:	c0 
c010ede4:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
c010edeb:	00 
c010edec:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010edf3:	e8 1e 24 ff ff       	call   c0101216 <__panic>
c010edf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edfb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010edfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee01:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ee04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ee07:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010ee0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ee0d:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010ee10:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ee13:	8b 40 04             	mov    0x4(%eax),%eax
c010ee16:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010ee19:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010ee1c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ee1f:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010ee22:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010ee25:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ee28:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010ee2b:	89 10                	mov    %edx,(%eax)
c010ee2d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ee30:	8b 10                	mov    (%eax),%edx
c010ee32:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ee35:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010ee38:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ee3b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ee3e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010ee41:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ee44:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ee47:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c010ee49:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ee4e:	c9                   	leave  
c010ee4f:	c3                   	ret    

c010ee50 <_clock_swap_out_victim>:
 *  (4)_clock_swap_out_victim: According clock PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_clock_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c010ee50:	55                   	push   %ebp
c010ee51:	89 e5                	mov    %esp,%ebp
c010ee53:	83 ec 38             	sub    $0x38,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c010ee56:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee59:	8b 40 14             	mov    0x14(%eax),%eax
c010ee5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        assert(head != NULL);
c010ee5f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ee63:	75 24                	jne    c010ee89 <_clock_swap_out_victim+0x39>
c010ee65:	c7 44 24 0c 30 4b 12 	movl   $0xc0124b30,0xc(%esp)
c010ee6c:	c0 
c010ee6d:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010ee74:	c0 
c010ee75:	c7 44 24 04 2f 00 00 	movl   $0x2f,0x4(%esp)
c010ee7c:	00 
c010ee7d:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010ee84:	e8 8d 23 ff ff       	call   c0101216 <__panic>
    assert(in_tick==0);
c010ee89:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010ee8d:	74 24                	je     c010eeb3 <_clock_swap_out_victim+0x63>
c010ee8f:	c7 44 24 0c 3d 4b 12 	movl   $0xc0124b3d,0xc(%esp)
c010ee96:	c0 
c010ee97:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010ee9e:	c0 
c010ee9f:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%esp)
c010eea6:	00 
c010eea7:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010eeae:	e8 63 23 ff ff       	call   c0101216 <__panic>

    // 第一次查找 !PTE_A & !PTE_D，同时重置当前页的PTE_A
    // 第二次查找 !PTE_A & !PTE_D， 同时重置当前页的PTE_D
    // 第三次查找，肯定能找到
    int i;
    for(i = 0; i < 3; i++)
c010eeb3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010eeba:	e9 37 01 00 00       	jmp    c010eff6 <_clock_swap_out_victim+0x1a6>
    {
        list_entry_t *le = head->prev;
c010eebf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eec2:	8b 00                	mov    (%eax),%eax
c010eec4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        assert(head!=le);
c010eec7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eeca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010eecd:	75 24                	jne    c010eef3 <_clock_swap_out_victim+0xa3>
c010eecf:	c7 44 24 0c 48 4b 12 	movl   $0xc0124b48,0xc(%esp)
c010eed6:	c0 
c010eed7:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010eede:	c0 
c010eedf:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c010eee6:	00 
c010eee7:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010eeee:	e8 23 23 ff ff       	call   c0101216 <__panic>
        while(le != head)
c010eef3:	e9 ee 00 00 00       	jmp    c010efe6 <_clock_swap_out_victim+0x196>
        {
            struct Page *p = le2page(le, pra_page_link);
c010eef8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eefb:	83 e8 18             	sub    $0x18,%eax
c010eefe:	89 45 e8             	mov    %eax,-0x18(%ebp)
            pte_t* ptep = get_pte(mm->pgdir, p->pra_vaddr, 0);
c010ef01:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ef04:	8b 50 20             	mov    0x20(%eax),%edx
c010ef07:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef0a:	8b 40 0c             	mov    0xc(%eax),%eax
c010ef0d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010ef14:	00 
c010ef15:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ef19:	89 04 24             	mov    %eax,(%esp)
c010ef1c:	e8 7f dd ff ff       	call   c010cca0 <get_pte>
c010ef21:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            // 如果满足未使用未修改这两个条件，则直接分配
            if(!(*ptep & PTE_A) && !(*ptep & PTE_D))
c010ef24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ef27:	8b 00                	mov    (%eax),%eax
c010ef29:	83 e0 20             	and    $0x20,%eax
c010ef2c:	85 c0                	test   %eax,%eax
c010ef2e:	75 6d                	jne    c010ef9d <_clock_swap_out_victim+0x14d>
c010ef30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ef33:	8b 00                	mov    (%eax),%eax
c010ef35:	83 e0 40             	and    $0x40,%eax
c010ef38:	85 c0                	test   %eax,%eax
c010ef3a:	75 61                	jne    c010ef9d <_clock_swap_out_victim+0x14d>
c010ef3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef3f:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010ef42:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ef45:	8b 40 04             	mov    0x4(%eax),%eax
c010ef48:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010ef4b:	8b 12                	mov    (%edx),%edx
c010ef4d:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010ef50:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010ef53:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ef56:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ef59:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010ef5c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ef5f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010ef62:	89 10                	mov    %edx,(%eax)
            {
                list_del(le);
                assert(p !=NULL);
c010ef64:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ef68:	75 24                	jne    c010ef8e <_clock_swap_out_victim+0x13e>
c010ef6a:	c7 44 24 0c 51 4b 12 	movl   $0xc0124b51,0xc(%esp)
c010ef71:	c0 
c010ef72:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010ef79:	c0 
c010ef7a:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c010ef81:	00 
c010ef82:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010ef89:	e8 88 22 ff ff       	call   c0101216 <__panic>
                *ptr_page = p;
c010ef8e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ef91:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ef94:	89 10                	mov    %edx,(%eax)
                return 0;
c010ef96:	b8 00 00 00 00       	mov    $0x0,%eax
c010ef9b:	eb 68                	jmp    c010f005 <_clock_swap_out_victim+0x1b5>
            }
            // 如果在第一次查找中，访问到了一个已经使用过的PTE，则标记为未使用。
            if(i == 0)
c010ef9d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010efa1:	75 11                	jne    c010efb4 <_clock_swap_out_victim+0x164>
                *ptep &= ~PTE_A;
c010efa3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010efa6:	8b 00                	mov    (%eax),%eax
c010efa8:	83 e0 df             	and    $0xffffffdf,%eax
c010efab:	89 c2                	mov    %eax,%edx
c010efad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010efb0:	89 10                	mov    %edx,(%eax)
c010efb2:	eb 15                	jmp    c010efc9 <_clock_swap_out_victim+0x179>
            // 如果在第二次查找中，访问到了一个已修改过的PTE，则标记为未修改。
            else if(i == 1)
c010efb4:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
c010efb8:	75 0f                	jne    c010efc9 <_clock_swap_out_victim+0x179>
                *ptep &= ~PTE_D;
c010efba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010efbd:	8b 00                	mov    (%eax),%eax
c010efbf:	83 e0 bf             	and    $0xffffffbf,%eax
c010efc2:	89 c2                	mov    %eax,%edx
c010efc4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010efc7:	89 10                	mov    %edx,(%eax)

            le = le->prev;
c010efc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010efcc:	8b 00                	mov    (%eax),%eax
c010efce:	89 45 f0             	mov    %eax,-0x10(%ebp)
            // 遍历了一回，肯定修改了标志位，所以要刷新TLB
            tlb_invalidate(mm->pgdir, le);
c010efd1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010efd4:	8b 45 08             	mov    0x8(%ebp),%eax
c010efd7:	8b 40 0c             	mov    0xc(%eax),%eax
c010efda:	89 54 24 04          	mov    %edx,0x4(%esp)
c010efde:	89 04 24             	mov    %eax,(%esp)
c010efe1:	e8 c7 e3 ff ff       	call   c010d3ad <tlb_invalidate>
    int i;
    for(i = 0; i < 3; i++)
    {
        list_entry_t *le = head->prev;
        assert(head!=le);
        while(le != head)
c010efe6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010efe9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010efec:	0f 85 06 ff ff ff    	jne    c010eef8 <_clock_swap_out_victim+0xa8>

    // 第一次查找 !PTE_A & !PTE_D，同时重置当前页的PTE_A
    // 第二次查找 !PTE_A & !PTE_D， 同时重置当前页的PTE_D
    // 第三次查找，肯定能找到
    int i;
    for(i = 0; i < 3; i++)
c010eff2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010eff6:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
c010effa:	0f 8e bf fe ff ff    	jle    c010eebf <_clock_swap_out_victim+0x6f>
            // 遍历了一回，肯定修改了标志位，所以要刷新TLB
            tlb_invalidate(mm->pgdir, le);
        }
    }
    // 按照前面的assert与if，不可能会执行到此处，所以return -1
    return -1;
c010f000:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010f005:	c9                   	leave  
c010f006:	c3                   	ret    

c010f007 <_clock_check_swap>:

static int
_clock_check_swap(void) {
c010f007:	55                   	push   %ebp
c010f008:	89 e5                	mov    %esp,%ebp
c010f00a:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in clock_check_swap\n");
c010f00d:	c7 04 24 5c 4b 12 c0 	movl   $0xc0124b5c,(%esp)
c010f014:	e8 da 13 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c010f019:	b8 00 30 00 00       	mov    $0x3000,%eax
c010f01e:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c010f021:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f026:	83 f8 04             	cmp    $0x4,%eax
c010f029:	74 24                	je     c010f04f <_clock_check_swap+0x48>
c010f02b:	c7 44 24 0c 83 4b 12 	movl   $0xc0124b83,0xc(%esp)
c010f032:	c0 
c010f033:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f03a:	c0 
c010f03b:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
c010f042:	00 
c010f043:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f04a:	e8 c7 21 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page a in clock_check_swap\n");
c010f04f:	c7 04 24 94 4b 12 c0 	movl   $0xc0124b94,(%esp)
c010f056:	e8 98 13 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c010f05b:	b8 00 10 00 00       	mov    $0x1000,%eax
c010f060:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c010f063:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f068:	83 f8 04             	cmp    $0x4,%eax
c010f06b:	74 24                	je     c010f091 <_clock_check_swap+0x8a>
c010f06d:	c7 44 24 0c 83 4b 12 	movl   $0xc0124b83,0xc(%esp)
c010f074:	c0 
c010f075:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f07c:	c0 
c010f07d:	c7 44 24 04 5d 00 00 	movl   $0x5d,0x4(%esp)
c010f084:	00 
c010f085:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f08c:	e8 85 21 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page d in clock_check_swap\n");
c010f091:	c7 04 24 bc 4b 12 c0 	movl   $0xc0124bbc,(%esp)
c010f098:	e8 56 13 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c010f09d:	b8 00 40 00 00       	mov    $0x4000,%eax
c010f0a2:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c010f0a5:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f0aa:	83 f8 04             	cmp    $0x4,%eax
c010f0ad:	74 24                	je     c010f0d3 <_clock_check_swap+0xcc>
c010f0af:	c7 44 24 0c 83 4b 12 	movl   $0xc0124b83,0xc(%esp)
c010f0b6:	c0 
c010f0b7:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f0be:	c0 
c010f0bf:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c010f0c6:	00 
c010f0c7:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f0ce:	e8 43 21 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page b in clock_check_swap\n");
c010f0d3:	c7 04 24 e4 4b 12 c0 	movl   $0xc0124be4,(%esp)
c010f0da:	e8 14 13 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c010f0df:	b8 00 20 00 00       	mov    $0x2000,%eax
c010f0e4:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c010f0e7:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f0ec:	83 f8 04             	cmp    $0x4,%eax
c010f0ef:	74 24                	je     c010f115 <_clock_check_swap+0x10e>
c010f0f1:	c7 44 24 0c 83 4b 12 	movl   $0xc0124b83,0xc(%esp)
c010f0f8:	c0 
c010f0f9:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f100:	c0 
c010f101:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c010f108:	00 
c010f109:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f110:	e8 01 21 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page e in clock_check_swap\n");
c010f115:	c7 04 24 0c 4c 12 c0 	movl   $0xc0124c0c,(%esp)
c010f11c:	e8 d2 12 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c010f121:	b8 00 50 00 00       	mov    $0x5000,%eax
c010f126:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c010f129:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f12e:	83 f8 05             	cmp    $0x5,%eax
c010f131:	74 24                	je     c010f157 <_clock_check_swap+0x150>
c010f133:	c7 44 24 0c 33 4c 12 	movl   $0xc0124c33,0xc(%esp)
c010f13a:	c0 
c010f13b:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f142:	c0 
c010f143:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
c010f14a:	00 
c010f14b:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f152:	e8 bf 20 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page b in clock_check_swap\n");
c010f157:	c7 04 24 e4 4b 12 c0 	movl   $0xc0124be4,(%esp)
c010f15e:	e8 90 12 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c010f163:	b8 00 20 00 00       	mov    $0x2000,%eax
c010f168:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c010f16b:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f170:	83 f8 05             	cmp    $0x5,%eax
c010f173:	74 24                	je     c010f199 <_clock_check_swap+0x192>
c010f175:	c7 44 24 0c 33 4c 12 	movl   $0xc0124c33,0xc(%esp)
c010f17c:	c0 
c010f17d:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f184:	c0 
c010f185:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c010f18c:	00 
c010f18d:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f194:	e8 7d 20 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page a in clock_check_swap\n");
c010f199:	c7 04 24 94 4b 12 c0 	movl   $0xc0124b94,(%esp)
c010f1a0:	e8 4e 12 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c010f1a5:	b8 00 10 00 00       	mov    $0x1000,%eax
c010f1aa:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c010f1ad:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f1b2:	83 f8 06             	cmp    $0x6,%eax
c010f1b5:	74 24                	je     c010f1db <_clock_check_swap+0x1d4>
c010f1b7:	c7 44 24 0c 42 4c 12 	movl   $0xc0124c42,0xc(%esp)
c010f1be:	c0 
c010f1bf:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f1c6:	c0 
c010f1c7:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010f1ce:	00 
c010f1cf:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f1d6:	e8 3b 20 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page b in clock_check_swap\n");
c010f1db:	c7 04 24 e4 4b 12 c0 	movl   $0xc0124be4,(%esp)
c010f1e2:	e8 0c 12 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c010f1e7:	b8 00 20 00 00       	mov    $0x2000,%eax
c010f1ec:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==6);
c010f1ef:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f1f4:	83 f8 06             	cmp    $0x6,%eax
c010f1f7:	74 24                	je     c010f21d <_clock_check_swap+0x216>
c010f1f9:	c7 44 24 0c 42 4c 12 	movl   $0xc0124c42,0xc(%esp)
c010f200:	c0 
c010f201:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f208:	c0 
c010f209:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c010f210:	00 
c010f211:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f218:	e8 f9 1f ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page c in clock_check_swap\n");
c010f21d:	c7 04 24 5c 4b 12 c0 	movl   $0xc0124b5c,(%esp)
c010f224:	e8 ca 11 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c010f229:	b8 00 30 00 00       	mov    $0x3000,%eax
c010f22e:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==7);
c010f231:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f236:	83 f8 07             	cmp    $0x7,%eax
c010f239:	74 24                	je     c010f25f <_clock_check_swap+0x258>
c010f23b:	c7 44 24 0c 51 4c 12 	movl   $0xc0124c51,0xc(%esp)
c010f242:	c0 
c010f243:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f24a:	c0 
c010f24b:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c010f252:	00 
c010f253:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f25a:	e8 b7 1f ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page d in clock_check_swap\n");
c010f25f:	c7 04 24 bc 4b 12 c0 	movl   $0xc0124bbc,(%esp)
c010f266:	e8 88 11 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c010f26b:	b8 00 40 00 00       	mov    $0x4000,%eax
c010f270:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==8);
c010f273:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f278:	83 f8 08             	cmp    $0x8,%eax
c010f27b:	74 24                	je     c010f2a1 <_clock_check_swap+0x29a>
c010f27d:	c7 44 24 0c 60 4c 12 	movl   $0xc0124c60,0xc(%esp)
c010f284:	c0 
c010f285:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f28c:	c0 
c010f28d:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c010f294:	00 
c010f295:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f29c:	e8 75 1f ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page e in clock_check_swap\n");
c010f2a1:	c7 04 24 0c 4c 12 c0 	movl   $0xc0124c0c,(%esp)
c010f2a8:	e8 46 11 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c010f2ad:	b8 00 50 00 00       	mov    $0x5000,%eax
c010f2b2:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==8);
c010f2b5:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f2ba:	83 f8 08             	cmp    $0x8,%eax
c010f2bd:	74 24                	je     c010f2e3 <_clock_check_swap+0x2dc>
c010f2bf:	c7 44 24 0c 60 4c 12 	movl   $0xc0124c60,0xc(%esp)
c010f2c6:	c0 
c010f2c7:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f2ce:	c0 
c010f2cf:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c010f2d6:	00 
c010f2d7:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f2de:	e8 33 1f ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page a in clock_check_swap\n");
c010f2e3:	c7 04 24 94 4b 12 c0 	movl   $0xc0124b94,(%esp)
c010f2ea:	e8 04 11 ff ff       	call   c01003f3 <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c010f2ef:	b8 00 10 00 00       	mov    $0x1000,%eax
c010f2f4:	0f b6 00             	movzbl (%eax),%eax
c010f2f7:	3c 0a                	cmp    $0xa,%al
c010f2f9:	74 24                	je     c010f31f <_clock_check_swap+0x318>
c010f2fb:	c7 44 24 0c 70 4c 12 	movl   $0xc0124c70,0xc(%esp)
c010f302:	c0 
c010f303:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f30a:	c0 
c010f30b:	c7 44 24 04 7a 00 00 	movl   $0x7a,0x4(%esp)
c010f312:	00 
c010f313:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f31a:	e8 f7 1e ff ff       	call   c0101216 <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c010f31f:	b8 00 10 00 00       	mov    $0x1000,%eax
c010f324:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==8);
c010f327:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f32c:	83 f8 08             	cmp    $0x8,%eax
c010f32f:	74 24                	je     c010f355 <_clock_check_swap+0x34e>
c010f331:	c7 44 24 0c 60 4c 12 	movl   $0xc0124c60,0xc(%esp)
c010f338:	c0 
c010f339:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f340:	c0 
c010f341:	c7 44 24 04 7c 00 00 	movl   $0x7c,0x4(%esp)
c010f348:	00 
c010f349:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f350:	e8 c1 1e ff ff       	call   c0101216 <__panic>
    return 0;
c010f355:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f35a:	c9                   	leave  
c010f35b:	c3                   	ret    

c010f35c <_clock_user_check>:


static int
_clock_user_check(void) {
c010f35c:	55                   	push   %ebp
c010f35d:	89 e5                	mov    %esp,%ebp
c010f35f:	83 ec 18             	sub    $0x18,%esp

    cprintf("write Virt Page c in clock_check_swap\n");
c010f362:	c7 04 24 5c 4b 12 c0 	movl   $0xc0124b5c,(%esp)
c010f369:	e8 85 10 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c010f36e:	b8 00 30 00 00       	mov    $0x3000,%eax
c010f373:	c6 00 0c             	movb   $0xc,(%eax)
    cprintf("    *(unsigned char *)0x3000 = 0x0c\n");
c010f376:	c7 04 24 94 4c 12 c0 	movl   $0xc0124c94,(%esp)
c010f37d:	e8 71 10 ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==4);
c010f382:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f387:	83 f8 04             	cmp    $0x4,%eax
c010f38a:	74 24                	je     c010f3b0 <_clock_user_check+0x54>
c010f38c:	c7 44 24 0c 83 4b 12 	movl   $0xc0124b83,0xc(%esp)
c010f393:	c0 
c010f394:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f39b:	c0 
c010f39c:	c7 44 24 04 87 00 00 	movl   $0x87,0x4(%esp)
c010f3a3:	00 
c010f3a4:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f3ab:	e8 66 1e ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==4)\n");
c010f3b0:	c7 04 24 b9 4c 12 c0 	movl   $0xc0124cb9,(%esp)
c010f3b7:	e8 37 10 ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page a in clock_check_swap\n");
c010f3bc:	c7 04 24 94 4b 12 c0 	movl   $0xc0124b94,(%esp)
c010f3c3:	e8 2b 10 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c010f3c8:	b8 00 10 00 00       	mov    $0x1000,%eax
c010f3cd:	c6 00 0a             	movb   $0xa,(%eax)
    cprintf("    *(unsigned char *)0x1000 = 0x0a\n");
c010f3d0:	c7 04 24 d4 4c 12 c0 	movl   $0xc0124cd4,(%esp)
c010f3d7:	e8 17 10 ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==4);
c010f3dc:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f3e1:	83 f8 04             	cmp    $0x4,%eax
c010f3e4:	74 24                	je     c010f40a <_clock_user_check+0xae>
c010f3e6:	c7 44 24 0c 83 4b 12 	movl   $0xc0124b83,0xc(%esp)
c010f3ed:	c0 
c010f3ee:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f3f5:	c0 
c010f3f6:	c7 44 24 04 8d 00 00 	movl   $0x8d,0x4(%esp)
c010f3fd:	00 
c010f3fe:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f405:	e8 0c 1e ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==4)\n");
c010f40a:	c7 04 24 b9 4c 12 c0 	movl   $0xc0124cb9,(%esp)
c010f411:	e8 dd 0f ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page d in clock_check_swap\n");
c010f416:	c7 04 24 bc 4b 12 c0 	movl   $0xc0124bbc,(%esp)
c010f41d:	e8 d1 0f ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c010f422:	b8 00 40 00 00       	mov    $0x4000,%eax
c010f427:	c6 00 0d             	movb   $0xd,(%eax)
    cprintf("    *(unsigned char *)0x4000 = 0x0d\n");
c010f42a:	c7 04 24 fc 4c 12 c0 	movl   $0xc0124cfc,(%esp)
c010f431:	e8 bd 0f ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==4);
c010f436:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f43b:	83 f8 04             	cmp    $0x4,%eax
c010f43e:	74 24                	je     c010f464 <_clock_user_check+0x108>
c010f440:	c7 44 24 0c 83 4b 12 	movl   $0xc0124b83,0xc(%esp)
c010f447:	c0 
c010f448:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f44f:	c0 
c010f450:	c7 44 24 04 93 00 00 	movl   $0x93,0x4(%esp)
c010f457:	00 
c010f458:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f45f:	e8 b2 1d ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==4)\n");
c010f464:	c7 04 24 b9 4c 12 c0 	movl   $0xc0124cb9,(%esp)
c010f46b:	e8 83 0f ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page b in clock_check_swap\n");
c010f470:	c7 04 24 e4 4b 12 c0 	movl   $0xc0124be4,(%esp)
c010f477:	e8 77 0f ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c010f47c:	b8 00 20 00 00       	mov    $0x2000,%eax
c010f481:	c6 00 0b             	movb   $0xb,(%eax)
    cprintf("    *(unsigned char *)0x2000 = 0x0b\n");
c010f484:	c7 04 24 24 4d 12 c0 	movl   $0xc0124d24,(%esp)
c010f48b:	e8 63 0f ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==4);
c010f490:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f495:	83 f8 04             	cmp    $0x4,%eax
c010f498:	74 24                	je     c010f4be <_clock_user_check+0x162>
c010f49a:	c7 44 24 0c 83 4b 12 	movl   $0xc0124b83,0xc(%esp)
c010f4a1:	c0 
c010f4a2:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f4a9:	c0 
c010f4aa:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
c010f4b1:	00 
c010f4b2:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f4b9:	e8 58 1d ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==4)\n");
c010f4be:	c7 04 24 b9 4c 12 c0 	movl   $0xc0124cb9,(%esp)
c010f4c5:	e8 29 0f ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page e in clock_check_swap\n");
c010f4ca:	c7 04 24 0c 4c 12 c0 	movl   $0xc0124c0c,(%esp)
c010f4d1:	e8 1d 0f ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c010f4d6:	b8 00 50 00 00       	mov    $0x5000,%eax
c010f4db:	c6 00 0e             	movb   $0xe,(%eax)
    cprintf("    *(unsigned char *)0x5000 = 0x0e\n");
c010f4de:	c7 04 24 4c 4d 12 c0 	movl   $0xc0124d4c,(%esp)
c010f4e5:	e8 09 0f ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==5);
c010f4ea:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f4ef:	83 f8 05             	cmp    $0x5,%eax
c010f4f2:	74 24                	je     c010f518 <_clock_user_check+0x1bc>
c010f4f4:	c7 44 24 0c 33 4c 12 	movl   $0xc0124c33,0xc(%esp)
c010f4fb:	c0 
c010f4fc:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f503:	c0 
c010f504:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c010f50b:	00 
c010f50c:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f513:	e8 fe 1c ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==5)\n");
c010f518:	c7 04 24 71 4d 12 c0 	movl   $0xc0124d71,(%esp)
c010f51f:	e8 cf 0e ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page b in clock_check_swap\n");
c010f524:	c7 04 24 e4 4b 12 c0 	movl   $0xc0124be4,(%esp)
c010f52b:	e8 c3 0e ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c010f530:	b8 00 20 00 00       	mov    $0x2000,%eax
c010f535:	c6 00 0b             	movb   $0xb,(%eax)
    cprintf("    *(unsigned char *)0x2000 = 0x0b\n");
c010f538:	c7 04 24 24 4d 12 c0 	movl   $0xc0124d24,(%esp)
c010f53f:	e8 af 0e ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==5);
c010f544:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f549:	83 f8 05             	cmp    $0x5,%eax
c010f54c:	74 24                	je     c010f572 <_clock_user_check+0x216>
c010f54e:	c7 44 24 0c 33 4c 12 	movl   $0xc0124c33,0xc(%esp)
c010f555:	c0 
c010f556:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f55d:	c0 
c010f55e:	c7 44 24 04 a5 00 00 	movl   $0xa5,0x4(%esp)
c010f565:	00 
c010f566:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f56d:	e8 a4 1c ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==5)\n");
c010f572:	c7 04 24 71 4d 12 c0 	movl   $0xc0124d71,(%esp)
c010f579:	e8 75 0e ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page a in clock_check_swap\n");
c010f57e:	c7 04 24 94 4b 12 c0 	movl   $0xc0124b94,(%esp)
c010f585:	e8 69 0e ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c010f58a:	b8 00 10 00 00       	mov    $0x1000,%eax
c010f58f:	c6 00 0a             	movb   $0xa,(%eax)
    cprintf("    *(unsigned char *)0x1000 = 0x0a\n");
c010f592:	c7 04 24 d4 4c 12 c0 	movl   $0xc0124cd4,(%esp)
c010f599:	e8 55 0e ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==6);
c010f59e:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f5a3:	83 f8 06             	cmp    $0x6,%eax
c010f5a6:	74 24                	je     c010f5cc <_clock_user_check+0x270>
c010f5a8:	c7 44 24 0c 42 4c 12 	movl   $0xc0124c42,0xc(%esp)
c010f5af:	c0 
c010f5b0:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f5b7:	c0 
c010f5b8:	c7 44 24 04 ab 00 00 	movl   $0xab,0x4(%esp)
c010f5bf:	00 
c010f5c0:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f5c7:	e8 4a 1c ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==6)\n");
c010f5cc:	c7 04 24 89 4d 12 c0 	movl   $0xc0124d89,(%esp)
c010f5d3:	e8 1b 0e ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page b in clock_check_swap\n");
c010f5d8:	c7 04 24 e4 4b 12 c0 	movl   $0xc0124be4,(%esp)
c010f5df:	e8 0f 0e ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c010f5e4:	b8 00 20 00 00       	mov    $0x2000,%eax
c010f5e9:	c6 00 0b             	movb   $0xb,(%eax)
    cprintf("    *(unsigned char *)0x2000 = 0x0b\n");
c010f5ec:	c7 04 24 24 4d 12 c0 	movl   $0xc0124d24,(%esp)
c010f5f3:	e8 fb 0d ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==6);
c010f5f8:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f5fd:	83 f8 06             	cmp    $0x6,%eax
c010f600:	74 24                	je     c010f626 <_clock_user_check+0x2ca>
c010f602:	c7 44 24 0c 42 4c 12 	movl   $0xc0124c42,0xc(%esp)
c010f609:	c0 
c010f60a:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f611:	c0 
c010f612:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c010f619:	00 
c010f61a:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f621:	e8 f0 1b ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==6)\n");
c010f626:	c7 04 24 89 4d 12 c0 	movl   $0xc0124d89,(%esp)
c010f62d:	e8 c1 0d ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page c in clock_check_swap\n");
c010f632:	c7 04 24 5c 4b 12 c0 	movl   $0xc0124b5c,(%esp)
c010f639:	e8 b5 0d ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c010f63e:	b8 00 30 00 00       	mov    $0x3000,%eax
c010f643:	c6 00 0c             	movb   $0xc,(%eax)
    cprintf("    *(unsigned char *)0x3000 = 0x0c\n");
c010f646:	c7 04 24 94 4c 12 c0 	movl   $0xc0124c94,(%esp)
c010f64d:	e8 a1 0d ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==7);
c010f652:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f657:	83 f8 07             	cmp    $0x7,%eax
c010f65a:	74 24                	je     c010f680 <_clock_user_check+0x324>
c010f65c:	c7 44 24 0c 51 4c 12 	movl   $0xc0124c51,0xc(%esp)
c010f663:	c0 
c010f664:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f66b:	c0 
c010f66c:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c010f673:	00 
c010f674:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f67b:	e8 96 1b ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==7)\n");
c010f680:	c7 04 24 a1 4d 12 c0 	movl   $0xc0124da1,(%esp)
c010f687:	e8 67 0d ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page d in clock_check_swap\n");
c010f68c:	c7 04 24 bc 4b 12 c0 	movl   $0xc0124bbc,(%esp)
c010f693:	e8 5b 0d ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c010f698:	b8 00 40 00 00       	mov    $0x4000,%eax
c010f69d:	c6 00 0d             	movb   $0xd,(%eax)
    cprintf("    *(unsigned char *)0x4000 = 0x0d\n");
c010f6a0:	c7 04 24 fc 4c 12 c0 	movl   $0xc0124cfc,(%esp)
c010f6a7:	e8 47 0d ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==8);
c010f6ac:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f6b1:	83 f8 08             	cmp    $0x8,%eax
c010f6b4:	74 24                	je     c010f6da <_clock_user_check+0x37e>
c010f6b6:	c7 44 24 0c 60 4c 12 	movl   $0xc0124c60,0xc(%esp)
c010f6bd:	c0 
c010f6be:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f6c5:	c0 
c010f6c6:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c010f6cd:	00 
c010f6ce:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f6d5:	e8 3c 1b ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==8)\n");
c010f6da:	c7 04 24 b9 4d 12 c0 	movl   $0xc0124db9,(%esp)
c010f6e1:	e8 0d 0d ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page e in clock_check_swap\n");
c010f6e6:	c7 04 24 0c 4c 12 c0 	movl   $0xc0124c0c,(%esp)
c010f6ed:	e8 01 0d ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c010f6f2:	b8 00 50 00 00       	mov    $0x5000,%eax
c010f6f7:	c6 00 0e             	movb   $0xe,(%eax)
    cprintf("    *(unsigned char *)0x5000 = 0x0e\n");
c010f6fa:	c7 04 24 4c 4d 12 c0 	movl   $0xc0124d4c,(%esp)
c010f701:	e8 ed 0c ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==8);
c010f706:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f70b:	83 f8 08             	cmp    $0x8,%eax
c010f70e:	74 24                	je     c010f734 <_clock_user_check+0x3d8>
c010f710:	c7 44 24 0c 60 4c 12 	movl   $0xc0124c60,0xc(%esp)
c010f717:	c0 
c010f718:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f71f:	c0 
c010f720:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c010f727:	00 
c010f728:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f72f:	e8 e2 1a ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==8)\n");
c010f734:	c7 04 24 b9 4d 12 c0 	movl   $0xc0124db9,(%esp)
c010f73b:	e8 b3 0c ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page a in clock_check_swap\n");
c010f740:	c7 04 24 94 4b 12 c0 	movl   $0xc0124b94,(%esp)
c010f747:	e8 a7 0c ff ff       	call   c01003f3 <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c010f74c:	b8 00 10 00 00       	mov    $0x1000,%eax
c010f751:	0f b6 00             	movzbl (%eax),%eax
c010f754:	3c 0a                	cmp    $0xa,%al
c010f756:	74 24                	je     c010f77c <_clock_user_check+0x420>
c010f758:	c7 44 24 0c 70 4c 12 	movl   $0xc0124c70,0xc(%esp)
c010f75f:	c0 
c010f760:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f767:	c0 
c010f768:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
c010f76f:	00 
c010f770:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f777:	e8 9a 1a ff ff       	call   c0101216 <__panic>
    cprintf("    assert(*(unsigned char *)0x1000 == 0x0a)");
c010f77c:	c7 04 24 d4 4d 12 c0 	movl   $0xc0124dd4,(%esp)
c010f783:	e8 6b 0c ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c010f788:	b8 00 10 00 00       	mov    $0x1000,%eax
c010f78d:	c6 00 0a             	movb   $0xa,(%eax)
    cprintf("    *(unsigned char *)0x1000 = 0x0a\n");
c010f790:	c7 04 24 d4 4c 12 c0 	movl   $0xc0124cd4,(%esp)
c010f797:	e8 57 0c ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==8);
c010f79c:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f7a1:	83 f8 08             	cmp    $0x8,%eax
c010f7a4:	74 24                	je     c010f7ca <_clock_user_check+0x46e>
c010f7a6:	c7 44 24 0c 60 4c 12 	movl   $0xc0124c60,0xc(%esp)
c010f7ad:	c0 
c010f7ae:	c7 44 24 08 06 4b 12 	movl   $0xc0124b06,0x8(%esp)
c010f7b5:	c0 
c010f7b6:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c010f7bd:	00 
c010f7be:	c7 04 24 1b 4b 12 c0 	movl   $0xc0124b1b,(%esp)
c010f7c5:	e8 4c 1a ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==8)\n");
c010f7ca:	c7 04 24 b9 4d 12 c0 	movl   $0xc0124db9,(%esp)
c010f7d1:	e8 1d 0c ff ff       	call   c01003f3 <cprintf>

    return 0;
c010f7d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f7db:	c9                   	leave  
c010f7dc:	c3                   	ret    

c010f7dd <_clock_init>:

static int
_clock_init(void)
{
c010f7dd:	55                   	push   %ebp
c010f7de:	89 e5                	mov    %esp,%ebp
    return 0;
c010f7e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f7e5:	5d                   	pop    %ebp
c010f7e6:	c3                   	ret    

c010f7e7 <_clock_set_unswappable>:

static int
_clock_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c010f7e7:	55                   	push   %ebp
c010f7e8:	89 e5                	mov    %esp,%ebp
    return 0;
c010f7ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f7ef:	5d                   	pop    %ebp
c010f7f0:	c3                   	ret    

c010f7f1 <_clock_tick_event>:

static int
_clock_tick_event(struct mm_struct *mm)
{ return 0; }
c010f7f1:	55                   	push   %ebp
c010f7f2:	89 e5                	mov    %esp,%ebp
c010f7f4:	b8 00 00 00 00       	mov    $0x0,%eax
c010f7f9:	5d                   	pop    %ebp
c010f7fa:	c3                   	ret    

c010f7fb <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c010f7fb:	55                   	push   %ebp
c010f7fc:	89 e5                	mov    %esp,%ebp
c010f7fe:	83 ec 10             	sub    $0x10,%esp
c010f801:	c7 45 fc 48 12 17 c0 	movl   $0xc0171248,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010f808:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010f80b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010f80e:	89 50 04             	mov    %edx,0x4(%eax)
c010f811:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010f814:	8b 50 04             	mov    0x4(%eax),%edx
c010f817:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010f81a:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c010f81c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f81f:	c7 40 14 48 12 17 c0 	movl   $0xc0171248,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c010f826:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f82b:	c9                   	leave  
c010f82c:	c3                   	ret    

c010f82d <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c010f82d:	55                   	push   %ebp
c010f82e:	89 e5                	mov    %esp,%ebp
c010f830:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c010f833:	8b 45 08             	mov    0x8(%ebp),%eax
c010f836:	8b 40 14             	mov    0x14(%eax),%eax
c010f839:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c010f83c:	8b 45 10             	mov    0x10(%ebp),%eax
c010f83f:	83 c0 18             	add    $0x18,%eax
c010f842:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c010f845:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f849:	74 06                	je     c010f851 <_fifo_map_swappable+0x24>
c010f84b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f84f:	75 24                	jne    c010f875 <_fifo_map_swappable+0x48>
c010f851:	c7 44 24 0c 14 4e 12 	movl   $0xc0124e14,0xc(%esp)
c010f858:	c0 
c010f859:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010f860:	c0 
c010f861:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c010f868:	00 
c010f869:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010f870:	e8 a1 19 ff ff       	call   c0101216 <__panic>
c010f875:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f878:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f87b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f87e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f881:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f884:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010f887:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f88a:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010f88d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f890:	8b 40 04             	mov    0x4(%eax),%eax
c010f893:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010f896:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010f899:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f89c:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010f89f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010f8a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010f8a5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010f8a8:	89 10                	mov    %edx,(%eax)
c010f8aa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010f8ad:	8b 10                	mov    (%eax),%edx
c010f8af:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f8b2:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010f8b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f8b8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010f8bb:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010f8be:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f8c1:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010f8c4:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c010f8c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f8cb:	c9                   	leave  
c010f8cc:	c3                   	ret    

c010f8cd <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c010f8cd:	55                   	push   %ebp
c010f8ce:	89 e5                	mov    %esp,%ebp
c010f8d0:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c010f8d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010f8d6:	8b 40 14             	mov    0x14(%eax),%eax
c010f8d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c010f8dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f8e0:	75 24                	jne    c010f906 <_fifo_swap_out_victim+0x39>
c010f8e2:	c7 44 24 0c 5b 4e 12 	movl   $0xc0124e5b,0xc(%esp)
c010f8e9:	c0 
c010f8ea:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010f8f1:	c0 
c010f8f2:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c010f8f9:	00 
c010f8fa:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010f901:	e8 10 19 ff ff       	call   c0101216 <__panic>
     assert(in_tick==0);
c010f906:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010f90a:	74 24                	je     c010f930 <_fifo_swap_out_victim+0x63>
c010f90c:	c7 44 24 0c 68 4e 12 	movl   $0xc0124e68,0xc(%esp)
c010f913:	c0 
c010f914:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010f91b:	c0 
c010f91c:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c010f923:	00 
c010f924:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010f92b:	e8 e6 18 ff ff       	call   c0101216 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  assign the value of *ptr_page to the addr of this page
     /* Select the tail */
     list_entry_t *le = head->prev;
c010f930:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f933:	8b 00                	mov    (%eax),%eax
c010f935:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c010f938:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f93b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f93e:	75 24                	jne    c010f964 <_fifo_swap_out_victim+0x97>
c010f940:	c7 44 24 0c 73 4e 12 	movl   $0xc0124e73,0xc(%esp)
c010f947:	c0 
c010f948:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010f94f:	c0 
c010f950:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c010f957:	00 
c010f958:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010f95f:	e8 b2 18 ff ff       	call   c0101216 <__panic>
     struct Page *p = le2page(le, pra_page_link);
c010f964:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f967:	83 e8 18             	sub    $0x18,%eax
c010f96a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f96d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f970:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010f973:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f976:	8b 40 04             	mov    0x4(%eax),%eax
c010f979:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010f97c:	8b 12                	mov    (%edx),%edx
c010f97e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010f981:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010f984:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f987:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010f98a:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010f98d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f990:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f993:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c010f995:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f999:	75 24                	jne    c010f9bf <_fifo_swap_out_victim+0xf2>
c010f99b:	c7 44 24 0c 7c 4e 12 	movl   $0xc0124e7c,0xc(%esp)
c010f9a2:	c0 
c010f9a3:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010f9aa:	c0 
c010f9ab:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c010f9b2:	00 
c010f9b3:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010f9ba:	e8 57 18 ff ff       	call   c0101216 <__panic>
     *ptr_page = p;
c010f9bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f9c2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f9c5:	89 10                	mov    %edx,(%eax)
     return 0;
c010f9c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f9cc:	c9                   	leave  
c010f9cd:	c3                   	ret    

c010f9ce <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c010f9ce:	55                   	push   %ebp
c010f9cf:	89 e5                	mov    %esp,%ebp
c010f9d1:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c010f9d4:	c7 04 24 88 4e 12 c0 	movl   $0xc0124e88,(%esp)
c010f9db:	e8 13 0a ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c010f9e0:	b8 00 30 00 00       	mov    $0x3000,%eax
c010f9e5:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c010f9e8:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010f9ed:	83 f8 04             	cmp    $0x4,%eax
c010f9f0:	74 24                	je     c010fa16 <_fifo_check_swap+0x48>
c010f9f2:	c7 44 24 0c ae 4e 12 	movl   $0xc0124eae,0xc(%esp)
c010f9f9:	c0 
c010f9fa:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fa01:	c0 
c010fa02:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010fa09:	00 
c010fa0a:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fa11:	e8 00 18 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c010fa16:	c7 04 24 c0 4e 12 c0 	movl   $0xc0124ec0,(%esp)
c010fa1d:	e8 d1 09 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c010fa22:	b8 00 10 00 00       	mov    $0x1000,%eax
c010fa27:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c010fa2a:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010fa2f:	83 f8 04             	cmp    $0x4,%eax
c010fa32:	74 24                	je     c010fa58 <_fifo_check_swap+0x8a>
c010fa34:	c7 44 24 0c ae 4e 12 	movl   $0xc0124eae,0xc(%esp)
c010fa3b:	c0 
c010fa3c:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fa43:	c0 
c010fa44:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c010fa4b:	00 
c010fa4c:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fa53:	e8 be 17 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c010fa58:	c7 04 24 e8 4e 12 c0 	movl   $0xc0124ee8,(%esp)
c010fa5f:	e8 8f 09 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c010fa64:	b8 00 40 00 00       	mov    $0x4000,%eax
c010fa69:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c010fa6c:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010fa71:	83 f8 04             	cmp    $0x4,%eax
c010fa74:	74 24                	je     c010fa9a <_fifo_check_swap+0xcc>
c010fa76:	c7 44 24 0c ae 4e 12 	movl   $0xc0124eae,0xc(%esp)
c010fa7d:	c0 
c010fa7e:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fa85:	c0 
c010fa86:	c7 44 24 04 5b 00 00 	movl   $0x5b,0x4(%esp)
c010fa8d:	00 
c010fa8e:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fa95:	e8 7c 17 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c010fa9a:	c7 04 24 10 4f 12 c0 	movl   $0xc0124f10,(%esp)
c010faa1:	e8 4d 09 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c010faa6:	b8 00 20 00 00       	mov    $0x2000,%eax
c010faab:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c010faae:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010fab3:	83 f8 04             	cmp    $0x4,%eax
c010fab6:	74 24                	je     c010fadc <_fifo_check_swap+0x10e>
c010fab8:	c7 44 24 0c ae 4e 12 	movl   $0xc0124eae,0xc(%esp)
c010fabf:	c0 
c010fac0:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fac7:	c0 
c010fac8:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010facf:	00 
c010fad0:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fad7:	e8 3a 17 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c010fadc:	c7 04 24 38 4f 12 c0 	movl   $0xc0124f38,(%esp)
c010fae3:	e8 0b 09 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c010fae8:	b8 00 50 00 00       	mov    $0x5000,%eax
c010faed:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c010faf0:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010faf5:	83 f8 05             	cmp    $0x5,%eax
c010faf8:	74 24                	je     c010fb1e <_fifo_check_swap+0x150>
c010fafa:	c7 44 24 0c 5e 4f 12 	movl   $0xc0124f5e,0xc(%esp)
c010fb01:	c0 
c010fb02:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fb09:	c0 
c010fb0a:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c010fb11:	00 
c010fb12:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fb19:	e8 f8 16 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c010fb1e:	c7 04 24 10 4f 12 c0 	movl   $0xc0124f10,(%esp)
c010fb25:	e8 c9 08 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c010fb2a:	b8 00 20 00 00       	mov    $0x2000,%eax
c010fb2f:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c010fb32:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010fb37:	83 f8 05             	cmp    $0x5,%eax
c010fb3a:	74 24                	je     c010fb60 <_fifo_check_swap+0x192>
c010fb3c:	c7 44 24 0c 5e 4f 12 	movl   $0xc0124f5e,0xc(%esp)
c010fb43:	c0 
c010fb44:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fb4b:	c0 
c010fb4c:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c010fb53:	00 
c010fb54:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fb5b:	e8 b6 16 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c010fb60:	c7 04 24 c0 4e 12 c0 	movl   $0xc0124ec0,(%esp)
c010fb67:	e8 87 08 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c010fb6c:	b8 00 10 00 00       	mov    $0x1000,%eax
c010fb71:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c010fb74:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010fb79:	83 f8 06             	cmp    $0x6,%eax
c010fb7c:	74 24                	je     c010fba2 <_fifo_check_swap+0x1d4>
c010fb7e:	c7 44 24 0c 6d 4f 12 	movl   $0xc0124f6d,0xc(%esp)
c010fb85:	c0 
c010fb86:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fb8d:	c0 
c010fb8e:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c010fb95:	00 
c010fb96:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fb9d:	e8 74 16 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c010fba2:	c7 04 24 10 4f 12 c0 	movl   $0xc0124f10,(%esp)
c010fba9:	e8 45 08 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c010fbae:	b8 00 20 00 00       	mov    $0x2000,%eax
c010fbb3:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c010fbb6:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010fbbb:	83 f8 07             	cmp    $0x7,%eax
c010fbbe:	74 24                	je     c010fbe4 <_fifo_check_swap+0x216>
c010fbc0:	c7 44 24 0c 7c 4f 12 	movl   $0xc0124f7c,0xc(%esp)
c010fbc7:	c0 
c010fbc8:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fbcf:	c0 
c010fbd0:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010fbd7:	00 
c010fbd8:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fbdf:	e8 32 16 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c010fbe4:	c7 04 24 88 4e 12 c0 	movl   $0xc0124e88,(%esp)
c010fbeb:	e8 03 08 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c010fbf0:	b8 00 30 00 00       	mov    $0x3000,%eax
c010fbf5:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c010fbf8:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010fbfd:	83 f8 08             	cmp    $0x8,%eax
c010fc00:	74 24                	je     c010fc26 <_fifo_check_swap+0x258>
c010fc02:	c7 44 24 0c 8b 4f 12 	movl   $0xc0124f8b,0xc(%esp)
c010fc09:	c0 
c010fc0a:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fc11:	c0 
c010fc12:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010fc19:	00 
c010fc1a:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fc21:	e8 f0 15 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c010fc26:	c7 04 24 e8 4e 12 c0 	movl   $0xc0124ee8,(%esp)
c010fc2d:	e8 c1 07 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c010fc32:	b8 00 40 00 00       	mov    $0x4000,%eax
c010fc37:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c010fc3a:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010fc3f:	83 f8 09             	cmp    $0x9,%eax
c010fc42:	74 24                	je     c010fc68 <_fifo_check_swap+0x29a>
c010fc44:	c7 44 24 0c 9a 4f 12 	movl   $0xc0124f9a,0xc(%esp)
c010fc4b:	c0 
c010fc4c:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fc53:	c0 
c010fc54:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c010fc5b:	00 
c010fc5c:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fc63:	e8 ae 15 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c010fc68:	c7 04 24 38 4f 12 c0 	movl   $0xc0124f38,(%esp)
c010fc6f:	e8 7f 07 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c010fc74:	b8 00 50 00 00       	mov    $0x5000,%eax
c010fc79:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c010fc7c:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010fc81:	83 f8 0a             	cmp    $0xa,%eax
c010fc84:	74 24                	je     c010fcaa <_fifo_check_swap+0x2dc>
c010fc86:	c7 44 24 0c a9 4f 12 	movl   $0xc0124fa9,0xc(%esp)
c010fc8d:	c0 
c010fc8e:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fc95:	c0 
c010fc96:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c010fc9d:	00 
c010fc9e:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fca5:	e8 6c 15 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c010fcaa:	c7 04 24 c0 4e 12 c0 	movl   $0xc0124ec0,(%esp)
c010fcb1:	e8 3d 07 ff ff       	call   c01003f3 <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c010fcb6:	b8 00 10 00 00       	mov    $0x1000,%eax
c010fcbb:	0f b6 00             	movzbl (%eax),%eax
c010fcbe:	3c 0a                	cmp    $0xa,%al
c010fcc0:	74 24                	je     c010fce6 <_fifo_check_swap+0x318>
c010fcc2:	c7 44 24 0c bc 4f 12 	movl   $0xc0124fbc,0xc(%esp)
c010fcc9:	c0 
c010fcca:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fcd1:	c0 
c010fcd2:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c010fcd9:	00 
c010fcda:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fce1:	e8 30 15 ff ff       	call   c0101216 <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c010fce6:	b8 00 10 00 00       	mov    $0x1000,%eax
c010fceb:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c010fcee:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010fcf3:	83 f8 0b             	cmp    $0xb,%eax
c010fcf6:	74 24                	je     c010fd1c <_fifo_check_swap+0x34e>
c010fcf8:	c7 44 24 0c dd 4f 12 	movl   $0xc0124fdd,0xc(%esp)
c010fcff:	c0 
c010fd00:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fd07:	c0 
c010fd08:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c010fd0f:	00 
c010fd10:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fd17:	e8 fa 14 ff ff       	call   c0101216 <__panic>
    return 0;
c010fd1c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fd21:	c9                   	leave  
c010fd22:	c3                   	ret    

c010fd23 <_fifo_user_check>:


static int
_fifo_user_check(void) {
c010fd23:	55                   	push   %ebp
c010fd24:	89 e5                	mov    %esp,%ebp
c010fd26:	83 ec 18             	sub    $0x18,%esp

    cprintf("write Virt Page c in clock_check_swap\n");
c010fd29:	c7 04 24 f0 4f 12 c0 	movl   $0xc0124ff0,(%esp)
c010fd30:	e8 be 06 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c010fd35:	b8 00 30 00 00       	mov    $0x3000,%eax
c010fd3a:	c6 00 0c             	movb   $0xc,(%eax)
    cprintf("    *(unsigned char *)0x3000 = 0x0c\n");
c010fd3d:	c7 04 24 18 50 12 c0 	movl   $0xc0125018,(%esp)
c010fd44:	e8 aa 06 ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==4);
c010fd49:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010fd4e:	83 f8 04             	cmp    $0x4,%eax
c010fd51:	74 24                	je     c010fd77 <_fifo_user_check+0x54>
c010fd53:	c7 44 24 0c ae 4e 12 	movl   $0xc0124eae,0xc(%esp)
c010fd5a:	c0 
c010fd5b:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fd62:	c0 
c010fd63:	c7 44 24 04 82 00 00 	movl   $0x82,0x4(%esp)
c010fd6a:	00 
c010fd6b:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fd72:	e8 9f 14 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==4)\n");
c010fd77:	c7 04 24 3d 50 12 c0 	movl   $0xc012503d,(%esp)
c010fd7e:	e8 70 06 ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page a in clock_check_swap\n");
c010fd83:	c7 04 24 58 50 12 c0 	movl   $0xc0125058,(%esp)
c010fd8a:	e8 64 06 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c010fd8f:	b8 00 10 00 00       	mov    $0x1000,%eax
c010fd94:	c6 00 0a             	movb   $0xa,(%eax)
    cprintf("    *(unsigned char *)0x1000 = 0x0a\n");
c010fd97:	c7 04 24 80 50 12 c0 	movl   $0xc0125080,(%esp)
c010fd9e:	e8 50 06 ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==4);
c010fda3:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010fda8:	83 f8 04             	cmp    $0x4,%eax
c010fdab:	74 24                	je     c010fdd1 <_fifo_user_check+0xae>
c010fdad:	c7 44 24 0c ae 4e 12 	movl   $0xc0124eae,0xc(%esp)
c010fdb4:	c0 
c010fdb5:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fdbc:	c0 
c010fdbd:	c7 44 24 04 88 00 00 	movl   $0x88,0x4(%esp)
c010fdc4:	00 
c010fdc5:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fdcc:	e8 45 14 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==4)\n");
c010fdd1:	c7 04 24 3d 50 12 c0 	movl   $0xc012503d,(%esp)
c010fdd8:	e8 16 06 ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page d in clock_check_swap\n");
c010fddd:	c7 04 24 a8 50 12 c0 	movl   $0xc01250a8,(%esp)
c010fde4:	e8 0a 06 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c010fde9:	b8 00 40 00 00       	mov    $0x4000,%eax
c010fdee:	c6 00 0d             	movb   $0xd,(%eax)
    cprintf("    *(unsigned char *)0x4000 = 0x0d\n");
c010fdf1:	c7 04 24 d0 50 12 c0 	movl   $0xc01250d0,(%esp)
c010fdf8:	e8 f6 05 ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==4);
c010fdfd:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010fe02:	83 f8 04             	cmp    $0x4,%eax
c010fe05:	74 24                	je     c010fe2b <_fifo_user_check+0x108>
c010fe07:	c7 44 24 0c ae 4e 12 	movl   $0xc0124eae,0xc(%esp)
c010fe0e:	c0 
c010fe0f:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fe16:	c0 
c010fe17:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
c010fe1e:	00 
c010fe1f:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fe26:	e8 eb 13 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==4)\n");
c010fe2b:	c7 04 24 3d 50 12 c0 	movl   $0xc012503d,(%esp)
c010fe32:	e8 bc 05 ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page b in clock_check_swap\n");
c010fe37:	c7 04 24 f8 50 12 c0 	movl   $0xc01250f8,(%esp)
c010fe3e:	e8 b0 05 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c010fe43:	b8 00 20 00 00       	mov    $0x2000,%eax
c010fe48:	c6 00 0b             	movb   $0xb,(%eax)
    cprintf("    *(unsigned char *)0x2000 = 0x0b\n");
c010fe4b:	c7 04 24 20 51 12 c0 	movl   $0xc0125120,(%esp)
c010fe52:	e8 9c 05 ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==4);
c010fe57:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010fe5c:	83 f8 04             	cmp    $0x4,%eax
c010fe5f:	74 24                	je     c010fe85 <_fifo_user_check+0x162>
c010fe61:	c7 44 24 0c ae 4e 12 	movl   $0xc0124eae,0xc(%esp)
c010fe68:	c0 
c010fe69:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010fe70:	c0 
c010fe71:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c010fe78:	00 
c010fe79:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010fe80:	e8 91 13 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==4)\n");
c010fe85:	c7 04 24 3d 50 12 c0 	movl   $0xc012503d,(%esp)
c010fe8c:	e8 62 05 ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page e in clock_check_swap\n");
c010fe91:	c7 04 24 48 51 12 c0 	movl   $0xc0125148,(%esp)
c010fe98:	e8 56 05 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c010fe9d:	b8 00 50 00 00       	mov    $0x5000,%eax
c010fea2:	c6 00 0e             	movb   $0xe,(%eax)
    cprintf("    *(unsigned char *)0x5000 = 0x0e\n");
c010fea5:	c7 04 24 70 51 12 c0 	movl   $0xc0125170,(%esp)
c010feac:	e8 42 05 ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==5);
c010feb1:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010feb6:	83 f8 05             	cmp    $0x5,%eax
c010feb9:	74 24                	je     c010fedf <_fifo_user_check+0x1bc>
c010febb:	c7 44 24 0c 5e 4f 12 	movl   $0xc0124f5e,0xc(%esp)
c010fec2:	c0 
c010fec3:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010feca:	c0 
c010fecb:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010fed2:	00 
c010fed3:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010feda:	e8 37 13 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==5)\n");
c010fedf:	c7 04 24 95 51 12 c0 	movl   $0xc0125195,(%esp)
c010fee6:	e8 08 05 ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page b in clock_check_swap\n");
c010feeb:	c7 04 24 f8 50 12 c0 	movl   $0xc01250f8,(%esp)
c010fef2:	e8 fc 04 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c010fef7:	b8 00 20 00 00       	mov    $0x2000,%eax
c010fefc:	c6 00 0b             	movb   $0xb,(%eax)
    cprintf("    *(unsigned char *)0x2000 = 0x0b\n");
c010feff:	c7 04 24 20 51 12 c0 	movl   $0xc0125120,(%esp)
c010ff06:	e8 e8 04 ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==5);
c010ff0b:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010ff10:	83 f8 05             	cmp    $0x5,%eax
c010ff13:	74 24                	je     c010ff39 <_fifo_user_check+0x216>
c010ff15:	c7 44 24 0c 5e 4f 12 	movl   $0xc0124f5e,0xc(%esp)
c010ff1c:	c0 
c010ff1d:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010ff24:	c0 
c010ff25:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010ff2c:	00 
c010ff2d:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010ff34:	e8 dd 12 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==5)\n");
c010ff39:	c7 04 24 95 51 12 c0 	movl   $0xc0125195,(%esp)
c010ff40:	e8 ae 04 ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page a in fifo_check_swap\n");
c010ff45:	c7 04 24 c0 4e 12 c0 	movl   $0xc0124ec0,(%esp)
c010ff4c:	e8 a2 04 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c010ff51:	b8 00 10 00 00       	mov    $0x1000,%eax
c010ff56:	c6 00 0a             	movb   $0xa,(%eax)
    cprintf("    *(unsigned char *)0x1000 = 0x0a\n");
c010ff59:	c7 04 24 80 50 12 c0 	movl   $0xc0125080,(%esp)
c010ff60:	e8 8e 04 ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==6);
c010ff65:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010ff6a:	83 f8 06             	cmp    $0x6,%eax
c010ff6d:	74 24                	je     c010ff93 <_fifo_user_check+0x270>
c010ff6f:	c7 44 24 0c 6d 4f 12 	movl   $0xc0124f6d,0xc(%esp)
c010ff76:	c0 
c010ff77:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010ff7e:	c0 
c010ff7f:	c7 44 24 04 a6 00 00 	movl   $0xa6,0x4(%esp)
c010ff86:	00 
c010ff87:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010ff8e:	e8 83 12 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==6)\n");
c010ff93:	c7 04 24 ad 51 12 c0 	movl   $0xc01251ad,(%esp)
c010ff9a:	e8 54 04 ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page b in fifo_check_swap\n");
c010ff9f:	c7 04 24 10 4f 12 c0 	movl   $0xc0124f10,(%esp)
c010ffa6:	e8 48 04 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c010ffab:	b8 00 20 00 00       	mov    $0x2000,%eax
c010ffb0:	c6 00 0b             	movb   $0xb,(%eax)
    cprintf("    *(unsigned char *)0x2000 = 0x0b\n");
c010ffb3:	c7 04 24 20 51 12 c0 	movl   $0xc0125120,(%esp)
c010ffba:	e8 34 04 ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==7);
c010ffbf:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c010ffc4:	83 f8 07             	cmp    $0x7,%eax
c010ffc7:	74 24                	je     c010ffed <_fifo_user_check+0x2ca>
c010ffc9:	c7 44 24 0c 7c 4f 12 	movl   $0xc0124f7c,0xc(%esp)
c010ffd0:	c0 
c010ffd1:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c010ffd8:	c0 
c010ffd9:	c7 44 24 04 ac 00 00 	movl   $0xac,0x4(%esp)
c010ffe0:	00 
c010ffe1:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c010ffe8:	e8 29 12 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==7)\n");
c010ffed:	c7 04 24 c5 51 12 c0 	movl   $0xc01251c5,(%esp)
c010fff4:	e8 fa 03 ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page c in fifo_check_swap\n");
c010fff9:	c7 04 24 88 4e 12 c0 	movl   $0xc0124e88,(%esp)
c0110000:	e8 ee 03 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0110005:	b8 00 30 00 00       	mov    $0x3000,%eax
c011000a:	c6 00 0c             	movb   $0xc,(%eax)
    cprintf("    *(unsigned char *)0x3000 = 0x0c\n");
c011000d:	c7 04 24 18 50 12 c0 	movl   $0xc0125018,(%esp)
c0110014:	e8 da 03 ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==8);
c0110019:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c011001e:	83 f8 08             	cmp    $0x8,%eax
c0110021:	74 24                	je     c0110047 <_fifo_user_check+0x324>
c0110023:	c7 44 24 0c 8b 4f 12 	movl   $0xc0124f8b,0xc(%esp)
c011002a:	c0 
c011002b:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c0110032:	c0 
c0110033:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c011003a:	00 
c011003b:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c0110042:	e8 cf 11 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==8)\n");
c0110047:	c7 04 24 dd 51 12 c0 	movl   $0xc01251dd,(%esp)
c011004e:	e8 a0 03 ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page d in fifo_check_swap\n");
c0110053:	c7 04 24 e8 4e 12 c0 	movl   $0xc0124ee8,(%esp)
c011005a:	e8 94 03 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c011005f:	b8 00 40 00 00       	mov    $0x4000,%eax
c0110064:	c6 00 0d             	movb   $0xd,(%eax)
    cprintf("    *(unsigned char *)0x4000 = 0x0d\n");
c0110067:	c7 04 24 d0 50 12 c0 	movl   $0xc01250d0,(%esp)
c011006e:	e8 80 03 ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==9);
c0110073:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110078:	83 f8 09             	cmp    $0x9,%eax
c011007b:	74 24                	je     c01100a1 <_fifo_user_check+0x37e>
c011007d:	c7 44 24 0c 9a 4f 12 	movl   $0xc0124f9a,0xc(%esp)
c0110084:	c0 
c0110085:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c011008c:	c0 
c011008d:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c0110094:	00 
c0110095:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c011009c:	e8 75 11 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==9)\n");
c01100a1:	c7 04 24 f5 51 12 c0 	movl   $0xc01251f5,(%esp)
c01100a8:	e8 46 03 ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page e in fifo_check_swap\n");
c01100ad:	c7 04 24 38 4f 12 c0 	movl   $0xc0124f38,(%esp)
c01100b4:	e8 3a 03 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c01100b9:	b8 00 50 00 00       	mov    $0x5000,%eax
c01100be:	c6 00 0e             	movb   $0xe,(%eax)
    cprintf("    *(unsigned char *)0x5000 = 0x0e\n");
c01100c1:	c7 04 24 70 51 12 c0 	movl   $0xc0125170,(%esp)
c01100c8:	e8 26 03 ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==10);
c01100cd:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c01100d2:	83 f8 0a             	cmp    $0xa,%eax
c01100d5:	74 24                	je     c01100fb <_fifo_user_check+0x3d8>
c01100d7:	c7 44 24 0c a9 4f 12 	movl   $0xc0124fa9,0xc(%esp)
c01100de:	c0 
c01100df:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c01100e6:	c0 
c01100e7:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c01100ee:	00 
c01100ef:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c01100f6:	e8 1b 11 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==10)\n");
c01100fb:	c7 04 24 0d 52 12 c0 	movl   $0xc012520d,(%esp)
c0110102:	e8 ec 02 ff ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page a in fifo_check_swap\n");
c0110107:	c7 04 24 c0 4e 12 c0 	movl   $0xc0124ec0,(%esp)
c011010e:	e8 e0 02 ff ff       	call   c01003f3 <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c0110113:	b8 00 10 00 00       	mov    $0x1000,%eax
c0110118:	0f b6 00             	movzbl (%eax),%eax
c011011b:	3c 0a                	cmp    $0xa,%al
c011011d:	74 24                	je     c0110143 <_fifo_user_check+0x420>
c011011f:	c7 44 24 0c bc 4f 12 	movl   $0xc0124fbc,0xc(%esp)
c0110126:	c0 
c0110127:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c011012e:	c0 
c011012f:	c7 44 24 04 c2 00 00 	movl   $0xc2,0x4(%esp)
c0110136:	00 
c0110137:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c011013e:	e8 d3 10 ff ff       	call   c0101216 <__panic>
    cprintf("assert(*(unsigned char *)0x1000 == 0x0a)\n");
c0110143:	c7 04 24 28 52 12 c0 	movl   $0xc0125228,(%esp)
c011014a:	e8 a4 02 ff ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c011014f:	b8 00 10 00 00       	mov    $0x1000,%eax
c0110154:	c6 00 0a             	movb   $0xa,(%eax)
    cprintf("    *(unsigned char *)0x1000 = 0x0a\n");
c0110157:	c7 04 24 80 50 12 c0 	movl   $0xc0125080,(%esp)
c011015e:	e8 90 02 ff ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==11);
c0110163:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110168:	83 f8 0b             	cmp    $0xb,%eax
c011016b:	74 24                	je     c0110191 <_fifo_user_check+0x46e>
c011016d:	c7 44 24 0c dd 4f 12 	movl   $0xc0124fdd,0xc(%esp)
c0110174:	c0 
c0110175:	c7 44 24 08 32 4e 12 	movl   $0xc0124e32,0x8(%esp)
c011017c:	c0 
c011017d:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0110184:	00 
c0110185:	c7 04 24 47 4e 12 c0 	movl   $0xc0124e47,(%esp)
c011018c:	e8 85 10 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==11)\n");
c0110191:	c7 04 24 52 52 12 c0 	movl   $0xc0125252,(%esp)
c0110198:	e8 56 02 ff ff       	call   c01003f3 <cprintf>

    return 0;
c011019d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01101a2:	c9                   	leave  
c01101a3:	c3                   	ret    

c01101a4 <_fifo_init>:


static int
_fifo_init(void)
{
c01101a4:	55                   	push   %ebp
c01101a5:	89 e5                	mov    %esp,%ebp
    return 0;
c01101a7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01101ac:	5d                   	pop    %ebp
c01101ad:	c3                   	ret    

c01101ae <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c01101ae:	55                   	push   %ebp
c01101af:	89 e5                	mov    %esp,%ebp
    return 0;
c01101b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01101b6:	5d                   	pop    %ebp
c01101b7:	c3                   	ret    

c01101b8 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c01101b8:	55                   	push   %ebp
c01101b9:	89 e5                	mov    %esp,%ebp
c01101bb:	b8 00 00 00 00       	mov    $0x0,%eax
c01101c0:	5d                   	pop    %ebp
c01101c1:	c3                   	ret    

c01101c2 <lock_mm>:
    mm->mm_count -= 1;
    return mm->mm_count;
}

static inline void
lock_mm(struct mm_struct *mm) {
c01101c2:	55                   	push   %ebp
c01101c3:	89 e5                	mov    %esp,%ebp
c01101c5:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c01101c8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01101cc:	74 25                	je     c01101f3 <lock_mm+0x31>
        down(&(mm->mm_sem));
c01101ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01101d1:	83 c0 1c             	add    $0x1c,%eax
c01101d4:	89 04 24             	mov    %eax,(%esp)
c01101d7:	e8 00 2a 00 00       	call   c0112bdc <down>
        if (current != NULL) {
c01101dc:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01101e1:	85 c0                	test   %eax,%eax
c01101e3:	74 0e                	je     c01101f3 <lock_mm+0x31>
            mm->locked_by = current->pid;
c01101e5:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01101ea:	8b 50 04             	mov    0x4(%eax),%edx
c01101ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01101f0:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c01101f3:	c9                   	leave  
c01101f4:	c3                   	ret    

c01101f5 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c01101f5:	55                   	push   %ebp
c01101f6:	89 e5                	mov    %esp,%ebp
c01101f8:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c01101fb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01101ff:	74 18                	je     c0110219 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c0110201:	8b 45 08             	mov    0x8(%ebp),%eax
c0110204:	83 c0 1c             	add    $0x1c,%eax
c0110207:	89 04 24             	mov    %eax,(%esp)
c011020a:	e8 b2 29 00 00       	call   c0112bc1 <up>
        mm->locked_by = 0;
c011020f:	8b 45 08             	mov    0x8(%ebp),%eax
c0110212:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c0110219:	c9                   	leave  
c011021a:	c3                   	ret    

c011021b <_lru_init_mm>:
 * (2) _lru_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access lru PRA
 */
static int
_lru_init_mm(struct mm_struct *mm)
{     
c011021b:	55                   	push   %ebp
c011021c:	89 e5                	mov    %esp,%ebp
c011021e:	83 ec 10             	sub    $0x10,%esp
c0110221:	c7 45 fc 48 12 17 c0 	movl   $0xc0171248,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0110228:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011022b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c011022e:	89 50 04             	mov    %edx,0x4(%eax)
c0110231:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0110234:	8b 50 04             	mov    0x4(%eax),%edx
c0110237:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011023a:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c011023c:	8b 45 08             	mov    0x8(%ebp),%eax
c011023f:	c7 40 14 48 12 17 c0 	movl   $0xc0171248,0x14(%eax)
     //cprintf(" mm->sm_priv %x in lru_init_mm\n",mm->sm_priv);
     mm->size_of_sm_priv = 0; 
c0110246:	8b 45 08             	mov    0x8(%ebp),%eax
c0110249:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
     mm->max_map = 10;
c0110250:	8b 45 08             	mov    0x8(%ebp),%eax
c0110253:	c7 40 30 0a 00 00 00 	movl   $0xa,0x30(%eax)
     return 0;
c011025a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011025f:	c9                   	leave  
c0110260:	c3                   	ret    

c0110261 <_lru_map_swappable>:
/*
 * (3)_lru_map_swappable: According lru PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_lru_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0110261:	55                   	push   %ebp
c0110262:	89 e5                	mov    %esp,%ebp
c0110264:	83 ec 78             	sub    $0x78,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0110267:	8b 45 08             	mov    0x8(%ebp),%eax
c011026a:	8b 40 14             	mov    0x14(%eax),%eax
c011026d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    lock_mm(mm);
c0110270:	8b 45 08             	mov    0x8(%ebp),%eax
c0110273:	89 04 24             	mov    %eax,(%esp)
c0110276:	e8 47 ff ff ff       	call   c01101c2 <lock_mm>
    {
        if(mm->size_of_sm_priv < mm->max_map){
c011027b:	8b 45 08             	mov    0x8(%ebp),%eax
c011027e:	8b 50 2c             	mov    0x2c(%eax),%edx
c0110281:	8b 45 08             	mov    0x8(%ebp),%eax
c0110284:	8b 40 30             	mov    0x30(%eax),%eax
c0110287:	39 c2                	cmp    %eax,%edx
c0110289:	0f 8c c4 00 00 00    	jl     c0110353 <_lru_map_swappable+0xf2>
            //如果当前使用的物理页框还足够，就继续在head里面添加
        }else{
            //否则在这里进行调度, 查找mm对应的vma_list里面最久未使用的虚拟页对应的物理页，然后换掉它

            //取出mmap_list的头节点
            list_entry_t *le = &mm->mmap_list;
c011028f:	8b 45 08             	mov    0x8(%ebp),%eax
c0110292:	89 45 f4             	mov    %eax,-0xc(%ebp)
            list_entry_t *vma_head = &mm->mmap_list;
c0110295:	8b 45 08             	mov    0x8(%ebp),%eax
c0110298:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            struct vma_struct *change_vma;
            struct vma_struct *temp_vma;
            uint32_t last_used_time = 0;
c011029b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            while((le = list_next(le) != vma_head)){
c01102a2:	eb 1a                	jmp    c01102be <_lru_map_swappable+0x5d>
                temp_vma = le2vma(le, list_link);
c01102a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102a7:	83 e8 14             	sub    $0x14,%eax
c01102aa:	89 45 dc             	mov    %eax,-0x24(%ebp)
                if(last_used_time > temp_vma->last_used_time){
c01102ad:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01102b0:	8b 40 10             	mov    0x10(%eax),%eax
c01102b3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01102b6:	73 06                	jae    c01102be <_lru_map_swappable+0x5d>
                    change_vma = temp_vma;                  //找到 pra_list_head 里面映射到这个地址的物理页，然后page和这一页换掉
c01102b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01102bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01102be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01102c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01102c7:	8b 40 04             	mov    0x4(%eax),%eax
            list_entry_t *le = &mm->mmap_list;
            list_entry_t *vma_head = &mm->mmap_list;
            struct vma_struct *change_vma;
            struct vma_struct *temp_vma;
            uint32_t last_used_time = 0;
            while((le = list_next(le) != vma_head)){
c01102ca:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c01102cd:	74 07                	je     c01102d6 <_lru_map_swappable+0x75>
c01102cf:	b8 01 00 00 00       	mov    $0x1,%eax
c01102d4:	eb 05                	jmp    c01102db <_lru_map_swappable+0x7a>
c01102d6:	b8 00 00 00 00       	mov    $0x0,%eax
c01102db:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01102de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01102e2:	75 c0                	jne    c01102a4 <_lru_map_swappable+0x43>
                if(last_used_time > temp_vma->last_used_time){
                    change_vma = temp_vma;                  //找到 pra_list_head 里面映射到这个地址的物理页，然后page和这一页换掉
                }
            }

            list_entry_t *ple = &pra_list_head;
c01102e4:	c7 45 ec 48 12 17 c0 	movl   $0xc0171248,-0x14(%ebp)
            while((ple = list_next(ple)) != &pra_list_head){
c01102eb:	eb 44                	jmp    c0110331 <_lru_map_swappable+0xd0>
                struct Page *victim = le2page(ple, page_link);
c01102ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01102f0:	83 e8 10             	sub    $0x10,%eax
c01102f3:	89 45 d8             	mov    %eax,-0x28(%ebp)
                if(victim->pra_vaddr == change_vma->vm_start){//找到了该需要替换的物理页
c01102f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01102f9:	8b 50 20             	mov    0x20(%eax),%edx
c01102fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01102ff:	8b 40 04             	mov    0x4(%eax),%eax
c0110302:	39 c2                	cmp    %eax,%edx
c0110304:	75 2b                	jne    c0110331 <_lru_map_swappable+0xd0>
                    list_del(&(victim->page_link));
c0110306:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110309:	83 c0 10             	add    $0x10,%eax
c011030c:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c011030f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0110312:	8b 40 04             	mov    0x4(%eax),%eax
c0110315:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0110318:	8b 12                	mov    (%edx),%edx
c011031a:	89 55 c8             	mov    %edx,-0x38(%ebp)
c011031d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0110320:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0110323:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0110326:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0110329:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011032c:	8b 55 c8             	mov    -0x38(%ebp),%edx
c011032f:	89 10                	mov    %edx,(%eax)
c0110331:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110334:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0110337:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011033a:	8b 40 04             	mov    0x4(%eax),%eax
                    change_vma = temp_vma;                  //找到 pra_list_head 里面映射到这个地址的物理页，然后page和这一页换掉
                }
            }

            list_entry_t *ple = &pra_list_head;
            while((ple = list_next(ple)) != &pra_list_head){
c011033d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110340:	81 7d ec 48 12 17 c0 	cmpl   $0xc0171248,-0x14(%ebp)
c0110347:	75 a4                	jne    c01102ed <_lru_map_swappable+0x8c>
                    list_del(&(victim->page_link));
                }
                
            }
            
            return 0;
c0110349:	b8 00 00 00 00       	mov    $0x0,%eax
c011034e:	e9 bf 00 00 00       	jmp    c0110412 <_lru_map_swappable+0x1b1>
        }
    }
    unlock_mm(mm);
c0110353:	8b 45 08             	mov    0x8(%ebp),%eax
c0110356:	89 04 24             	mov    %eax,(%esp)
c0110359:	e8 97 fe ff ff       	call   c01101f5 <unlock_mm>
    
    list_entry_t *entry=&(page->pra_page_link);
c011035e:	8b 45 10             	mov    0x10(%ebp),%eax
c0110361:	83 c0 18             	add    $0x18,%eax
c0110364:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 
    assert(entry != NULL && head != NULL);
c0110367:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c011036b:	74 06                	je     c0110373 <_lru_map_swappable+0x112>
c011036d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0110371:	75 24                	jne    c0110397 <_lru_map_swappable+0x136>
c0110373:	c7 44 24 0c 80 52 12 	movl   $0xc0125280,0xc(%esp)
c011037a:	c0 
c011037b:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110382:	c0 
c0110383:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c011038a:	00 
c011038b:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110392:	e8 7f 0e ff ff       	call   c0101216 <__panic>
c0110397:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011039a:	89 45 bc             	mov    %eax,-0x44(%ebp)
c011039d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01103a0:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01103a3:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01103a6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c01103a9:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01103ac:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01103af:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01103b2:	8b 40 04             	mov    0x4(%eax),%eax
c01103b5:	8b 55 b0             	mov    -0x50(%ebp),%edx
c01103b8:	89 55 ac             	mov    %edx,-0x54(%ebp)
c01103bb:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01103be:	89 55 a8             	mov    %edx,-0x58(%ebp)
c01103c1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01103c4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01103c7:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01103ca:	89 10                	mov    %edx,(%eax)
c01103cc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01103cf:	8b 10                	mov    (%eax),%edx
c01103d1:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01103d4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01103d7:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01103da:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c01103dd:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01103e0:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01103e3:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01103e6:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    list_add(head, entry);
    lock_mm(mm);
c01103e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01103eb:	89 04 24             	mov    %eax,(%esp)
c01103ee:	e8 cf fd ff ff       	call   c01101c2 <lock_mm>
    {
        mm->size_of_sm_priv++;  //物理页的个数+1
c01103f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01103f6:	8b 40 2c             	mov    0x2c(%eax),%eax
c01103f9:	8d 50 01             	lea    0x1(%eax),%edx
c01103fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01103ff:	89 50 2c             	mov    %edx,0x2c(%eax)
    }
    unlock_mm(mm);
c0110402:	8b 45 08             	mov    0x8(%ebp),%eax
c0110405:	89 04 24             	mov    %eax,(%esp)
c0110408:	e8 e8 fd ff ff       	call   c01101f5 <unlock_mm>
    return 0;
c011040d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110412:	c9                   	leave  
c0110413:	c3                   	ret    

c0110414 <_lru_swap_out_victim>:
 *  (4)_lru_swap_out_victim: According lru PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_lru_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0110414:	55                   	push   %ebp
c0110415:	89 e5                	mov    %esp,%ebp
c0110417:	83 ec 58             	sub    $0x58,%esp
    list_entry_t *head = (list_entry_t*)mm->sm_priv;
c011041a:	8b 45 08             	mov    0x8(%ebp),%eax
c011041d:	8b 40 14             	mov    0x14(%eax),%eax
c0110420:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(head != NULL);
c0110423:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0110427:	75 24                	jne    c011044d <_lru_swap_out_victim+0x39>
c0110429:	c7 44 24 0c c6 52 12 	movl   $0xc01252c6,0xc(%esp)
c0110430:	c0 
c0110431:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110438:	c0 
c0110439:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
c0110440:	00 
c0110441:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110448:	e8 c9 0d ff ff       	call   c0101216 <__panic>
    assert(in_tick == 0);
c011044d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0110451:	74 24                	je     c0110477 <_lru_swap_out_victim+0x63>
c0110453:	c7 44 24 0c d3 52 12 	movl   $0xc01252d3,0xc(%esp)
c011045a:	c0 
c011045b:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110462:	c0 
c0110463:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c011046a:	00 
c011046b:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110472:	e8 9f 0d ff ff       	call   c0101216 <__panic>

    list_entry_t *le = &mm->mmap_list;
c0110477:	8b 45 08             	mov    0x8(%ebp),%eax
c011047a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *vma_head = &mm->mmap_list;
c011047d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110480:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct vma_struct *change_vma;
    struct vma_struct *temp_vma;
    uint32_t last_used_time = 0;
c0110483:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while((le = list_next(le) != vma_head)){
c011048a:	eb 1a                	jmp    c01104a6 <_lru_swap_out_victim+0x92>
        temp_vma = le2vma(le, list_link);
c011048c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011048f:	83 e8 14             	sub    $0x14,%eax
c0110492:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if(last_used_time > temp_vma->last_used_time){
c0110495:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110498:	8b 40 10             	mov    0x10(%eax),%eax
c011049b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c011049e:	73 06                	jae    c01104a6 <_lru_swap_out_victim+0x92>
            change_vma = temp_vma;                  //找到 pra_list_head 里面映射到这个地址的物理页，然后page和这一页换掉
c01104a0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01104a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01104a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01104a9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01104ac:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01104af:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *le = &mm->mmap_list;
    list_entry_t *vma_head = &mm->mmap_list;
    struct vma_struct *change_vma;
    struct vma_struct *temp_vma;
    uint32_t last_used_time = 0;
    while((le = list_next(le) != vma_head)){
c01104b2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01104b5:	74 07                	je     c01104be <_lru_swap_out_victim+0xaa>
c01104b7:	b8 01 00 00 00       	mov    $0x1,%eax
c01104bc:	eb 05                	jmp    c01104c3 <_lru_swap_out_victim+0xaf>
c01104be:	b8 00 00 00 00       	mov    $0x0,%eax
c01104c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01104c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01104ca:	75 c0                	jne    c011048c <_lru_swap_out_victim+0x78>
        if(last_used_time > temp_vma->last_used_time){
            change_vma = temp_vma;                  //找到 pra_list_head 里面映射到这个地址的物理页，然后page和这一页换掉
        }
    }

    list_entry_t *ple = &pra_list_head;
c01104cc:	c7 45 ec 48 12 17 c0 	movl   $0xc0171248,-0x14(%ebp)
    struct Page *victim;
    while((ple = list_next(ple)) != &pra_list_head){
c01104d3:	eb 6e                	jmp    c0110543 <_lru_swap_out_victim+0x12f>
        victim = le2page(ple, page_link);
c01104d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01104d8:	83 e8 10             	sub    $0x10,%eax
c01104db:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if(victim->pra_vaddr == change_vma->vm_start){//找到了该需要替换的物理页
c01104de:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01104e1:	8b 50 20             	mov    0x20(%eax),%edx
c01104e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104e7:	8b 40 04             	mov    0x4(%eax),%eax
c01104ea:	39 c2                	cmp    %eax,%edx
c01104ec:	75 2b                	jne    c0110519 <_lru_swap_out_victim+0x105>
            list_del(&(victim->page_link));
c01104ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01104f1:	83 c0 10             	add    $0x10,%eax
c01104f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01104f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01104fa:	8b 40 04             	mov    0x4(%eax),%eax
c01104fd:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0110500:	8b 12                	mov    (%edx),%edx
c0110502:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0110505:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0110508:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011050b:	8b 55 c8             	mov    -0x38(%ebp),%edx
c011050e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0110511:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0110514:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0110517:	89 10                	mov    %edx,(%eax)
        }
        assert(victim !=NULL);
c0110519:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011051d:	75 24                	jne    c0110543 <_lru_swap_out_victim+0x12f>
c011051f:	c7 44 24 0c e0 52 12 	movl   $0xc01252e0,0xc(%esp)
c0110526:	c0 
c0110527:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c011052e:	c0 
c011052f:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0110536:	00 
c0110537:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c011053e:	e8 d3 0c ff ff       	call   c0101216 <__panic>
c0110543:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110546:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0110549:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011054c:	8b 40 04             	mov    0x4(%eax),%eax
        }
    }

    list_entry_t *ple = &pra_list_head;
    struct Page *victim;
    while((ple = list_next(ple)) != &pra_list_head){
c011054f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110552:	81 7d ec 48 12 17 c0 	cmpl   $0xc0171248,-0x14(%ebp)
c0110559:	0f 85 76 ff ff ff    	jne    c01104d5 <_lru_swap_out_victim+0xc1>
            list_del(&(victim->page_link));
        }
        assert(victim !=NULL);
    }

    *ptr_page = victim;
c011055f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110562:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110565:	89 10                	mov    %edx,(%eax)

    lock_mm(mm);
c0110567:	8b 45 08             	mov    0x8(%ebp),%eax
c011056a:	89 04 24             	mov    %eax,(%esp)
c011056d:	e8 50 fc ff ff       	call   c01101c2 <lock_mm>
    {
        mm->size_of_sm_priv--;  //物理页的个数-1
c0110572:	8b 45 08             	mov    0x8(%ebp),%eax
c0110575:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110578:	8d 50 ff             	lea    -0x1(%eax),%edx
c011057b:	8b 45 08             	mov    0x8(%ebp),%eax
c011057e:	89 50 2c             	mov    %edx,0x2c(%eax)
    }
    unlock_mm(mm);
c0110581:	8b 45 08             	mov    0x8(%ebp),%eax
c0110584:	89 04 24             	mov    %eax,(%esp)
c0110587:	e8 69 fc ff ff       	call   c01101f5 <unlock_mm>
    
    return 0;
c011058c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110591:	c9                   	leave  
c0110592:	c3                   	ret    

c0110593 <_lru_check_swap>:

static int
_lru_check_swap(void) {
c0110593:	55                   	push   %ebp
c0110594:	89 e5                	mov    %esp,%ebp
c0110596:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in lru_check_swap\n");
c0110599:	c7 04 24 f0 52 12 c0 	movl   $0xc01252f0,(%esp)
c01105a0:	e8 4e fe fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c01105a5:	b8 00 30 00 00       	mov    $0x3000,%eax
c01105aa:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c01105ad:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c01105b2:	83 f8 04             	cmp    $0x4,%eax
c01105b5:	74 24                	je     c01105db <_lru_check_swap+0x48>
c01105b7:	c7 44 24 0c 15 53 12 	movl   $0xc0125315,0xc(%esp)
c01105be:	c0 
c01105bf:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c01105c6:	c0 
c01105c7:	c7 44 24 04 7e 00 00 	movl   $0x7e,0x4(%esp)
c01105ce:	00 
c01105cf:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c01105d6:	e8 3b 0c ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page a in lru_check_swap\n");
c01105db:	c7 04 24 24 53 12 c0 	movl   $0xc0125324,(%esp)
c01105e2:	e8 0c fe fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c01105e7:	b8 00 10 00 00       	mov    $0x1000,%eax
c01105ec:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c01105ef:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c01105f4:	83 f8 04             	cmp    $0x4,%eax
c01105f7:	74 24                	je     c011061d <_lru_check_swap+0x8a>
c01105f9:	c7 44 24 0c 15 53 12 	movl   $0xc0125315,0xc(%esp)
c0110600:	c0 
c0110601:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110608:	c0 
c0110609:	c7 44 24 04 81 00 00 	movl   $0x81,0x4(%esp)
c0110610:	00 
c0110611:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110618:	e8 f9 0b ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page d in lru_check_swap\n");
c011061d:	c7 04 24 4c 53 12 c0 	movl   $0xc012534c,(%esp)
c0110624:	e8 ca fd fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0110629:	b8 00 40 00 00       	mov    $0x4000,%eax
c011062e:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0110631:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110636:	83 f8 04             	cmp    $0x4,%eax
c0110639:	74 24                	je     c011065f <_lru_check_swap+0xcc>
c011063b:	c7 44 24 0c 15 53 12 	movl   $0xc0125315,0xc(%esp)
c0110642:	c0 
c0110643:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c011064a:	c0 
c011064b:	c7 44 24 04 84 00 00 	movl   $0x84,0x4(%esp)
c0110652:	00 
c0110653:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c011065a:	e8 b7 0b ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page b in lru_check_swap\n");
c011065f:	c7 04 24 74 53 12 c0 	movl   $0xc0125374,(%esp)
c0110666:	e8 88 fd fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c011066b:	b8 00 20 00 00       	mov    $0x2000,%eax
c0110670:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0110673:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110678:	83 f8 04             	cmp    $0x4,%eax
c011067b:	74 24                	je     c01106a1 <_lru_check_swap+0x10e>
c011067d:	c7 44 24 0c 15 53 12 	movl   $0xc0125315,0xc(%esp)
c0110684:	c0 
c0110685:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c011068c:	c0 
c011068d:	c7 44 24 04 87 00 00 	movl   $0x87,0x4(%esp)
c0110694:	00 
c0110695:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c011069c:	e8 75 0b ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page e in lru_check_swap\n");
c01106a1:	c7 04 24 9c 53 12 c0 	movl   $0xc012539c,(%esp)
c01106a8:	e8 46 fd fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c01106ad:	b8 00 50 00 00       	mov    $0x5000,%eax
c01106b2:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c01106b5:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c01106ba:	83 f8 05             	cmp    $0x5,%eax
c01106bd:	74 24                	je     c01106e3 <_lru_check_swap+0x150>
c01106bf:	c7 44 24 0c c1 53 12 	movl   $0xc01253c1,0xc(%esp)
c01106c6:	c0 
c01106c7:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c01106ce:	c0 
c01106cf:	c7 44 24 04 8a 00 00 	movl   $0x8a,0x4(%esp)
c01106d6:	00 
c01106d7:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c01106de:	e8 33 0b ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page b in lru_check_swap\n");
c01106e3:	c7 04 24 74 53 12 c0 	movl   $0xc0125374,(%esp)
c01106ea:	e8 04 fd fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c01106ef:	b8 00 20 00 00       	mov    $0x2000,%eax
c01106f4:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c01106f7:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c01106fc:	83 f8 05             	cmp    $0x5,%eax
c01106ff:	74 24                	je     c0110725 <_lru_check_swap+0x192>
c0110701:	c7 44 24 0c c1 53 12 	movl   $0xc01253c1,0xc(%esp)
c0110708:	c0 
c0110709:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110710:	c0 
c0110711:	c7 44 24 04 8d 00 00 	movl   $0x8d,0x4(%esp)
c0110718:	00 
c0110719:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110720:	e8 f1 0a ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page a in lru_check_swap\n");
c0110725:	c7 04 24 24 53 12 c0 	movl   $0xc0125324,(%esp)
c011072c:	e8 c2 fc fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0110731:	b8 00 10 00 00       	mov    $0x1000,%eax
c0110736:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0110739:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c011073e:	83 f8 06             	cmp    $0x6,%eax
c0110741:	74 24                	je     c0110767 <_lru_check_swap+0x1d4>
c0110743:	c7 44 24 0c d0 53 12 	movl   $0xc01253d0,0xc(%esp)
c011074a:	c0 
c011074b:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110752:	c0 
c0110753:	c7 44 24 04 90 00 00 	movl   $0x90,0x4(%esp)
c011075a:	00 
c011075b:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110762:	e8 af 0a ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page b in lru_check_swap\n");
c0110767:	c7 04 24 74 53 12 c0 	movl   $0xc0125374,(%esp)
c011076e:	e8 80 fc fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0110773:	b8 00 20 00 00       	mov    $0x2000,%eax
c0110778:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c011077b:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110780:	83 f8 07             	cmp    $0x7,%eax
c0110783:	74 24                	je     c01107a9 <_lru_check_swap+0x216>
c0110785:	c7 44 24 0c df 53 12 	movl   $0xc01253df,0xc(%esp)
c011078c:	c0 
c011078d:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110794:	c0 
c0110795:	c7 44 24 04 93 00 00 	movl   $0x93,0x4(%esp)
c011079c:	00 
c011079d:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c01107a4:	e8 6d 0a ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page c in lru_check_swap\n");
c01107a9:	c7 04 24 f0 52 12 c0 	movl   $0xc01252f0,(%esp)
c01107b0:	e8 3e fc fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c01107b5:	b8 00 30 00 00       	mov    $0x3000,%eax
c01107ba:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c01107bd:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c01107c2:	83 f8 08             	cmp    $0x8,%eax
c01107c5:	74 24                	je     c01107eb <_lru_check_swap+0x258>
c01107c7:	c7 44 24 0c ee 53 12 	movl   $0xc01253ee,0xc(%esp)
c01107ce:	c0 
c01107cf:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c01107d6:	c0 
c01107d7:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c01107de:	00 
c01107df:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c01107e6:	e8 2b 0a ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page d in lru_check_swap\n");
c01107eb:	c7 04 24 4c 53 12 c0 	movl   $0xc012534c,(%esp)
c01107f2:	e8 fc fb fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c01107f7:	b8 00 40 00 00       	mov    $0x4000,%eax
c01107fc:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c01107ff:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110804:	83 f8 09             	cmp    $0x9,%eax
c0110807:	74 24                	je     c011082d <_lru_check_swap+0x29a>
c0110809:	c7 44 24 0c fd 53 12 	movl   $0xc01253fd,0xc(%esp)
c0110810:	c0 
c0110811:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110818:	c0 
c0110819:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
c0110820:	00 
c0110821:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110828:	e8 e9 09 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page e in lru_check_swap\n");
c011082d:	c7 04 24 9c 53 12 c0 	movl   $0xc012539c,(%esp)
c0110834:	e8 ba fb fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0110839:	b8 00 50 00 00       	mov    $0x5000,%eax
c011083e:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0110841:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110846:	83 f8 0a             	cmp    $0xa,%eax
c0110849:	74 24                	je     c011086f <_lru_check_swap+0x2dc>
c011084b:	c7 44 24 0c 0c 54 12 	movl   $0xc012540c,0xc(%esp)
c0110852:	c0 
c0110853:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c011085a:	c0 
c011085b:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c0110862:	00 
c0110863:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c011086a:	e8 a7 09 ff ff       	call   c0101216 <__panic>
    cprintf("write Virt Page a in lru_check_swap\n");
c011086f:	c7 04 24 24 53 12 c0 	movl   $0xc0125324,(%esp)
c0110876:	e8 78 fb fe ff       	call   c01003f3 <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c011087b:	b8 00 10 00 00       	mov    $0x1000,%eax
c0110880:	0f b6 00             	movzbl (%eax),%eax
c0110883:	3c 0a                	cmp    $0xa,%al
c0110885:	74 24                	je     c01108ab <_lru_check_swap+0x318>
c0110887:	c7 44 24 0c 1c 54 12 	movl   $0xc012541c,0xc(%esp)
c011088e:	c0 
c011088f:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110896:	c0 
c0110897:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c011089e:	00 
c011089f:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c01108a6:	e8 6b 09 ff ff       	call   c0101216 <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c01108ab:	b8 00 10 00 00       	mov    $0x1000,%eax
c01108b0:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c01108b3:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c01108b8:	83 f8 0b             	cmp    $0xb,%eax
c01108bb:	74 24                	je     c01108e1 <_lru_check_swap+0x34e>
c01108bd:	c7 44 24 0c 3d 54 12 	movl   $0xc012543d,0xc(%esp)
c01108c4:	c0 
c01108c5:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c01108cc:	c0 
c01108cd:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c01108d4:	00 
c01108d5:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c01108dc:	e8 35 09 ff ff       	call   c0101216 <__panic>
    return 0;
c01108e1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01108e6:	c9                   	leave  
c01108e7:	c3                   	ret    

c01108e8 <_lru_user_check>:

static int
_lru_user_check(void) {
c01108e8:	55                   	push   %ebp
c01108e9:	89 e5                	mov    %esp,%ebp
c01108eb:	83 ec 18             	sub    $0x18,%esp

    cprintf("write Virt Page c in clock_check_swap\n");
c01108ee:	c7 04 24 50 54 12 c0 	movl   $0xc0125450,(%esp)
c01108f5:	e8 f9 fa fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c01108fa:	b8 00 30 00 00       	mov    $0x3000,%eax
c01108ff:	c6 00 0c             	movb   $0xc,(%eax)
    cprintf("    *(unsigned char *)0x3000 = 0x0c\n");
c0110902:	c7 04 24 78 54 12 c0 	movl   $0xc0125478,(%esp)
c0110909:	e8 e5 fa fe ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==4);
c011090e:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110913:	83 f8 04             	cmp    $0x4,%eax
c0110916:	74 24                	je     c011093c <_lru_user_check+0x54>
c0110918:	c7 44 24 0c 15 53 12 	movl   $0xc0125315,0xc(%esp)
c011091f:	c0 
c0110920:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110927:	c0 
c0110928:	c7 44 24 04 aa 00 00 	movl   $0xaa,0x4(%esp)
c011092f:	00 
c0110930:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110937:	e8 da 08 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==4)\n");
c011093c:	c7 04 24 9d 54 12 c0 	movl   $0xc012549d,(%esp)
c0110943:	e8 ab fa fe ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page a in clock_check_swap\n");
c0110948:	c7 04 24 b8 54 12 c0 	movl   $0xc01254b8,(%esp)
c011094f:	e8 9f fa fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0110954:	b8 00 10 00 00       	mov    $0x1000,%eax
c0110959:	c6 00 0a             	movb   $0xa,(%eax)
    cprintf("    *(unsigned char *)0x1000 = 0x0a\n");
c011095c:	c7 04 24 e0 54 12 c0 	movl   $0xc01254e0,(%esp)
c0110963:	e8 8b fa fe ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==4);
c0110968:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c011096d:	83 f8 04             	cmp    $0x4,%eax
c0110970:	74 24                	je     c0110996 <_lru_user_check+0xae>
c0110972:	c7 44 24 0c 15 53 12 	movl   $0xc0125315,0xc(%esp)
c0110979:	c0 
c011097a:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110981:	c0 
c0110982:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c0110989:	00 
c011098a:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110991:	e8 80 08 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==4)\n");
c0110996:	c7 04 24 9d 54 12 c0 	movl   $0xc012549d,(%esp)
c011099d:	e8 51 fa fe ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page d in clock_check_swap\n");
c01109a2:	c7 04 24 08 55 12 c0 	movl   $0xc0125508,(%esp)
c01109a9:	e8 45 fa fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c01109ae:	b8 00 40 00 00       	mov    $0x4000,%eax
c01109b3:	c6 00 0d             	movb   $0xd,(%eax)
    cprintf("    *(unsigned char *)0x4000 = 0x0d\n");
c01109b6:	c7 04 24 30 55 12 c0 	movl   $0xc0125530,(%esp)
c01109bd:	e8 31 fa fe ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==4);
c01109c2:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c01109c7:	83 f8 04             	cmp    $0x4,%eax
c01109ca:	74 24                	je     c01109f0 <_lru_user_check+0x108>
c01109cc:	c7 44 24 0c 15 53 12 	movl   $0xc0125315,0xc(%esp)
c01109d3:	c0 
c01109d4:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c01109db:	c0 
c01109dc:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c01109e3:	00 
c01109e4:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c01109eb:	e8 26 08 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==4)\n");
c01109f0:	c7 04 24 9d 54 12 c0 	movl   $0xc012549d,(%esp)
c01109f7:	e8 f7 f9 fe ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page b in clock_check_swap\n");
c01109fc:	c7 04 24 58 55 12 c0 	movl   $0xc0125558,(%esp)
c0110a03:	e8 eb f9 fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0110a08:	b8 00 20 00 00       	mov    $0x2000,%eax
c0110a0d:	c6 00 0b             	movb   $0xb,(%eax)
    cprintf("    *(unsigned char *)0x2000 = 0x0b\n");
c0110a10:	c7 04 24 80 55 12 c0 	movl   $0xc0125580,(%esp)
c0110a17:	e8 d7 f9 fe ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==4);
c0110a1c:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110a21:	83 f8 04             	cmp    $0x4,%eax
c0110a24:	74 24                	je     c0110a4a <_lru_user_check+0x162>
c0110a26:	c7 44 24 0c 15 53 12 	movl   $0xc0125315,0xc(%esp)
c0110a2d:	c0 
c0110a2e:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110a35:	c0 
c0110a36:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0110a3d:	00 
c0110a3e:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110a45:	e8 cc 07 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==4)\n");
c0110a4a:	c7 04 24 9d 54 12 c0 	movl   $0xc012549d,(%esp)
c0110a51:	e8 9d f9 fe ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page e in clock_check_swap\n");
c0110a56:	c7 04 24 a8 55 12 c0 	movl   $0xc01255a8,(%esp)
c0110a5d:	e8 91 f9 fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0110a62:	b8 00 50 00 00       	mov    $0x5000,%eax
c0110a67:	c6 00 0e             	movb   $0xe,(%eax)
    cprintf("    *(unsigned char *)0x5000 = 0x0e\n");
c0110a6a:	c7 04 24 d0 55 12 c0 	movl   $0xc01255d0,(%esp)
c0110a71:	e8 7d f9 fe ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==5);
c0110a76:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110a7b:	83 f8 05             	cmp    $0x5,%eax
c0110a7e:	74 24                	je     c0110aa4 <_lru_user_check+0x1bc>
c0110a80:	c7 44 24 0c c1 53 12 	movl   $0xc01253c1,0xc(%esp)
c0110a87:	c0 
c0110a88:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110a8f:	c0 
c0110a90:	c7 44 24 04 c2 00 00 	movl   $0xc2,0x4(%esp)
c0110a97:	00 
c0110a98:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110a9f:	e8 72 07 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==5)\n");
c0110aa4:	c7 04 24 f5 55 12 c0 	movl   $0xc01255f5,(%esp)
c0110aab:	e8 43 f9 fe ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page b in clock_check_swap\n");
c0110ab0:	c7 04 24 58 55 12 c0 	movl   $0xc0125558,(%esp)
c0110ab7:	e8 37 f9 fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0110abc:	b8 00 20 00 00       	mov    $0x2000,%eax
c0110ac1:	c6 00 0b             	movb   $0xb,(%eax)
    cprintf("    *(unsigned char *)0x2000 = 0x0b\n");
c0110ac4:	c7 04 24 80 55 12 c0 	movl   $0xc0125580,(%esp)
c0110acb:	e8 23 f9 fe ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==5);
c0110ad0:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110ad5:	83 f8 05             	cmp    $0x5,%eax
c0110ad8:	74 24                	je     c0110afe <_lru_user_check+0x216>
c0110ada:	c7 44 24 0c c1 53 12 	movl   $0xc01253c1,0xc(%esp)
c0110ae1:	c0 
c0110ae2:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110ae9:	c0 
c0110aea:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c0110af1:	00 
c0110af2:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110af9:	e8 18 07 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==5)\n");
c0110afe:	c7 04 24 f5 55 12 c0 	movl   $0xc01255f5,(%esp)
c0110b05:	e8 e9 f8 fe ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page a in fifo_check_swap\n");
c0110b0a:	c7 04 24 10 56 12 c0 	movl   $0xc0125610,(%esp)
c0110b11:	e8 dd f8 fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0110b16:	b8 00 10 00 00       	mov    $0x1000,%eax
c0110b1b:	c6 00 0a             	movb   $0xa,(%eax)
    cprintf("    *(unsigned char *)0x1000 = 0x0a\n");
c0110b1e:	c7 04 24 e0 54 12 c0 	movl   $0xc01254e0,(%esp)
c0110b25:	e8 c9 f8 fe ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==6);
c0110b2a:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110b2f:	83 f8 06             	cmp    $0x6,%eax
c0110b32:	74 24                	je     c0110b58 <_lru_user_check+0x270>
c0110b34:	c7 44 24 0c d0 53 12 	movl   $0xc01253d0,0xc(%esp)
c0110b3b:	c0 
c0110b3c:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110b43:	c0 
c0110b44:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0110b4b:	00 
c0110b4c:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110b53:	e8 be 06 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==6)\n");
c0110b58:	c7 04 24 36 56 12 c0 	movl   $0xc0125636,(%esp)
c0110b5f:	e8 8f f8 fe ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page b in fifo_check_swap\n");
c0110b64:	c7 04 24 50 56 12 c0 	movl   $0xc0125650,(%esp)
c0110b6b:	e8 83 f8 fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0110b70:	b8 00 20 00 00       	mov    $0x2000,%eax
c0110b75:	c6 00 0b             	movb   $0xb,(%eax)
    cprintf("    *(unsigned char *)0x2000 = 0x0b\n");
c0110b78:	c7 04 24 80 55 12 c0 	movl   $0xc0125580,(%esp)
c0110b7f:	e8 6f f8 fe ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==7);
c0110b84:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110b89:	83 f8 07             	cmp    $0x7,%eax
c0110b8c:	74 24                	je     c0110bb2 <_lru_user_check+0x2ca>
c0110b8e:	c7 44 24 0c df 53 12 	movl   $0xc01253df,0xc(%esp)
c0110b95:	c0 
c0110b96:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110b9d:	c0 
c0110b9e:	c7 44 24 04 d4 00 00 	movl   $0xd4,0x4(%esp)
c0110ba5:	00 
c0110ba6:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110bad:	e8 64 06 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==7)\n");
c0110bb2:	c7 04 24 76 56 12 c0 	movl   $0xc0125676,(%esp)
c0110bb9:	e8 35 f8 fe ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page c in fifo_check_swap\n");
c0110bbe:	c7 04 24 90 56 12 c0 	movl   $0xc0125690,(%esp)
c0110bc5:	e8 29 f8 fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0110bca:	b8 00 30 00 00       	mov    $0x3000,%eax
c0110bcf:	c6 00 0c             	movb   $0xc,(%eax)
    cprintf("    *(unsigned char *)0x3000 = 0x0c\n");
c0110bd2:	c7 04 24 78 54 12 c0 	movl   $0xc0125478,(%esp)
c0110bd9:	e8 15 f8 fe ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==8);
c0110bde:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110be3:	83 f8 08             	cmp    $0x8,%eax
c0110be6:	74 24                	je     c0110c0c <_lru_user_check+0x324>
c0110be8:	c7 44 24 0c ee 53 12 	movl   $0xc01253ee,0xc(%esp)
c0110bef:	c0 
c0110bf0:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110bf7:	c0 
c0110bf8:	c7 44 24 04 da 00 00 	movl   $0xda,0x4(%esp)
c0110bff:	00 
c0110c00:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110c07:	e8 0a 06 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==8)\n");
c0110c0c:	c7 04 24 b6 56 12 c0 	movl   $0xc01256b6,(%esp)
c0110c13:	e8 db f7 fe ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page d in fifo_check_swap\n");
c0110c18:	c7 04 24 d0 56 12 c0 	movl   $0xc01256d0,(%esp)
c0110c1f:	e8 cf f7 fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0110c24:	b8 00 40 00 00       	mov    $0x4000,%eax
c0110c29:	c6 00 0d             	movb   $0xd,(%eax)
    cprintf("    *(unsigned char *)0x4000 = 0x0d\n");
c0110c2c:	c7 04 24 30 55 12 c0 	movl   $0xc0125530,(%esp)
c0110c33:	e8 bb f7 fe ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==9);
c0110c38:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110c3d:	83 f8 09             	cmp    $0x9,%eax
c0110c40:	74 24                	je     c0110c66 <_lru_user_check+0x37e>
c0110c42:	c7 44 24 0c fd 53 12 	movl   $0xc01253fd,0xc(%esp)
c0110c49:	c0 
c0110c4a:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110c51:	c0 
c0110c52:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0110c59:	00 
c0110c5a:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110c61:	e8 b0 05 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==9)\n");
c0110c66:	c7 04 24 f6 56 12 c0 	movl   $0xc01256f6,(%esp)
c0110c6d:	e8 81 f7 fe ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page e in fifo_check_swap\n");
c0110c72:	c7 04 24 10 57 12 c0 	movl   $0xc0125710,(%esp)
c0110c79:	e8 75 f7 fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0110c7e:	b8 00 50 00 00       	mov    $0x5000,%eax
c0110c83:	c6 00 0e             	movb   $0xe,(%eax)
    cprintf("    *(unsigned char *)0x5000 = 0x0e\n");
c0110c86:	c7 04 24 d0 55 12 c0 	movl   $0xc01255d0,(%esp)
c0110c8d:	e8 61 f7 fe ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==10);
c0110c92:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110c97:	83 f8 0a             	cmp    $0xa,%eax
c0110c9a:	74 24                	je     c0110cc0 <_lru_user_check+0x3d8>
c0110c9c:	c7 44 24 0c 0c 54 12 	movl   $0xc012540c,0xc(%esp)
c0110ca3:	c0 
c0110ca4:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110cab:	c0 
c0110cac:	c7 44 24 04 e6 00 00 	movl   $0xe6,0x4(%esp)
c0110cb3:	00 
c0110cb4:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110cbb:	e8 56 05 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==10)\n");
c0110cc0:	c7 04 24 36 57 12 c0 	movl   $0xc0125736,(%esp)
c0110cc7:	e8 27 f7 fe ff       	call   c01003f3 <cprintf>

    cprintf("write Virt Page a in fifo_check_swap\n");
c0110ccc:	c7 04 24 10 56 12 c0 	movl   $0xc0125610,(%esp)
c0110cd3:	e8 1b f7 fe ff       	call   c01003f3 <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c0110cd8:	b8 00 10 00 00       	mov    $0x1000,%eax
c0110cdd:	0f b6 00             	movzbl (%eax),%eax
c0110ce0:	3c 0a                	cmp    $0xa,%al
c0110ce2:	74 24                	je     c0110d08 <_lru_user_check+0x420>
c0110ce4:	c7 44 24 0c 1c 54 12 	movl   $0xc012541c,0xc(%esp)
c0110ceb:	c0 
c0110cec:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110cf3:	c0 
c0110cf4:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
c0110cfb:	00 
c0110cfc:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110d03:	e8 0e 05 ff ff       	call   c0101216 <__panic>
    cprintf("assert(*(unsigned char *)0x1000 == 0x0a)\n");
c0110d08:	c7 04 24 50 57 12 c0 	movl   $0xc0125750,(%esp)
c0110d0f:	e8 df f6 fe ff       	call   c01003f3 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0110d14:	b8 00 10 00 00       	mov    $0x1000,%eax
c0110d19:	c6 00 0a             	movb   $0xa,(%eax)
    cprintf("    *(unsigned char *)0x1000 = 0x0a\n");
c0110d1c:	c7 04 24 e0 54 12 c0 	movl   $0xc01254e0,(%esp)
c0110d23:	e8 cb f6 fe ff       	call   c01003f3 <cprintf>
    assert(pgfault_num==11);
c0110d28:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0110d2d:	83 f8 0b             	cmp    $0xb,%eax
c0110d30:	74 24                	je     c0110d56 <_lru_user_check+0x46e>
c0110d32:	c7 44 24 0c 3d 54 12 	movl   $0xc012543d,0xc(%esp)
c0110d39:	c0 
c0110d3a:	c7 44 24 08 9e 52 12 	movl   $0xc012529e,0x8(%esp)
c0110d41:	c0 
c0110d42:	c7 44 24 04 ee 00 00 	movl   $0xee,0x4(%esp)
c0110d49:	00 
c0110d4a:	c7 04 24 b3 52 12 c0 	movl   $0xc01252b3,(%esp)
c0110d51:	e8 c0 04 ff ff       	call   c0101216 <__panic>
    cprintf("assert(pgfault_num==11)\n");
c0110d56:	c7 04 24 7a 57 12 c0 	movl   $0xc012577a,(%esp)
c0110d5d:	e8 91 f6 fe ff       	call   c01003f3 <cprintf>

    return 0;
c0110d62:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110d67:	c9                   	leave  
c0110d68:	c3                   	ret    

c0110d69 <_lru_init>:


static int
_lru_init(void)
{
c0110d69:	55                   	push   %ebp
c0110d6a:	89 e5                	mov    %esp,%ebp
    return 0;
c0110d6c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110d71:	5d                   	pop    %ebp
c0110d72:	c3                   	ret    

c0110d73 <_lru_set_unswappable>:

static int
_lru_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0110d73:	55                   	push   %ebp
c0110d74:	89 e5                	mov    %esp,%ebp
    return 0;
c0110d76:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110d7b:	5d                   	pop    %ebp
c0110d7c:	c3                   	ret    

c0110d7d <_lru_tick_event>:

static int
_lru_tick_event(struct mm_struct *mm)
{ return 0; }
c0110d7d:	55                   	push   %ebp
c0110d7e:	89 e5                	mov    %esp,%ebp
c0110d80:	b8 00 00 00 00       	mov    $0x0,%eax
c0110d85:	5d                   	pop    %ebp
c0110d86:	c3                   	ret    

c0110d87 <mm_count>:
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
bool copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn);

static inline int
mm_count(struct mm_struct *mm) {
c0110d87:	55                   	push   %ebp
c0110d88:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0110d8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d8d:	8b 40 18             	mov    0x18(%eax),%eax
}
c0110d90:	5d                   	pop    %ebp
c0110d91:	c3                   	ret    

c0110d92 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0110d92:	55                   	push   %ebp
c0110d93:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0110d95:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d98:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110d9b:	89 50 18             	mov    %edx,0x18(%eax)
}
c0110d9e:	5d                   	pop    %ebp
c0110d9f:	c3                   	ret    

c0110da0 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0110da0:	55                   	push   %ebp
c0110da1:	89 e5                	mov    %esp,%ebp
c0110da3:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0110da6:	8b 45 08             	mov    0x8(%ebp),%eax
c0110da9:	c1 e8 0c             	shr    $0xc,%eax
c0110dac:	89 c2                	mov    %eax,%edx
c0110dae:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c0110db3:	39 c2                	cmp    %eax,%edx
c0110db5:	72 1c                	jb     c0110dd3 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0110db7:	c7 44 24 08 a4 57 12 	movl   $0xc01257a4,0x8(%esp)
c0110dbe:	c0 
c0110dbf:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0110dc6:	00 
c0110dc7:	c7 04 24 c3 57 12 c0 	movl   $0xc01257c3,(%esp)
c0110dce:	e8 43 04 ff ff       	call   c0101216 <__panic>
    }
    return &pages[PPN(pa)];
c0110dd3:	8b 0d 6c 11 17 c0    	mov    0xc017116c,%ecx
c0110dd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ddc:	c1 e8 0c             	shr    $0xc,%eax
c0110ddf:	89 c2                	mov    %eax,%edx
c0110de1:	89 d0                	mov    %edx,%eax
c0110de3:	c1 e0 03             	shl    $0x3,%eax
c0110de6:	01 d0                	add    %edx,%eax
c0110de8:	c1 e0 02             	shl    $0x2,%eax
c0110deb:	01 c8                	add    %ecx,%eax
}
c0110ded:	c9                   	leave  
c0110dee:	c3                   	ret    

c0110def <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0110def:	55                   	push   %ebp
c0110df0:	89 e5                	mov    %esp,%ebp
c0110df2:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0110df5:	8b 45 08             	mov    0x8(%ebp),%eax
c0110df8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0110dfd:	89 04 24             	mov    %eax,(%esp)
c0110e00:	e8 9b ff ff ff       	call   c0110da0 <pa2page>
}
c0110e05:	c9                   	leave  
c0110e06:	c3                   	ret    

c0110e07 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0110e07:	55                   	push   %ebp
c0110e08:	89 e5                	mov    %esp,%ebp
c0110e0a:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0110e0d:	c7 04 24 34 00 00 00 	movl   $0x34,(%esp)
c0110e14:	e8 97 9c ff ff       	call   c010aab0 <kmalloc>
c0110e19:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0110e1c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110e20:	0f 84 8b 00 00 00    	je     c0110eb1 <mm_create+0xaa>
        list_init(&(mm->mmap_list));
c0110e26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e29:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0110e2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110e2f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110e32:	89 50 04             	mov    %edx,0x4(%eax)
c0110e35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110e38:	8b 50 04             	mov    0x4(%eax),%edx
c0110e3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110e3e:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0110e40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e43:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0110e4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e4d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0110e54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e57:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        mm->max_map = 10; //由于物理页的
c0110e5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e61:	c7 40 30 0a 00 00 00 	movl   $0xa,0x30(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0110e68:	a1 4c e0 16 c0       	mov    0xc016e04c,%eax
c0110e6d:	85 c0                	test   %eax,%eax
c0110e6f:	74 0d                	je     c0110e7e <mm_create+0x77>
c0110e71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e74:	89 04 24             	mov    %eax,(%esp)
c0110e77:	e8 89 d3 ff ff       	call   c010e205 <swap_init_mm>
c0110e7c:	eb 0a                	jmp    c0110e88 <mm_create+0x81>
        else mm->sm_priv = NULL;
c0110e7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e81:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0110e88:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0110e8f:	00 
c0110e90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e93:	89 04 24             	mov    %eax,(%esp)
c0110e96:	e8 f7 fe ff ff       	call   c0110d92 <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c0110e9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e9e:	83 c0 1c             	add    $0x1c,%eax
c0110ea1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0110ea8:	00 
c0110ea9:	89 04 24             	mov    %eax,(%esp)
c0110eac:	e8 9d 1b 00 00       	call   c0112a4e <sem_init>
    }    
    return mm;
c0110eb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110eb4:	c9                   	leave  
c0110eb5:	c3                   	ret    

c0110eb6 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0110eb6:	55                   	push   %ebp
c0110eb7:	89 e5                	mov    %esp,%ebp
c0110eb9:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0110ebc:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
c0110ec3:	e8 e8 9b ff ff       	call   c010aab0 <kmalloc>
c0110ec8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0110ecb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110ecf:	74 25                	je     c0110ef6 <vma_create+0x40>
        vma->vm_start = vm_start;
c0110ed1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ed4:	8b 55 08             	mov    0x8(%ebp),%edx
c0110ed7:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0110eda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110edd:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110ee0:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0110ee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ee6:	8b 55 10             	mov    0x10(%ebp),%edx
c0110ee9:	89 50 0c             	mov    %edx,0xc(%eax)
        vma->last_used_time = 0;
c0110eec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110eef:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    }
    return vma;
c0110ef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110ef9:	c9                   	leave  
c0110efa:	c3                   	ret    

c0110efb <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0110efb:	55                   	push   %ebp
c0110efc:	89 e5                	mov    %esp,%ebp
c0110efe:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0110f01:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0110f08:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0110f0c:	0f 84 a1 00 00 00    	je     c0110fb3 <find_vma+0xb8>
        vma = mm->mmap_cache;
c0110f12:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f15:	8b 40 08             	mov    0x8(%eax),%eax
c0110f18:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0110f1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0110f1f:	74 16                	je     c0110f37 <find_vma+0x3c>
c0110f21:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0110f24:	8b 40 04             	mov    0x4(%eax),%eax
c0110f27:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0110f2a:	77 0b                	ja     c0110f37 <find_vma+0x3c>
c0110f2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0110f2f:	8b 40 08             	mov    0x8(%eax),%eax
c0110f32:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0110f35:	77 61                	ja     c0110f98 <find_vma+0x9d>
                bool found = 0;
c0110f37:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0110f3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110f41:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110f44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110f47:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0110f4a:	eb 28                	jmp    c0110f74 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0110f4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110f4f:	83 e8 14             	sub    $0x14,%eax
c0110f52:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0110f55:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0110f58:	8b 40 04             	mov    0x4(%eax),%eax
c0110f5b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0110f5e:	77 14                	ja     c0110f74 <find_vma+0x79>
c0110f60:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0110f63:	8b 40 08             	mov    0x8(%eax),%eax
c0110f66:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0110f69:	76 09                	jbe    c0110f74 <find_vma+0x79>
                        found = 1;
c0110f6b:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0110f72:	eb 17                	jmp    c0110f8b <find_vma+0x90>
c0110f74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110f77:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0110f7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110f7d:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0110f80:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110f83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110f86:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0110f89:	75 c1                	jne    c0110f4c <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c0110f8b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0110f8f:	75 07                	jne    c0110f98 <find_vma+0x9d>
                    vma = NULL;
c0110f91:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0110f98:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0110f9c:	74 15                	je     c0110fb3 <find_vma+0xb8>
            mm->mmap_cache = vma;
c0110f9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110fa1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0110fa4:	89 50 08             	mov    %edx,0x8(%eax)
            vma->last_used_time = time_now;
c0110fa7:	8b 15 54 e0 16 c0    	mov    0xc016e054,%edx
c0110fad:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0110fb0:	89 50 10             	mov    %edx,0x10(%eax)
        }
    }
    return vma;
c0110fb3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0110fb6:	c9                   	leave  
c0110fb7:	c3                   	ret    

c0110fb8 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0110fb8:	55                   	push   %ebp
c0110fb9:	89 e5                	mov    %esp,%ebp
c0110fbb:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0110fbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0110fc1:	8b 50 04             	mov    0x4(%eax),%edx
c0110fc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0110fc7:	8b 40 08             	mov    0x8(%eax),%eax
c0110fca:	39 c2                	cmp    %eax,%edx
c0110fcc:	72 24                	jb     c0110ff2 <check_vma_overlap+0x3a>
c0110fce:	c7 44 24 0c d1 57 12 	movl   $0xc01257d1,0xc(%esp)
c0110fd5:	c0 
c0110fd6:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c0110fdd:	c0 
c0110fde:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c0110fe5:	00 
c0110fe6:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0110fed:	e8 24 02 ff ff       	call   c0101216 <__panic>
    assert(prev->vm_end <= next->vm_start);
c0110ff2:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ff5:	8b 50 08             	mov    0x8(%eax),%edx
c0110ff8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110ffb:	8b 40 04             	mov    0x4(%eax),%eax
c0110ffe:	39 c2                	cmp    %eax,%edx
c0111000:	76 24                	jbe    c0111026 <check_vma_overlap+0x6e>
c0111002:	c7 44 24 0c 14 58 12 	movl   $0xc0125814,0xc(%esp)
c0111009:	c0 
c011100a:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c0111011:	c0 
c0111012:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0111019:	00 
c011101a:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0111021:	e8 f0 01 ff ff       	call   c0101216 <__panic>
    assert(next->vm_start < next->vm_end);
c0111026:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111029:	8b 50 04             	mov    0x4(%eax),%edx
c011102c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011102f:	8b 40 08             	mov    0x8(%eax),%eax
c0111032:	39 c2                	cmp    %eax,%edx
c0111034:	72 24                	jb     c011105a <check_vma_overlap+0xa2>
c0111036:	c7 44 24 0c 33 58 12 	movl   $0xc0125833,0xc(%esp)
c011103d:	c0 
c011103e:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c0111045:	c0 
c0111046:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
c011104d:	00 
c011104e:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0111055:	e8 bc 01 ff ff       	call   c0101216 <__panic>
}
c011105a:	c9                   	leave  
c011105b:	c3                   	ret    

c011105c <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c011105c:	55                   	push   %ebp
c011105d:	89 e5                	mov    %esp,%ebp
c011105f:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c0111062:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111065:	8b 50 04             	mov    0x4(%eax),%edx
c0111068:	8b 45 0c             	mov    0xc(%ebp),%eax
c011106b:	8b 40 08             	mov    0x8(%eax),%eax
c011106e:	39 c2                	cmp    %eax,%edx
c0111070:	72 24                	jb     c0111096 <insert_vma_struct+0x3a>
c0111072:	c7 44 24 0c 51 58 12 	movl   $0xc0125851,0xc(%esp)
c0111079:	c0 
c011107a:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c0111081:	c0 
c0111082:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c0111089:	00 
c011108a:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0111091:	e8 80 01 ff ff       	call   c0101216 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0111096:	8b 45 08             	mov    0x8(%ebp),%eax
c0111099:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c011109c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011109f:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c01110a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01110a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c01110a8:	eb 21                	jmp    c01110cb <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c01110aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01110ad:	83 e8 14             	sub    $0x14,%eax
c01110b0:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c01110b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01110b6:	8b 50 04             	mov    0x4(%eax),%edx
c01110b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01110bc:	8b 40 04             	mov    0x4(%eax),%eax
c01110bf:	39 c2                	cmp    %eax,%edx
c01110c1:	76 02                	jbe    c01110c5 <insert_vma_struct+0x69>
                break;
c01110c3:	eb 1d                	jmp    c01110e2 <insert_vma_struct+0x86>
            }
            le_prev = le;
c01110c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01110c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01110cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01110ce:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01110d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01110d4:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c01110d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01110da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01110dd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01110e0:	75 c8                	jne    c01110aa <insert_vma_struct+0x4e>
c01110e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01110e5:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01110e8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01110eb:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c01110ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c01110f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01110f4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01110f7:	74 15                	je     c011110e <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c01110f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01110fc:	8d 50 ec             	lea    -0x14(%eax),%edx
c01110ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111102:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111106:	89 14 24             	mov    %edx,(%esp)
c0111109:	e8 aa fe ff ff       	call   c0110fb8 <check_vma_overlap>
    }
    if (le_next != list) {
c011110e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111111:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0111114:	74 15                	je     c011112b <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c0111116:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111119:	83 e8 14             	sub    $0x14,%eax
c011111c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111120:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111123:	89 04 24             	mov    %eax,(%esp)
c0111126:	e8 8d fe ff ff       	call   c0110fb8 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c011112b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011112e:	8b 55 08             	mov    0x8(%ebp),%edx
c0111131:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0111133:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111136:	8d 50 14             	lea    0x14(%eax),%edx
c0111139:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011113c:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011113f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0111142:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111145:	8b 40 04             	mov    0x4(%eax),%eax
c0111148:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c011114b:	89 55 d0             	mov    %edx,-0x30(%ebp)
c011114e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0111151:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0111154:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0111157:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011115a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c011115d:	89 10                	mov    %edx,(%eax)
c011115f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0111162:	8b 10                	mov    (%eax),%edx
c0111164:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0111167:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c011116a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011116d:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0111170:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0111173:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0111176:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0111179:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c011117b:	8b 45 08             	mov    0x8(%ebp),%eax
c011117e:	8b 40 10             	mov    0x10(%eax),%eax
c0111181:	8d 50 01             	lea    0x1(%eax),%edx
c0111184:	8b 45 08             	mov    0x8(%ebp),%eax
c0111187:	89 50 10             	mov    %edx,0x10(%eax)
}
c011118a:	c9                   	leave  
c011118b:	c3                   	ret    

c011118c <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c011118c:	55                   	push   %ebp
c011118d:	89 e5                	mov    %esp,%ebp
c011118f:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c0111192:	8b 45 08             	mov    0x8(%ebp),%eax
c0111195:	89 04 24             	mov    %eax,(%esp)
c0111198:	e8 ea fb ff ff       	call   c0110d87 <mm_count>
c011119d:	85 c0                	test   %eax,%eax
c011119f:	74 24                	je     c01111c5 <mm_destroy+0x39>
c01111a1:	c7 44 24 0c 6d 58 12 	movl   $0xc012586d,0xc(%esp)
c01111a8:	c0 
c01111a9:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c01111b0:	c0 
c01111b1:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c01111b8:	00 
c01111b9:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c01111c0:	e8 51 00 ff ff       	call   c0101216 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c01111c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01111c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c01111cb:	eb 36                	jmp    c0111203 <mm_destroy+0x77>
c01111cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01111d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01111d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01111d6:	8b 40 04             	mov    0x4(%eax),%eax
c01111d9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01111dc:	8b 12                	mov    (%edx),%edx
c01111de:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01111e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01111e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01111e7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01111ea:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01111ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01111f0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01111f3:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c01111f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01111f8:	83 e8 14             	sub    $0x14,%eax
c01111fb:	89 04 24             	mov    %eax,(%esp)
c01111fe:	e8 c8 98 ff ff       	call   c010aacb <kfree>
c0111203:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111206:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0111209:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011120c:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c011120f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111212:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111215:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0111218:	75 b3                	jne    c01111cd <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c011121a:	8b 45 08             	mov    0x8(%ebp),%eax
c011121d:	89 04 24             	mov    %eax,(%esp)
c0111220:	e8 a6 98 ff ff       	call   c010aacb <kfree>
    mm=NULL;
c0111225:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c011122c:	c9                   	leave  
c011122d:	c3                   	ret    

c011122e <mm_map>:

//实现LRU算法的困难在于，这个操作系统没有为每个进程的能使用的物理页框数量做出限制，导致只有在缺页的时候才会去替换
//如果要使用LRU，就要给pra_list_head这个链表的大小做出限制，然后在链表项指向的结构上添加一个属性，标记着最近使用时间
int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c011122e:	55                   	push   %ebp
c011122f:	89 e5                	mov    %esp,%ebp
c0111231:	83 ec 38             	sub    $0x38,%esp
    time_now++;
c0111234:	a1 54 e0 16 c0       	mov    0xc016e054,%eax
c0111239:	83 c0 01             	add    $0x1,%eax
c011123c:	a3 54 e0 16 c0       	mov    %eax,0xc016e054
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0111241:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111244:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111247:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011124a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c011124f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111252:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0111259:	8b 45 10             	mov    0x10(%ebp),%eax
c011125c:	8b 55 0c             	mov    0xc(%ebp),%edx
c011125f:	01 c2                	add    %eax,%edx
c0111261:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111264:	01 d0                	add    %edx,%eax
c0111266:	83 e8 01             	sub    $0x1,%eax
c0111269:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011126c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011126f:	ba 00 00 00 00       	mov    $0x0,%edx
c0111274:	f7 75 e8             	divl   -0x18(%ebp)
c0111277:	89 d0                	mov    %edx,%eax
c0111279:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011127c:	29 c2                	sub    %eax,%edx
c011127e:	89 d0                	mov    %edx,%eax
c0111280:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0111283:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c011128a:	76 11                	jbe    c011129d <mm_map+0x6f>
c011128c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011128f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0111292:	73 09                	jae    c011129d <mm_map+0x6f>
c0111294:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c011129b:	76 0a                	jbe    c01112a7 <mm_map+0x79>
        return -E_INVAL;
c011129d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01112a2:	e9 ae 00 00 00       	jmp    c0111355 <mm_map+0x127>
    }

    assert(mm != NULL);
c01112a7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01112ab:	75 24                	jne    c01112d1 <mm_map+0xa3>
c01112ad:	c7 44 24 0c 7f 58 12 	movl   $0xc012587f,0xc(%esp)
c01112b4:	c0 
c01112b5:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c01112bc:	c0 
c01112bd:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c01112c4:	00 
c01112c5:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c01112cc:	e8 45 ff fe ff       	call   c0101216 <__panic>

    int ret = -E_INVAL;
c01112d1:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c01112d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01112db:	89 44 24 04          	mov    %eax,0x4(%esp)
c01112df:	8b 45 08             	mov    0x8(%ebp),%eax
c01112e2:	89 04 24             	mov    %eax,(%esp)
c01112e5:	e8 11 fc ff ff       	call   c0110efb <find_vma>
c01112ea:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01112ed:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01112f1:	74 0d                	je     c0111300 <mm_map+0xd2>
c01112f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01112f6:	8b 40 04             	mov    0x4(%eax),%eax
c01112f9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01112fc:	73 02                	jae    c0111300 <mm_map+0xd2>
        //如果找到了现成的virtual memory page
        goto out;
c01112fe:	eb 52                	jmp    c0111352 <mm_map+0x124>
    }
    ret = -E_NO_MEM;
c0111300:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0111307:	8b 45 14             	mov    0x14(%ebp),%eax
c011130a:	89 44 24 08          	mov    %eax,0x8(%esp)
c011130e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111311:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111315:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111318:	89 04 24             	mov    %eax,(%esp)
c011131b:	e8 96 fb ff ff       	call   c0110eb6 <vma_create>
c0111320:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111323:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111327:	75 02                	jne    c011132b <mm_map+0xfd>
        goto out;
c0111329:	eb 27                	jmp    c0111352 <mm_map+0x124>
    }
    insert_vma_struct(mm, vma);
c011132b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011132e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111332:	8b 45 08             	mov    0x8(%ebp),%eax
c0111335:	89 04 24             	mov    %eax,(%esp)
c0111338:	e8 1f fd ff ff       	call   c011105c <insert_vma_struct>
    if (vma_store != NULL) {
c011133d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0111341:	74 08                	je     c011134b <mm_map+0x11d>
        *vma_store = vma;
c0111343:	8b 45 18             	mov    0x18(%ebp),%eax
c0111346:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0111349:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c011134b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c0111352:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111355:	c9                   	leave  
c0111356:	c3                   	ret    

c0111357 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0111357:	55                   	push   %ebp
c0111358:	89 e5                	mov    %esp,%ebp
c011135a:	56                   	push   %esi
c011135b:	53                   	push   %ebx
c011135c:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c011135f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0111363:	74 06                	je     c011136b <dup_mmap+0x14>
c0111365:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0111369:	75 24                	jne    c011138f <dup_mmap+0x38>
c011136b:	c7 44 24 0c 8a 58 12 	movl   $0xc012588a,0xc(%esp)
c0111372:	c0 
c0111373:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c011137a:	c0 
c011137b:	c7 44 24 04 c9 00 00 	movl   $0xc9,0x4(%esp)
c0111382:	00 
c0111383:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c011138a:	e8 87 fe fe ff       	call   c0101216 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c011138f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111392:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111395:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111398:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c011139b:	e9 92 00 00 00       	jmp    c0111432 <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c01113a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01113a3:	83 e8 14             	sub    $0x14,%eax
c01113a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c01113a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113ac:	8b 48 0c             	mov    0xc(%eax),%ecx
c01113af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113b2:	8b 50 08             	mov    0x8(%eax),%edx
c01113b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113b8:	8b 40 04             	mov    0x4(%eax),%eax
c01113bb:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01113bf:	89 54 24 04          	mov    %edx,0x4(%esp)
c01113c3:	89 04 24             	mov    %eax,(%esp)
c01113c6:	e8 eb fa ff ff       	call   c0110eb6 <vma_create>
c01113cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c01113ce:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01113d2:	75 07                	jne    c01113db <dup_mmap+0x84>
            return -E_NO_MEM;
c01113d4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01113d9:	eb 76                	jmp    c0111451 <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c01113db:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01113de:	89 44 24 04          	mov    %eax,0x4(%esp)
c01113e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01113e5:	89 04 24             	mov    %eax,(%esp)
c01113e8:	e8 6f fc ff ff       	call   c011105c <insert_vma_struct>

        bool share = 0;
c01113ed:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c01113f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113f7:	8b 58 08             	mov    0x8(%eax),%ebx
c01113fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113fd:	8b 48 04             	mov    0x4(%eax),%ecx
c0111400:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111403:	8b 50 0c             	mov    0xc(%eax),%edx
c0111406:	8b 45 08             	mov    0x8(%ebp),%eax
c0111409:	8b 40 0c             	mov    0xc(%eax),%eax
c011140c:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c011140f:	89 74 24 10          	mov    %esi,0x10(%esp)
c0111413:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0111417:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c011141b:	89 54 24 04          	mov    %edx,0x4(%esp)
c011141f:	89 04 24             	mov    %eax,(%esp)
c0111422:	e8 66 bc ff ff       	call   c010d08d <copy_range>
c0111427:	85 c0                	test   %eax,%eax
c0111429:	74 07                	je     c0111432 <dup_mmap+0xdb>
            return -E_NO_MEM;
c011142b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0111430:	eb 1f                	jmp    c0111451 <dup_mmap+0xfa>
c0111432:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111435:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0111438:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011143b:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c011143d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111440:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111443:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0111446:	0f 85 54 ff ff ff    	jne    c01113a0 <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c011144c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111451:	83 c4 40             	add    $0x40,%esp
c0111454:	5b                   	pop    %ebx
c0111455:	5e                   	pop    %esi
c0111456:	5d                   	pop    %ebp
c0111457:	c3                   	ret    

c0111458 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0111458:	55                   	push   %ebp
c0111459:	89 e5                	mov    %esp,%ebp
c011145b:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c011145e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0111462:	74 0f                	je     c0111473 <exit_mmap+0x1b>
c0111464:	8b 45 08             	mov    0x8(%ebp),%eax
c0111467:	89 04 24             	mov    %eax,(%esp)
c011146a:	e8 18 f9 ff ff       	call   c0110d87 <mm_count>
c011146f:	85 c0                	test   %eax,%eax
c0111471:	74 24                	je     c0111497 <exit_mmap+0x3f>
c0111473:	c7 44 24 0c a8 58 12 	movl   $0xc01258a8,0xc(%esp)
c011147a:	c0 
c011147b:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c0111482:	c0 
c0111483:	c7 44 24 04 df 00 00 	movl   $0xdf,0x4(%esp)
c011148a:	00 
c011148b:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0111492:	e8 7f fd fe ff       	call   c0101216 <__panic>
    pde_t *pgdir = mm->pgdir;
c0111497:	8b 45 08             	mov    0x8(%ebp),%eax
c011149a:	8b 40 0c             	mov    0xc(%eax),%eax
c011149d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c01114a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01114a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01114a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01114a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c01114ac:	eb 28                	jmp    c01114d6 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c01114ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01114b1:	83 e8 14             	sub    $0x14,%eax
c01114b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c01114b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01114ba:	8b 50 08             	mov    0x8(%eax),%edx
c01114bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01114c0:	8b 40 04             	mov    0x4(%eax),%eax
c01114c3:	89 54 24 08          	mov    %edx,0x8(%esp)
c01114c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01114cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01114ce:	89 04 24             	mov    %eax,(%esp)
c01114d1:	e8 bc b9 ff ff       	call   c010ce92 <unmap_range>
c01114d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01114d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01114dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01114df:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c01114e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01114e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01114e8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01114eb:	75 c1                	jne    c01114ae <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01114ed:	eb 28                	jmp    c0111517 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c01114ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01114f2:	83 e8 14             	sub    $0x14,%eax
c01114f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c01114f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01114fb:	8b 50 08             	mov    0x8(%eax),%edx
c01114fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111501:	8b 40 04             	mov    0x4(%eax),%eax
c0111504:	89 54 24 08          	mov    %edx,0x8(%esp)
c0111508:	89 44 24 04          	mov    %eax,0x4(%esp)
c011150c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011150f:	89 04 24             	mov    %eax,(%esp)
c0111512:	e8 6f ba ff ff       	call   c010cf86 <exit_range>
c0111517:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011151a:	89 45 dc             	mov    %eax,-0x24(%ebp)
c011151d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111520:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0111523:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111526:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111529:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c011152c:	75 c1                	jne    c01114ef <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c011152e:	c9                   	leave  
c011152f:	c3                   	ret    

c0111530 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0111530:	55                   	push   %ebp
c0111531:	89 e5                	mov    %esp,%ebp
c0111533:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0111536:	8b 45 10             	mov    0x10(%ebp),%eax
c0111539:	8b 55 18             	mov    0x18(%ebp),%edx
c011153c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0111540:	8b 55 14             	mov    0x14(%ebp),%edx
c0111543:	89 54 24 08          	mov    %edx,0x8(%esp)
c0111547:	89 44 24 04          	mov    %eax,0x4(%esp)
c011154b:	8b 45 08             	mov    0x8(%ebp),%eax
c011154e:	89 04 24             	mov    %eax,(%esp)
c0111551:	e8 d8 09 00 00       	call   c0111f2e <user_mem_check>
c0111556:	85 c0                	test   %eax,%eax
c0111558:	75 07                	jne    c0111561 <copy_from_user+0x31>
        return 0;
c011155a:	b8 00 00 00 00       	mov    $0x0,%eax
c011155f:	eb 1e                	jmp    c011157f <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c0111561:	8b 45 14             	mov    0x14(%ebp),%eax
c0111564:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111568:	8b 45 10             	mov    0x10(%ebp),%eax
c011156b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011156f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111572:	89 04 24             	mov    %eax,(%esp)
c0111575:	e8 67 fc 00 00       	call   c01211e1 <memcpy>
    return 1;
c011157a:	b8 01 00 00 00       	mov    $0x1,%eax
}
c011157f:	c9                   	leave  
c0111580:	c3                   	ret    

c0111581 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0111581:	55                   	push   %ebp
c0111582:	89 e5                	mov    %esp,%ebp
c0111584:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0111587:	8b 45 0c             	mov    0xc(%ebp),%eax
c011158a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0111591:	00 
c0111592:	8b 55 14             	mov    0x14(%ebp),%edx
c0111595:	89 54 24 08          	mov    %edx,0x8(%esp)
c0111599:	89 44 24 04          	mov    %eax,0x4(%esp)
c011159d:	8b 45 08             	mov    0x8(%ebp),%eax
c01115a0:	89 04 24             	mov    %eax,(%esp)
c01115a3:	e8 86 09 00 00       	call   c0111f2e <user_mem_check>
c01115a8:	85 c0                	test   %eax,%eax
c01115aa:	75 07                	jne    c01115b3 <copy_to_user+0x32>
        return 0;
c01115ac:	b8 00 00 00 00       	mov    $0x0,%eax
c01115b1:	eb 1e                	jmp    c01115d1 <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c01115b3:	8b 45 14             	mov    0x14(%ebp),%eax
c01115b6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01115ba:	8b 45 10             	mov    0x10(%ebp),%eax
c01115bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01115c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01115c4:	89 04 24             	mov    %eax,(%esp)
c01115c7:	e8 15 fc 00 00       	call   c01211e1 <memcpy>
    return 1;
c01115cc:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01115d1:	c9                   	leave  
c01115d2:	c3                   	ret    

c01115d3 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c01115d3:	55                   	push   %ebp
c01115d4:	89 e5                	mov    %esp,%ebp
c01115d6:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c01115d9:	e8 02 00 00 00       	call   c01115e0 <check_vmm>
}
c01115de:	c9                   	leave  
c01115df:	c3                   	ret    

c01115e0 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c01115e0:	55                   	push   %ebp
c01115e1:	89 e5                	mov    %esp,%ebp
c01115e3:	83 ec 18             	sub    $0x18,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01115e6:	e8 0f b0 ff ff       	call   c010c5fa <nr_free_pages>
c01115eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c01115ee:	e8 07 00 00 00       	call   c01115fa <check_vma_struct>
    check_pgfault();
c01115f3:	e8 8f 04 00 00       	call   c0111a87 <check_pgfault>

    //assert(nr_free_pages_store == nr_free_pages());

    //cprintf("check_vmm() succeeded.\n");
}
c01115f8:	c9                   	leave  
c01115f9:	c3                   	ret    

c01115fa <check_vma_struct>:

static void
check_vma_struct(void) {
c01115fa:	55                   	push   %ebp
c01115fb:	89 e5                	mov    %esp,%ebp
c01115fd:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0111600:	e8 f5 af ff ff       	call   c010c5fa <nr_free_pages>
c0111605:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0111608:	e8 fa f7 ff ff       	call   c0110e07 <mm_create>
c011160d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0111610:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0111614:	75 24                	jne    c011163a <check_vma_struct+0x40>
c0111616:	c7 44 24 0c 7f 58 12 	movl   $0xc012587f,0xc(%esp)
c011161d:	c0 
c011161e:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c0111625:	c0 
c0111626:	c7 44 24 04 17 01 00 	movl   $0x117,0x4(%esp)
c011162d:	00 
c011162e:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0111635:	e8 dc fb fe ff       	call   c0101216 <__panic>

    int step1 = 10, step2 = step1 * 10;
c011163a:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0111641:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0111644:	89 d0                	mov    %edx,%eax
c0111646:	c1 e0 02             	shl    $0x2,%eax
c0111649:	01 d0                	add    %edx,%eax
c011164b:	01 c0                	add    %eax,%eax
c011164d:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0111650:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111653:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111656:	eb 70                	jmp    c01116c8 <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0111658:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011165b:	89 d0                	mov    %edx,%eax
c011165d:	c1 e0 02             	shl    $0x2,%eax
c0111660:	01 d0                	add    %edx,%eax
c0111662:	83 c0 02             	add    $0x2,%eax
c0111665:	89 c1                	mov    %eax,%ecx
c0111667:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011166a:	89 d0                	mov    %edx,%eax
c011166c:	c1 e0 02             	shl    $0x2,%eax
c011166f:	01 d0                	add    %edx,%eax
c0111671:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111678:	00 
c0111679:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011167d:	89 04 24             	mov    %eax,(%esp)
c0111680:	e8 31 f8 ff ff       	call   c0110eb6 <vma_create>
c0111685:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0111688:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011168c:	75 24                	jne    c01116b2 <check_vma_struct+0xb8>
c011168e:	c7 44 24 0c c8 58 12 	movl   $0xc01258c8,0xc(%esp)
c0111695:	c0 
c0111696:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c011169d:	c0 
c011169e:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c01116a5:	00 
c01116a6:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c01116ad:	e8 64 fb fe ff       	call   c0101216 <__panic>
        insert_vma_struct(mm, vma);
c01116b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01116b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01116b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01116bc:	89 04 24             	mov    %eax,(%esp)
c01116bf:	e8 98 f9 ff ff       	call   c011105c <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c01116c4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01116c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01116cc:	7f 8a                	jg     c0111658 <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c01116ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01116d1:	83 c0 01             	add    $0x1,%eax
c01116d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01116d7:	eb 70                	jmp    c0111749 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c01116d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01116dc:	89 d0                	mov    %edx,%eax
c01116de:	c1 e0 02             	shl    $0x2,%eax
c01116e1:	01 d0                	add    %edx,%eax
c01116e3:	83 c0 02             	add    $0x2,%eax
c01116e6:	89 c1                	mov    %eax,%ecx
c01116e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01116eb:	89 d0                	mov    %edx,%eax
c01116ed:	c1 e0 02             	shl    $0x2,%eax
c01116f0:	01 d0                	add    %edx,%eax
c01116f2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01116f9:	00 
c01116fa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01116fe:	89 04 24             	mov    %eax,(%esp)
c0111701:	e8 b0 f7 ff ff       	call   c0110eb6 <vma_create>
c0111706:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0111709:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c011170d:	75 24                	jne    c0111733 <check_vma_struct+0x139>
c011170f:	c7 44 24 0c c8 58 12 	movl   $0xc01258c8,0xc(%esp)
c0111716:	c0 
c0111717:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c011171e:	c0 
c011171f:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0111726:	00 
c0111727:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c011172e:	e8 e3 fa fe ff       	call   c0101216 <__panic>
        insert_vma_struct(mm, vma);
c0111733:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111736:	89 44 24 04          	mov    %eax,0x4(%esp)
c011173a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011173d:	89 04 24             	mov    %eax,(%esp)
c0111740:	e8 17 f9 ff ff       	call   c011105c <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0111745:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111749:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011174c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c011174f:	7e 88                	jle    c01116d9 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0111751:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111754:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0111757:	8b 45 b8             	mov    -0x48(%ebp),%eax
c011175a:	8b 40 04             	mov    0x4(%eax),%eax
c011175d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0111760:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0111767:	e9 97 00 00 00       	jmp    c0111803 <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c011176c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011176f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0111772:	75 24                	jne    c0111798 <check_vma_struct+0x19e>
c0111774:	c7 44 24 0c d4 58 12 	movl   $0xc01258d4,0xc(%esp)
c011177b:	c0 
c011177c:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c0111783:	c0 
c0111784:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
c011178b:	00 
c011178c:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0111793:	e8 7e fa fe ff       	call   c0101216 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0111798:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011179b:	83 e8 14             	sub    $0x14,%eax
c011179e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c01117a1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01117a4:	8b 48 04             	mov    0x4(%eax),%ecx
c01117a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01117aa:	89 d0                	mov    %edx,%eax
c01117ac:	c1 e0 02             	shl    $0x2,%eax
c01117af:	01 d0                	add    %edx,%eax
c01117b1:	39 c1                	cmp    %eax,%ecx
c01117b3:	75 17                	jne    c01117cc <check_vma_struct+0x1d2>
c01117b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01117b8:	8b 48 08             	mov    0x8(%eax),%ecx
c01117bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01117be:	89 d0                	mov    %edx,%eax
c01117c0:	c1 e0 02             	shl    $0x2,%eax
c01117c3:	01 d0                	add    %edx,%eax
c01117c5:	83 c0 02             	add    $0x2,%eax
c01117c8:	39 c1                	cmp    %eax,%ecx
c01117ca:	74 24                	je     c01117f0 <check_vma_struct+0x1f6>
c01117cc:	c7 44 24 0c ec 58 12 	movl   $0xc01258ec,0xc(%esp)
c01117d3:	c0 
c01117d4:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c01117db:	c0 
c01117dc:	c7 44 24 04 2d 01 00 	movl   $0x12d,0x4(%esp)
c01117e3:	00 
c01117e4:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c01117eb:	e8 26 fa fe ff       	call   c0101216 <__panic>
c01117f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01117f3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c01117f6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01117f9:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c01117fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c01117ff:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111803:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111806:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0111809:	0f 8e 5d ff ff ff    	jle    c011176c <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c011180f:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0111816:	e9 cd 01 00 00       	jmp    c01119e8 <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c011181b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011181e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111822:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111825:	89 04 24             	mov    %eax,(%esp)
c0111828:	e8 ce f6 ff ff       	call   c0110efb <find_vma>
c011182d:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c0111830:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0111834:	75 24                	jne    c011185a <check_vma_struct+0x260>
c0111836:	c7 44 24 0c 21 59 12 	movl   $0xc0125921,0xc(%esp)
c011183d:	c0 
c011183e:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c0111845:	c0 
c0111846:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c011184d:	00 
c011184e:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0111855:	e8 bc f9 fe ff       	call   c0101216 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c011185a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011185d:	83 c0 01             	add    $0x1,%eax
c0111860:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111864:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111867:	89 04 24             	mov    %eax,(%esp)
c011186a:	e8 8c f6 ff ff       	call   c0110efb <find_vma>
c011186f:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c0111872:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0111876:	75 24                	jne    c011189c <check_vma_struct+0x2a2>
c0111878:	c7 44 24 0c 2e 59 12 	movl   $0xc012592e,0xc(%esp)
c011187f:	c0 
c0111880:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c0111887:	c0 
c0111888:	c7 44 24 04 35 01 00 	movl   $0x135,0x4(%esp)
c011188f:	00 
c0111890:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0111897:	e8 7a f9 fe ff       	call   c0101216 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c011189c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011189f:	83 c0 02             	add    $0x2,%eax
c01118a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01118a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01118a9:	89 04 24             	mov    %eax,(%esp)
c01118ac:	e8 4a f6 ff ff       	call   c0110efb <find_vma>
c01118b1:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c01118b4:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01118b8:	74 24                	je     c01118de <check_vma_struct+0x2e4>
c01118ba:	c7 44 24 0c 3b 59 12 	movl   $0xc012593b,0xc(%esp)
c01118c1:	c0 
c01118c2:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c01118c9:	c0 
c01118ca:	c7 44 24 04 37 01 00 	movl   $0x137,0x4(%esp)
c01118d1:	00 
c01118d2:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c01118d9:	e8 38 f9 fe ff       	call   c0101216 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c01118de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01118e1:	83 c0 03             	add    $0x3,%eax
c01118e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01118e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01118eb:	89 04 24             	mov    %eax,(%esp)
c01118ee:	e8 08 f6 ff ff       	call   c0110efb <find_vma>
c01118f3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c01118f6:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c01118fa:	74 24                	je     c0111920 <check_vma_struct+0x326>
c01118fc:	c7 44 24 0c 48 59 12 	movl   $0xc0125948,0xc(%esp)
c0111903:	c0 
c0111904:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c011190b:	c0 
c011190c:	c7 44 24 04 39 01 00 	movl   $0x139,0x4(%esp)
c0111913:	00 
c0111914:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c011191b:	e8 f6 f8 fe ff       	call   c0101216 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0111920:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111923:	83 c0 04             	add    $0x4,%eax
c0111926:	89 44 24 04          	mov    %eax,0x4(%esp)
c011192a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011192d:	89 04 24             	mov    %eax,(%esp)
c0111930:	e8 c6 f5 ff ff       	call   c0110efb <find_vma>
c0111935:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0111938:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c011193c:	74 24                	je     c0111962 <check_vma_struct+0x368>
c011193e:	c7 44 24 0c 55 59 12 	movl   $0xc0125955,0xc(%esp)
c0111945:	c0 
c0111946:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c011194d:	c0 
c011194e:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c0111955:	00 
c0111956:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c011195d:	e8 b4 f8 fe ff       	call   c0101216 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0111962:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0111965:	8b 50 04             	mov    0x4(%eax),%edx
c0111968:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011196b:	39 c2                	cmp    %eax,%edx
c011196d:	75 10                	jne    c011197f <check_vma_struct+0x385>
c011196f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0111972:	8b 50 08             	mov    0x8(%eax),%edx
c0111975:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111978:	83 c0 02             	add    $0x2,%eax
c011197b:	39 c2                	cmp    %eax,%edx
c011197d:	74 24                	je     c01119a3 <check_vma_struct+0x3a9>
c011197f:	c7 44 24 0c 64 59 12 	movl   $0xc0125964,0xc(%esp)
c0111986:	c0 
c0111987:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c011198e:	c0 
c011198f:	c7 44 24 04 3d 01 00 	movl   $0x13d,0x4(%esp)
c0111996:	00 
c0111997:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c011199e:	e8 73 f8 fe ff       	call   c0101216 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c01119a3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01119a6:	8b 50 04             	mov    0x4(%eax),%edx
c01119a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01119ac:	39 c2                	cmp    %eax,%edx
c01119ae:	75 10                	jne    c01119c0 <check_vma_struct+0x3c6>
c01119b0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01119b3:	8b 50 08             	mov    0x8(%eax),%edx
c01119b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01119b9:	83 c0 02             	add    $0x2,%eax
c01119bc:	39 c2                	cmp    %eax,%edx
c01119be:	74 24                	je     c01119e4 <check_vma_struct+0x3ea>
c01119c0:	c7 44 24 0c 94 59 12 	movl   $0xc0125994,0xc(%esp)
c01119c7:	c0 
c01119c8:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c01119cf:	c0 
c01119d0:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c01119d7:	00 
c01119d8:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c01119df:	e8 32 f8 fe ff       	call   c0101216 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c01119e4:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c01119e8:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01119eb:	89 d0                	mov    %edx,%eax
c01119ed:	c1 e0 02             	shl    $0x2,%eax
c01119f0:	01 d0                	add    %edx,%eax
c01119f2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01119f5:	0f 8d 20 fe ff ff    	jge    c011181b <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c01119fb:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0111a02:	eb 70                	jmp    c0111a74 <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0111a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a07:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111a0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111a0e:	89 04 24             	mov    %eax,(%esp)
c0111a11:	e8 e5 f4 ff ff       	call   c0110efb <find_vma>
c0111a16:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0111a19:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0111a1d:	74 27                	je     c0111a46 <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0111a1f:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0111a22:	8b 50 08             	mov    0x8(%eax),%edx
c0111a25:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0111a28:	8b 40 04             	mov    0x4(%eax),%eax
c0111a2b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0111a2f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111a33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a36:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111a3a:	c7 04 24 c4 59 12 c0 	movl   $0xc01259c4,(%esp)
c0111a41:	e8 ad e9 fe ff       	call   c01003f3 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0111a46:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0111a4a:	74 24                	je     c0111a70 <check_vma_struct+0x476>
c0111a4c:	c7 44 24 0c e9 59 12 	movl   $0xc01259e9,0xc(%esp)
c0111a53:	c0 
c0111a54:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c0111a5b:	c0 
c0111a5c:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c0111a63:	00 
c0111a64:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0111a6b:	e8 a6 f7 fe ff       	call   c0101216 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0111a70:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0111a74:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111a78:	79 8a                	jns    c0111a04 <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0111a7a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111a7d:	89 04 24             	mov    %eax,(%esp)
c0111a80:	e8 07 f7 ff ff       	call   c011118c <mm_destroy>

  //  assert(nr_free_pages_store == nr_free_pages());

    //cprintf("check_vma_struct() succeeded!\n");
}
c0111a85:	c9                   	leave  
c0111a86:	c3                   	ret    

c0111a87 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0111a87:	55                   	push   %ebp
c0111a88:	89 e5                	mov    %esp,%ebp
c0111a8a:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0111a8d:	e8 68 ab ff ff       	call   c010c5fa <nr_free_pages>
c0111a92:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0111a95:	e8 6d f3 ff ff       	call   c0110e07 <mm_create>
c0111a9a:	a3 50 12 17 c0       	mov    %eax,0xc0171250
    assert(check_mm_struct != NULL);
c0111a9f:	a1 50 12 17 c0       	mov    0xc0171250,%eax
c0111aa4:	85 c0                	test   %eax,%eax
c0111aa6:	75 24                	jne    c0111acc <check_pgfault+0x45>
c0111aa8:	c7 44 24 0c fd 59 12 	movl   $0xc01259fd,0xc(%esp)
c0111aaf:	c0 
c0111ab0:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c0111ab7:	c0 
c0111ab8:	c7 44 24 04 58 01 00 	movl   $0x158,0x4(%esp)
c0111abf:	00 
c0111ac0:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0111ac7:	e8 4a f7 fe ff       	call   c0101216 <__panic>

    struct mm_struct *mm = check_mm_struct;
c0111acc:	a1 50 12 17 c0       	mov    0xc0171250,%eax
c0111ad1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0111ad4:	8b 15 00 aa 16 c0    	mov    0xc016aa00,%edx
c0111ada:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111add:	89 50 0c             	mov    %edx,0xc(%eax)
c0111ae0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111ae3:	8b 40 0c             	mov    0xc(%eax),%eax
c0111ae6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0111ae9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111aec:	8b 00                	mov    (%eax),%eax
c0111aee:	85 c0                	test   %eax,%eax
c0111af0:	74 24                	je     c0111b16 <check_pgfault+0x8f>
c0111af2:	c7 44 24 0c 15 5a 12 	movl   $0xc0125a15,0xc(%esp)
c0111af9:	c0 
c0111afa:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c0111b01:	c0 
c0111b02:	c7 44 24 04 5c 01 00 	movl   $0x15c,0x4(%esp)
c0111b09:	00 
c0111b0a:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0111b11:	e8 00 f7 fe ff       	call   c0101216 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0111b16:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0111b1d:	00 
c0111b1e:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0111b25:	00 
c0111b26:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0111b2d:	e8 84 f3 ff ff       	call   c0110eb6 <vma_create>
c0111b32:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0111b35:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0111b39:	75 24                	jne    c0111b5f <check_pgfault+0xd8>
c0111b3b:	c7 44 24 0c c8 58 12 	movl   $0xc01258c8,0xc(%esp)
c0111b42:	c0 
c0111b43:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c0111b4a:	c0 
c0111b4b:	c7 44 24 04 5f 01 00 	movl   $0x15f,0x4(%esp)
c0111b52:	00 
c0111b53:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0111b5a:	e8 b7 f6 fe ff       	call   c0101216 <__panic>

    insert_vma_struct(mm, vma);
c0111b5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111b62:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111b66:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111b69:	89 04 24             	mov    %eax,(%esp)
c0111b6c:	e8 eb f4 ff ff       	call   c011105c <insert_vma_struct>

    uintptr_t addr = 0x100;
c0111b71:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0111b78:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111b7b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111b7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111b82:	89 04 24             	mov    %eax,(%esp)
c0111b85:	e8 71 f3 ff ff       	call   c0110efb <find_vma>
c0111b8a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0111b8d:	74 24                	je     c0111bb3 <check_pgfault+0x12c>
c0111b8f:	c7 44 24 0c 23 5a 12 	movl   $0xc0125a23,0xc(%esp)
c0111b96:	c0 
c0111b97:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c0111b9e:	c0 
c0111b9f:	c7 44 24 04 64 01 00 	movl   $0x164,0x4(%esp)
c0111ba6:	00 
c0111ba7:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0111bae:	e8 63 f6 fe ff       	call   c0101216 <__panic>

    int i, sum = 0;
c0111bb3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0111bba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0111bc1:	eb 17                	jmp    c0111bda <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0111bc3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111bc6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111bc9:	01 d0                	add    %edx,%eax
c0111bcb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111bce:	88 10                	mov    %dl,(%eax)
        sum += i;
c0111bd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111bd3:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0111bd6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111bda:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0111bde:	7e e3                	jle    c0111bc3 <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0111be0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0111be7:	eb 15                	jmp    c0111bfe <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0111be9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111bec:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111bef:	01 d0                	add    %edx,%eax
c0111bf1:	0f b6 00             	movzbl (%eax),%eax
c0111bf4:	0f be c0             	movsbl %al,%eax
c0111bf7:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0111bfa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111bfe:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0111c02:	7e e5                	jle    c0111be9 <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0111c04:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111c08:	74 24                	je     c0111c2e <check_pgfault+0x1a7>
c0111c0a:	c7 44 24 0c 3d 5a 12 	movl   $0xc0125a3d,0xc(%esp)
c0111c11:	c0 
c0111c12:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c0111c19:	c0 
c0111c1a:	c7 44 24 04 6e 01 00 	movl   $0x16e,0x4(%esp)
c0111c21:	00 
c0111c22:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0111c29:	e8 e8 f5 fe ff       	call   c0101216 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0111c2e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111c31:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0111c34:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111c37:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0111c3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111c40:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111c43:	89 04 24             	mov    %eax,(%esp)
c0111c46:	e8 65 b6 ff ff       	call   c010d2b0 <page_remove>
    free_page(pde2page(pgdir[0]));
c0111c4b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111c4e:	8b 00                	mov    (%eax),%eax
c0111c50:	89 04 24             	mov    %eax,(%esp)
c0111c53:	e8 97 f1 ff ff       	call   c0110def <pde2page>
c0111c58:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0111c5f:	00 
c0111c60:	89 04 24             	mov    %eax,(%esp)
c0111c63:	e8 60 a9 ff ff       	call   c010c5c8 <free_pages>
    pgdir[0] = 0;
c0111c68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111c6b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0111c71:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111c74:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0111c7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111c7e:	89 04 24             	mov    %eax,(%esp)
c0111c81:	e8 06 f5 ff ff       	call   c011118c <mm_destroy>
    check_mm_struct = NULL;
c0111c86:	c7 05 50 12 17 c0 00 	movl   $0x0,0xc0171250
c0111c8d:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0111c90:	e8 65 a9 ff ff       	call   c010c5fa <nr_free_pages>
c0111c95:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0111c98:	74 24                	je     c0111cbe <check_pgfault+0x237>
c0111c9a:	c7 44 24 0c 48 5a 12 	movl   $0xc0125a48,0xc(%esp)
c0111ca1:	c0 
c0111ca2:	c7 44 24 08 ef 57 12 	movl   $0xc01257ef,0x8(%esp)
c0111ca9:	c0 
c0111caa:	c7 44 24 04 78 01 00 	movl   $0x178,0x4(%esp)
c0111cb1:	00 
c0111cb2:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0111cb9:	e8 58 f5 fe ff       	call   c0101216 <__panic>

    //cprintf("check_pgfault() succeeded!\n");
}
c0111cbe:	c9                   	leave  
c0111cbf:	c3                   	ret    

c0111cc0 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0111cc0:	55                   	push   %ebp
c0111cc1:	89 e5                	mov    %esp,%ebp
c0111cc3:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0111cc6:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0111ccd:	8b 45 10             	mov    0x10(%ebp),%eax
c0111cd0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111cd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0111cd7:	89 04 24             	mov    %eax,(%esp)
c0111cda:	e8 1c f2 ff ff       	call   c0110efb <find_vma>
c0111cdf:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0111ce2:	a1 58 e0 16 c0       	mov    0xc016e058,%eax
c0111ce7:	83 c0 01             	add    $0x1,%eax
c0111cea:	a3 58 e0 16 c0       	mov    %eax,0xc016e058
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0111cef:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111cf3:	74 0b                	je     c0111d00 <do_pgfault+0x40>
c0111cf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111cf8:	8b 40 04             	mov    0x4(%eax),%eax
c0111cfb:	3b 45 10             	cmp    0x10(%ebp),%eax
c0111cfe:	76 2f                	jbe    c0111d2f <do_pgfault+0x6f>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0111d00:	8b 45 10             	mov    0x10(%ebp),%eax
c0111d03:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111d07:	c7 04 24 70 5a 12 c0 	movl   $0xc0125a70,(%esp)
c0111d0e:	e8 e0 e6 fe ff       	call   c01003f3 <cprintf>
        if(vma == NULL){
c0111d13:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111d17:	75 11                	jne    c0111d2a <do_pgfault+0x6a>
            cprintf("because null!\n");
c0111d19:	c7 04 24 a0 5a 12 c0 	movl   $0xc0125aa0,(%esp)
c0111d20:	e8 ce e6 fe ff       	call   c01003f3 <cprintf>
        }
        goto failed;
c0111d25:	e9 ff 01 00 00       	jmp    c0111f29 <do_pgfault+0x269>
c0111d2a:	e9 fa 01 00 00       	jmp    c0111f29 <do_pgfault+0x269>
    }
    //check the error_code
    switch (error_code & 3) {
c0111d2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111d32:	83 e0 03             	and    $0x3,%eax
c0111d35:	85 c0                	test   %eax,%eax
c0111d37:	74 36                	je     c0111d6f <do_pgfault+0xaf>
c0111d39:	83 f8 01             	cmp    $0x1,%eax
c0111d3c:	74 20                	je     c0111d5e <do_pgfault+0x9e>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0111d3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111d41:	8b 40 0c             	mov    0xc(%eax),%eax
c0111d44:	83 e0 02             	and    $0x2,%eax
c0111d47:	85 c0                	test   %eax,%eax
c0111d49:	75 11                	jne    c0111d5c <do_pgfault+0x9c>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0111d4b:	c7 04 24 b0 5a 12 c0 	movl   $0xc0125ab0,(%esp)
c0111d52:	e8 9c e6 fe ff       	call   c01003f3 <cprintf>
            goto failed;
c0111d57:	e9 cd 01 00 00       	jmp    c0111f29 <do_pgfault+0x269>
        }
        break;
c0111d5c:	eb 2f                	jmp    c0111d8d <do_pgfault+0xcd>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0111d5e:	c7 04 24 10 5b 12 c0 	movl   $0xc0125b10,(%esp)
c0111d65:	e8 89 e6 fe ff       	call   c01003f3 <cprintf>
        goto failed;
c0111d6a:	e9 ba 01 00 00       	jmp    c0111f29 <do_pgfault+0x269>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0111d6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111d72:	8b 40 0c             	mov    0xc(%eax),%eax
c0111d75:	83 e0 05             	and    $0x5,%eax
c0111d78:	85 c0                	test   %eax,%eax
c0111d7a:	75 11                	jne    c0111d8d <do_pgfault+0xcd>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0111d7c:	c7 04 24 48 5b 12 c0 	movl   $0xc0125b48,(%esp)
c0111d83:	e8 6b e6 fe ff       	call   c01003f3 <cprintf>
            goto failed;
c0111d88:	e9 9c 01 00 00       	jmp    c0111f29 <do_pgfault+0x269>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0111d8d:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0111d94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111d97:	8b 40 0c             	mov    0xc(%eax),%eax
c0111d9a:	83 e0 02             	and    $0x2,%eax
c0111d9d:	85 c0                	test   %eax,%eax
c0111d9f:	74 04                	je     c0111da5 <do_pgfault+0xe5>
        perm |= PTE_W;
c0111da1:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0111da5:	8b 45 10             	mov    0x10(%ebp),%eax
c0111da8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111dab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111dae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0111db3:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0111db6:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0111dbd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        }
   }
#endif
    // try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    // (notice the 3th parameter '1')
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c0111dc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0111dc7:	8b 40 0c             	mov    0xc(%eax),%eax
c0111dca:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0111dd1:	00 
c0111dd2:	8b 55 10             	mov    0x10(%ebp),%edx
c0111dd5:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111dd9:	89 04 24             	mov    %eax,(%esp)
c0111ddc:	e8 bf ae ff ff       	call   c010cca0 <get_pte>
c0111de1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111de4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0111de8:	75 11                	jne    c0111dfb <do_pgfault+0x13b>
        cprintf("get_pte in do_pgfault failed\n");
c0111dea:	c7 04 24 ab 5b 12 c0 	movl   $0xc0125bab,(%esp)
c0111df1:	e8 fd e5 fe ff       	call   c01003f3 <cprintf>
        goto failed;
c0111df6:	e9 2e 01 00 00       	jmp    c0111f29 <do_pgfault+0x269>
    }
    
    if (*ptep == 0) { // if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
c0111dfb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111dfe:	8b 00                	mov    (%eax),%eax
c0111e00:	85 c0                	test   %eax,%eax
c0111e02:	75 35                	jne    c0111e39 <do_pgfault+0x179>
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c0111e04:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e07:	8b 40 0c             	mov    0xc(%eax),%eax
c0111e0a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111e0d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0111e11:	8b 55 10             	mov    0x10(%ebp),%edx
c0111e14:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111e18:	89 04 24             	mov    %eax,(%esp)
c0111e1b:	e8 ea b5 ff ff       	call   c010d40a <pgdir_alloc_page>
c0111e20:	85 c0                	test   %eax,%eax
c0111e22:	0f 85 fa 00 00 00    	jne    c0111f22 <do_pgfault+0x262>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c0111e28:	c7 04 24 cc 5b 12 c0 	movl   $0xc0125bcc,(%esp)
c0111e2f:	e8 bf e5 fe ff       	call   c01003f3 <cprintf>
            goto failed;
c0111e34:	e9 f0 00 00 00       	jmp    c0111f29 <do_pgfault+0x269>
        }
    }
    else {
        struct Page *page=NULL;
c0111e39:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        cprintf("do pgfault: ptep %x, pte %x\n",ptep, *ptep);
c0111e40:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111e43:	8b 00                	mov    (%eax),%eax
c0111e45:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111e49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111e4c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111e50:	c7 04 24 f3 5b 12 c0 	movl   $0xc0125bf3,(%esp)
c0111e57:	e8 97 e5 fe ff       	call   c01003f3 <cprintf>
        if (*ptep & PTE_P) {
c0111e5c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111e5f:	8b 00                	mov    (%eax),%eax
c0111e61:	83 e0 01             	and    $0x1,%eax
c0111e64:	85 c0                	test   %eax,%eax
c0111e66:	74 1c                	je     c0111e84 <do_pgfault+0x1c4>
            //if process write to this existed readonly page (PTE_P means existed), then should be here now.
            //we can implement the delayed memory space copy for fork child process (AKA copy on write, COW).
            //we didn't implement now, we will do it in future.
            panic("error write a non-writable pte");
c0111e68:	c7 44 24 08 10 5c 12 	movl   $0xc0125c10,0x8(%esp)
c0111e6f:	c0 
c0111e70:	c7 44 24 04 14 02 00 	movl   $0x214,0x4(%esp)
c0111e77:	00 
c0111e78:	c7 04 24 04 58 12 c0 	movl   $0xc0125804,(%esp)
c0111e7f:	e8 92 f3 fe ff       	call   c0101216 <__panic>
            //page = pte2page(*ptep);
        } else{
           // if this pte is a swap entry, then load data from disk to a page with phy addr
           // and call page_insert to map the phy addr with logical addr
           if(swap_init_ok) {               
c0111e84:	a1 4c e0 16 c0       	mov    0xc016e04c,%eax
c0111e89:	85 c0                	test   %eax,%eax
c0111e8b:	74 30                	je     c0111ebd <do_pgfault+0x1fd>
               if ((ret = swap_in(mm, addr, &page)) != 0) {
c0111e8d:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0111e90:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111e94:	8b 45 10             	mov    0x10(%ebp),%eax
c0111e97:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111e9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e9e:	89 04 24             	mov    %eax,(%esp)
c0111ea1:	e8 58 c5 ff ff       	call   c010e3fe <swap_in>
c0111ea6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111ea9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111ead:	74 26                	je     c0111ed5 <do_pgfault+0x215>
                   cprintf("swap_in in do_pgfault failed\n");
c0111eaf:	c7 04 24 2f 5c 12 c0 	movl   $0xc0125c2f,(%esp)
c0111eb6:	e8 38 e5 fe ff       	call   c01003f3 <cprintf>
                   goto failed;
c0111ebb:	eb 6c                	jmp    c0111f29 <do_pgfault+0x269>
               }    

           }  
           else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0111ebd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111ec0:	8b 00                	mov    (%eax),%eax
c0111ec2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111ec6:	c7 04 24 50 5c 12 c0 	movl   $0xc0125c50,(%esp)
c0111ecd:	e8 21 e5 fe ff       	call   c01003f3 <cprintf>
            goto failed;
c0111ed2:	90                   	nop
c0111ed3:	eb 54                	jmp    c0111f29 <do_pgfault+0x269>
           }
       } 
       page_insert(mm->pgdir, page, addr, perm);
c0111ed5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0111ed8:	8b 45 08             	mov    0x8(%ebp),%eax
c0111edb:	8b 40 0c             	mov    0xc(%eax),%eax
c0111ede:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0111ee1:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0111ee5:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0111ee8:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0111eec:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111ef0:	89 04 24             	mov    %eax,(%esp)
c0111ef3:	e8 fc b3 ff ff       	call   c010d2f4 <page_insert>
       swap_map_swappable(mm, addr, page, 1);
c0111ef8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111efb:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0111f02:	00 
c0111f03:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111f07:	8b 45 10             	mov    0x10(%ebp),%eax
c0111f0a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111f0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f11:	89 04 24             	mov    %eax,(%esp)
c0111f14:	e8 1c c3 ff ff       	call   c010e235 <swap_map_swappable>
       page->pra_vaddr = addr;
c0111f19:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111f1c:	8b 55 10             	mov    0x10(%ebp),%edx
c0111f1f:	89 50 20             	mov    %edx,0x20(%eax)
   }
   ret = 0;
c0111f22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0111f29:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111f2c:	c9                   	leave  
c0111f2d:	c3                   	ret    

c0111f2e <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0111f2e:	55                   	push   %ebp
c0111f2f:	89 e5                	mov    %esp,%ebp
c0111f31:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0111f34:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0111f38:	0f 84 e0 00 00 00    	je     c011201e <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c0111f3e:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0111f45:	76 1c                	jbe    c0111f63 <user_mem_check+0x35>
c0111f47:	8b 45 10             	mov    0x10(%ebp),%eax
c0111f4a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111f4d:	01 d0                	add    %edx,%eax
c0111f4f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0111f52:	76 0f                	jbe    c0111f63 <user_mem_check+0x35>
c0111f54:	8b 45 10             	mov    0x10(%ebp),%eax
c0111f57:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111f5a:	01 d0                	add    %edx,%eax
c0111f5c:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0111f61:	76 0a                	jbe    c0111f6d <user_mem_check+0x3f>
            return 0;
c0111f63:	b8 00 00 00 00       	mov    $0x0,%eax
c0111f68:	e9 e2 00 00 00       	jmp    c011204f <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0111f6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111f70:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0111f73:	8b 45 10             	mov    0x10(%ebp),%eax
c0111f76:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111f79:	01 d0                	add    %edx,%eax
c0111f7b:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c0111f7e:	e9 88 00 00 00       	jmp    c011200b <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0111f83:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0111f86:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111f8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f8d:	89 04 24             	mov    %eax,(%esp)
c0111f90:	e8 66 ef ff ff       	call   c0110efb <find_vma>
c0111f95:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111f98:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111f9c:	74 0b                	je     c0111fa9 <user_mem_check+0x7b>
c0111f9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111fa1:	8b 40 04             	mov    0x4(%eax),%eax
c0111fa4:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0111fa7:	76 0a                	jbe    c0111fb3 <user_mem_check+0x85>
                return 0;
c0111fa9:	b8 00 00 00 00       	mov    $0x0,%eax
c0111fae:	e9 9c 00 00 00       	jmp    c011204f <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0111fb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111fb6:	8b 50 0c             	mov    0xc(%eax),%edx
c0111fb9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111fbd:	74 07                	je     c0111fc6 <user_mem_check+0x98>
c0111fbf:	b8 02 00 00 00       	mov    $0x2,%eax
c0111fc4:	eb 05                	jmp    c0111fcb <user_mem_check+0x9d>
c0111fc6:	b8 01 00 00 00       	mov    $0x1,%eax
c0111fcb:	21 d0                	and    %edx,%eax
c0111fcd:	85 c0                	test   %eax,%eax
c0111fcf:	75 07                	jne    c0111fd8 <user_mem_check+0xaa>
                return 0;
c0111fd1:	b8 00 00 00 00       	mov    $0x0,%eax
c0111fd6:	eb 77                	jmp    c011204f <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0111fd8:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111fdc:	74 24                	je     c0112002 <user_mem_check+0xd4>
c0111fde:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111fe1:	8b 40 0c             	mov    0xc(%eax),%eax
c0111fe4:	83 e0 08             	and    $0x8,%eax
c0111fe7:	85 c0                	test   %eax,%eax
c0111fe9:	74 17                	je     c0112002 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0111feb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111fee:	8b 40 04             	mov    0x4(%eax),%eax
c0111ff1:	05 00 10 00 00       	add    $0x1000,%eax
c0111ff6:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0111ff9:	76 07                	jbe    c0112002 <user_mem_check+0xd4>
                    return 0;
c0111ffb:	b8 00 00 00 00       	mov    $0x0,%eax
c0112000:	eb 4d                	jmp    c011204f <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0112002:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112005:	8b 40 08             	mov    0x8(%eax),%eax
c0112008:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c011200b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011200e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0112011:	0f 82 6c ff ff ff    	jb     c0111f83 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0112017:	b8 01 00 00 00       	mov    $0x1,%eax
c011201c:	eb 31                	jmp    c011204f <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c011201e:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0112025:	76 23                	jbe    c011204a <user_mem_check+0x11c>
c0112027:	8b 45 10             	mov    0x10(%ebp),%eax
c011202a:	8b 55 0c             	mov    0xc(%ebp),%edx
c011202d:	01 d0                	add    %edx,%eax
c011202f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0112032:	76 16                	jbe    c011204a <user_mem_check+0x11c>
c0112034:	8b 45 10             	mov    0x10(%ebp),%eax
c0112037:	8b 55 0c             	mov    0xc(%ebp),%edx
c011203a:	01 d0                	add    %edx,%eax
c011203c:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0112041:	77 07                	ja     c011204a <user_mem_check+0x11c>
c0112043:	b8 01 00 00 00       	mov    $0x1,%eax
c0112048:	eb 05                	jmp    c011204f <user_mem_check+0x121>
c011204a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011204f:	c9                   	leave  
c0112050:	c3                   	ret    

c0112051 <copy_string>:

bool
copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn) {
c0112051:	55                   	push   %ebp
c0112052:	89 e5                	mov    %esp,%ebp
c0112054:	83 ec 28             	sub    $0x28,%esp
    size_t alen, part = ROUNDDOWN((uintptr_t)src + PGSIZE, PGSIZE) - (uintptr_t)src;
c0112057:	8b 45 10             	mov    0x10(%ebp),%eax
c011205a:	05 00 10 00 00       	add    $0x1000,%eax
c011205f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112062:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112065:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c011206a:	89 c2                	mov    %eax,%edx
c011206c:	8b 45 10             	mov    0x10(%ebp),%eax
c011206f:	29 c2                	sub    %eax,%edx
c0112071:	89 d0                	mov    %edx,%eax
c0112073:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (1) {
        if (part > maxn) {
c0112076:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112079:	3b 45 14             	cmp    0x14(%ebp),%eax
c011207c:	76 06                	jbe    c0112084 <copy_string+0x33>
            part = maxn;
c011207e:	8b 45 14             	mov    0x14(%ebp),%eax
c0112081:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        if (!user_mem_check(mm, (uintptr_t)src, part, 0)) {
c0112084:	8b 45 10             	mov    0x10(%ebp),%eax
c0112087:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c011208e:	00 
c011208f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0112092:	89 54 24 08          	mov    %edx,0x8(%esp)
c0112096:	89 44 24 04          	mov    %eax,0x4(%esp)
c011209a:	8b 45 08             	mov    0x8(%ebp),%eax
c011209d:	89 04 24             	mov    %eax,(%esp)
c01120a0:	e8 89 fe ff ff       	call   c0111f2e <user_mem_check>
c01120a5:	85 c0                	test   %eax,%eax
c01120a7:	75 0a                	jne    c01120b3 <copy_string+0x62>
            return 0;
c01120a9:	b8 00 00 00 00       	mov    $0x0,%eax
c01120ae:	e9 86 00 00 00       	jmp    c0112139 <copy_string+0xe8>
        }
        if ((alen = strnlen(src, part)) < part) {
c01120b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01120b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01120ba:	8b 45 10             	mov    0x10(%ebp),%eax
c01120bd:	89 04 24             	mov    %eax,(%esp)
c01120c0:	e8 0c ed 00 00       	call   c0120dd1 <strnlen>
c01120c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01120c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01120cb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01120ce:	73 23                	jae    c01120f3 <copy_string+0xa2>
            memcpy(dst, src, alen + 1);
c01120d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01120d3:	83 c0 01             	add    $0x1,%eax
c01120d6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01120da:	8b 45 10             	mov    0x10(%ebp),%eax
c01120dd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01120e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01120e4:	89 04 24             	mov    %eax,(%esp)
c01120e7:	e8 f5 f0 00 00       	call   c01211e1 <memcpy>
            return 1;
c01120ec:	b8 01 00 00 00       	mov    $0x1,%eax
c01120f1:	eb 46                	jmp    c0112139 <copy_string+0xe8>
        }
        if (part == maxn) {
c01120f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01120f6:	3b 45 14             	cmp    0x14(%ebp),%eax
c01120f9:	75 07                	jne    c0112102 <copy_string+0xb1>
            return 0;
c01120fb:	b8 00 00 00 00       	mov    $0x0,%eax
c0112100:	eb 37                	jmp    c0112139 <copy_string+0xe8>
        }
        memcpy(dst, src, part);
c0112102:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112105:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112109:	8b 45 10             	mov    0x10(%ebp),%eax
c011210c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112110:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112113:	89 04 24             	mov    %eax,(%esp)
c0112116:	e8 c6 f0 00 00       	call   c01211e1 <memcpy>
        dst += part, src += part, maxn -= part;
c011211b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011211e:	01 45 0c             	add    %eax,0xc(%ebp)
c0112121:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112124:	01 45 10             	add    %eax,0x10(%ebp)
c0112127:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011212a:	29 45 14             	sub    %eax,0x14(%ebp)
        part = PGSIZE;
c011212d:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
    }
c0112134:	e9 3d ff ff ff       	jmp    c0112076 <copy_string+0x25>
}
c0112139:	c9                   	leave  
c011213a:	c3                   	ret    

c011213b <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c011213b:	55                   	push   %ebp
c011213c:	89 e5                	mov    %esp,%ebp
c011213e:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c0112141:	8b 45 08             	mov    0x8(%ebp),%eax
c0112144:	8b 04 85 60 12 17 c0 	mov    -0x3fe8eda0(,%eax,4),%eax
c011214b:	83 f8 01             	cmp    $0x1,%eax
c011214e:	0f 85 85 00 00 00    	jne    c01121d9 <phi_test_sema+0x9e>
c0112154:	8b 45 08             	mov    0x8(%ebp),%eax
c0112157:	8d 48 04             	lea    0x4(%eax),%ecx
c011215a:	ba 67 66 66 66       	mov    $0x66666667,%edx
c011215f:	89 c8                	mov    %ecx,%eax
c0112161:	f7 ea                	imul   %edx
c0112163:	d1 fa                	sar    %edx
c0112165:	89 c8                	mov    %ecx,%eax
c0112167:	c1 f8 1f             	sar    $0x1f,%eax
c011216a:	29 c2                	sub    %eax,%edx
c011216c:	89 d0                	mov    %edx,%eax
c011216e:	c1 e0 02             	shl    $0x2,%eax
c0112171:	01 d0                	add    %edx,%eax
c0112173:	29 c1                	sub    %eax,%ecx
c0112175:	89 ca                	mov    %ecx,%edx
c0112177:	8b 04 95 60 12 17 c0 	mov    -0x3fe8eda0(,%edx,4),%eax
c011217e:	83 f8 02             	cmp    $0x2,%eax
c0112181:	74 56                	je     c01121d9 <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c0112183:	8b 45 08             	mov    0x8(%ebp),%eax
c0112186:	8d 48 01             	lea    0x1(%eax),%ecx
c0112189:	ba 67 66 66 66       	mov    $0x66666667,%edx
c011218e:	89 c8                	mov    %ecx,%eax
c0112190:	f7 ea                	imul   %edx
c0112192:	d1 fa                	sar    %edx
c0112194:	89 c8                	mov    %ecx,%eax
c0112196:	c1 f8 1f             	sar    $0x1f,%eax
c0112199:	29 c2                	sub    %eax,%edx
c011219b:	89 d0                	mov    %edx,%eax
c011219d:	c1 e0 02             	shl    $0x2,%eax
c01121a0:	01 d0                	add    %edx,%eax
c01121a2:	29 c1                	sub    %eax,%ecx
c01121a4:	89 ca                	mov    %ecx,%edx
c01121a6:	8b 04 95 60 12 17 c0 	mov    -0x3fe8eda0(,%edx,4),%eax
c01121ad:	83 f8 02             	cmp    $0x2,%eax
c01121b0:	74 27                	je     c01121d9 <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c01121b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01121b5:	c7 04 85 60 12 17 c0 	movl   $0x2,-0x3fe8eda0(,%eax,4)
c01121bc:	02 00 00 00 
        up(&s[i]);
c01121c0:	8b 55 08             	mov    0x8(%ebp),%edx
c01121c3:	89 d0                	mov    %edx,%eax
c01121c5:	01 c0                	add    %eax,%eax
c01121c7:	01 d0                	add    %edx,%eax
c01121c9:	c1 e0 02             	shl    $0x2,%eax
c01121cc:	05 00 13 17 c0       	add    $0xc0171300,%eax
c01121d1:	89 04 24             	mov    %eax,(%esp)
c01121d4:	e8 e8 09 00 00       	call   c0112bc1 <up>
    }
}
c01121d9:	c9                   	leave  
c01121da:	c3                   	ret    

c01121db <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c01121db:	55                   	push   %ebp
c01121dc:	89 e5                	mov    %esp,%ebp
c01121de:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c01121e1:	c7 04 24 88 12 17 c0 	movl   $0xc0171288,(%esp)
c01121e8:	e8 ef 09 00 00       	call   c0112bdc <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c01121ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01121f0:	c7 04 85 60 12 17 c0 	movl   $0x1,-0x3fe8eda0(,%eax,4)
c01121f7:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c01121fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01121fe:	89 04 24             	mov    %eax,(%esp)
c0112201:	e8 35 ff ff ff       	call   c011213b <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0112206:	c7 04 24 88 12 17 c0 	movl   $0xc0171288,(%esp)
c011220d:	e8 af 09 00 00       	call   c0112bc1 <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c0112212:	8b 55 08             	mov    0x8(%ebp),%edx
c0112215:	89 d0                	mov    %edx,%eax
c0112217:	01 c0                	add    %eax,%eax
c0112219:	01 d0                	add    %edx,%eax
c011221b:	c1 e0 02             	shl    $0x2,%eax
c011221e:	05 00 13 17 c0       	add    $0xc0171300,%eax
c0112223:	89 04 24             	mov    %eax,(%esp)
c0112226:	e8 b1 09 00 00       	call   c0112bdc <down>
}
c011222b:	c9                   	leave  
c011222c:	c3                   	ret    

c011222d <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c011222d:	55                   	push   %ebp
c011222e:	89 e5                	mov    %esp,%ebp
c0112230:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0112233:	c7 04 24 88 12 17 c0 	movl   $0xc0171288,(%esp)
c011223a:	e8 9d 09 00 00       	call   c0112bdc <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c011223f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112242:	c7 04 85 60 12 17 c0 	movl   $0x0,-0x3fe8eda0(,%eax,4)
c0112249:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c011224d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112250:	8d 48 04             	lea    0x4(%eax),%ecx
c0112253:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0112258:	89 c8                	mov    %ecx,%eax
c011225a:	f7 ea                	imul   %edx
c011225c:	d1 fa                	sar    %edx
c011225e:	89 c8                	mov    %ecx,%eax
c0112260:	c1 f8 1f             	sar    $0x1f,%eax
c0112263:	29 c2                	sub    %eax,%edx
c0112265:	89 d0                	mov    %edx,%eax
c0112267:	c1 e0 02             	shl    $0x2,%eax
c011226a:	01 d0                	add    %edx,%eax
c011226c:	29 c1                	sub    %eax,%ecx
c011226e:	89 ca                	mov    %ecx,%edx
c0112270:	89 14 24             	mov    %edx,(%esp)
c0112273:	e8 c3 fe ff ff       	call   c011213b <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0112278:	8b 45 08             	mov    0x8(%ebp),%eax
c011227b:	8d 48 01             	lea    0x1(%eax),%ecx
c011227e:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0112283:	89 c8                	mov    %ecx,%eax
c0112285:	f7 ea                	imul   %edx
c0112287:	d1 fa                	sar    %edx
c0112289:	89 c8                	mov    %ecx,%eax
c011228b:	c1 f8 1f             	sar    $0x1f,%eax
c011228e:	29 c2                	sub    %eax,%edx
c0112290:	89 d0                	mov    %edx,%eax
c0112292:	c1 e0 02             	shl    $0x2,%eax
c0112295:	01 d0                	add    %edx,%eax
c0112297:	29 c1                	sub    %eax,%ecx
c0112299:	89 ca                	mov    %ecx,%edx
c011229b:	89 14 24             	mov    %edx,(%esp)
c011229e:	e8 98 fe ff ff       	call   c011213b <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c01122a3:	c7 04 24 88 12 17 c0 	movl   $0xc0171288,(%esp)
c01122aa:	e8 12 09 00 00       	call   c0112bc1 <up>
}
c01122af:	c9                   	leave  
c01122b0:	c3                   	ret    

c01122b1 <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c01122b1:	55                   	push   %ebp
c01122b2:	89 e5                	mov    %esp,%ebp
c01122b4:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c01122b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c01122be:	8b 45 08             	mov    0x8(%ebp),%eax
c01122c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c01122c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01122c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01122cb:	c7 04 24 78 5c 12 c0 	movl   $0xc0125c78,(%esp)
c01122d2:	e8 1c e1 fe ff       	call   c01003f3 <cprintf>
    while(iter++<TIMES)
c01122d7:	eb 62                	jmp    c011233b <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c01122d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01122dc:	89 44 24 08          	mov    %eax,0x8(%esp)
c01122e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01122e3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01122e7:	c7 04 24 98 5c 12 c0 	movl   $0xc0125c98,(%esp)
c01122ee:	e8 00 e1 fe ff       	call   c01003f3 <cprintf>
        do_sleep(SLEEP_TIME);
c01122f3:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01122fa:	e8 64 50 00 00       	call   c0117363 <do_sleep>
        phi_take_forks_sema(i); 
c01122ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112302:	89 04 24             	mov    %eax,(%esp)
c0112305:	e8 d1 fe ff ff       	call   c01121db <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c011230a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011230d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112311:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112314:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112318:	c7 04 24 c8 5c 12 c0 	movl   $0xc0125cc8,(%esp)
c011231f:	e8 cf e0 fe ff       	call   c01003f3 <cprintf>
        do_sleep(SLEEP_TIME);
c0112324:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c011232b:	e8 33 50 00 00       	call   c0117363 <do_sleep>
        phi_put_forks_sema(i); 
c0112330:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112333:	89 04 24             	mov    %eax,(%esp)
c0112336:	e8 f2 fe ff ff       	call   c011222d <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c011233b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011233e:	8d 50 01             	lea    0x1(%eax),%edx
c0112341:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0112344:	83 f8 03             	cmp    $0x3,%eax
c0112347:	7e 90                	jle    c01122d9 <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c0112349:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011234c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112350:	c7 04 24 f3 5c 12 c0 	movl   $0xc0125cf3,(%esp)
c0112357:	e8 97 e0 fe ff       	call   c01003f3 <cprintf>
    return 0;    
c011235c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112361:	c9                   	leave  
c0112362:	c3                   	ret    

c0112363 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c0112363:	55                   	push   %ebp
c0112364:	89 e5                	mov    %esp,%ebp
c0112366:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c0112369:	8b 45 08             	mov    0x8(%ebp),%eax
c011236c:	8b 04 85 c0 12 17 c0 	mov    -0x3fe8ed40(,%eax,4),%eax
c0112373:	83 f8 01             	cmp    $0x1,%eax
c0112376:	0f 85 b5 00 00 00    	jne    c0112431 <phi_test_condvar+0xce>
c011237c:	8b 45 08             	mov    0x8(%ebp),%eax
c011237f:	8d 48 04             	lea    0x4(%eax),%ecx
c0112382:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0112387:	89 c8                	mov    %ecx,%eax
c0112389:	f7 ea                	imul   %edx
c011238b:	d1 fa                	sar    %edx
c011238d:	89 c8                	mov    %ecx,%eax
c011238f:	c1 f8 1f             	sar    $0x1f,%eax
c0112392:	29 c2                	sub    %eax,%edx
c0112394:	89 d0                	mov    %edx,%eax
c0112396:	c1 e0 02             	shl    $0x2,%eax
c0112399:	01 d0                	add    %edx,%eax
c011239b:	29 c1                	sub    %eax,%ecx
c011239d:	89 ca                	mov    %ecx,%edx
c011239f:	8b 04 95 c0 12 17 c0 	mov    -0x3fe8ed40(,%edx,4),%eax
c01123a6:	83 f8 02             	cmp    $0x2,%eax
c01123a9:	0f 84 82 00 00 00    	je     c0112431 <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c01123af:	8b 45 08             	mov    0x8(%ebp),%eax
c01123b2:	8d 48 01             	lea    0x1(%eax),%ecx
c01123b5:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01123ba:	89 c8                	mov    %ecx,%eax
c01123bc:	f7 ea                	imul   %edx
c01123be:	d1 fa                	sar    %edx
c01123c0:	89 c8                	mov    %ecx,%eax
c01123c2:	c1 f8 1f             	sar    $0x1f,%eax
c01123c5:	29 c2                	sub    %eax,%edx
c01123c7:	89 d0                	mov    %edx,%eax
c01123c9:	c1 e0 02             	shl    $0x2,%eax
c01123cc:	01 d0                	add    %edx,%eax
c01123ce:	29 c1                	sub    %eax,%ecx
c01123d0:	89 ca                	mov    %ecx,%edx
c01123d2:	8b 04 95 c0 12 17 c0 	mov    -0x3fe8ed40(,%edx,4),%eax
c01123d9:	83 f8 02             	cmp    $0x2,%eax
c01123dc:	74 53                	je     c0112431 <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c01123de:	8b 45 08             	mov    0x8(%ebp),%eax
c01123e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01123e5:	c7 04 24 10 5d 12 c0 	movl   $0xc0125d10,(%esp)
c01123ec:	e8 02 e0 fe ff       	call   c01003f3 <cprintf>
        state_condvar[i] = EATING ;
c01123f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01123f4:	c7 04 85 c0 12 17 c0 	movl   $0x2,-0x3fe8ed40(,%eax,4)
c01123fb:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c01123ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0112402:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112406:	c7 04 24 44 5d 12 c0 	movl   $0xc0125d44,(%esp)
c011240d:	e8 e1 df fe ff       	call   c01003f3 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c0112412:	a1 04 ab 16 c0       	mov    0xc016ab04,%eax
c0112417:	8b 48 1c             	mov    0x1c(%eax),%ecx
c011241a:	8b 55 08             	mov    0x8(%ebp),%edx
c011241d:	89 d0                	mov    %edx,%eax
c011241f:	c1 e0 02             	shl    $0x2,%eax
c0112422:	01 d0                	add    %edx,%eax
c0112424:	c1 e0 02             	shl    $0x2,%eax
c0112427:	01 c8                	add    %ecx,%eax
c0112429:	89 04 24             	mov    %eax,(%esp)
c011242c:	e8 8d 04 00 00       	call   c01128be <cond_signal>
    }
}
c0112431:	c9                   	leave  
c0112432:	c3                   	ret    

c0112433 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c0112433:	55                   	push   %ebp
c0112434:	89 e5                	mov    %esp,%ebp
c0112436:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c0112439:	a1 04 ab 16 c0       	mov    0xc016ab04,%eax
c011243e:	89 04 24             	mov    %eax,(%esp)
c0112441:	e8 96 07 00 00       	call   c0112bdc <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     // try to get fork
      // I am hungry
      state_condvar[i]=HUNGRY; 
c0112446:	8b 45 08             	mov    0x8(%ebp),%eax
c0112449:	c7 04 85 c0 12 17 c0 	movl   $0x1,-0x3fe8ed40(,%eax,4)
c0112450:	01 00 00 00 
      // try to get fork
      phi_test_condvar(i); 
c0112454:	8b 45 08             	mov    0x8(%ebp),%eax
c0112457:	89 04 24             	mov    %eax,(%esp)
c011245a:	e8 04 ff ff ff       	call   c0112363 <phi_test_condvar>
      if (state_condvar[i] != EATING) {
c011245f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112462:	8b 04 85 c0 12 17 c0 	mov    -0x3fe8ed40(,%eax,4),%eax
c0112469:	83 f8 02             	cmp    $0x2,%eax
c011246c:	74 32                	je     c01124a0 <phi_take_forks_condvar+0x6d>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
c011246e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112471:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112475:	c7 04 24 6c 5d 12 c0 	movl   $0xc0125d6c,(%esp)
c011247c:	e8 72 df fe ff       	call   c01003f3 <cprintf>
          cond_wait(&mtp->cv[i]);
c0112481:	a1 04 ab 16 c0       	mov    0xc016ab04,%eax
c0112486:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0112489:	8b 55 08             	mov    0x8(%ebp),%edx
c011248c:	89 d0                	mov    %edx,%eax
c011248e:	c1 e0 02             	shl    $0x2,%eax
c0112491:	01 d0                	add    %edx,%eax
c0112493:	c1 e0 02             	shl    $0x2,%eax
c0112496:	01 c8                	add    %ecx,%eax
c0112498:	89 04 24             	mov    %eax,(%esp)
c011249b:	e8 be 04 00 00       	call   c011295e <cond_wait>
      }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c01124a0:	a1 04 ab 16 c0       	mov    0xc016ab04,%eax
c01124a5:	8b 40 18             	mov    0x18(%eax),%eax
c01124a8:	85 c0                	test   %eax,%eax
c01124aa:	7e 12                	jle    c01124be <phi_take_forks_condvar+0x8b>
         up(&(mtp->next));
c01124ac:	a1 04 ab 16 c0       	mov    0xc016ab04,%eax
c01124b1:	83 c0 0c             	add    $0xc,%eax
c01124b4:	89 04 24             	mov    %eax,(%esp)
c01124b7:	e8 05 07 00 00       	call   c0112bc1 <up>
c01124bc:	eb 0d                	jmp    c01124cb <phi_take_forks_condvar+0x98>
      else
         up(&(mtp->mutex));
c01124be:	a1 04 ab 16 c0       	mov    0xc016ab04,%eax
c01124c3:	89 04 24             	mov    %eax,(%esp)
c01124c6:	e8 f6 06 00 00       	call   c0112bc1 <up>
}
c01124cb:	c9                   	leave  
c01124cc:	c3                   	ret    

c01124cd <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c01124cd:	55                   	push   %ebp
c01124ce:	89 e5                	mov    %esp,%ebp
c01124d0:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c01124d3:	a1 04 ab 16 c0       	mov    0xc016ab04,%eax
c01124d8:	89 04 24             	mov    %eax,(%esp)
c01124db:	e8 fc 06 00 00       	call   c0112bdc <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     // test left and right neighbors
      // I ate over 
      state_condvar[i]=THINKING;
c01124e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01124e3:	c7 04 85 c0 12 17 c0 	movl   $0x0,-0x3fe8ed40(,%eax,4)
c01124ea:	00 00 00 00 
      // test left and right neighbors
      phi_test_condvar(LEFT);
c01124ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01124f1:	8d 48 04             	lea    0x4(%eax),%ecx
c01124f4:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01124f9:	89 c8                	mov    %ecx,%eax
c01124fb:	f7 ea                	imul   %edx
c01124fd:	d1 fa                	sar    %edx
c01124ff:	89 c8                	mov    %ecx,%eax
c0112501:	c1 f8 1f             	sar    $0x1f,%eax
c0112504:	29 c2                	sub    %eax,%edx
c0112506:	89 d0                	mov    %edx,%eax
c0112508:	c1 e0 02             	shl    $0x2,%eax
c011250b:	01 d0                	add    %edx,%eax
c011250d:	29 c1                	sub    %eax,%ecx
c011250f:	89 ca                	mov    %ecx,%edx
c0112511:	89 14 24             	mov    %edx,(%esp)
c0112514:	e8 4a fe ff ff       	call   c0112363 <phi_test_condvar>
      phi_test_condvar(RIGHT);
c0112519:	8b 45 08             	mov    0x8(%ebp),%eax
c011251c:	8d 48 01             	lea    0x1(%eax),%ecx
c011251f:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0112524:	89 c8                	mov    %ecx,%eax
c0112526:	f7 ea                	imul   %edx
c0112528:	d1 fa                	sar    %edx
c011252a:	89 c8                	mov    %ecx,%eax
c011252c:	c1 f8 1f             	sar    $0x1f,%eax
c011252f:	29 c2                	sub    %eax,%edx
c0112531:	89 d0                	mov    %edx,%eax
c0112533:	c1 e0 02             	shl    $0x2,%eax
c0112536:	01 d0                	add    %edx,%eax
c0112538:	29 c1                	sub    %eax,%ecx
c011253a:	89 ca                	mov    %ecx,%edx
c011253c:	89 14 24             	mov    %edx,(%esp)
c011253f:	e8 1f fe ff ff       	call   c0112363 <phi_test_condvar>
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c0112544:	a1 04 ab 16 c0       	mov    0xc016ab04,%eax
c0112549:	8b 40 18             	mov    0x18(%eax),%eax
c011254c:	85 c0                	test   %eax,%eax
c011254e:	7e 12                	jle    c0112562 <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c0112550:	a1 04 ab 16 c0       	mov    0xc016ab04,%eax
c0112555:	83 c0 0c             	add    $0xc,%eax
c0112558:	89 04 24             	mov    %eax,(%esp)
c011255b:	e8 61 06 00 00       	call   c0112bc1 <up>
c0112560:	eb 0d                	jmp    c011256f <phi_put_forks_condvar+0xa2>
     else
        up(&(mtp->mutex));
c0112562:	a1 04 ab 16 c0       	mov    0xc016ab04,%eax
c0112567:	89 04 24             	mov    %eax,(%esp)
c011256a:	e8 52 06 00 00       	call   c0112bc1 <up>
}
c011256f:	c9                   	leave  
c0112570:	c3                   	ret    

c0112571 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c0112571:	55                   	push   %ebp
c0112572:	89 e5                	mov    %esp,%ebp
c0112574:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c0112577:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c011257e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112581:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c0112584:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112587:	89 44 24 04          	mov    %eax,0x4(%esp)
c011258b:	c7 04 24 a8 5d 12 c0 	movl   $0xc0125da8,(%esp)
c0112592:	e8 5c de fe ff       	call   c01003f3 <cprintf>
    while(iter++<TIMES)
c0112597:	eb 62                	jmp    c01125fb <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c0112599:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011259c:	89 44 24 08          	mov    %eax,0x8(%esp)
c01125a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01125a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01125a7:	c7 04 24 c8 5d 12 c0 	movl   $0xc0125dc8,(%esp)
c01125ae:	e8 40 de fe ff       	call   c01003f3 <cprintf>
        do_sleep(SLEEP_TIME);
c01125b3:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01125ba:	e8 a4 4d 00 00       	call   c0117363 <do_sleep>
        phi_take_forks_condvar(i); 
c01125bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01125c2:	89 04 24             	mov    %eax,(%esp)
c01125c5:	e8 69 fe ff ff       	call   c0112433 <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c01125ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01125cd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01125d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01125d4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01125d8:	c7 04 24 f8 5d 12 c0 	movl   $0xc0125df8,(%esp)
c01125df:	e8 0f de fe ff       	call   c01003f3 <cprintf>
        do_sleep(SLEEP_TIME);
c01125e4:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01125eb:	e8 73 4d 00 00       	call   c0117363 <do_sleep>
        phi_put_forks_condvar(i); 
c01125f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01125f3:	89 04 24             	mov    %eax,(%esp)
c01125f6:	e8 d2 fe ff ff       	call   c01124cd <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c01125fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01125fe:	8d 50 01             	lea    0x1(%eax),%edx
c0112601:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0112604:	83 f8 03             	cmp    $0x3,%eax
c0112607:	7e 90                	jle    c0112599 <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c0112609:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011260c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112610:	c7 04 24 28 5e 12 c0 	movl   $0xc0125e28,(%esp)
c0112617:	e8 d7 dd fe ff       	call   c01003f3 <cprintf>
    return 0;    
c011261c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112621:	c9                   	leave  
c0112622:	c3                   	ret    

c0112623 <check_sync>:

void check_sync(void){
c0112623:	55                   	push   %ebp
c0112624:	89 e5                	mov    %esp,%ebp
c0112626:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c0112629:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112630:	00 
c0112631:	c7 04 24 88 12 17 c0 	movl   $0xc0171288,(%esp)
c0112638:	e8 11 04 00 00       	call   c0112a4e <sem_init>
    for(i=0;i<N;i++){
c011263d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0112644:	e9 94 00 00 00       	jmp    c01126dd <check_sync+0xba>
        sem_init(&s[i], 0);
c0112649:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011264c:	89 d0                	mov    %edx,%eax
c011264e:	01 c0                	add    %eax,%eax
c0112650:	01 d0                	add    %edx,%eax
c0112652:	c1 e0 02             	shl    $0x2,%eax
c0112655:	05 00 13 17 c0       	add    $0xc0171300,%eax
c011265a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0112661:	00 
c0112662:	89 04 24             	mov    %eax,(%esp)
c0112665:	e8 e4 03 00 00       	call   c0112a4e <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c011266a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011266d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0112674:	00 
c0112675:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112679:	c7 04 24 b1 22 11 c0 	movl   $0xc01122b1,(%esp)
c0112680:	e8 4e 30 00 00       	call   c01156d3 <kernel_thread>
c0112685:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c0112688:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011268c:	7f 1c                	jg     c01126aa <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c011268e:	c7 44 24 08 48 5e 12 	movl   $0xc0125e48,0x8(%esp)
c0112695:	c0 
c0112696:	c7 44 24 04 fe 00 00 	movl   $0xfe,0x4(%esp)
c011269d:	00 
c011269e:	c7 04 24 7a 5e 12 c0 	movl   $0xc0125e7a,(%esp)
c01126a5:	e8 6c eb fe ff       	call   c0101216 <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c01126aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01126ad:	89 04 24             	mov    %eax,(%esp)
c01126b0:	e8 aa 2f 00 00       	call   c011565f <find_proc>
c01126b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01126b8:	89 04 95 d4 12 17 c0 	mov    %eax,-0x3fe8ed2c(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c01126bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01126c2:	8b 04 85 d4 12 17 c0 	mov    -0x3fe8ed2c(,%eax,4),%eax
c01126c9:	c7 44 24 04 91 5e 12 	movl   $0xc0125e91,0x4(%esp)
c01126d0:	c0 
c01126d1:	89 04 24             	mov    %eax,(%esp)
c01126d4:	e8 6d 2b 00 00       	call   c0115246 <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c01126d9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01126dd:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c01126e1:	0f 8e 62 ff ff ff    	jle    c0112649 <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c01126e7:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01126ee:	00 
c01126ef:	c7 04 24 a0 12 17 c0 	movl   $0xc01712a0,(%esp)
c01126f6:	e8 99 00 00 00       	call   c0112794 <monitor_init>
    for(i=0;i<N;i++){
c01126fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0112702:	e9 81 00 00 00       	jmp    c0112788 <check_sync+0x165>
        state_condvar[i]=THINKING;
c0112707:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011270a:	c7 04 85 c0 12 17 c0 	movl   $0x0,-0x3fe8ed40(,%eax,4)
c0112711:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0112715:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112718:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011271f:	00 
c0112720:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112724:	c7 04 24 71 25 11 c0 	movl   $0xc0112571,(%esp)
c011272b:	e8 a3 2f 00 00       	call   c01156d3 <kernel_thread>
c0112730:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c0112733:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112737:	7f 1c                	jg     c0112755 <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c0112739:	c7 44 24 08 a8 5e 12 	movl   $0xc0125ea8,0x8(%esp)
c0112740:	c0 
c0112741:	c7 44 24 04 0a 01 00 	movl   $0x10a,0x4(%esp)
c0112748:	00 
c0112749:	c7 04 24 7a 5e 12 c0 	movl   $0xc0125e7a,(%esp)
c0112750:	e8 c1 ea fe ff       	call   c0101216 <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c0112755:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112758:	89 04 24             	mov    %eax,(%esp)
c011275b:	e8 ff 2e 00 00       	call   c011565f <find_proc>
c0112760:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0112763:	89 04 95 74 12 17 c0 	mov    %eax,-0x3fe8ed8c(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c011276a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011276d:	8b 04 85 74 12 17 c0 	mov    -0x3fe8ed8c(,%eax,4),%eax
c0112774:	c7 44 24 04 d8 5e 12 	movl   $0xc0125ed8,0x4(%esp)
c011277b:	c0 
c011277c:	89 04 24             	mov    %eax,(%esp)
c011277f:	e8 c2 2a 00 00       	call   c0115246 <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c0112784:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0112788:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c011278c:	0f 8e 75 ff ff ff    	jle    c0112707 <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c0112792:	c9                   	leave  
c0112793:	c3                   	ret    

c0112794 <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c0112794:	55                   	push   %ebp
c0112795:	89 e5                	mov    %esp,%ebp
c0112797:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c011279a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011279e:	75 24                	jne    c01127c4 <monitor_init+0x30>
c01127a0:	c7 44 24 0c f4 5e 12 	movl   $0xc0125ef4,0xc(%esp)
c01127a7:	c0 
c01127a8:	c7 44 24 08 fd 5e 12 	movl   $0xc0125efd,0x8(%esp)
c01127af:	c0 
c01127b0:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c01127b7:	00 
c01127b8:	c7 04 24 12 5f 12 c0 	movl   $0xc0125f12,(%esp)
c01127bf:	e8 52 ea fe ff       	call   c0101216 <__panic>
    mtp->next_count = 0;
c01127c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01127c7:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c01127ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01127d1:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c01127d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01127db:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01127e2:	00 
c01127e3:	89 04 24             	mov    %eax,(%esp)
c01127e6:	e8 63 02 00 00       	call   c0112a4e <sem_init>
    sem_init(&(mtp->next), 0);
c01127eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01127ee:	83 c0 0c             	add    $0xc,%eax
c01127f1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01127f8:	00 
c01127f9:	89 04 24             	mov    %eax,(%esp)
c01127fc:	e8 4d 02 00 00       	call   c0112a4e <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c0112801:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112804:	89 d0                	mov    %edx,%eax
c0112806:	c1 e0 02             	shl    $0x2,%eax
c0112809:	01 d0                	add    %edx,%eax
c011280b:	c1 e0 02             	shl    $0x2,%eax
c011280e:	89 04 24             	mov    %eax,(%esp)
c0112811:	e8 9a 82 ff ff       	call   c010aab0 <kmalloc>
c0112816:	8b 55 08             	mov    0x8(%ebp),%edx
c0112819:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c011281c:	8b 45 08             	mov    0x8(%ebp),%eax
c011281f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0112822:	85 c0                	test   %eax,%eax
c0112824:	75 24                	jne    c011284a <monitor_init+0xb6>
c0112826:	c7 44 24 0c 26 5f 12 	movl   $0xc0125f26,0xc(%esp)
c011282d:	c0 
c011282e:	c7 44 24 08 fd 5e 12 	movl   $0xc0125efd,0x8(%esp)
c0112835:	c0 
c0112836:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c011283d:	00 
c011283e:	c7 04 24 12 5f 12 c0 	movl   $0xc0125f12,(%esp)
c0112845:	e8 cc e9 fe ff       	call   c0101216 <__panic>
    for(i=0; i<num_cv; i++){
c011284a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0112851:	eb 61                	jmp    c01128b4 <monitor_init+0x120>
        mtp->cv[i].count=0;
c0112853:	8b 45 08             	mov    0x8(%ebp),%eax
c0112856:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0112859:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011285c:	89 d0                	mov    %edx,%eax
c011285e:	c1 e0 02             	shl    $0x2,%eax
c0112861:	01 d0                	add    %edx,%eax
c0112863:	c1 e0 02             	shl    $0x2,%eax
c0112866:	01 c8                	add    %ecx,%eax
c0112868:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c011286f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112872:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0112875:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0112878:	89 d0                	mov    %edx,%eax
c011287a:	c1 e0 02             	shl    $0x2,%eax
c011287d:	01 d0                	add    %edx,%eax
c011287f:	c1 e0 02             	shl    $0x2,%eax
c0112882:	01 c8                	add    %ecx,%eax
c0112884:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011288b:	00 
c011288c:	89 04 24             	mov    %eax,(%esp)
c011288f:	e8 ba 01 00 00       	call   c0112a4e <sem_init>
        mtp->cv[i].owner=mtp;
c0112894:	8b 45 08             	mov    0x8(%ebp),%eax
c0112897:	8b 48 1c             	mov    0x1c(%eax),%ecx
c011289a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011289d:	89 d0                	mov    %edx,%eax
c011289f:	c1 e0 02             	shl    $0x2,%eax
c01128a2:	01 d0                	add    %edx,%eax
c01128a4:	c1 e0 02             	shl    $0x2,%eax
c01128a7:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01128aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01128ad:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c01128b0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01128b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01128b7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01128ba:	72 97                	jb     c0112853 <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c01128bc:	c9                   	leave  
c01128bd:	c3                   	ret    

c01128be <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c01128be:	55                   	push   %ebp
c01128bf:	89 e5                	mov    %esp,%ebp
c01128c1:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c01128c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01128c7:	8b 40 10             	mov    0x10(%eax),%eax
c01128ca:	8b 50 18             	mov    0x18(%eax),%edx
c01128cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01128d0:	8b 40 0c             	mov    0xc(%eax),%eax
c01128d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01128d7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01128db:	8b 45 08             	mov    0x8(%ebp),%eax
c01128de:	89 44 24 04          	mov    %eax,0x4(%esp)
c01128e2:	c7 04 24 34 5f 12 c0 	movl   $0xc0125f34,(%esp)
c01128e9:	e8 05 db fe ff       	call   c01003f3 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
     if(cvp->count>0) {
c01128ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01128f1:	8b 40 0c             	mov    0xc(%eax),%eax
c01128f4:	85 c0                	test   %eax,%eax
c01128f6:	7e 3a                	jle    c0112932 <cond_signal+0x74>
        cvp->owner->next_count ++;
c01128f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01128fb:	8b 40 10             	mov    0x10(%eax),%eax
c01128fe:	8b 50 18             	mov    0x18(%eax),%edx
c0112901:	83 c2 01             	add    $0x1,%edx
c0112904:	89 50 18             	mov    %edx,0x18(%eax)
        up(&(cvp->sem));
c0112907:	8b 45 08             	mov    0x8(%ebp),%eax
c011290a:	89 04 24             	mov    %eax,(%esp)
c011290d:	e8 af 02 00 00       	call   c0112bc1 <up>
        down(&(cvp->owner->next));
c0112912:	8b 45 08             	mov    0x8(%ebp),%eax
c0112915:	8b 40 10             	mov    0x10(%eax),%eax
c0112918:	83 c0 0c             	add    $0xc,%eax
c011291b:	89 04 24             	mov    %eax,(%esp)
c011291e:	e8 b9 02 00 00       	call   c0112bdc <down>
        cvp->owner->next_count --;
c0112923:	8b 45 08             	mov    0x8(%ebp),%eax
c0112926:	8b 40 10             	mov    0x10(%eax),%eax
c0112929:	8b 50 18             	mov    0x18(%eax),%edx
c011292c:	83 ea 01             	sub    $0x1,%edx
c011292f:	89 50 18             	mov    %edx,0x18(%eax)
      }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0112932:	8b 45 08             	mov    0x8(%ebp),%eax
c0112935:	8b 40 10             	mov    0x10(%eax),%eax
c0112938:	8b 50 18             	mov    0x18(%eax),%edx
c011293b:	8b 45 08             	mov    0x8(%ebp),%eax
c011293e:	8b 40 0c             	mov    0xc(%eax),%eax
c0112941:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0112945:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112949:	8b 45 08             	mov    0x8(%ebp),%eax
c011294c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112950:	c7 04 24 7c 5f 12 c0 	movl   $0xc0125f7c,(%esp)
c0112957:	e8 97 da fe ff       	call   c01003f3 <cprintf>
}
c011295c:	c9                   	leave  
c011295d:	c3                   	ret    

c011295e <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c011295e:	55                   	push   %ebp
c011295f:	89 e5                	mov    %esp,%ebp
c0112961:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0112964:	8b 45 08             	mov    0x8(%ebp),%eax
c0112967:	8b 40 10             	mov    0x10(%eax),%eax
c011296a:	8b 50 18             	mov    0x18(%eax),%edx
c011296d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112970:	8b 40 0c             	mov    0xc(%eax),%eax
c0112973:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0112977:	89 44 24 08          	mov    %eax,0x8(%esp)
c011297b:	8b 45 08             	mov    0x8(%ebp),%eax
c011297e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112982:	c7 04 24 c0 5f 12 c0 	movl   $0xc0125fc0,(%esp)
c0112989:	e8 65 da fe ff       	call   c01003f3 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
      cvp->count++;
c011298e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112991:	8b 40 0c             	mov    0xc(%eax),%eax
c0112994:	8d 50 01             	lea    0x1(%eax),%edx
c0112997:	8b 45 08             	mov    0x8(%ebp),%eax
c011299a:	89 50 0c             	mov    %edx,0xc(%eax)
      if(cvp->owner->next_count > 0)
c011299d:	8b 45 08             	mov    0x8(%ebp),%eax
c01129a0:	8b 40 10             	mov    0x10(%eax),%eax
c01129a3:	8b 40 18             	mov    0x18(%eax),%eax
c01129a6:	85 c0                	test   %eax,%eax
c01129a8:	7e 13                	jle    c01129bd <cond_wait+0x5f>
         up(&(cvp->owner->next));
c01129aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01129ad:	8b 40 10             	mov    0x10(%eax),%eax
c01129b0:	83 c0 0c             	add    $0xc,%eax
c01129b3:	89 04 24             	mov    %eax,(%esp)
c01129b6:	e8 06 02 00 00       	call   c0112bc1 <up>
c01129bb:	eb 0e                	jmp    c01129cb <cond_wait+0x6d>
      else
         up(&(cvp->owner->mutex));
c01129bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01129c0:	8b 40 10             	mov    0x10(%eax),%eax
c01129c3:	89 04 24             	mov    %eax,(%esp)
c01129c6:	e8 f6 01 00 00       	call   c0112bc1 <up>
      down(&(cvp->sem));
c01129cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01129ce:	89 04 24             	mov    %eax,(%esp)
c01129d1:	e8 06 02 00 00       	call   c0112bdc <down>
      cvp->count --;
c01129d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01129d9:	8b 40 0c             	mov    0xc(%eax),%eax
c01129dc:	8d 50 ff             	lea    -0x1(%eax),%edx
c01129df:	8b 45 08             	mov    0x8(%ebp),%eax
c01129e2:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c01129e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01129e8:	8b 40 10             	mov    0x10(%eax),%eax
c01129eb:	8b 50 18             	mov    0x18(%eax),%edx
c01129ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01129f1:	8b 40 0c             	mov    0xc(%eax),%eax
c01129f4:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01129f8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01129fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01129ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112a03:	c7 04 24 04 60 12 c0 	movl   $0xc0126004,(%esp)
c0112a0a:	e8 e4 d9 fe ff       	call   c01003f3 <cprintf>
}
c0112a0f:	c9                   	leave  
c0112a10:	c3                   	ret    

c0112a11 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0112a11:	55                   	push   %ebp
c0112a12:	89 e5                	mov    %esp,%ebp
c0112a14:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0112a17:	9c                   	pushf  
c0112a18:	58                   	pop    %eax
c0112a19:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0112a1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0112a1f:	25 00 02 00 00       	and    $0x200,%eax
c0112a24:	85 c0                	test   %eax,%eax
c0112a26:	74 0c                	je     c0112a34 <__intr_save+0x23>
        intr_disable();
c0112a28:	e8 74 fa fe ff       	call   c01024a1 <intr_disable>
        return 1;
c0112a2d:	b8 01 00 00 00       	mov    $0x1,%eax
c0112a32:	eb 05                	jmp    c0112a39 <__intr_save+0x28>
    }
    return 0;
c0112a34:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112a39:	c9                   	leave  
c0112a3a:	c3                   	ret    

c0112a3b <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0112a3b:	55                   	push   %ebp
c0112a3c:	89 e5                	mov    %esp,%ebp
c0112a3e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0112a41:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0112a45:	74 05                	je     c0112a4c <__intr_restore+0x11>
        intr_enable();
c0112a47:	e8 4f fa fe ff       	call   c010249b <intr_enable>
    }
}
c0112a4c:	c9                   	leave  
c0112a4d:	c3                   	ret    

c0112a4e <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0112a4e:	55                   	push   %ebp
c0112a4f:	89 e5                	mov    %esp,%ebp
c0112a51:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0112a54:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a57:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112a5a:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0112a5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a5f:	83 c0 04             	add    $0x4,%eax
c0112a62:	89 04 24             	mov    %eax,(%esp)
c0112a65:	e8 33 02 00 00       	call   c0112c9d <wait_queue_init>
}
c0112a6a:	c9                   	leave  
c0112a6b:	c3                   	ret    

c0112a6c <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0112a6c:	55                   	push   %ebp
c0112a6d:	89 e5                	mov    %esp,%ebp
c0112a6f:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0112a72:	e8 9a ff ff ff       	call   c0112a11 <__intr_save>
c0112a77:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0112a7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a7d:	83 c0 04             	add    $0x4,%eax
c0112a80:	89 04 24             	mov    %eax,(%esp)
c0112a83:	e8 69 04 00 00       	call   c0112ef1 <wait_queue_first>
c0112a88:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112a8b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112a8f:	75 0f                	jne    c0112aa0 <__up+0x34>
            sem->value ++;
c0112a91:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a94:	8b 00                	mov    (%eax),%eax
c0112a96:	8d 50 01             	lea    0x1(%eax),%edx
c0112a99:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a9c:	89 10                	mov    %edx,(%eax)
c0112a9e:	eb 58                	jmp    c0112af8 <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0112aa0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112aa3:	8b 00                	mov    (%eax),%eax
c0112aa5:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0112aab:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0112aae:	74 24                	je     c0112ad4 <__up+0x68>
c0112ab0:	c7 44 24 0c 48 60 12 	movl   $0xc0126048,0xc(%esp)
c0112ab7:	c0 
c0112ab8:	c7 44 24 08 6d 60 12 	movl   $0xc012606d,0x8(%esp)
c0112abf:	c0 
c0112ac0:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0112ac7:	00 
c0112ac8:	c7 04 24 82 60 12 c0 	movl   $0xc0126082,(%esp)
c0112acf:	e8 42 e7 fe ff       	call   c0101216 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0112ad4:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ad7:	8d 50 04             	lea    0x4(%eax),%edx
c0112ada:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0112ae1:	00 
c0112ae2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ae5:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112ae9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112aec:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112af0:	89 14 24             	mov    %edx,(%esp)
c0112af3:	e8 95 04 00 00       	call   c0112f8d <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0112af8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112afb:	89 04 24             	mov    %eax,(%esp)
c0112afe:	e8 38 ff ff ff       	call   c0112a3b <__intr_restore>
}
c0112b03:	c9                   	leave  
c0112b04:	c3                   	ret    

c0112b05 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0112b05:	55                   	push   %ebp
c0112b06:	89 e5                	mov    %esp,%ebp
c0112b08:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0112b0b:	e8 01 ff ff ff       	call   c0112a11 <__intr_save>
c0112b10:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0112b13:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b16:	8b 00                	mov    (%eax),%eax
c0112b18:	85 c0                	test   %eax,%eax
c0112b1a:	7e 22                	jle    c0112b3e <__down+0x39>
        sem->value --;
c0112b1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b1f:	8b 00                	mov    (%eax),%eax
c0112b21:	8d 50 ff             	lea    -0x1(%eax),%edx
c0112b24:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b27:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0112b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b2c:	89 04 24             	mov    %eax,(%esp)
c0112b2f:	e8 07 ff ff ff       	call   c0112a3b <__intr_restore>
        return 0;
c0112b34:	b8 00 00 00 00       	mov    $0x0,%eax
c0112b39:	e9 81 00 00 00       	jmp    c0112bbf <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0112b3e:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0112b41:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0112b44:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b47:	8d 50 04             	lea    0x4(%eax),%edx
c0112b4a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b4d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112b51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112b54:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b58:	89 14 24             	mov    %edx,(%esp)
c0112b5b:	e8 34 05 00 00       	call   c0113094 <wait_current_set>
    local_intr_restore(intr_flag);
c0112b60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b63:	89 04 24             	mov    %eax,(%esp)
c0112b66:	e8 d0 fe ff ff       	call   c0112a3b <__intr_restore>

    schedule();
c0112b6b:	e8 36 58 00 00       	call   c01183a6 <schedule>

    local_intr_save(intr_flag);
c0112b70:	e8 9c fe ff ff       	call   c0112a11 <__intr_save>
c0112b75:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0112b78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112b7b:	89 04 24             	mov    %eax,(%esp)
c0112b7e:	e8 e2 03 00 00       	call   c0112f65 <wait_in_queue>
c0112b83:	85 c0                	test   %eax,%eax
c0112b85:	74 15                	je     c0112b9c <__down+0x97>
c0112b87:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b8a:	8d 50 04             	lea    0x4(%eax),%edx
c0112b8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112b90:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b94:	89 14 24             	mov    %edx,(%esp)
c0112b97:	e8 c4 01 00 00       	call   c0112d60 <wait_queue_del>
    local_intr_restore(intr_flag);
c0112b9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b9f:	89 04 24             	mov    %eax,(%esp)
c0112ba2:	e8 94 fe ff ff       	call   c0112a3b <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0112ba7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112baa:	8b 40 04             	mov    0x4(%eax),%eax
c0112bad:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0112bb0:	74 08                	je     c0112bba <__down+0xb5>
        return wait->wakeup_flags;
c0112bb2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112bb5:	8b 40 04             	mov    0x4(%eax),%eax
c0112bb8:	eb 05                	jmp    c0112bbf <__down+0xba>
    }
    return 0;
c0112bba:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112bbf:	c9                   	leave  
c0112bc0:	c3                   	ret    

c0112bc1 <up>:

void
up(semaphore_t *sem) {
c0112bc1:	55                   	push   %ebp
c0112bc2:	89 e5                	mov    %esp,%ebp
c0112bc4:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0112bc7:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0112bce:	00 
c0112bcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0112bd2:	89 04 24             	mov    %eax,(%esp)
c0112bd5:	e8 92 fe ff ff       	call   c0112a6c <__up>
}
c0112bda:	c9                   	leave  
c0112bdb:	c3                   	ret    

c0112bdc <down>:

void
down(semaphore_t *sem) {
c0112bdc:	55                   	push   %ebp
c0112bdd:	89 e5                	mov    %esp,%ebp
c0112bdf:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0112be2:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0112be9:	00 
c0112bea:	8b 45 08             	mov    0x8(%ebp),%eax
c0112bed:	89 04 24             	mov    %eax,(%esp)
c0112bf0:	e8 10 ff ff ff       	call   c0112b05 <__down>
c0112bf5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0112bf8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112bfc:	74 24                	je     c0112c22 <down+0x46>
c0112bfe:	c7 44 24 0c 92 60 12 	movl   $0xc0126092,0xc(%esp)
c0112c05:	c0 
c0112c06:	c7 44 24 08 6d 60 12 	movl   $0xc012606d,0x8(%esp)
c0112c0d:	c0 
c0112c0e:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0112c15:	00 
c0112c16:	c7 04 24 82 60 12 c0 	movl   $0xc0126082,(%esp)
c0112c1d:	e8 f4 e5 fe ff       	call   c0101216 <__panic>
}
c0112c22:	c9                   	leave  
c0112c23:	c3                   	ret    

c0112c24 <try_down>:

bool
try_down(semaphore_t *sem) {
c0112c24:	55                   	push   %ebp
c0112c25:	89 e5                	mov    %esp,%ebp
c0112c27:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0112c2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0112c31:	e8 db fd ff ff       	call   c0112a11 <__intr_save>
c0112c36:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0112c39:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c3c:	8b 00                	mov    (%eax),%eax
c0112c3e:	85 c0                	test   %eax,%eax
c0112c40:	7e 14                	jle    c0112c56 <try_down+0x32>
        sem->value --, ret = 1;
c0112c42:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c45:	8b 00                	mov    (%eax),%eax
c0112c47:	8d 50 ff             	lea    -0x1(%eax),%edx
c0112c4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c4d:	89 10                	mov    %edx,(%eax)
c0112c4f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0112c56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112c59:	89 04 24             	mov    %eax,(%esp)
c0112c5c:	e8 da fd ff ff       	call   c0112a3b <__intr_restore>
    return ret;
c0112c61:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112c64:	c9                   	leave  
c0112c65:	c3                   	ret    

c0112c66 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0112c66:	55                   	push   %ebp
c0112c67:	89 e5                	mov    %esp,%ebp
c0112c69:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0112c6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c6f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112c72:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0112c74:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c77:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0112c7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c81:	83 c0 0c             	add    $0xc,%eax
c0112c84:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0112c87:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0112c8a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0112c8d:	89 50 04             	mov    %edx,0x4(%eax)
c0112c90:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0112c93:	8b 50 04             	mov    0x4(%eax),%edx
c0112c96:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0112c99:	89 10                	mov    %edx,(%eax)
}
c0112c9b:	c9                   	leave  
c0112c9c:	c3                   	ret    

c0112c9d <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0112c9d:	55                   	push   %ebp
c0112c9e:	89 e5                	mov    %esp,%ebp
c0112ca0:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0112ca3:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ca6:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0112ca9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0112cac:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0112caf:	89 50 04             	mov    %edx,0x4(%eax)
c0112cb2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0112cb5:	8b 50 04             	mov    0x4(%eax),%edx
c0112cb8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0112cbb:	89 10                	mov    %edx,(%eax)
}
c0112cbd:	c9                   	leave  
c0112cbe:	c3                   	ret    

c0112cbf <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0112cbf:	55                   	push   %ebp
c0112cc0:	89 e5                	mov    %esp,%ebp
c0112cc2:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0112cc5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112cc8:	83 c0 0c             	add    $0xc,%eax
c0112ccb:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0112cce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112cd1:	8b 40 04             	mov    0x4(%eax),%eax
c0112cd4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0112cd7:	0f 94 c0             	sete   %al
c0112cda:	0f b6 c0             	movzbl %al,%eax
c0112cdd:	85 c0                	test   %eax,%eax
c0112cdf:	74 09                	je     c0112cea <wait_queue_add+0x2b>
c0112ce1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ce4:	8b 00                	mov    (%eax),%eax
c0112ce6:	85 c0                	test   %eax,%eax
c0112ce8:	75 24                	jne    c0112d0e <wait_queue_add+0x4f>
c0112cea:	c7 44 24 0c a0 60 12 	movl   $0xc01260a0,0xc(%esp)
c0112cf1:	c0 
c0112cf2:	c7 44 24 08 d5 60 12 	movl   $0xc01260d5,0x8(%esp)
c0112cf9:	c0 
c0112cfa:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0112d01:	00 
c0112d02:	c7 04 24 ea 60 12 c0 	movl   $0xc01260ea,(%esp)
c0112d09:	e8 08 e5 fe ff       	call   c0101216 <__panic>
    wait->wait_queue = queue;
c0112d0e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d11:	8b 55 08             	mov    0x8(%ebp),%edx
c0112d14:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0112d17:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d1a:	8d 50 0c             	lea    0xc(%eax),%edx
c0112d1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d20:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112d23:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0112d26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112d29:	8b 00                	mov    (%eax),%eax
c0112d2b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112d2e:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0112d31:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0112d34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112d37:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0112d3a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112d3d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112d40:	89 10                	mov    %edx,(%eax)
c0112d42:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112d45:	8b 10                	mov    (%eax),%edx
c0112d47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112d4a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0112d4d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112d50:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0112d53:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0112d56:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112d59:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0112d5c:	89 10                	mov    %edx,(%eax)
}
c0112d5e:	c9                   	leave  
c0112d5f:	c3                   	ret    

c0112d60 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0112d60:	55                   	push   %ebp
c0112d61:	89 e5                	mov    %esp,%ebp
c0112d63:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0112d66:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d69:	83 c0 0c             	add    $0xc,%eax
c0112d6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0112d6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d72:	8b 40 04             	mov    0x4(%eax),%eax
c0112d75:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0112d78:	0f 94 c0             	sete   %al
c0112d7b:	0f b6 c0             	movzbl %al,%eax
c0112d7e:	85 c0                	test   %eax,%eax
c0112d80:	75 0b                	jne    c0112d8d <wait_queue_del+0x2d>
c0112d82:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d85:	8b 40 08             	mov    0x8(%eax),%eax
c0112d88:	3b 45 08             	cmp    0x8(%ebp),%eax
c0112d8b:	74 24                	je     c0112db1 <wait_queue_del+0x51>
c0112d8d:	c7 44 24 0c fc 60 12 	movl   $0xc01260fc,0xc(%esp)
c0112d94:	c0 
c0112d95:	c7 44 24 08 d5 60 12 	movl   $0xc01260d5,0x8(%esp)
c0112d9c:	c0 
c0112d9d:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0112da4:	00 
c0112da5:	c7 04 24 ea 60 12 c0 	movl   $0xc01260ea,(%esp)
c0112dac:	e8 65 e4 fe ff       	call   c0101216 <__panic>
    list_del_init(&(wait->wait_link));
c0112db1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112db4:	83 c0 0c             	add    $0xc,%eax
c0112db7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112dba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112dbd:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0112dc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112dc3:	8b 40 04             	mov    0x4(%eax),%eax
c0112dc6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112dc9:	8b 12                	mov    (%edx),%edx
c0112dcb:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0112dce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0112dd1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112dd4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0112dd7:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0112dda:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112ddd:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112de0:	89 10                	mov    %edx,(%eax)
c0112de2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112de5:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0112de8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112deb:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0112dee:	89 50 04             	mov    %edx,0x4(%eax)
c0112df1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112df4:	8b 50 04             	mov    0x4(%eax),%edx
c0112df7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112dfa:	89 10                	mov    %edx,(%eax)
}
c0112dfc:	c9                   	leave  
c0112dfd:	c3                   	ret    

c0112dfe <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0112dfe:	55                   	push   %ebp
c0112dff:	89 e5                	mov    %esp,%ebp
c0112e01:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0112e04:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e07:	83 c0 0c             	add    $0xc,%eax
c0112e0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0112e0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e10:	8b 40 04             	mov    0x4(%eax),%eax
c0112e13:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0112e16:	0f 94 c0             	sete   %al
c0112e19:	0f b6 c0             	movzbl %al,%eax
c0112e1c:	85 c0                	test   %eax,%eax
c0112e1e:	75 0b                	jne    c0112e2b <wait_queue_next+0x2d>
c0112e20:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e23:	8b 40 08             	mov    0x8(%eax),%eax
c0112e26:	3b 45 08             	cmp    0x8(%ebp),%eax
c0112e29:	74 24                	je     c0112e4f <wait_queue_next+0x51>
c0112e2b:	c7 44 24 0c fc 60 12 	movl   $0xc01260fc,0xc(%esp)
c0112e32:	c0 
c0112e33:	c7 44 24 08 d5 60 12 	movl   $0xc01260d5,0x8(%esp)
c0112e3a:	c0 
c0112e3b:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c0112e42:	00 
c0112e43:	c7 04 24 ea 60 12 c0 	movl   $0xc01260ea,(%esp)
c0112e4a:	e8 c7 e3 fe ff       	call   c0101216 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0112e4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e52:	83 c0 0c             	add    $0xc,%eax
c0112e55:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0112e58:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112e5b:	8b 40 04             	mov    0x4(%eax),%eax
c0112e5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0112e61:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0112e67:	74 08                	je     c0112e71 <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c0112e69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e6c:	83 e8 0c             	sub    $0xc,%eax
c0112e6f:	eb 05                	jmp    c0112e76 <wait_queue_next+0x78>
    }
    return NULL;
c0112e71:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112e76:	c9                   	leave  
c0112e77:	c3                   	ret    

c0112e78 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0112e78:	55                   	push   %ebp
c0112e79:	89 e5                	mov    %esp,%ebp
c0112e7b:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0112e7e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e81:	83 c0 0c             	add    $0xc,%eax
c0112e84:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0112e87:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e8a:	8b 40 04             	mov    0x4(%eax),%eax
c0112e8d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0112e90:	0f 94 c0             	sete   %al
c0112e93:	0f b6 c0             	movzbl %al,%eax
c0112e96:	85 c0                	test   %eax,%eax
c0112e98:	75 0b                	jne    c0112ea5 <wait_queue_prev+0x2d>
c0112e9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e9d:	8b 40 08             	mov    0x8(%eax),%eax
c0112ea0:	3b 45 08             	cmp    0x8(%ebp),%eax
c0112ea3:	74 24                	je     c0112ec9 <wait_queue_prev+0x51>
c0112ea5:	c7 44 24 0c fc 60 12 	movl   $0xc01260fc,0xc(%esp)
c0112eac:	c0 
c0112ead:	c7 44 24 08 d5 60 12 	movl   $0xc01260d5,0x8(%esp)
c0112eb4:	c0 
c0112eb5:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0112ebc:	00 
c0112ebd:	c7 04 24 ea 60 12 c0 	movl   $0xc01260ea,(%esp)
c0112ec4:	e8 4d e3 fe ff       	call   c0101216 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c0112ec9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ecc:	83 c0 0c             	add    $0xc,%eax
c0112ecf:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0112ed2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112ed5:	8b 00                	mov    (%eax),%eax
c0112ed7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0112eda:	8b 45 08             	mov    0x8(%ebp),%eax
c0112edd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0112ee0:	74 08                	je     c0112eea <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c0112ee2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112ee5:	83 e8 0c             	sub    $0xc,%eax
c0112ee8:	eb 05                	jmp    c0112eef <wait_queue_prev+0x77>
    }
    return NULL;
c0112eea:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112eef:	c9                   	leave  
c0112ef0:	c3                   	ret    

c0112ef1 <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c0112ef1:	55                   	push   %ebp
c0112ef2:	89 e5                	mov    %esp,%ebp
c0112ef4:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0112ef7:	8b 45 08             	mov    0x8(%ebp),%eax
c0112efa:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0112efd:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0112f00:	8b 40 04             	mov    0x4(%eax),%eax
c0112f03:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0112f06:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f09:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0112f0c:	74 08                	je     c0112f16 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c0112f0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0112f11:	83 e8 0c             	sub    $0xc,%eax
c0112f14:	eb 05                	jmp    c0112f1b <wait_queue_first+0x2a>
    }
    return NULL;
c0112f16:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112f1b:	c9                   	leave  
c0112f1c:	c3                   	ret    

c0112f1d <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c0112f1d:	55                   	push   %ebp
c0112f1e:	89 e5                	mov    %esp,%ebp
c0112f20:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c0112f23:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f26:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0112f29:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0112f2c:	8b 00                	mov    (%eax),%eax
c0112f2e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0112f31:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f34:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0112f37:	74 08                	je     c0112f41 <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c0112f39:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0112f3c:	83 e8 0c             	sub    $0xc,%eax
c0112f3f:	eb 05                	jmp    c0112f46 <wait_queue_last+0x29>
    }
    return NULL;
c0112f41:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112f46:	c9                   	leave  
c0112f47:	c3                   	ret    

c0112f48 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c0112f48:	55                   	push   %ebp
c0112f49:	89 e5                	mov    %esp,%ebp
c0112f4b:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c0112f4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f51:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0112f54:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0112f57:	8b 40 04             	mov    0x4(%eax),%eax
c0112f5a:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0112f5d:	0f 94 c0             	sete   %al
c0112f60:	0f b6 c0             	movzbl %al,%eax
}
c0112f63:	c9                   	leave  
c0112f64:	c3                   	ret    

c0112f65 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c0112f65:	55                   	push   %ebp
c0112f66:	89 e5                	mov    %esp,%ebp
c0112f68:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c0112f6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f6e:	83 c0 0c             	add    $0xc,%eax
c0112f71:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0112f74:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0112f77:	8b 40 04             	mov    0x4(%eax),%eax
c0112f7a:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0112f7d:	0f 94 c0             	sete   %al
c0112f80:	0f b6 c0             	movzbl %al,%eax
c0112f83:	85 c0                	test   %eax,%eax
c0112f85:	0f 94 c0             	sete   %al
c0112f88:	0f b6 c0             	movzbl %al,%eax
}
c0112f8b:	c9                   	leave  
c0112f8c:	c3                   	ret    

c0112f8d <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c0112f8d:	55                   	push   %ebp
c0112f8e:	89 e5                	mov    %esp,%ebp
c0112f90:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c0112f93:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112f97:	74 12                	je     c0112fab <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c0112f99:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f9c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112fa0:	8b 45 08             	mov    0x8(%ebp),%eax
c0112fa3:	89 04 24             	mov    %eax,(%esp)
c0112fa6:	e8 b5 fd ff ff       	call   c0112d60 <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c0112fab:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fae:	8b 55 10             	mov    0x10(%ebp),%edx
c0112fb1:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c0112fb4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fb7:	8b 00                	mov    (%eax),%eax
c0112fb9:	89 04 24             	mov    %eax,(%esp)
c0112fbc:	e8 49 53 00 00       	call   c011830a <wakeup_proc>
}
c0112fc1:	c9                   	leave  
c0112fc2:	c3                   	ret    

c0112fc3 <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0112fc3:	55                   	push   %ebp
c0112fc4:	89 e5                	mov    %esp,%ebp
c0112fc6:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0112fc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0112fcc:	89 04 24             	mov    %eax,(%esp)
c0112fcf:	e8 1d ff ff ff       	call   c0112ef1 <wait_queue_first>
c0112fd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112fd7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112fdb:	74 20                	je     c0112ffd <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c0112fdd:	8b 45 10             	mov    0x10(%ebp),%eax
c0112fe0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112fe4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fe7:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112feb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112fee:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112ff2:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ff5:	89 04 24             	mov    %eax,(%esp)
c0112ff8:	e8 90 ff ff ff       	call   c0112f8d <wakeup_wait>
    }
}
c0112ffd:	c9                   	leave  
c0112ffe:	c3                   	ret    

c0112fff <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0112fff:	55                   	push   %ebp
c0113000:	89 e5                	mov    %esp,%ebp
c0113002:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0113005:	8b 45 08             	mov    0x8(%ebp),%eax
c0113008:	89 04 24             	mov    %eax,(%esp)
c011300b:	e8 e1 fe ff ff       	call   c0112ef1 <wait_queue_first>
c0113010:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113013:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113017:	74 79                	je     c0113092 <wakeup_queue+0x93>
        if (del) {
c0113019:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011301d:	74 37                	je     c0113056 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c011301f:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0113026:	00 
c0113027:	8b 45 0c             	mov    0xc(%ebp),%eax
c011302a:	89 44 24 08          	mov    %eax,0x8(%esp)
c011302e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113031:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113035:	8b 45 08             	mov    0x8(%ebp),%eax
c0113038:	89 04 24             	mov    %eax,(%esp)
c011303b:	e8 4d ff ff ff       	call   c0112f8d <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c0113040:	8b 45 08             	mov    0x8(%ebp),%eax
c0113043:	89 04 24             	mov    %eax,(%esp)
c0113046:	e8 a6 fe ff ff       	call   c0112ef1 <wait_queue_first>
c011304b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011304e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113052:	75 cb                	jne    c011301f <wakeup_queue+0x20>
c0113054:	eb 3c                	jmp    c0113092 <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c0113056:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c011305d:	00 
c011305e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113061:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113065:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113068:	89 44 24 04          	mov    %eax,0x4(%esp)
c011306c:	8b 45 08             	mov    0x8(%ebp),%eax
c011306f:	89 04 24             	mov    %eax,(%esp)
c0113072:	e8 16 ff ff ff       	call   c0112f8d <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c0113077:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011307a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011307e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113081:	89 04 24             	mov    %eax,(%esp)
c0113084:	e8 75 fd ff ff       	call   c0112dfe <wait_queue_next>
c0113089:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011308c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113090:	75 c4                	jne    c0113056 <wakeup_queue+0x57>
        }
    }
}
c0113092:	c9                   	leave  
c0113093:	c3                   	ret    

c0113094 <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c0113094:	55                   	push   %ebp
c0113095:	89 e5                	mov    %esp,%ebp
c0113097:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c011309a:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c011309f:	85 c0                	test   %eax,%eax
c01130a1:	75 24                	jne    c01130c7 <wait_current_set+0x33>
c01130a3:	c7 44 24 0c 39 61 12 	movl   $0xc0126139,0xc(%esp)
c01130aa:	c0 
c01130ab:	c7 44 24 08 d5 60 12 	movl   $0xc01260d5,0x8(%esp)
c01130b2:	c0 
c01130b3:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c01130ba:	00 
c01130bb:	c7 04 24 ea 60 12 c0 	movl   $0xc01260ea,(%esp)
c01130c2:	e8 4f e1 fe ff       	call   c0101216 <__panic>
    wait_init(wait, current);
c01130c7:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01130cc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01130d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01130d3:	89 04 24             	mov    %eax,(%esp)
c01130d6:	e8 8b fb ff ff       	call   c0112c66 <wait_init>
    current->state = PROC_SLEEPING;
c01130db:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01130e0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c01130e6:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01130eb:	8b 55 10             	mov    0x10(%ebp),%edx
c01130ee:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c01130f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01130f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01130fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01130fe:	89 04 24             	mov    %eax,(%esp)
c0113101:	e8 b9 fb ff ff       	call   c0112cbf <wait_queue_add>
}
c0113106:	c9                   	leave  
c0113107:	c3                   	ret    

c0113108 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c0113108:	55                   	push   %ebp
c0113109:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c011310b:	8b 45 08             	mov    0x8(%ebp),%eax
c011310e:	8b 40 08             	mov    0x8(%eax),%eax
}
c0113111:	5d                   	pop    %ebp
c0113112:	c3                   	ret    

c0113113 <fopen_count>:
int file_dup(int fd1, int fd2);
int file_pipe(int fd[]);
int file_mkfifo(const char *name, uint32_t open_flags);

static inline int
fopen_count(struct file *file) {
c0113113:	55                   	push   %ebp
c0113114:	89 e5                	mov    %esp,%ebp
    return file->open_count;
c0113116:	8b 45 08             	mov    0x8(%ebp),%eax
c0113119:	8b 40 18             	mov    0x18(%eax),%eax
}
c011311c:	5d                   	pop    %ebp
c011311d:	c3                   	ret    

c011311e <fopen_count_inc>:

static inline int
fopen_count_inc(struct file *file) {
c011311e:	55                   	push   %ebp
c011311f:	89 e5                	mov    %esp,%ebp
    file->open_count += 1;
c0113121:	8b 45 08             	mov    0x8(%ebp),%eax
c0113124:	8b 40 18             	mov    0x18(%eax),%eax
c0113127:	8d 50 01             	lea    0x1(%eax),%edx
c011312a:	8b 45 08             	mov    0x8(%ebp),%eax
c011312d:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c0113130:	8b 45 08             	mov    0x8(%ebp),%eax
c0113133:	8b 40 18             	mov    0x18(%eax),%eax
}
c0113136:	5d                   	pop    %ebp
c0113137:	c3                   	ret    

c0113138 <fopen_count_dec>:

static inline int
fopen_count_dec(struct file *file) {
c0113138:	55                   	push   %ebp
c0113139:	89 e5                	mov    %esp,%ebp
    file->open_count -= 1;
c011313b:	8b 45 08             	mov    0x8(%ebp),%eax
c011313e:	8b 40 18             	mov    0x18(%eax),%eax
c0113141:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113144:	8b 45 08             	mov    0x8(%ebp),%eax
c0113147:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c011314a:	8b 45 08             	mov    0x8(%ebp),%eax
c011314d:	8b 40 18             	mov    0x18(%eax),%eax
}
c0113150:	5d                   	pop    %ebp
c0113151:	c3                   	ret    

c0113152 <get_fd_array>:

#define testfd(fd)                          ((fd) >= 0 && (fd) < FILES_STRUCT_NENTRY)

// get_fd_array - get current process's open files table
static struct file *
get_fd_array(void) {
c0113152:	55                   	push   %ebp
c0113153:	89 e5                	mov    %esp,%ebp
c0113155:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = current->filesp;
c0113158:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c011315d:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c0113163:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(filesp != NULL && files_count(filesp) > 0);
c0113166:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011316a:	74 0f                	je     c011317b <get_fd_array+0x29>
c011316c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011316f:	89 04 24             	mov    %eax,(%esp)
c0113172:	e8 91 ff ff ff       	call   c0113108 <files_count>
c0113177:	85 c0                	test   %eax,%eax
c0113179:	7f 24                	jg     c011319f <get_fd_array+0x4d>
c011317b:	c7 44 24 0c 4c 61 12 	movl   $0xc012614c,0xc(%esp)
c0113182:	c0 
c0113183:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c011318a:	c0 
c011318b:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c0113192:	00 
c0113193:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c011319a:	e8 77 e0 fe ff       	call   c0101216 <__panic>
    return filesp->fd_array;
c011319f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01131a2:	8b 40 04             	mov    0x4(%eax),%eax
}
c01131a5:	c9                   	leave  
c01131a6:	c3                   	ret    

c01131a7 <fd_array_init>:

// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
c01131a7:	55                   	push   %ebp
c01131a8:	89 e5                	mov    %esp,%ebp
c01131aa:	83 ec 10             	sub    $0x10,%esp
    int fd;
    struct file *file = fd_array;
c01131ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01131b0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c01131b3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01131ba:	eb 24                	jmp    c01131e0 <fd_array_init+0x39>
        file->open_count = 0;
c01131bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01131bf:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        file->status = FD_NONE, file->fd = fd;
c01131c6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01131c9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c01131cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01131d2:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01131d5:	89 50 0c             	mov    %edx,0xc(%eax)
// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
    int fd;
    struct file *file = fd_array;
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c01131d8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01131dc:	83 45 f8 1c          	addl   $0x1c,-0x8(%ebp)
c01131e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01131e3:	3d 90 00 00 00       	cmp    $0x90,%eax
c01131e8:	76 d2                	jbe    c01131bc <fd_array_init+0x15>
        file->open_count = 0;
        file->status = FD_NONE, file->fd = fd;
    }
}
c01131ea:	c9                   	leave  
c01131eb:	c3                   	ret    

c01131ec <fd_array_alloc>:

// fs_array_alloc - allocate a free file item (with FD_NONE status) in open files table
static int
fd_array_alloc(int fd, struct file **file_store) {
c01131ec:	55                   	push   %ebp
c01131ed:	89 e5                	mov    %esp,%ebp
c01131ef:	83 ec 28             	sub    $0x28,%esp
//    panic("debug");
    struct file *file = get_fd_array();
c01131f2:	e8 5b ff ff ff       	call   c0113152 <get_fd_array>
c01131f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (fd == NO_FD) {
c01131fa:	81 7d 08 d9 6a ff ff 	cmpl   $0xffff6ad9,0x8(%ebp)
c0113201:	75 30                	jne    c0113233 <fd_array_alloc+0x47>
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c0113203:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
c011320a:	eb 13                	jmp    c011321f <fd_array_alloc+0x33>
            if (file->status == FD_NONE) {
c011320c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011320f:	8b 00                	mov    (%eax),%eax
c0113211:	85 c0                	test   %eax,%eax
c0113213:	75 02                	jne    c0113217 <fd_array_alloc+0x2b>
                goto found;
c0113215:	eb 59                	jmp    c0113270 <fd_array_alloc+0x84>
static int
fd_array_alloc(int fd, struct file **file_store) {
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c0113217:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011321b:	83 45 f4 1c          	addl   $0x1c,-0xc(%ebp)
c011321f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113222:	3d 90 00 00 00       	cmp    $0x90,%eax
c0113227:	76 e3                	jbe    c011320c <fd_array_alloc+0x20>
            if (file->status == FD_NONE) {
                goto found;
            }
        }
        return -E_MAX_OPEN;
c0113229:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
c011322e:	e9 90 00 00 00       	jmp    c01132c3 <fd_array_alloc+0xd7>
    }
    else {
        if (testfd(fd)) {
c0113233:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0113237:	78 30                	js     c0113269 <fd_array_alloc+0x7d>
c0113239:	8b 45 08             	mov    0x8(%ebp),%eax
c011323c:	3d 90 00 00 00       	cmp    $0x90,%eax
c0113241:	77 26                	ja     c0113269 <fd_array_alloc+0x7d>
            file += fd;
c0113243:	8b 45 08             	mov    0x8(%ebp),%eax
c0113246:	c1 e0 02             	shl    $0x2,%eax
c0113249:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0113250:	29 c2                	sub    %eax,%edx
c0113252:	89 d0                	mov    %edx,%eax
c0113254:	01 45 f4             	add    %eax,-0xc(%ebp)
            if (file->status == FD_NONE) {
c0113257:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011325a:	8b 00                	mov    (%eax),%eax
c011325c:	85 c0                	test   %eax,%eax
c011325e:	75 02                	jne    c0113262 <fd_array_alloc+0x76>
                goto found;
c0113260:	eb 0e                	jmp    c0113270 <fd_array_alloc+0x84>
            }
            return -E_BUSY;
c0113262:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c0113267:	eb 5a                	jmp    c01132c3 <fd_array_alloc+0xd7>
        }
        return -E_INVAL;
c0113269:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011326e:	eb 53                	jmp    c01132c3 <fd_array_alloc+0xd7>
    }
found:
    assert(fopen_count(file) == 0);
c0113270:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113273:	89 04 24             	mov    %eax,(%esp)
c0113276:	e8 98 fe ff ff       	call   c0113113 <fopen_count>
c011327b:	85 c0                	test   %eax,%eax
c011327d:	74 24                	je     c01132a3 <fd_array_alloc+0xb7>
c011327f:	c7 44 24 0c 9a 61 12 	movl   $0xc012619a,0xc(%esp)
c0113286:	c0 
c0113287:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c011328e:	c0 
c011328f:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c0113296:	00 
c0113297:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c011329e:	e8 73 df fe ff       	call   c0101216 <__panic>
    file->status = FD_INIT, file->node = NULL;
c01132a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01132a6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c01132ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01132af:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    *file_store = file;
c01132b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01132b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01132bc:	89 10                	mov    %edx,(%eax)
    return 0;
c01132be:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01132c3:	c9                   	leave  
c01132c4:	c3                   	ret    

c01132c5 <fd_array_free>:

// fd_array_free - free a file item in open files table
static void
fd_array_free(struct file *file) {
c01132c5:	55                   	push   %ebp
c01132c6:	89 e5                	mov    %esp,%ebp
c01132c8:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT || file->status == FD_CLOSED);
c01132cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01132ce:	8b 00                	mov    (%eax),%eax
c01132d0:	83 f8 01             	cmp    $0x1,%eax
c01132d3:	74 2e                	je     c0113303 <fd_array_free+0x3e>
c01132d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01132d8:	8b 00                	mov    (%eax),%eax
c01132da:	83 f8 03             	cmp    $0x3,%eax
c01132dd:	74 24                	je     c0113303 <fd_array_free+0x3e>
c01132df:	c7 44 24 0c b4 61 12 	movl   $0xc01261b4,0xc(%esp)
c01132e6:	c0 
c01132e7:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c01132ee:	c0 
c01132ef:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c01132f6:	00 
c01132f7:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c01132fe:	e8 13 df fe ff       	call   c0101216 <__panic>
    assert(fopen_count(file) == 0);
c0113303:	8b 45 08             	mov    0x8(%ebp),%eax
c0113306:	89 04 24             	mov    %eax,(%esp)
c0113309:	e8 05 fe ff ff       	call   c0113113 <fopen_count>
c011330e:	85 c0                	test   %eax,%eax
c0113310:	74 24                	je     c0113336 <fd_array_free+0x71>
c0113312:	c7 44 24 0c 9a 61 12 	movl   $0xc012619a,0xc(%esp)
c0113319:	c0 
c011331a:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113321:	c0 
c0113322:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c0113329:	00 
c011332a:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113331:	e8 e0 de fe ff       	call   c0101216 <__panic>
    if (file->status == FD_CLOSED) {
c0113336:	8b 45 08             	mov    0x8(%ebp),%eax
c0113339:	8b 00                	mov    (%eax),%eax
c011333b:	83 f8 03             	cmp    $0x3,%eax
c011333e:	75 0e                	jne    c011334e <fd_array_free+0x89>
        vfs_close(file->node);
c0113340:	8b 45 08             	mov    0x8(%ebp),%eax
c0113343:	8b 40 14             	mov    0x14(%eax),%eax
c0113346:	89 04 24             	mov    %eax,(%esp)
c0113349:	e8 39 75 00 00       	call   c011a887 <vfs_close>
    }
    file->status = FD_NONE;
c011334e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113351:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c0113357:	c9                   	leave  
c0113358:	c3                   	ret    

c0113359 <fd_array_acquire>:

static void
fd_array_acquire(struct file *file) {
c0113359:	55                   	push   %ebp
c011335a:	89 e5                	mov    %esp,%ebp
c011335c:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c011335f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113362:	8b 00                	mov    (%eax),%eax
c0113364:	83 f8 02             	cmp    $0x2,%eax
c0113367:	74 24                	je     c011338d <fd_array_acquire+0x34>
c0113369:	c7 44 24 0c e9 61 12 	movl   $0xc01261e9,0xc(%esp)
c0113370:	c0 
c0113371:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113378:	c0 
c0113379:	c7 44 24 04 4e 00 00 	movl   $0x4e,0x4(%esp)
c0113380:	00 
c0113381:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113388:	e8 89 de fe ff       	call   c0101216 <__panic>
    fopen_count_inc(file);
c011338d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113390:	89 04 24             	mov    %eax,(%esp)
c0113393:	e8 86 fd ff ff       	call   c011311e <fopen_count_inc>
}
c0113398:	c9                   	leave  
c0113399:	c3                   	ret    

c011339a <fd_array_release>:

// fd_array_release - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
static void
fd_array_release(struct file *file) {
c011339a:	55                   	push   %ebp
c011339b:	89 e5                	mov    %esp,%ebp
c011339d:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED || file->status == FD_CLOSED);
c01133a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01133a3:	8b 00                	mov    (%eax),%eax
c01133a5:	83 f8 02             	cmp    $0x2,%eax
c01133a8:	74 2e                	je     c01133d8 <fd_array_release+0x3e>
c01133aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01133ad:	8b 00                	mov    (%eax),%eax
c01133af:	83 f8 03             	cmp    $0x3,%eax
c01133b2:	74 24                	je     c01133d8 <fd_array_release+0x3e>
c01133b4:	c7 44 24 0c 04 62 12 	movl   $0xc0126204,0xc(%esp)
c01133bb:	c0 
c01133bc:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c01133c3:	c0 
c01133c4:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c01133cb:	00 
c01133cc:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c01133d3:	e8 3e de fe ff       	call   c0101216 <__panic>
    assert(fopen_count(file) > 0);
c01133d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01133db:	89 04 24             	mov    %eax,(%esp)
c01133de:	e8 30 fd ff ff       	call   c0113113 <fopen_count>
c01133e3:	85 c0                	test   %eax,%eax
c01133e5:	7f 24                	jg     c011340b <fd_array_release+0x71>
c01133e7:	c7 44 24 0c 3b 62 12 	movl   $0xc012623b,0xc(%esp)
c01133ee:	c0 
c01133ef:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c01133f6:	c0 
c01133f7:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
c01133fe:	00 
c01133ff:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113406:	e8 0b de fe ff       	call   c0101216 <__panic>
    if (fopen_count_dec(file) == 0) {
c011340b:	8b 45 08             	mov    0x8(%ebp),%eax
c011340e:	89 04 24             	mov    %eax,(%esp)
c0113411:	e8 22 fd ff ff       	call   c0113138 <fopen_count_dec>
c0113416:	85 c0                	test   %eax,%eax
c0113418:	75 0b                	jne    c0113425 <fd_array_release+0x8b>
        fd_array_free(file);
c011341a:	8b 45 08             	mov    0x8(%ebp),%eax
c011341d:	89 04 24             	mov    %eax,(%esp)
c0113420:	e8 a0 fe ff ff       	call   c01132c5 <fd_array_free>
    }
}
c0113425:	c9                   	leave  
c0113426:	c3                   	ret    

c0113427 <fd_array_open>:

// fd_array_open - file's open_count++, set status to FD_OPENED
void
fd_array_open(struct file *file) {
c0113427:	55                   	push   %ebp
c0113428:	89 e5                	mov    %esp,%ebp
c011342a:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT && file->node != NULL);
c011342d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113430:	8b 00                	mov    (%eax),%eax
c0113432:	83 f8 01             	cmp    $0x1,%eax
c0113435:	75 0a                	jne    c0113441 <fd_array_open+0x1a>
c0113437:	8b 45 08             	mov    0x8(%ebp),%eax
c011343a:	8b 40 14             	mov    0x14(%eax),%eax
c011343d:	85 c0                	test   %eax,%eax
c011343f:	75 24                	jne    c0113465 <fd_array_open+0x3e>
c0113441:	c7 44 24 0c 54 62 12 	movl   $0xc0126254,0xc(%esp)
c0113448:	c0 
c0113449:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113450:	c0 
c0113451:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0113458:	00 
c0113459:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113460:	e8 b1 dd fe ff       	call   c0101216 <__panic>
    file->status = FD_OPENED;
c0113465:	8b 45 08             	mov    0x8(%ebp),%eax
c0113468:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    fopen_count_inc(file);
c011346e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113471:	89 04 24             	mov    %eax,(%esp)
c0113474:	e8 a5 fc ff ff       	call   c011311e <fopen_count_inc>
}
c0113479:	c9                   	leave  
c011347a:	c3                   	ret    

c011347b <fd_array_close>:

// fd_array_close - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
void
fd_array_close(struct file *file) {
c011347b:	55                   	push   %ebp
c011347c:	89 e5                	mov    %esp,%ebp
c011347e:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c0113481:	8b 45 08             	mov    0x8(%ebp),%eax
c0113484:	8b 00                	mov    (%eax),%eax
c0113486:	83 f8 02             	cmp    $0x2,%eax
c0113489:	74 24                	je     c01134af <fd_array_close+0x34>
c011348b:	c7 44 24 0c e9 61 12 	movl   $0xc01261e9,0xc(%esp)
c0113492:	c0 
c0113493:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c011349a:	c0 
c011349b:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c01134a2:	00 
c01134a3:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c01134aa:	e8 67 dd fe ff       	call   c0101216 <__panic>
    assert(fopen_count(file) > 0);
c01134af:	8b 45 08             	mov    0x8(%ebp),%eax
c01134b2:	89 04 24             	mov    %eax,(%esp)
c01134b5:	e8 59 fc ff ff       	call   c0113113 <fopen_count>
c01134ba:	85 c0                	test   %eax,%eax
c01134bc:	7f 24                	jg     c01134e2 <fd_array_close+0x67>
c01134be:	c7 44 24 0c 3b 62 12 	movl   $0xc012623b,0xc(%esp)
c01134c5:	c0 
c01134c6:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c01134cd:	c0 
c01134ce:	c7 44 24 04 68 00 00 	movl   $0x68,0x4(%esp)
c01134d5:	00 
c01134d6:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c01134dd:	e8 34 dd fe ff       	call   c0101216 <__panic>
    file->status = FD_CLOSED;
c01134e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01134e5:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    if (fopen_count_dec(file) == 0) {
c01134eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01134ee:	89 04 24             	mov    %eax,(%esp)
c01134f1:	e8 42 fc ff ff       	call   c0113138 <fopen_count_dec>
c01134f6:	85 c0                	test   %eax,%eax
c01134f8:	75 0b                	jne    c0113505 <fd_array_close+0x8a>
        fd_array_free(file);
c01134fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01134fd:	89 04 24             	mov    %eax,(%esp)
c0113500:	e8 c0 fd ff ff       	call   c01132c5 <fd_array_free>
    }
}
c0113505:	c9                   	leave  
c0113506:	c3                   	ret    

c0113507 <fd_array_dup>:

//fs_array_dup - duplicate file 'from'  to file 'to'
void
fd_array_dup(struct file *to, struct file *from) {
c0113507:	55                   	push   %ebp
c0113508:	89 e5                	mov    %esp,%ebp
c011350a:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[fd_array_dup]from fd=%d, to fd=%d\n",from->fd, to->fd);
    assert(to->status == FD_INIT && from->status == FD_OPENED);
c011350d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113510:	8b 00                	mov    (%eax),%eax
c0113512:	83 f8 01             	cmp    $0x1,%eax
c0113515:	75 0a                	jne    c0113521 <fd_array_dup+0x1a>
c0113517:	8b 45 0c             	mov    0xc(%ebp),%eax
c011351a:	8b 00                	mov    (%eax),%eax
c011351c:	83 f8 02             	cmp    $0x2,%eax
c011351f:	74 24                	je     c0113545 <fd_array_dup+0x3e>
c0113521:	c7 44 24 0c 84 62 12 	movl   $0xc0126284,0xc(%esp)
c0113528:	c0 
c0113529:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113530:	c0 
c0113531:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c0113538:	00 
c0113539:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113540:	e8 d1 dc fe ff       	call   c0101216 <__panic>
    to->pos = from->pos;
c0113545:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113548:	8b 50 10             	mov    0x10(%eax),%edx
c011354b:	8b 45 08             	mov    0x8(%ebp),%eax
c011354e:	89 50 10             	mov    %edx,0x10(%eax)
    to->readable = from->readable;
c0113551:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113554:	8b 50 04             	mov    0x4(%eax),%edx
c0113557:	8b 45 08             	mov    0x8(%ebp),%eax
c011355a:	89 50 04             	mov    %edx,0x4(%eax)
    to->writable = from->writable;
c011355d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113560:	8b 50 08             	mov    0x8(%eax),%edx
c0113563:	8b 45 08             	mov    0x8(%ebp),%eax
c0113566:	89 50 08             	mov    %edx,0x8(%eax)
    struct inode *node = from->node;
c0113569:	8b 45 0c             	mov    0xc(%ebp),%eax
c011356c:	8b 40 14             	mov    0x14(%eax),%eax
c011356f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vop_ref_inc(node), vop_open_inc(node);
c0113572:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113575:	89 04 24             	mov    %eax,(%esp)
c0113578:	e8 51 61 00 00       	call   c01196ce <inode_ref_inc>
c011357d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113580:	89 04 24             	mov    %eax,(%esp)
c0113583:	e8 7e 62 00 00       	call   c0119806 <inode_open_inc>
    to->node = node;
c0113588:	8b 45 08             	mov    0x8(%ebp),%eax
c011358b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011358e:	89 50 14             	mov    %edx,0x14(%eax)
    fd_array_open(to);
c0113591:	8b 45 08             	mov    0x8(%ebp),%eax
c0113594:	89 04 24             	mov    %eax,(%esp)
c0113597:	e8 8b fe ff ff       	call   c0113427 <fd_array_open>
}
c011359c:	c9                   	leave  
c011359d:	c3                   	ret    

c011359e <fd2file>:

// fd2file - use fd as index of fd_array, return the array item (file)
static inline int
fd2file(int fd, struct file **file_store) {
c011359e:	55                   	push   %ebp
c011359f:	89 e5                	mov    %esp,%ebp
c01135a1:	83 ec 18             	sub    $0x18,%esp
    if (testfd(fd)) {
c01135a4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01135a8:	78 4b                	js     c01135f5 <fd2file+0x57>
c01135aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01135ad:	3d 90 00 00 00       	cmp    $0x90,%eax
c01135b2:	77 41                	ja     c01135f5 <fd2file+0x57>
        struct file *file = get_fd_array() + fd;
c01135b4:	e8 99 fb ff ff       	call   c0113152 <get_fd_array>
c01135b9:	89 c2                	mov    %eax,%edx
c01135bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01135be:	c1 e0 02             	shl    $0x2,%eax
c01135c1:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
c01135c8:	29 c1                	sub    %eax,%ecx
c01135ca:	89 c8                	mov    %ecx,%eax
c01135cc:	01 d0                	add    %edx,%eax
c01135ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (file->status == FD_OPENED && file->fd == fd) {
c01135d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01135d4:	8b 00                	mov    (%eax),%eax
c01135d6:	83 f8 02             	cmp    $0x2,%eax
c01135d9:	75 1a                	jne    c01135f5 <fd2file+0x57>
c01135db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01135de:	8b 40 0c             	mov    0xc(%eax),%eax
c01135e1:	3b 45 08             	cmp    0x8(%ebp),%eax
c01135e4:	75 0f                	jne    c01135f5 <fd2file+0x57>
            *file_store = file;
c01135e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01135e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01135ec:	89 10                	mov    %edx,(%eax)
            return 0;
c01135ee:	b8 00 00 00 00       	mov    $0x0,%eax
c01135f3:	eb 05                	jmp    c01135fa <fd2file+0x5c>
        }
    }
    return -E_INVAL;
c01135f5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c01135fa:	c9                   	leave  
c01135fb:	c3                   	ret    

c01135fc <file_testfd>:

// file_testfd - test file is readble or writable?
bool
file_testfd(int fd, bool readable, bool writable) {
c01135fc:	55                   	push   %ebp
c01135fd:	89 e5                	mov    %esp,%ebp
c01135ff:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c0113602:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0113605:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113609:	8b 45 08             	mov    0x8(%ebp),%eax
c011360c:	89 04 24             	mov    %eax,(%esp)
c011360f:	e8 8a ff ff ff       	call   c011359e <fd2file>
c0113614:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113617:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011361b:	74 07                	je     c0113624 <file_testfd+0x28>
        return 0;
c011361d:	b8 00 00 00 00       	mov    $0x0,%eax
c0113622:	eb 33                	jmp    c0113657 <file_testfd+0x5b>
    }
    if (readable && !file->readable) {
c0113624:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0113628:	74 11                	je     c011363b <file_testfd+0x3f>
c011362a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011362d:	8b 40 04             	mov    0x4(%eax),%eax
c0113630:	85 c0                	test   %eax,%eax
c0113632:	75 07                	jne    c011363b <file_testfd+0x3f>
        return 0;
c0113634:	b8 00 00 00 00       	mov    $0x0,%eax
c0113639:	eb 1c                	jmp    c0113657 <file_testfd+0x5b>
    }
    if (writable && !file->writable) {
c011363b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011363f:	74 11                	je     c0113652 <file_testfd+0x56>
c0113641:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113644:	8b 40 08             	mov    0x8(%eax),%eax
c0113647:	85 c0                	test   %eax,%eax
c0113649:	75 07                	jne    c0113652 <file_testfd+0x56>
        return 0;
c011364b:	b8 00 00 00 00       	mov    $0x0,%eax
c0113650:	eb 05                	jmp    c0113657 <file_testfd+0x5b>
    }
    return 1;
c0113652:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0113657:	c9                   	leave  
c0113658:	c3                   	ret    

c0113659 <file_open>:

// open file
int
file_open(char *path, uint32_t open_flags) {
c0113659:	55                   	push   %ebp
c011365a:	89 e5                	mov    %esp,%ebp
c011365c:	83 ec 48             	sub    $0x48,%esp
    bool readable = 0, writable = 0;
c011365f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0113666:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    switch (open_flags & O_ACCMODE) {
c011366d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113670:	83 e0 03             	and    $0x3,%eax
c0113673:	83 f8 01             	cmp    $0x1,%eax
c0113676:	74 15                	je     c011368d <file_open+0x34>
c0113678:	83 f8 01             	cmp    $0x1,%eax
c011367b:	72 07                	jb     c0113684 <file_open+0x2b>
c011367d:	83 f8 02             	cmp    $0x2,%eax
c0113680:	74 14                	je     c0113696 <file_open+0x3d>
c0113682:	eb 21                	jmp    c01136a5 <file_open+0x4c>
    case O_RDONLY: readable = 1; break;
c0113684:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c011368b:	eb 22                	jmp    c01136af <file_open+0x56>
    case O_WRONLY: writable = 1; break;
c011368d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0113694:	eb 19                	jmp    c01136af <file_open+0x56>
    case O_RDWR:
        readable = writable = 1;
c0113696:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c011369d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01136a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        break;
c01136a3:	eb 0a                	jmp    c01136af <file_open+0x56>
    default:
        return -E_INVAL;
c01136a5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01136aa:	e9 76 01 00 00       	jmp    c0113825 <file_open+0x1cc>
    }

    int ret;
    struct file *file;
    if ((ret = fd_array_alloc(NO_FD, &file)) != 0) {
c01136af:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01136b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01136b6:	c7 04 24 d9 6a ff ff 	movl   $0xffff6ad9,(%esp)
c01136bd:	e8 2a fb ff ff       	call   c01131ec <fd_array_alloc>
c01136c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01136c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01136c9:	74 08                	je     c01136d3 <file_open+0x7a>
        return ret;
c01136cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01136ce:	e9 52 01 00 00       	jmp    c0113825 <file_open+0x1cc>
    }

    struct inode *node;
    if ((ret = vfs_open(path, open_flags, &node)) != 0) {
c01136d3:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01136d6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01136da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01136dd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01136e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01136e4:	89 04 24             	mov    %eax,(%esp)
c01136e7:	e8 31 6d 00 00       	call   c011a41d <vfs_open>
c01136ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01136ef:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01136f3:	74 13                	je     c0113708 <file_open+0xaf>
        fd_array_free(file);
c01136f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01136f8:	89 04 24             	mov    %eax,(%esp)
c01136fb:	e8 c5 fb ff ff       	call   c01132c5 <fd_array_free>
        return ret;
c0113700:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113703:	e9 1d 01 00 00       	jmp    c0113825 <file_open+0x1cc>
    }

    file->pos = 0;
c0113708:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011370b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    if (open_flags & O_APPEND) {
c0113712:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113715:	83 e0 20             	and    $0x20,%eax
c0113718:	85 c0                	test   %eax,%eax
c011371a:	0f 84 d9 00 00 00    	je     c01137f9 <file_open+0x1a0>
        struct stat __stat, *stat = &__stat;
c0113720:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0113723:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if ((ret = vop_fstat(node, stat)) != 0) {
c0113726:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113729:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011372c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011372f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113732:	8b 40 14             	mov    0x14(%eax),%eax
c0113735:	85 c0                	test   %eax,%eax
c0113737:	75 24                	jne    c011375d <file_open+0x104>
c0113739:	c7 44 24 0c b8 62 12 	movl   $0xc01262b8,0xc(%esp)
c0113740:	c0 
c0113741:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113748:	c0 
c0113749:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c0113750:	00 
c0113751:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113758:	e8 b9 da fe ff       	call   c0101216 <__panic>
c011375d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113761:	74 17                	je     c011377a <file_open+0x121>
c0113763:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113766:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113769:	85 c0                	test   %eax,%eax
c011376b:	74 0d                	je     c011377a <file_open+0x121>
c011376d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113770:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113773:	8b 40 14             	mov    0x14(%eax),%eax
c0113776:	85 c0                	test   %eax,%eax
c0113778:	75 24                	jne    c011379e <file_open+0x145>
c011377a:	c7 44 24 0c dc 62 12 	movl   $0xc01262dc,0xc(%esp)
c0113781:	c0 
c0113782:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113789:	c0 
c011378a:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c0113791:	00 
c0113792:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113799:	e8 78 da fe ff       	call   c0101216 <__panic>
c011379e:	c7 44 24 04 2a 63 12 	movl   $0xc012632a,0x4(%esp)
c01137a5:	c0 
c01137a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01137a9:	89 04 24             	mov    %eax,(%esp)
c01137ac:	e8 87 61 00 00       	call   c0119938 <inode_check>
c01137b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01137b4:	8b 40 3c             	mov    0x3c(%eax),%eax
c01137b7:	8b 40 14             	mov    0x14(%eax),%eax
c01137ba:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01137bd:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01137c0:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01137c4:	89 14 24             	mov    %edx,(%esp)
c01137c7:	ff d0                	call   *%eax
c01137c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01137cc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01137d0:	74 1b                	je     c01137ed <file_open+0x194>
            vfs_close(node);
c01137d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01137d5:	89 04 24             	mov    %eax,(%esp)
c01137d8:	e8 aa 70 00 00       	call   c011a887 <vfs_close>
            fd_array_free(file);
c01137dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01137e0:	89 04 24             	mov    %eax,(%esp)
c01137e3:	e8 dd fa ff ff       	call   c01132c5 <fd_array_free>
            return ret;
c01137e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01137eb:	eb 38                	jmp    c0113825 <file_open+0x1cc>
        }
        file->pos = stat->st_size;
c01137ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01137f0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01137f3:	8b 52 0c             	mov    0xc(%edx),%edx
c01137f6:	89 50 10             	mov    %edx,0x10(%eax)
    }

    file->node = node;
c01137f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01137fc:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01137ff:	89 50 14             	mov    %edx,0x14(%eax)
    file->readable = readable;
c0113802:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113805:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0113808:	89 50 04             	mov    %edx,0x4(%eax)
    file->writable = writable;
c011380b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011380e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0113811:	89 50 08             	mov    %edx,0x8(%eax)
    fd_array_open(file);
c0113814:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113817:	89 04 24             	mov    %eax,(%esp)
c011381a:	e8 08 fc ff ff       	call   c0113427 <fd_array_open>
    return file->fd;
c011381f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113822:	8b 40 0c             	mov    0xc(%eax),%eax
}
c0113825:	c9                   	leave  
c0113826:	c3                   	ret    

c0113827 <file_delete>:

//delete file
int
file_delete(char *path, uint32_t type) {
c0113827:	55                   	push   %ebp
c0113828:	89 e5                	mov    %esp,%ebp
c011382a:	83 ec 28             	sub    $0x28,%esp
	int ret;
	ret = vfs_delete(path, type);
c011382d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113830:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113834:	8b 45 08             	mov    0x8(%ebp),%eax
c0113837:	89 04 24             	mov    %eax,(%esp)
c011383a:	e8 61 6f 00 00       	call   c011a7a0 <vfs_delete>
c011383f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
c0113842:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113845:	c9                   	leave  
c0113846:	c3                   	ret    

c0113847 <file_close>:

// close file
int
file_close(int fd) {
c0113847:	55                   	push   %ebp
c0113848:	89 e5                	mov    %esp,%ebp
c011384a:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c011384d:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0113850:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113854:	8b 45 08             	mov    0x8(%ebp),%eax
c0113857:	89 04 24             	mov    %eax,(%esp)
c011385a:	e8 3f fd ff ff       	call   c011359e <fd2file>
c011385f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113862:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113866:	74 05                	je     c011386d <file_close+0x26>
        return ret;
c0113868:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011386b:	eb 10                	jmp    c011387d <file_close+0x36>
    }
    fd_array_close(file);
c011386d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113870:	89 04 24             	mov    %eax,(%esp)
c0113873:	e8 03 fc ff ff       	call   c011347b <fd_array_close>
    return 0;
c0113878:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011387d:	c9                   	leave  
c011387e:	c3                   	ret    

c011387f <file_read>:

// read file
int
file_read(int fd, void *base, size_t len, size_t *copied_store) {
c011387f:	55                   	push   %ebp
c0113880:	89 e5                	mov    %esp,%ebp
c0113882:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c0113885:	8b 45 14             	mov    0x14(%ebp),%eax
c0113888:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c011388e:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0113891:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113895:	8b 45 08             	mov    0x8(%ebp),%eax
c0113898:	89 04 24             	mov    %eax,(%esp)
c011389b:	e8 fe fc ff ff       	call   c011359e <fd2file>
c01138a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01138a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01138a7:	74 08                	je     c01138b1 <file_read+0x32>
        return ret;
c01138a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01138ac:	e9 37 01 00 00       	jmp    c01139e8 <file_read+0x169>
    }
    if (!file->readable) {
c01138b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01138b4:	8b 40 04             	mov    0x4(%eax),%eax
c01138b7:	85 c0                	test   %eax,%eax
c01138b9:	75 0a                	jne    c01138c5 <file_read+0x46>
        return -E_INVAL;
c01138bb:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01138c0:	e9 23 01 00 00       	jmp    c01139e8 <file_read+0x169>
    }
    fd_array_acquire(file);
c01138c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01138c8:	89 04 24             	mov    %eax,(%esp)
c01138cb:	e8 89 fa ff ff       	call   c0113359 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c01138d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01138d3:	8b 40 10             	mov    0x10(%eax),%eax
c01138d6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01138da:	8b 45 10             	mov    0x10(%ebp),%eax
c01138dd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01138e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01138e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01138e8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01138eb:	89 04 24             	mov    %eax,(%esp)
c01138ee:	e8 f1 0a 00 00       	call   c01143e4 <iobuf_init>
c01138f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_read(file->node, iob);
c01138f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01138f9:	8b 40 14             	mov    0x14(%eax),%eax
c01138fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01138ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113902:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113905:	8b 40 0c             	mov    0xc(%eax),%eax
c0113908:	85 c0                	test   %eax,%eax
c011390a:	75 24                	jne    c0113930 <file_read+0xb1>
c011390c:	c7 44 24 0c 30 63 12 	movl   $0xc0126330,0xc(%esp)
c0113913:	c0 
c0113914:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c011391b:	c0 
c011391c:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
c0113923:	00 
c0113924:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c011392b:	e8 e6 d8 fe ff       	call   c0101216 <__panic>
c0113930:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113934:	74 17                	je     c011394d <file_read+0xce>
c0113936:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113939:	8b 40 3c             	mov    0x3c(%eax),%eax
c011393c:	85 c0                	test   %eax,%eax
c011393e:	74 0d                	je     c011394d <file_read+0xce>
c0113940:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113943:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113946:	8b 40 0c             	mov    0xc(%eax),%eax
c0113949:	85 c0                	test   %eax,%eax
c011394b:	75 24                	jne    c0113971 <file_read+0xf2>
c011394d:	c7 44 24 0c 54 63 12 	movl   $0xc0126354,0xc(%esp)
c0113954:	c0 
c0113955:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c011395c:	c0 
c011395d:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
c0113964:	00 
c0113965:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c011396c:	e8 a5 d8 fe ff       	call   c0101216 <__panic>
c0113971:	c7 44 24 04 a1 63 12 	movl   $0xc01263a1,0x4(%esp)
c0113978:	c0 
c0113979:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011397c:	89 04 24             	mov    %eax,(%esp)
c011397f:	e8 b4 5f 00 00       	call   c0119938 <inode_check>
c0113984:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113987:	8b 40 3c             	mov    0x3c(%eax),%eax
c011398a:	8b 40 0c             	mov    0xc(%eax),%eax
c011398d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0113990:	8b 52 14             	mov    0x14(%edx),%edx
c0113993:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0113996:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011399a:	89 14 24             	mov    %edx,(%esp)
c011399d:	ff d0                	call   *%eax
c011399f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c01139a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01139a5:	8b 50 08             	mov    0x8(%eax),%edx
c01139a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01139ab:	8b 40 0c             	mov    0xc(%eax),%eax
c01139ae:	29 c2                	sub    %eax,%edx
c01139b0:	89 d0                	mov    %edx,%eax
c01139b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c01139b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01139b8:	8b 00                	mov    (%eax),%eax
c01139ba:	83 f8 02             	cmp    $0x2,%eax
c01139bd:	75 13                	jne    c01139d2 <file_read+0x153>
        file->pos += copied;
c01139bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01139c2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01139c5:	8b 52 10             	mov    0x10(%edx),%edx
c01139c8:	89 d1                	mov    %edx,%ecx
c01139ca:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01139cd:	01 ca                	add    %ecx,%edx
c01139cf:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c01139d2:	8b 45 14             	mov    0x14(%ebp),%eax
c01139d5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01139d8:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c01139da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01139dd:	89 04 24             	mov    %eax,(%esp)
c01139e0:	e8 b5 f9 ff ff       	call   c011339a <fd_array_release>
    return ret;
c01139e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01139e8:	c9                   	leave  
c01139e9:	c3                   	ret    

c01139ea <file_write>:

// write file
int
file_write(int fd, void *base, size_t len, size_t *copied_store) {
c01139ea:	55                   	push   %ebp
c01139eb:	89 e5                	mov    %esp,%ebp
c01139ed:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c01139f0:	8b 45 14             	mov    0x14(%ebp),%eax
c01139f3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c01139f9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01139fc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113a00:	8b 45 08             	mov    0x8(%ebp),%eax
c0113a03:	89 04 24             	mov    %eax,(%esp)
c0113a06:	e8 93 fb ff ff       	call   c011359e <fd2file>
c0113a0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113a0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113a12:	74 08                	je     c0113a1c <file_write+0x32>
        return ret;
c0113a14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113a17:	e9 37 01 00 00       	jmp    c0113b53 <file_write+0x169>
    }
    if (!file->writable) {
c0113a1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a1f:	8b 40 08             	mov    0x8(%eax),%eax
c0113a22:	85 c0                	test   %eax,%eax
c0113a24:	75 0a                	jne    c0113a30 <file_write+0x46>
        return -E_INVAL;
c0113a26:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113a2b:	e9 23 01 00 00       	jmp    c0113b53 <file_write+0x169>
    }
    fd_array_acquire(file);
c0113a30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a33:	89 04 24             	mov    %eax,(%esp)
c0113a36:	e8 1e f9 ff ff       	call   c0113359 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c0113a3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a3e:	8b 40 10             	mov    0x10(%eax),%eax
c0113a41:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113a45:	8b 45 10             	mov    0x10(%ebp),%eax
c0113a48:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113a4c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a4f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113a53:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0113a56:	89 04 24             	mov    %eax,(%esp)
c0113a59:	e8 86 09 00 00       	call   c01143e4 <iobuf_init>
c0113a5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_write(file->node, iob);
c0113a61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a64:	8b 40 14             	mov    0x14(%eax),%eax
c0113a67:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113a6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113a6d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113a70:	8b 40 10             	mov    0x10(%eax),%eax
c0113a73:	85 c0                	test   %eax,%eax
c0113a75:	75 24                	jne    c0113a9b <file_write+0xb1>
c0113a77:	c7 44 24 0c a8 63 12 	movl   $0xc01263a8,0xc(%esp)
c0113a7e:	c0 
c0113a7f:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113a86:	c0 
c0113a87:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c0113a8e:	00 
c0113a8f:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113a96:	e8 7b d7 fe ff       	call   c0101216 <__panic>
c0113a9b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113a9f:	74 17                	je     c0113ab8 <file_write+0xce>
c0113aa1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113aa4:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113aa7:	85 c0                	test   %eax,%eax
c0113aa9:	74 0d                	je     c0113ab8 <file_write+0xce>
c0113aab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113aae:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113ab1:	8b 40 10             	mov    0x10(%eax),%eax
c0113ab4:	85 c0                	test   %eax,%eax
c0113ab6:	75 24                	jne    c0113adc <file_write+0xf2>
c0113ab8:	c7 44 24 0c cc 63 12 	movl   $0xc01263cc,0xc(%esp)
c0113abf:	c0 
c0113ac0:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113ac7:	c0 
c0113ac8:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c0113acf:	00 
c0113ad0:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113ad7:	e8 3a d7 fe ff       	call   c0101216 <__panic>
c0113adc:	c7 44 24 04 1a 64 12 	movl   $0xc012641a,0x4(%esp)
c0113ae3:	c0 
c0113ae4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113ae7:	89 04 24             	mov    %eax,(%esp)
c0113aea:	e8 49 5e 00 00       	call   c0119938 <inode_check>
c0113aef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113af2:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113af5:	8b 40 10             	mov    0x10(%eax),%eax
c0113af8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0113afb:	8b 52 14             	mov    0x14(%edx),%edx
c0113afe:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0113b01:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0113b05:	89 14 24             	mov    %edx,(%esp)
c0113b08:	ff d0                	call   *%eax
c0113b0a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c0113b0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113b10:	8b 50 08             	mov    0x8(%eax),%edx
c0113b13:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113b16:	8b 40 0c             	mov    0xc(%eax),%eax
c0113b19:	29 c2                	sub    %eax,%edx
c0113b1b:	89 d0                	mov    %edx,%eax
c0113b1d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c0113b20:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113b23:	8b 00                	mov    (%eax),%eax
c0113b25:	83 f8 02             	cmp    $0x2,%eax
c0113b28:	75 13                	jne    c0113b3d <file_write+0x153>
        file->pos += copied;
c0113b2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113b2d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0113b30:	8b 52 10             	mov    0x10(%edx),%edx
c0113b33:	89 d1                	mov    %edx,%ecx
c0113b35:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0113b38:	01 ca                	add    %ecx,%edx
c0113b3a:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c0113b3d:	8b 45 14             	mov    0x14(%ebp),%eax
c0113b40:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0113b43:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c0113b45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113b48:	89 04 24             	mov    %eax,(%esp)
c0113b4b:	e8 4a f8 ff ff       	call   c011339a <fd_array_release>
    return ret;
c0113b50:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113b53:	c9                   	leave  
c0113b54:	c3                   	ret    

c0113b55 <file_seek>:

// seek file
int
file_seek(int fd, off_t pos, int whence) {
c0113b55:	55                   	push   %ebp
c0113b56:	89 e5                	mov    %esp,%ebp
c0113b58:	83 ec 48             	sub    $0x48,%esp
    struct stat __stat, *stat = &__stat;
c0113b5b:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0113b5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c0113b61:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0113b64:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113b68:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b6b:	89 04 24             	mov    %eax,(%esp)
c0113b6e:	e8 2b fa ff ff       	call   c011359e <fd2file>
c0113b73:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113b76:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113b7a:	74 08                	je     c0113b84 <file_seek+0x2f>
        return ret;
c0113b7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113b7f:	e9 d4 01 00 00       	jmp    c0113d58 <file_seek+0x203>
    }
    fd_array_acquire(file);
c0113b84:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113b87:	89 04 24             	mov    %eax,(%esp)
c0113b8a:	e8 ca f7 ff ff       	call   c0113359 <fd_array_acquire>

    switch (whence) {
c0113b8f:	8b 45 10             	mov    0x10(%ebp),%eax
c0113b92:	83 f8 01             	cmp    $0x1,%eax
c0113b95:	74 12                	je     c0113ba9 <file_seek+0x54>
c0113b97:	83 f8 02             	cmp    $0x2,%eax
c0113b9a:	74 1b                	je     c0113bb7 <file_seek+0x62>
c0113b9c:	85 c0                	test   %eax,%eax
c0113b9e:	0f 84 e0 00 00 00    	je     c0113c84 <file_seek+0x12f>
c0113ba4:	e9 d2 00 00 00       	jmp    c0113c7b <file_seek+0x126>
    case LSEEK_SET: break;
    case LSEEK_CUR: pos += file->pos; break;
c0113ba9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113bac:	8b 40 10             	mov    0x10(%eax),%eax
c0113baf:	01 45 0c             	add    %eax,0xc(%ebp)
c0113bb2:	e9 ce 00 00 00       	jmp    c0113c85 <file_seek+0x130>
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
c0113bb7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113bba:	8b 40 14             	mov    0x14(%eax),%eax
c0113bbd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113bc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113bc3:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113bc6:	8b 40 14             	mov    0x14(%eax),%eax
c0113bc9:	85 c0                	test   %eax,%eax
c0113bcb:	75 24                	jne    c0113bf1 <file_seek+0x9c>
c0113bcd:	c7 44 24 0c b8 62 12 	movl   $0xc01262b8,0xc(%esp)
c0113bd4:	c0 
c0113bd5:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113bdc:	c0 
c0113bdd:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c0113be4:	00 
c0113be5:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113bec:	e8 25 d6 fe ff       	call   c0101216 <__panic>
c0113bf1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113bf5:	74 17                	je     c0113c0e <file_seek+0xb9>
c0113bf7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113bfa:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113bfd:	85 c0                	test   %eax,%eax
c0113bff:	74 0d                	je     c0113c0e <file_seek+0xb9>
c0113c01:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113c04:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113c07:	8b 40 14             	mov    0x14(%eax),%eax
c0113c0a:	85 c0                	test   %eax,%eax
c0113c0c:	75 24                	jne    c0113c32 <file_seek+0xdd>
c0113c0e:	c7 44 24 0c dc 62 12 	movl   $0xc01262dc,0xc(%esp)
c0113c15:	c0 
c0113c16:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113c1d:	c0 
c0113c1e:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c0113c25:	00 
c0113c26:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113c2d:	e8 e4 d5 fe ff       	call   c0101216 <__panic>
c0113c32:	c7 44 24 04 2a 63 12 	movl   $0xc012632a,0x4(%esp)
c0113c39:	c0 
c0113c3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113c3d:	89 04 24             	mov    %eax,(%esp)
c0113c40:	e8 f3 5c 00 00       	call   c0119938 <inode_check>
c0113c45:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113c48:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113c4b:	8b 40 14             	mov    0x14(%eax),%eax
c0113c4e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0113c51:	8b 52 14             	mov    0x14(%edx),%edx
c0113c54:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0113c57:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0113c5b:	89 14 24             	mov    %edx,(%esp)
c0113c5e:	ff d0                	call   *%eax
c0113c60:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113c63:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113c67:	75 10                	jne    c0113c79 <file_seek+0x124>
            pos += stat->st_size;
c0113c69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113c6c:	8b 50 0c             	mov    0xc(%eax),%edx
c0113c6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113c72:	01 d0                	add    %edx,%eax
c0113c74:	89 45 0c             	mov    %eax,0xc(%ebp)
        }
        break;
c0113c77:	eb 0c                	jmp    c0113c85 <file_seek+0x130>
c0113c79:	eb 0a                	jmp    c0113c85 <file_seek+0x130>
    default: ret = -E_INVAL;
c0113c7b:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
c0113c82:	eb 01                	jmp    c0113c85 <file_seek+0x130>
        return ret;
    }
    fd_array_acquire(file);

    switch (whence) {
    case LSEEK_SET: break;
c0113c84:	90                   	nop
        }
        break;
    default: ret = -E_INVAL;
    }

    if (ret == 0) {
c0113c85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113c89:	0f 85 bb 00 00 00    	jne    c0113d4a <file_seek+0x1f5>
        if ((ret = vop_tryseek(file->node, pos)) == 0) {
c0113c8f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113c92:	8b 40 14             	mov    0x14(%eax),%eax
c0113c95:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113c98:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113c9b:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113c9e:	8b 40 30             	mov    0x30(%eax),%eax
c0113ca1:	85 c0                	test   %eax,%eax
c0113ca3:	75 24                	jne    c0113cc9 <file_seek+0x174>
c0113ca5:	c7 44 24 0c 20 64 12 	movl   $0xc0126420,0xc(%esp)
c0113cac:	c0 
c0113cad:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113cb4:	c0 
c0113cb5:	c7 44 24 04 26 01 00 	movl   $0x126,0x4(%esp)
c0113cbc:	00 
c0113cbd:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113cc4:	e8 4d d5 fe ff       	call   c0101216 <__panic>
c0113cc9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113ccd:	74 17                	je     c0113ce6 <file_seek+0x191>
c0113ccf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113cd2:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113cd5:	85 c0                	test   %eax,%eax
c0113cd7:	74 0d                	je     c0113ce6 <file_seek+0x191>
c0113cd9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113cdc:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113cdf:	8b 40 30             	mov    0x30(%eax),%eax
c0113ce2:	85 c0                	test   %eax,%eax
c0113ce4:	75 24                	jne    c0113d0a <file_seek+0x1b5>
c0113ce6:	c7 44 24 0c 44 64 12 	movl   $0xc0126444,0xc(%esp)
c0113ced:	c0 
c0113cee:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113cf5:	c0 
c0113cf6:	c7 44 24 04 26 01 00 	movl   $0x126,0x4(%esp)
c0113cfd:	00 
c0113cfe:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113d05:	e8 0c d5 fe ff       	call   c0101216 <__panic>
c0113d0a:	c7 44 24 04 94 64 12 	movl   $0xc0126494,0x4(%esp)
c0113d11:	c0 
c0113d12:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113d15:	89 04 24             	mov    %eax,(%esp)
c0113d18:	e8 1b 5c 00 00       	call   c0119938 <inode_check>
c0113d1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113d20:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113d23:	8b 40 30             	mov    0x30(%eax),%eax
c0113d26:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0113d29:	8b 52 14             	mov    0x14(%edx),%edx
c0113d2c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0113d2f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0113d33:	89 14 24             	mov    %edx,(%esp)
c0113d36:	ff d0                	call   *%eax
c0113d38:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113d3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113d3f:	75 09                	jne    c0113d4a <file_seek+0x1f5>
            file->pos = pos;
c0113d41:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113d44:	8b 55 0c             	mov    0xc(%ebp),%edx
c0113d47:	89 50 10             	mov    %edx,0x10(%eax)
        }
//    cprintf("file_seek, pos=%d, whence=%d, ret=%d\n", pos, whence, ret);
    }
    fd_array_release(file);
c0113d4a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113d4d:	89 04 24             	mov    %eax,(%esp)
c0113d50:	e8 45 f6 ff ff       	call   c011339a <fd_array_release>
    return ret;
c0113d55:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113d58:	c9                   	leave  
c0113d59:	c3                   	ret    

c0113d5a <file_fstat>:

// stat file
int
file_fstat(int fd, struct stat *stat) {
c0113d5a:	55                   	push   %ebp
c0113d5b:	89 e5                	mov    %esp,%ebp
c0113d5d:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c0113d60:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0113d63:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113d67:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d6a:	89 04 24             	mov    %eax,(%esp)
c0113d6d:	e8 2c f8 ff ff       	call   c011359e <fd2file>
c0113d72:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113d75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113d79:	74 08                	je     c0113d83 <file_fstat+0x29>
        return ret;
c0113d7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113d7e:	e9 c5 00 00 00       	jmp    c0113e48 <file_fstat+0xee>
    }
    fd_array_acquire(file);
c0113d83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113d86:	89 04 24             	mov    %eax,(%esp)
c0113d89:	e8 cb f5 ff ff       	call   c0113359 <fd_array_acquire>
    ret = vop_fstat(file->node, stat);
c0113d8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113d91:	8b 40 14             	mov    0x14(%eax),%eax
c0113d94:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113d97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113d9a:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113d9d:	8b 40 14             	mov    0x14(%eax),%eax
c0113da0:	85 c0                	test   %eax,%eax
c0113da2:	75 24                	jne    c0113dc8 <file_fstat+0x6e>
c0113da4:	c7 44 24 0c b8 62 12 	movl   $0xc01262b8,0xc(%esp)
c0113dab:	c0 
c0113dac:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113db3:	c0 
c0113db4:	c7 44 24 04 38 01 00 	movl   $0x138,0x4(%esp)
c0113dbb:	00 
c0113dbc:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113dc3:	e8 4e d4 fe ff       	call   c0101216 <__panic>
c0113dc8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113dcc:	74 17                	je     c0113de5 <file_fstat+0x8b>
c0113dce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113dd1:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113dd4:	85 c0                	test   %eax,%eax
c0113dd6:	74 0d                	je     c0113de5 <file_fstat+0x8b>
c0113dd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ddb:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113dde:	8b 40 14             	mov    0x14(%eax),%eax
c0113de1:	85 c0                	test   %eax,%eax
c0113de3:	75 24                	jne    c0113e09 <file_fstat+0xaf>
c0113de5:	c7 44 24 0c dc 62 12 	movl   $0xc01262dc,0xc(%esp)
c0113dec:	c0 
c0113ded:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113df4:	c0 
c0113df5:	c7 44 24 04 38 01 00 	movl   $0x138,0x4(%esp)
c0113dfc:	00 
c0113dfd:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113e04:	e8 0d d4 fe ff       	call   c0101216 <__panic>
c0113e09:	c7 44 24 04 2a 63 12 	movl   $0xc012632a,0x4(%esp)
c0113e10:	c0 
c0113e11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113e14:	89 04 24             	mov    %eax,(%esp)
c0113e17:	e8 1c 5b 00 00       	call   c0119938 <inode_check>
c0113e1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113e1f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113e22:	8b 40 14             	mov    0x14(%eax),%eax
c0113e25:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0113e28:	8b 52 14             	mov    0x14(%edx),%edx
c0113e2b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0113e2e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0113e32:	89 14 24             	mov    %edx,(%esp)
c0113e35:	ff d0                	call   *%eax
c0113e37:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c0113e3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113e3d:	89 04 24             	mov    %eax,(%esp)
c0113e40:	e8 55 f5 ff ff       	call   c011339a <fd_array_release>
    return ret;
c0113e45:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113e48:	c9                   	leave  
c0113e49:	c3                   	ret    

c0113e4a <file_fsync>:

// sync file
int
file_fsync(int fd) {
c0113e4a:	55                   	push   %ebp
c0113e4b:	89 e5                	mov    %esp,%ebp
c0113e4d:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c0113e50:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0113e53:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113e57:	8b 45 08             	mov    0x8(%ebp),%eax
c0113e5a:	89 04 24             	mov    %eax,(%esp)
c0113e5d:	e8 3c f7 ff ff       	call   c011359e <fd2file>
c0113e62:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113e65:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113e69:	74 08                	je     c0113e73 <file_fsync+0x29>
        return ret;
c0113e6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113e6e:	e9 be 00 00 00       	jmp    c0113f31 <file_fsync+0xe7>
    }
    fd_array_acquire(file);
c0113e73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113e76:	89 04 24             	mov    %eax,(%esp)
c0113e79:	e8 db f4 ff ff       	call   c0113359 <fd_array_acquire>
    ret = vop_fsync(file->node);
c0113e7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113e81:	8b 40 14             	mov    0x14(%eax),%eax
c0113e84:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113e87:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113e8a:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113e8d:	8b 40 18             	mov    0x18(%eax),%eax
c0113e90:	85 c0                	test   %eax,%eax
c0113e92:	75 24                	jne    c0113eb8 <file_fsync+0x6e>
c0113e94:	c7 44 24 0c 9c 64 12 	movl   $0xc012649c,0xc(%esp)
c0113e9b:	c0 
c0113e9c:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113ea3:	c0 
c0113ea4:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c0113eab:	00 
c0113eac:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113eb3:	e8 5e d3 fe ff       	call   c0101216 <__panic>
c0113eb8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113ebc:	74 17                	je     c0113ed5 <file_fsync+0x8b>
c0113ebe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ec1:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113ec4:	85 c0                	test   %eax,%eax
c0113ec6:	74 0d                	je     c0113ed5 <file_fsync+0x8b>
c0113ec8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ecb:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113ece:	8b 40 18             	mov    0x18(%eax),%eax
c0113ed1:	85 c0                	test   %eax,%eax
c0113ed3:	75 24                	jne    c0113ef9 <file_fsync+0xaf>
c0113ed5:	c7 44 24 0c c0 64 12 	movl   $0xc01264c0,0xc(%esp)
c0113edc:	c0 
c0113edd:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113ee4:	c0 
c0113ee5:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c0113eec:	00 
c0113eed:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113ef4:	e8 1d d3 fe ff       	call   c0101216 <__panic>
c0113ef9:	c7 44 24 04 0e 65 12 	movl   $0xc012650e,0x4(%esp)
c0113f00:	c0 
c0113f01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113f04:	89 04 24             	mov    %eax,(%esp)
c0113f07:	e8 2c 5a 00 00       	call   c0119938 <inode_check>
c0113f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113f0f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113f12:	8b 40 18             	mov    0x18(%eax),%eax
c0113f15:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0113f18:	8b 52 14             	mov    0x14(%edx),%edx
c0113f1b:	89 14 24             	mov    %edx,(%esp)
c0113f1e:	ff d0                	call   *%eax
c0113f20:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c0113f23:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113f26:	89 04 24             	mov    %eax,(%esp)
c0113f29:	e8 6c f4 ff ff       	call   c011339a <fd_array_release>
    return ret;
c0113f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113f31:	c9                   	leave  
c0113f32:	c3                   	ret    

c0113f33 <file_mkdir>:

//create a dir
int
file_mkdir(char *path) {
c0113f33:	55                   	push   %ebp
c0113f34:	89 e5                	mov    %esp,%ebp
c0113f36:	83 ec 28             	sub    $0x28,%esp
    int ret;
    ret = vfs_mkdir(path);
c0113f39:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f3c:	89 04 24             	mov    %eax,(%esp)
c0113f3f:	e8 75 6a 00 00       	call   c011a9b9 <vfs_mkdir>
c0113f44:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0113f47:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113f4a:	c9                   	leave  
c0113f4b:	c3                   	ret    

c0113f4c <file_getdirentry>:

// get file entry in DIR
int
file_getdirentry(int fd, struct dirent *direntp) {
c0113f4c:	55                   	push   %ebp
c0113f4d:	89 e5                	mov    %esp,%ebp
c0113f4f:	83 ec 38             	sub    $0x38,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c0113f52:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0113f55:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113f59:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f5c:	89 04 24             	mov    %eax,(%esp)
c0113f5f:	e8 3a f6 ff ff       	call   c011359e <fd2file>
c0113f64:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113f67:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113f6b:	74 08                	je     c0113f75 <file_getdirentry+0x29>
        return ret;
c0113f6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113f70:	e9 14 01 00 00       	jmp    c0114089 <file_getdirentry+0x13d>
    }
    fd_array_acquire(file);
c0113f75:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113f78:	89 04 24             	mov    %eax,(%esp)
c0113f7b:	e8 d9 f3 ff ff       	call   c0113359 <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, direntp->name, sizeof(direntp->name), direntp->offset);
c0113f80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113f83:	8b 00                	mov    (%eax),%eax
c0113f85:	8b 55 0c             	mov    0xc(%ebp),%edx
c0113f88:	83 c2 04             	add    $0x4,%edx
c0113f8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113f8f:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0113f96:	00 
c0113f97:	89 54 24 04          	mov    %edx,0x4(%esp)
c0113f9b:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0113f9e:	89 04 24             	mov    %eax,(%esp)
c0113fa1:	e8 3e 04 00 00       	call   c01143e4 <iobuf_init>
c0113fa6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = vop_getdirentry(file->node, iob)) == 0) {
c0113fa9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113fac:	8b 40 14             	mov    0x14(%eax),%eax
c0113faf:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113fb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113fb5:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113fb8:	8b 40 24             	mov    0x24(%eax),%eax
c0113fbb:	85 c0                	test   %eax,%eax
c0113fbd:	75 24                	jne    c0113fe3 <file_getdirentry+0x97>
c0113fbf:	c7 44 24 0c 14 65 12 	movl   $0xc0126514,0xc(%esp)
c0113fc6:	c0 
c0113fc7:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c0113fce:	c0 
c0113fcf:	c7 44 24 04 5e 01 00 	movl   $0x15e,0x4(%esp)
c0113fd6:	00 
c0113fd7:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c0113fde:	e8 33 d2 fe ff       	call   c0101216 <__panic>
c0113fe3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113fe7:	74 17                	je     c0114000 <file_getdirentry+0xb4>
c0113fe9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113fec:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113fef:	85 c0                	test   %eax,%eax
c0113ff1:	74 0d                	je     c0114000 <file_getdirentry+0xb4>
c0113ff3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113ff6:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113ff9:	8b 40 24             	mov    0x24(%eax),%eax
c0113ffc:	85 c0                	test   %eax,%eax
c0113ffe:	75 24                	jne    c0114024 <file_getdirentry+0xd8>
c0114000:	c7 44 24 0c 3c 65 12 	movl   $0xc012653c,0xc(%esp)
c0114007:	c0 
c0114008:	c7 44 24 08 76 61 12 	movl   $0xc0126176,0x8(%esp)
c011400f:	c0 
c0114010:	c7 44 24 04 5e 01 00 	movl   $0x15e,0x4(%esp)
c0114017:	00 
c0114018:	c7 04 24 8b 61 12 c0 	movl   $0xc012618b,(%esp)
c011401f:	e8 f2 d1 fe ff       	call   c0101216 <__panic>
c0114024:	c7 44 24 04 90 65 12 	movl   $0xc0126590,0x4(%esp)
c011402b:	c0 
c011402c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011402f:	89 04 24             	mov    %eax,(%esp)
c0114032:	e8 01 59 00 00       	call   c0119938 <inode_check>
c0114037:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011403a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011403d:	8b 40 24             	mov    0x24(%eax),%eax
c0114040:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0114043:	8b 52 14             	mov    0x14(%edx),%edx
c0114046:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0114049:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011404d:	89 14 24             	mov    %edx,(%esp)
c0114050:	ff d0                	call   *%eax
c0114052:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114055:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114059:	75 20                	jne    c011407b <file_getdirentry+0x12f>
        direntp->offset += iobuf_used(iob);
c011405b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011405e:	8b 00                	mov    (%eax),%eax
c0114060:	89 c2                	mov    %eax,%edx
c0114062:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114065:	8b 48 08             	mov    0x8(%eax),%ecx
c0114068:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011406b:	8b 40 0c             	mov    0xc(%eax),%eax
c011406e:	29 c1                	sub    %eax,%ecx
c0114070:	89 c8                	mov    %ecx,%eax
c0114072:	01 d0                	add    %edx,%eax
c0114074:	89 c2                	mov    %eax,%edx
c0114076:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114079:	89 10                	mov    %edx,(%eax)
    }
    fd_array_release(file);
c011407b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011407e:	89 04 24             	mov    %eax,(%esp)
c0114081:	e8 14 f3 ff ff       	call   c011339a <fd_array_release>
    return ret;
c0114086:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114089:	c9                   	leave  
c011408a:	c3                   	ret    

c011408b <file_dup>:

// duplicate file
int
file_dup(int fd1, int fd2) {
c011408b:	55                   	push   %ebp
c011408c:	89 e5                	mov    %esp,%ebp
c011408e:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file1, *file2;
    if ((ret = fd2file(fd1, &file1)) != 0) {
c0114091:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0114094:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114098:	8b 45 08             	mov    0x8(%ebp),%eax
c011409b:	89 04 24             	mov    %eax,(%esp)
c011409e:	e8 fb f4 ff ff       	call   c011359e <fd2file>
c01140a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01140a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01140aa:	74 05                	je     c01140b1 <file_dup+0x26>
        return ret;
c01140ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01140af:	eb 38                	jmp    c01140e9 <file_dup+0x5e>
    }
    if ((ret = fd_array_alloc(fd2, &file2)) != 0) {
c01140b1:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01140b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01140b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01140bb:	89 04 24             	mov    %eax,(%esp)
c01140be:	e8 29 f1 ff ff       	call   c01131ec <fd_array_alloc>
c01140c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01140c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01140ca:	74 05                	je     c01140d1 <file_dup+0x46>
        return ret;
c01140cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01140cf:	eb 18                	jmp    c01140e9 <file_dup+0x5e>
    }
    fd_array_dup(file2, file1);
c01140d1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01140d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01140d7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01140db:	89 04 24             	mov    %eax,(%esp)
c01140de:	e8 24 f4 ff ff       	call   c0113507 <fd_array_dup>
    return file2->fd;
c01140e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01140e6:	8b 40 0c             	mov    0xc(%eax),%eax
}
c01140e9:	c9                   	leave  
c01140ea:	c3                   	ret    

c01140eb <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c01140eb:	55                   	push   %ebp
c01140ec:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c01140ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01140f1:	8b 40 08             	mov    0x8(%eax),%eax
}
c01140f4:	5d                   	pop    %ebp
c01140f5:	c3                   	ret    

c01140f6 <fs_init>:
#include <sfs.h>
#include <inode.h>
#include <assert.h>
//called when init_main proc start
void
fs_init(void) {
c01140f6:	55                   	push   %ebp
c01140f7:	89 e5                	mov    %esp,%ebp
c01140f9:	83 ec 08             	sub    $0x8,%esp
    vfs_init();
c01140fc:	e8 53 59 00 00       	call   c0119a54 <vfs_init>
    dev_init();
c0114101:	e8 8b 74 00 00       	call   c011b591 <dev_init>
    sfs_init();
c0114106:	e8 48 82 00 00       	call   c011c353 <sfs_init>
}
c011410b:	c9                   	leave  
c011410c:	c3                   	ret    

c011410d <fs_cleanup>:

void
fs_cleanup(void) {
c011410d:	55                   	push   %ebp
c011410e:	89 e5                	mov    %esp,%ebp
c0114110:	83 ec 08             	sub    $0x8,%esp
    vfs_cleanup();
c0114113:	e8 f5 5a 00 00       	call   c0119c0d <vfs_cleanup>
}
c0114118:	c9                   	leave  
c0114119:	c3                   	ret    

c011411a <lock_files>:

void
lock_files(struct files_struct *filesp) {
c011411a:	55                   	push   %ebp
c011411b:	89 e5                	mov    %esp,%ebp
c011411d:	83 ec 18             	sub    $0x18,%esp
    down(&(filesp->files_sem));
c0114120:	8b 45 08             	mov    0x8(%ebp),%eax
c0114123:	83 c0 0c             	add    $0xc,%eax
c0114126:	89 04 24             	mov    %eax,(%esp)
c0114129:	e8 ae ea ff ff       	call   c0112bdc <down>
}
c011412e:	c9                   	leave  
c011412f:	c3                   	ret    

c0114130 <unlock_files>:

void
unlock_files(struct files_struct *filesp) {
c0114130:	55                   	push   %ebp
c0114131:	89 e5                	mov    %esp,%ebp
c0114133:	83 ec 18             	sub    $0x18,%esp
    up(&(filesp->files_sem));
c0114136:	8b 45 08             	mov    0x8(%ebp),%eax
c0114139:	83 c0 0c             	add    $0xc,%eax
c011413c:	89 04 24             	mov    %eax,(%esp)
c011413f:	e8 7d ea ff ff       	call   c0112bc1 <up>
}
c0114144:	c9                   	leave  
c0114145:	c3                   	ret    

c0114146 <files_create>:
//Called when a new proc init
struct files_struct *
files_create(void) {
c0114146:	55                   	push   %ebp
c0114147:	89 e5                	mov    %esp,%ebp
c0114149:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[files_create]\n");
    static_assert((int)FILES_STRUCT_NENTRY > 128);
    struct files_struct *filesp;
    if ((filesp = kmalloc(sizeof(struct files_struct) + FILES_STRUCT_BUFSIZE)) != NULL) {
c011414c:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0114153:	e8 58 69 ff ff       	call   c010aab0 <kmalloc>
c0114158:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011415b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011415f:	74 43                	je     c01141a4 <files_create+0x5e>
        filesp->pwd = NULL;
c0114161:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114164:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        filesp->fd_array = (void *)(filesp + 1);
c011416a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011416d:	8d 50 18             	lea    0x18(%eax),%edx
c0114170:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114173:	89 50 04             	mov    %edx,0x4(%eax)
        filesp->files_count = 0;
c0114176:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114179:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        sem_init(&(filesp->files_sem), 1);
c0114180:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114183:	83 c0 0c             	add    $0xc,%eax
c0114186:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c011418d:	00 
c011418e:	89 04 24             	mov    %eax,(%esp)
c0114191:	e8 b8 e8 ff ff       	call   c0112a4e <sem_init>
        fd_array_init(filesp->fd_array);
c0114196:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114199:	8b 40 04             	mov    0x4(%eax),%eax
c011419c:	89 04 24             	mov    %eax,(%esp)
c011419f:	e8 03 f0 ff ff       	call   c01131a7 <fd_array_init>
    }
    return filesp;
c01141a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01141a7:	c9                   	leave  
c01141a8:	c3                   	ret    

c01141a9 <files_destroy>:
//Called when a proc exit
void
files_destroy(struct files_struct *filesp) {
c01141a9:	55                   	push   %ebp
c01141aa:	89 e5                	mov    %esp,%ebp
c01141ac:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_destroy]\n");
    assert(filesp != NULL && files_count(filesp) == 0);
c01141af:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01141b3:	74 0f                	je     c01141c4 <files_destroy+0x1b>
c01141b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01141b8:	89 04 24             	mov    %eax,(%esp)
c01141bb:	e8 2b ff ff ff       	call   c01140eb <files_count>
c01141c0:	85 c0                	test   %eax,%eax
c01141c2:	74 24                	je     c01141e8 <files_destroy+0x3f>
c01141c4:	c7 44 24 0c 9c 65 12 	movl   $0xc012659c,0xc(%esp)
c01141cb:	c0 
c01141cc:	c7 44 24 08 c7 65 12 	movl   $0xc01265c7,0x8(%esp)
c01141d3:	c0 
c01141d4:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c01141db:	00 
c01141dc:	c7 04 24 dc 65 12 c0 	movl   $0xc01265dc,(%esp)
c01141e3:	e8 2e d0 fe ff       	call   c0101216 <__panic>
    if (filesp->pwd != NULL) {
c01141e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01141eb:	8b 00                	mov    (%eax),%eax
c01141ed:	85 c0                	test   %eax,%eax
c01141ef:	74 0d                	je     c01141fe <files_destroy+0x55>
        vop_ref_dec(filesp->pwd);
c01141f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01141f4:	8b 00                	mov    (%eax),%eax
c01141f6:	89 04 24             	mov    %eax,(%esp)
c01141f9:	e8 ea 54 00 00       	call   c01196e8 <inode_ref_dec>
    }
    int i;
    struct file *file = filesp->fd_array;
c01141fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0114201:	8b 40 04             	mov    0x4(%eax),%eax
c0114204:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c0114207:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c011420e:	eb 4a                	jmp    c011425a <files_destroy+0xb1>
        if (file->status == FD_OPENED) {
c0114210:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114213:	8b 00                	mov    (%eax),%eax
c0114215:	83 f8 02             	cmp    $0x2,%eax
c0114218:	75 0b                	jne    c0114225 <files_destroy+0x7c>
            fd_array_close(file);
c011421a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011421d:	89 04 24             	mov    %eax,(%esp)
c0114220:	e8 56 f2 ff ff       	call   c011347b <fd_array_close>
        }
        assert(file->status == FD_NONE);
c0114225:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114228:	8b 00                	mov    (%eax),%eax
c011422a:	85 c0                	test   %eax,%eax
c011422c:	74 24                	je     c0114252 <files_destroy+0xa9>
c011422e:	c7 44 24 0c e9 65 12 	movl   $0xc01265e9,0xc(%esp)
c0114235:	c0 
c0114236:	c7 44 24 08 c7 65 12 	movl   $0xc01265c7,0x8(%esp)
c011423d:	c0 
c011423e:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c0114245:	00 
c0114246:	c7 04 24 dc 65 12 c0 	movl   $0xc01265dc,(%esp)
c011424d:	e8 c4 cf fe ff       	call   c0101216 <__panic>
    if (filesp->pwd != NULL) {
        vop_ref_dec(filesp->pwd);
    }
    int i;
    struct file *file = filesp->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c0114252:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0114256:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c011425a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011425d:	3d 90 00 00 00       	cmp    $0x90,%eax
c0114262:	76 ac                	jbe    c0114210 <files_destroy+0x67>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
        assert(file->status == FD_NONE);
    }
    kfree(filesp);
c0114264:	8b 45 08             	mov    0x8(%ebp),%eax
c0114267:	89 04 24             	mov    %eax,(%esp)
c011426a:	e8 5c 68 ff ff       	call   c010aacb <kfree>
}
c011426f:	c9                   	leave  
c0114270:	c3                   	ret    

c0114271 <files_closeall>:

void
files_closeall(struct files_struct *filesp) {
c0114271:	55                   	push   %ebp
c0114272:	89 e5                	mov    %esp,%ebp
c0114274:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
c0114277:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011427b:	74 0f                	je     c011428c <files_closeall+0x1b>
c011427d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114280:	89 04 24             	mov    %eax,(%esp)
c0114283:	e8 63 fe ff ff       	call   c01140eb <files_count>
c0114288:	85 c0                	test   %eax,%eax
c011428a:	7f 24                	jg     c01142b0 <files_closeall+0x3f>
c011428c:	c7 44 24 0c 04 66 12 	movl   $0xc0126604,0xc(%esp)
c0114293:	c0 
c0114294:	c7 44 24 08 c7 65 12 	movl   $0xc01265c7,0x8(%esp)
c011429b:	c0 
c011429c:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c01142a3:	00 
c01142a4:	c7 04 24 dc 65 12 c0 	movl   $0xc01265dc,(%esp)
c01142ab:	e8 66 cf fe ff       	call   c0101216 <__panic>
    int i;
    struct file *file = filesp->fd_array;
c01142b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01142b3:	8b 40 04             	mov    0x4(%eax),%eax
c01142b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c01142b9:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
c01142c0:	83 45 f0 38          	addl   $0x38,-0x10(%ebp)
c01142c4:	eb 1d                	jmp    c01142e3 <files_closeall+0x72>
        if (file->status == FD_OPENED) {
c01142c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01142c9:	8b 00                	mov    (%eax),%eax
c01142cb:	83 f8 02             	cmp    $0x2,%eax
c01142ce:	75 0b                	jne    c01142db <files_closeall+0x6a>
            fd_array_close(file);
c01142d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01142d3:	89 04 24             	mov    %eax,(%esp)
c01142d6:	e8 a0 f1 ff ff       	call   c011347b <fd_array_close>
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
    int i;
    struct file *file = filesp->fd_array;
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c01142db:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01142df:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c01142e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01142e6:	3d 90 00 00 00       	cmp    $0x90,%eax
c01142eb:	76 d9                	jbe    c01142c6 <files_closeall+0x55>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
    }
}
c01142ed:	c9                   	leave  
c01142ee:	c3                   	ret    

c01142ef <dup_files>:

int
dup_files(struct files_struct *to, struct files_struct *from) {
c01142ef:	55                   	push   %ebp
c01142f0:	89 e5                	mov    %esp,%ebp
c01142f2:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[dup_files]\n");
    assert(to != NULL && from != NULL);
c01142f5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01142f9:	74 06                	je     c0114301 <dup_files+0x12>
c01142fb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01142ff:	75 24                	jne    c0114325 <dup_files+0x36>
c0114301:	c7 44 24 0c 2e 66 12 	movl   $0xc012662e,0xc(%esp)
c0114308:	c0 
c0114309:	c7 44 24 08 c7 65 12 	movl   $0xc01265c7,0x8(%esp)
c0114310:	c0 
c0114311:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c0114318:	00 
c0114319:	c7 04 24 dc 65 12 c0 	movl   $0xc01265dc,(%esp)
c0114320:	e8 f1 ce fe ff       	call   c0101216 <__panic>
    assert(files_count(to) == 0 && files_count(from) > 0);
c0114325:	8b 45 08             	mov    0x8(%ebp),%eax
c0114328:	89 04 24             	mov    %eax,(%esp)
c011432b:	e8 bb fd ff ff       	call   c01140eb <files_count>
c0114330:	85 c0                	test   %eax,%eax
c0114332:	75 0f                	jne    c0114343 <dup_files+0x54>
c0114334:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114337:	89 04 24             	mov    %eax,(%esp)
c011433a:	e8 ac fd ff ff       	call   c01140eb <files_count>
c011433f:	85 c0                	test   %eax,%eax
c0114341:	7f 24                	jg     c0114367 <dup_files+0x78>
c0114343:	c7 44 24 0c 4c 66 12 	movl   $0xc012664c,0xc(%esp)
c011434a:	c0 
c011434b:	c7 44 24 08 c7 65 12 	movl   $0xc01265c7,0x8(%esp)
c0114352:	c0 
c0114353:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c011435a:	00 
c011435b:	c7 04 24 dc 65 12 c0 	movl   $0xc01265dc,(%esp)
c0114362:	e8 af ce fe ff       	call   c0101216 <__panic>
    if ((to->pwd = from->pwd) != NULL) {
c0114367:	8b 45 0c             	mov    0xc(%ebp),%eax
c011436a:	8b 10                	mov    (%eax),%edx
c011436c:	8b 45 08             	mov    0x8(%ebp),%eax
c011436f:	89 10                	mov    %edx,(%eax)
c0114371:	8b 45 08             	mov    0x8(%ebp),%eax
c0114374:	8b 00                	mov    (%eax),%eax
c0114376:	85 c0                	test   %eax,%eax
c0114378:	74 0d                	je     c0114387 <dup_files+0x98>
        vop_ref_inc(to->pwd);
c011437a:	8b 45 08             	mov    0x8(%ebp),%eax
c011437d:	8b 00                	mov    (%eax),%eax
c011437f:	89 04 24             	mov    %eax,(%esp)
c0114382:	e8 47 53 00 00       	call   c01196ce <inode_ref_inc>
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
c0114387:	8b 45 08             	mov    0x8(%ebp),%eax
c011438a:	8b 40 04             	mov    0x4(%eax),%eax
c011438d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114390:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114393:	8b 40 04             	mov    0x4(%eax),%eax
c0114396:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c0114399:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01143a0:	eb 31                	jmp    c01143d3 <dup_files+0xe4>
        if (from_file->status == FD_OPENED) {
c01143a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01143a5:	8b 00                	mov    (%eax),%eax
c01143a7:	83 f8 02             	cmp    $0x2,%eax
c01143aa:	75 1b                	jne    c01143c7 <dup_files+0xd8>
            /* alloc_fd first */
            to_file->status = FD_INIT;
c01143ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01143af:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
            fd_array_dup(to_file, from_file);
c01143b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01143b8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01143bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01143bf:	89 04 24             	mov    %eax,(%esp)
c01143c2:	e8 40 f1 ff ff       	call   c0113507 <fd_array_dup>
    if ((to->pwd = from->pwd) != NULL) {
        vop_ref_inc(to->pwd);
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c01143c7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01143cb:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c01143cf:	83 45 ec 1c          	addl   $0x1c,-0x14(%ebp)
c01143d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01143d6:	3d 90 00 00 00       	cmp    $0x90,%eax
c01143db:	76 c5                	jbe    c01143a2 <dup_files+0xb3>
            /* alloc_fd first */
            to_file->status = FD_INIT;
            fd_array_dup(to_file, from_file);
        }
    }
    return 0;
c01143dd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01143e2:	c9                   	leave  
c01143e3:	c3                   	ret    

c01143e4 <iobuf_init>:
 *                set up io_base to point to the buffer you want to transfer to, and set io_len to the length of buffer;
 *                initialize io_offset as desired;
 *                initialize io_resid to the total amount of data that can be transferred through this io.
 */
struct iobuf *
iobuf_init(struct iobuf *iob, void *base, size_t len, off_t offset) {
c01143e4:	55                   	push   %ebp
c01143e5:	89 e5                	mov    %esp,%ebp
    iob->io_base = base;
c01143e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01143ea:	8b 55 0c             	mov    0xc(%ebp),%edx
c01143ed:	89 10                	mov    %edx,(%eax)
    iob->io_offset = offset;
c01143ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01143f2:	8b 55 14             	mov    0x14(%ebp),%edx
c01143f5:	89 50 04             	mov    %edx,0x4(%eax)
    iob->io_len = iob->io_resid = len;
c01143f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01143fb:	8b 55 10             	mov    0x10(%ebp),%edx
c01143fe:	89 50 0c             	mov    %edx,0xc(%eax)
c0114401:	8b 45 08             	mov    0x8(%ebp),%eax
c0114404:	8b 50 0c             	mov    0xc(%eax),%edx
c0114407:	8b 45 08             	mov    0x8(%ebp),%eax
c011440a:	89 50 08             	mov    %edx,0x8(%eax)
    return iob;
c011440d:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0114410:	5d                   	pop    %ebp
c0114411:	c3                   	ret    

c0114412 <iobuf_move>:
 * iobuf_move may be called repeatedly on the same io to transfer
 * additional data until the available buffer space the io refers to
 * is exhausted.
 */
int
iobuf_move(struct iobuf *iob, void *data, size_t len, bool m2b, size_t *copiedp) {
c0114412:	55                   	push   %ebp
c0114413:	89 e5                	mov    %esp,%ebp
c0114415:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c0114418:	8b 45 08             	mov    0x8(%ebp),%eax
c011441b:	8b 40 0c             	mov    0xc(%eax),%eax
c011441e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114421:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114424:	3b 45 10             	cmp    0x10(%ebp),%eax
c0114427:	76 06                	jbe    c011442f <iobuf_move+0x1d>
        alen = len;
c0114429:	8b 45 10             	mov    0x10(%ebp),%eax
c011442c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c011442f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114433:	74 57                	je     c011448c <iobuf_move+0x7a>
        void *src = iob->io_base, *dst = data;
c0114435:	8b 45 08             	mov    0x8(%ebp),%eax
c0114438:	8b 00                	mov    (%eax),%eax
c011443a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011443d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114440:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (m2b) {
c0114443:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0114447:	74 12                	je     c011445b <iobuf_move+0x49>
            void *tmp = src;
c0114449:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011444c:	89 45 e8             	mov    %eax,-0x18(%ebp)
            src = dst, dst = tmp;
c011444f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114452:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114455:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114458:	89 45 ec             	mov    %eax,-0x14(%ebp)
        }
        memmove(dst, src, alen);
c011445b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011445e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114462:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114465:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114469:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011446c:	89 04 24             	mov    %eax,(%esp)
c011446f:	e8 ca cc 00 00       	call   c012113e <memmove>
        iobuf_skip(iob, alen), len -= alen;
c0114474:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114477:	89 44 24 04          	mov    %eax,0x4(%esp)
c011447b:	8b 45 08             	mov    0x8(%ebp),%eax
c011447e:	89 04 24             	mov    %eax,(%esp)
c0114481:	e8 a1 00 00 00       	call   c0114527 <iobuf_skip>
c0114486:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114489:	29 45 10             	sub    %eax,0x10(%ebp)
    }
    if (copiedp != NULL) {
c011448c:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0114490:	74 08                	je     c011449a <iobuf_move+0x88>
        *copiedp = alen;
c0114492:	8b 45 18             	mov    0x18(%ebp),%eax
c0114495:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114498:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c011449a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011449e:	75 07                	jne    c01144a7 <iobuf_move+0x95>
c01144a0:	b8 00 00 00 00       	mov    $0x0,%eax
c01144a5:	eb 05                	jmp    c01144ac <iobuf_move+0x9a>
c01144a7:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c01144ac:	c9                   	leave  
c01144ad:	c3                   	ret    

c01144ae <iobuf_move_zeros>:
/*
 * iobuf_move_zeros - set io buffer zero
 * @copiedp:  the size of data memcopied
 */
int
iobuf_move_zeros(struct iobuf *iob, size_t len, size_t *copiedp) {
c01144ae:	55                   	push   %ebp
c01144af:	89 e5                	mov    %esp,%ebp
c01144b1:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c01144b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01144b7:	8b 40 0c             	mov    0xc(%eax),%eax
c01144ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01144bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01144c0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01144c3:	76 06                	jbe    c01144cb <iobuf_move_zeros+0x1d>
        alen = len;
c01144c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01144c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c01144cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01144cf:	74 34                	je     c0114505 <iobuf_move_zeros+0x57>
        memset(iob->io_base, 0, alen);
c01144d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01144d4:	8b 00                	mov    (%eax),%eax
c01144d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01144d9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01144dd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01144e4:	00 
c01144e5:	89 04 24             	mov    %eax,(%esp)
c01144e8:	e8 12 cc 00 00       	call   c01210ff <memset>
        iobuf_skip(iob, alen), len -= alen;
c01144ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01144f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01144f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01144f7:	89 04 24             	mov    %eax,(%esp)
c01144fa:	e8 28 00 00 00       	call   c0114527 <iobuf_skip>
c01144ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114502:	29 45 0c             	sub    %eax,0xc(%ebp)
    }
    if (copiedp != NULL) {
c0114505:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114509:	74 08                	je     c0114513 <iobuf_move_zeros+0x65>
        *copiedp = alen;
c011450b:	8b 45 10             	mov    0x10(%ebp),%eax
c011450e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114511:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c0114513:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114517:	75 07                	jne    c0114520 <iobuf_move_zeros+0x72>
c0114519:	b8 00 00 00 00       	mov    $0x0,%eax
c011451e:	eb 05                	jmp    c0114525 <iobuf_move_zeros+0x77>
c0114520:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0114525:	c9                   	leave  
c0114526:	c3                   	ret    

c0114527 <iobuf_skip>:

/*
 * iobuf_skip - change the current position of io buffer
 */
void
iobuf_skip(struct iobuf *iob, size_t n) {
c0114527:	55                   	push   %ebp
c0114528:	89 e5                	mov    %esp,%ebp
c011452a:	83 ec 18             	sub    $0x18,%esp
    assert(iob->io_resid >= n);
c011452d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114530:	8b 40 0c             	mov    0xc(%eax),%eax
c0114533:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0114536:	73 24                	jae    c011455c <iobuf_skip+0x35>
c0114538:	c7 44 24 0c 7a 66 12 	movl   $0xc012667a,0xc(%esp)
c011453f:	c0 
c0114540:	c7 44 24 08 8d 66 12 	movl   $0xc012668d,0x8(%esp)
c0114547:	c0 
c0114548:	c7 44 24 04 4a 00 00 	movl   $0x4a,0x4(%esp)
c011454f:	00 
c0114550:	c7 04 24 a2 66 12 c0 	movl   $0xc01266a2,(%esp)
c0114557:	e8 ba cc fe ff       	call   c0101216 <__panic>
    iob->io_base += n, iob->io_offset += n, iob->io_resid -= n;
c011455c:	8b 45 08             	mov    0x8(%ebp),%eax
c011455f:	8b 10                	mov    (%eax),%edx
c0114561:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114564:	01 c2                	add    %eax,%edx
c0114566:	8b 45 08             	mov    0x8(%ebp),%eax
c0114569:	89 10                	mov    %edx,(%eax)
c011456b:	8b 45 08             	mov    0x8(%ebp),%eax
c011456e:	8b 40 04             	mov    0x4(%eax),%eax
c0114571:	89 c2                	mov    %eax,%edx
c0114573:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114576:	01 d0                	add    %edx,%eax
c0114578:	89 c2                	mov    %eax,%edx
c011457a:	8b 45 08             	mov    0x8(%ebp),%eax
c011457d:	89 50 04             	mov    %edx,0x4(%eax)
c0114580:	8b 45 08             	mov    0x8(%ebp),%eax
c0114583:	8b 40 0c             	mov    0xc(%eax),%eax
c0114586:	2b 45 0c             	sub    0xc(%ebp),%eax
c0114589:	89 c2                	mov    %eax,%edx
c011458b:	8b 45 08             	mov    0x8(%ebp),%eax
c011458e:	89 50 0c             	mov    %edx,0xc(%eax)
}
c0114591:	c9                   	leave  
c0114592:	c3                   	ret    

c0114593 <lock_mm>:
    mm->mm_count -= 1;
    return mm->mm_count;
}

static inline void
lock_mm(struct mm_struct *mm) {
c0114593:	55                   	push   %ebp
c0114594:	89 e5                	mov    %esp,%ebp
c0114596:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0114599:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011459d:	74 25                	je     c01145c4 <lock_mm+0x31>
        down(&(mm->mm_sem));
c011459f:	8b 45 08             	mov    0x8(%ebp),%eax
c01145a2:	83 c0 1c             	add    $0x1c,%eax
c01145a5:	89 04 24             	mov    %eax,(%esp)
c01145a8:	e8 2f e6 ff ff       	call   c0112bdc <down>
        if (current != NULL) {
c01145ad:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01145b2:	85 c0                	test   %eax,%eax
c01145b4:	74 0e                	je     c01145c4 <lock_mm+0x31>
            mm->locked_by = current->pid;
c01145b6:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01145bb:	8b 50 04             	mov    0x4(%eax),%edx
c01145be:	8b 45 08             	mov    0x8(%ebp),%eax
c01145c1:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c01145c4:	c9                   	leave  
c01145c5:	c3                   	ret    

c01145c6 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c01145c6:	55                   	push   %ebp
c01145c7:	89 e5                	mov    %esp,%ebp
c01145c9:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c01145cc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01145d0:	74 18                	je     c01145ea <unlock_mm+0x24>
        up(&(mm->mm_sem));
c01145d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01145d5:	83 c0 1c             	add    $0x1c,%eax
c01145d8:	89 04 24             	mov    %eax,(%esp)
c01145db:	e8 e1 e5 ff ff       	call   c0112bc1 <up>
        mm->locked_by = 0;
c01145e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01145e3:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c01145ea:	c9                   	leave  
c01145eb:	c3                   	ret    

c01145ec <copy_path>:

#define IOBUF_SIZE                          4096

/* copy_path - copy path name */
static int
copy_path(char **to, const char *from) {
c01145ec:	55                   	push   %ebp
c01145ed:	89 e5                	mov    %esp,%ebp
c01145ef:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c01145f2:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01145f7:	8b 40 18             	mov    0x18(%eax),%eax
c01145fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *buffer;
    if ((buffer = kmalloc(FS_MAX_FPATH_LEN + 1)) == NULL) {
c01145fd:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0114604:	e8 a7 64 ff ff       	call   c010aab0 <kmalloc>
c0114609:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011460c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0114610:	75 07                	jne    c0114619 <copy_path+0x2d>
        return -E_NO_MEM;
c0114612:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0114617:	eb 66                	jmp    c011467f <copy_path+0x93>
    }
    lock_mm(mm);
c0114619:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011461c:	89 04 24             	mov    %eax,(%esp)
c011461f:	e8 6f ff ff ff       	call   c0114593 <lock_mm>
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
c0114624:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c011462b:	00 
c011462c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011462f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114633:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114636:	89 44 24 04          	mov    %eax,0x4(%esp)
c011463a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011463d:	89 04 24             	mov    %eax,(%esp)
c0114640:	e8 0c da ff ff       	call   c0112051 <copy_string>
c0114645:	85 c0                	test   %eax,%eax
c0114647:	75 1e                	jne    c0114667 <copy_path+0x7b>
        unlock_mm(mm);
c0114649:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011464c:	89 04 24             	mov    %eax,(%esp)
c011464f:	e8 72 ff ff ff       	call   c01145c6 <unlock_mm>
        goto failed_cleanup;
c0114654:	90                   	nop
    unlock_mm(mm);
    *to = buffer;
    return 0;

failed_cleanup:
    kfree(buffer);
c0114655:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114658:	89 04 24             	mov    %eax,(%esp)
c011465b:	e8 6b 64 ff ff       	call   c010aacb <kfree>
    return -E_INVAL;
c0114660:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0114665:	eb 18                	jmp    c011467f <copy_path+0x93>
    lock_mm(mm);
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
        unlock_mm(mm);
        goto failed_cleanup;
    }
    unlock_mm(mm);
c0114667:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011466a:	89 04 24             	mov    %eax,(%esp)
c011466d:	e8 54 ff ff ff       	call   c01145c6 <unlock_mm>
    *to = buffer;
c0114672:	8b 45 08             	mov    0x8(%ebp),%eax
c0114675:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0114678:	89 10                	mov    %edx,(%eax)
    return 0;
c011467a:	b8 00 00 00 00       	mov    $0x0,%eax

failed_cleanup:
    kfree(buffer);
    return -E_INVAL;
}
c011467f:	c9                   	leave  
c0114680:	c3                   	ret    

c0114681 <sysfile_open>:

/* sysfile_open - open file */
int
sysfile_open(const char *__path, uint32_t open_flags) {
c0114681:	55                   	push   %ebp
c0114682:	89 e5                	mov    %esp,%ebp
c0114684:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c0114687:	8b 45 08             	mov    0x8(%ebp),%eax
c011468a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011468e:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0114691:	89 04 24             	mov    %eax,(%esp)
c0114694:	e8 53 ff ff ff       	call   c01145ec <copy_path>
c0114699:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011469c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01146a0:	74 05                	je     c01146a7 <sysfile_open+0x26>
        return ret;
c01146a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01146a5:	eb 23                	jmp    c01146ca <sysfile_open+0x49>
    }
    ret = file_open(path, open_flags);
c01146a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01146aa:	8b 55 0c             	mov    0xc(%ebp),%edx
c01146ad:	89 54 24 04          	mov    %edx,0x4(%esp)
c01146b1:	89 04 24             	mov    %eax,(%esp)
c01146b4:	e8 a0 ef ff ff       	call   c0113659 <file_open>
c01146b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c01146bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01146bf:	89 04 24             	mov    %eax,(%esp)
c01146c2:	e8 04 64 ff ff       	call   c010aacb <kfree>
    return ret;
c01146c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01146ca:	c9                   	leave  
c01146cb:	c3                   	ret    

c01146cc <sysfile_delete>:

/* sysfile_delete - delete file */
int
sysfile_delete(const char *__path, uint32_t type) {
c01146cc:	55                   	push   %ebp
c01146cd:	89 e5                	mov    %esp,%ebp
c01146cf:	83 ec 28             	sub    $0x28,%esp
	int ret;
	char *path;
	if((ret = copy_path(&path, __path)) != 0) {
c01146d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01146d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01146d9:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01146dc:	89 04 24             	mov    %eax,(%esp)
c01146df:	e8 08 ff ff ff       	call   c01145ec <copy_path>
c01146e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01146e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01146eb:	74 05                	je     c01146f2 <sysfile_delete+0x26>
		return ret;
c01146ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01146f0:	eb 23                	jmp    c0114715 <sysfile_delete+0x49>
	}
	ret = file_delete(path, type);
c01146f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01146f5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01146f8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01146fc:	89 04 24             	mov    %eax,(%esp)
c01146ff:	e8 23 f1 ff ff       	call   c0113827 <file_delete>
c0114704:	89 45 f4             	mov    %eax,-0xc(%ebp)
	kfree(path);
c0114707:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011470a:	89 04 24             	mov    %eax,(%esp)
c011470d:	e8 b9 63 ff ff       	call   c010aacb <kfree>
	return ret;
c0114712:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114715:	c9                   	leave  
c0114716:	c3                   	ret    

c0114717 <sysfile_close>:

/* sysfile_close - close file */
int
sysfile_close(int fd) {
c0114717:	55                   	push   %ebp
c0114718:	89 e5                	mov    %esp,%ebp
c011471a:	83 ec 18             	sub    $0x18,%esp
    return file_close(fd);
c011471d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114720:	89 04 24             	mov    %eax,(%esp)
c0114723:	e8 1f f1 ff ff       	call   c0113847 <file_close>
}
c0114728:	c9                   	leave  
c0114729:	c3                   	ret    

c011472a <sysfile_read>:

/* sysfile_read - read file */
int
sysfile_read(int fd, void *base, size_t len) {
c011472a:	55                   	push   %ebp
c011472b:	89 e5                	mov    %esp,%ebp
c011472d:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c0114730:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0114735:	8b 40 18             	mov    0x18(%eax),%eax
c0114738:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c011473b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011473f:	75 0a                	jne    c011474b <sysfile_read+0x21>
        return 0;
c0114741:	b8 00 00 00 00       	mov    $0x0,%eax
c0114746:	e9 55 01 00 00       	jmp    c01148a0 <sysfile_read+0x176>
    }
    if (!file_testfd(fd, 1, 0)) {
c011474b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0114752:	00 
c0114753:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c011475a:	00 
c011475b:	8b 45 08             	mov    0x8(%ebp),%eax
c011475e:	89 04 24             	mov    %eax,(%esp)
c0114761:	e8 96 ee ff ff       	call   c01135fc <file_testfd>
c0114766:	85 c0                	test   %eax,%eax
c0114768:	75 0a                	jne    c0114774 <sysfile_read+0x4a>
        return -E_INVAL;
c011476a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011476f:	e9 2c 01 00 00       	jmp    c01148a0 <sysfile_read+0x176>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c0114774:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c011477b:	e8 30 63 ff ff       	call   c010aab0 <kmalloc>
c0114780:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114783:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114787:	75 0a                	jne    c0114793 <sysfile_read+0x69>
        return -E_NO_MEM;
c0114789:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c011478e:	e9 0d 01 00 00       	jmp    c01148a0 <sysfile_read+0x176>
    }

    int ret = 0;
c0114793:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c011479a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c01147a1:	e9 d7 00 00 00       	jmp    c011487d <sysfile_read+0x153>
        if ((alen = IOBUF_SIZE) > len) {
c01147a6:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c01147ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01147b0:	3b 45 10             	cmp    0x10(%ebp),%eax
c01147b3:	76 06                	jbe    c01147bb <sysfile_read+0x91>
            alen = len;
c01147b5:	8b 45 10             	mov    0x10(%ebp),%eax
c01147b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        ret = file_read(fd, buffer, alen, &alen);
c01147bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01147be:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c01147c1:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01147c5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01147c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01147cc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01147d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01147d3:	89 04 24             	mov    %eax,(%esp)
c01147d6:	e8 a4 f0 ff ff       	call   c011387f <file_read>
c01147db:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (alen != 0) {
c01147de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01147e1:	85 c0                	test   %eax,%eax
c01147e3:	0f 84 87 00 00 00    	je     c0114870 <sysfile_read+0x146>
            lock_mm(mm);
c01147e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01147ec:	89 04 24             	mov    %eax,(%esp)
c01147ef:	e8 9f fd ff ff       	call   c0114593 <lock_mm>
            {
                if (copy_to_user(mm, base, buffer, alen)) {
c01147f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01147f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01147fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01147fe:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114802:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114805:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114809:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011480c:	89 04 24             	mov    %eax,(%esp)
c011480f:	e8 6d cd ff ff       	call   c0111581 <copy_to_user>
c0114814:	85 c0                	test   %eax,%eax
c0114816:	74 40                	je     c0114858 <sysfile_read+0x12e>
                    assert(len >= alen);
c0114818:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011481b:	39 45 10             	cmp    %eax,0x10(%ebp)
c011481e:	73 24                	jae    c0114844 <sysfile_read+0x11a>
c0114820:	c7 44 24 0c b2 66 12 	movl   $0xc01266b2,0xc(%esp)
c0114827:	c0 
c0114828:	c7 44 24 08 be 66 12 	movl   $0xc01266be,0x8(%esp)
c011482f:	c0 
c0114830:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
c0114837:	00 
c0114838:	c7 04 24 d3 66 12 c0 	movl   $0xc01266d3,(%esp)
c011483f:	e8 d2 c9 fe ff       	call   c0101216 <__panic>
                    base += alen, len -= alen, copied += alen;
c0114844:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114847:	01 45 0c             	add    %eax,0xc(%ebp)
c011484a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011484d:	29 45 10             	sub    %eax,0x10(%ebp)
c0114850:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114853:	01 45 f0             	add    %eax,-0x10(%ebp)
c0114856:	eb 0d                	jmp    c0114865 <sysfile_read+0x13b>
                }
                else if (ret == 0) {
c0114858:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011485c:	75 07                	jne    c0114865 <sysfile_read+0x13b>
                    ret = -E_INVAL;
c011485e:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
                }
            }
            unlock_mm(mm);
c0114865:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114868:	89 04 24             	mov    %eax,(%esp)
c011486b:	e8 56 fd ff ff       	call   c01145c6 <unlock_mm>
        }
        if (ret != 0 || alen == 0) {
c0114870:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114874:	75 11                	jne    c0114887 <sysfile_read+0x15d>
c0114876:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114879:	85 c0                	test   %eax,%eax
c011487b:	74 0a                	je     c0114887 <sysfile_read+0x15d>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c011487d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114881:	0f 85 1f ff ff ff    	jne    c01147a6 <sysfile_read+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c0114887:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011488a:	89 04 24             	mov    %eax,(%esp)
c011488d:	e8 39 62 ff ff       	call   c010aacb <kfree>
    if (copied != 0) {
c0114892:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0114896:	74 05                	je     c011489d <sysfile_read+0x173>
        return copied;
c0114898:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011489b:	eb 03                	jmp    c01148a0 <sysfile_read+0x176>
    }
    return ret;
c011489d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01148a0:	c9                   	leave  
c01148a1:	c3                   	ret    

c01148a2 <sysfile_write>:

/* sysfile_write - write file */
int
sysfile_write(int fd, void *base, size_t len) {
c01148a2:	55                   	push   %ebp
c01148a3:	89 e5                	mov    %esp,%ebp
c01148a5:	83 ec 48             	sub    $0x48,%esp
    struct mm_struct *mm = current->mm;
c01148a8:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01148ad:	8b 40 18             	mov    0x18(%eax),%eax
c01148b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c01148b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01148b7:	75 0a                	jne    c01148c3 <sysfile_write+0x21>
        return 0;
c01148b9:	b8 00 00 00 00       	mov    $0x0,%eax
c01148be:	e9 57 01 00 00       	jmp    c0114a1a <sysfile_write+0x178>
    }
    if (!file_testfd(fd, 0, 1)) {
c01148c3:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01148ca:	00 
c01148cb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01148d2:	00 
c01148d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01148d6:	89 04 24             	mov    %eax,(%esp)
c01148d9:	e8 1e ed ff ff       	call   c01135fc <file_testfd>
c01148de:	85 c0                	test   %eax,%eax
c01148e0:	75 0a                	jne    c01148ec <sysfile_write+0x4a>
        return -E_INVAL;
c01148e2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01148e7:	e9 2e 01 00 00       	jmp    c0114a1a <sysfile_write+0x178>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c01148ec:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c01148f3:	e8 b8 61 ff ff       	call   c010aab0 <kmalloc>
c01148f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01148fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01148ff:	75 0a                	jne    c011490b <sysfile_write+0x69>
        return -E_NO_MEM;
c0114901:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0114906:	e9 0f 01 00 00       	jmp    c0114a1a <sysfile_write+0x178>
    }

    int ret = 0;
c011490b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c0114912:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c0114919:	e9 d9 00 00 00       	jmp    c01149f7 <sysfile_write+0x155>
        if ((alen = IOBUF_SIZE) > len) {
c011491e:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c0114925:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114928:	3b 45 10             	cmp    0x10(%ebp),%eax
c011492b:	76 06                	jbe    c0114933 <sysfile_write+0x91>
            alen = len;
c011492d:	8b 45 10             	mov    0x10(%ebp),%eax
c0114930:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        lock_mm(mm);
c0114933:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114936:	89 04 24             	mov    %eax,(%esp)
c0114939:	e8 55 fc ff ff       	call   c0114593 <lock_mm>
        {
            if (!copy_from_user(mm, buffer, base, alen, 0)) {
c011493e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114941:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0114948:	00 
c0114949:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011494d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114950:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114954:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114957:	89 44 24 04          	mov    %eax,0x4(%esp)
c011495b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011495e:	89 04 24             	mov    %eax,(%esp)
c0114961:	e8 ca cb ff ff       	call   c0111530 <copy_from_user>
c0114966:	85 c0                	test   %eax,%eax
c0114968:	75 07                	jne    c0114971 <sysfile_write+0xcf>
                ret = -E_INVAL;
c011496a:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
            }
        }
        unlock_mm(mm);
c0114971:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114974:	89 04 24             	mov    %eax,(%esp)
c0114977:	e8 4a fc ff ff       	call   c01145c6 <unlock_mm>
        if (ret == 0) {
c011497c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114980:	75 68                	jne    c01149ea <sysfile_write+0x148>
            ret = file_write(fd, buffer, alen, &alen);
c0114982:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114985:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0114988:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011498c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114990:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114993:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114997:	8b 45 08             	mov    0x8(%ebp),%eax
c011499a:	89 04 24             	mov    %eax,(%esp)
c011499d:	e8 48 f0 ff ff       	call   c01139ea <file_write>
c01149a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (alen != 0) {
c01149a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01149a8:	85 c0                	test   %eax,%eax
c01149aa:	74 3e                	je     c01149ea <sysfile_write+0x148>
                assert(len >= alen);
c01149ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01149af:	39 45 10             	cmp    %eax,0x10(%ebp)
c01149b2:	73 24                	jae    c01149d8 <sysfile_write+0x136>
c01149b4:	c7 44 24 0c b2 66 12 	movl   $0xc01266b2,0xc(%esp)
c01149bb:	c0 
c01149bc:	c7 44 24 08 be 66 12 	movl   $0xc01266be,0x8(%esp)
c01149c3:	c0 
c01149c4:	c7 44 24 04 97 00 00 	movl   $0x97,0x4(%esp)
c01149cb:	00 
c01149cc:	c7 04 24 d3 66 12 c0 	movl   $0xc01266d3,(%esp)
c01149d3:	e8 3e c8 fe ff       	call   c0101216 <__panic>
                base += alen, len -= alen, copied += alen;
c01149d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01149db:	01 45 0c             	add    %eax,0xc(%ebp)
c01149de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01149e1:	29 45 10             	sub    %eax,0x10(%ebp)
c01149e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01149e7:	01 45 f0             	add    %eax,-0x10(%ebp)
            }
        }
        if (ret != 0 || alen == 0) {
c01149ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01149ee:	75 11                	jne    c0114a01 <sysfile_write+0x15f>
c01149f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01149f3:	85 c0                	test   %eax,%eax
c01149f5:	74 0a                	je     c0114a01 <sysfile_write+0x15f>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c01149f7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01149fb:	0f 85 1d ff ff ff    	jne    c011491e <sysfile_write+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c0114a01:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114a04:	89 04 24             	mov    %eax,(%esp)
c0114a07:	e8 bf 60 ff ff       	call   c010aacb <kfree>
    if (copied != 0) {
c0114a0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0114a10:	74 05                	je     c0114a17 <sysfile_write+0x175>
        return copied;
c0114a12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114a15:	eb 03                	jmp    c0114a1a <sysfile_write+0x178>
    }
    return ret;
c0114a17:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114a1a:	c9                   	leave  
c0114a1b:	c3                   	ret    

c0114a1c <sysfile_seek>:

/* sysfile_seek - seek file */
int
sysfile_seek(int fd, off_t pos, int whence) {
c0114a1c:	55                   	push   %ebp
c0114a1d:	89 e5                	mov    %esp,%ebp
c0114a1f:	83 ec 18             	sub    $0x18,%esp
    return file_seek(fd, pos, whence);
c0114a22:	8b 45 10             	mov    0x10(%ebp),%eax
c0114a25:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114a29:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114a2c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114a30:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a33:	89 04 24             	mov    %eax,(%esp)
c0114a36:	e8 1a f1 ff ff       	call   c0113b55 <file_seek>
}
c0114a3b:	c9                   	leave  
c0114a3c:	c3                   	ret    

c0114a3d <sysfile_fstat>:

/* sysfile_fstat - stat file */
int
sysfile_fstat(int fd, struct stat *__stat) {
c0114a3d:	55                   	push   %ebp
c0114a3e:	89 e5                	mov    %esp,%ebp
c0114a40:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c0114a43:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0114a48:	8b 40 18             	mov    0x18(%eax),%eax
c0114a4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct stat __local_stat, *stat = &__local_stat;
c0114a4e:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0114a51:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = file_fstat(fd, stat)) != 0) {
c0114a54:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114a57:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114a5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a5e:	89 04 24             	mov    %eax,(%esp)
c0114a61:	e8 f4 f2 ff ff       	call   c0113d5a <file_fstat>
c0114a66:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114a69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114a6d:	74 05                	je     c0114a74 <sysfile_fstat+0x37>
        return ret;
c0114a6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114a72:	eb 45                	jmp    c0114ab9 <sysfile_fstat+0x7c>
    }

    lock_mm(mm);
c0114a74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114a77:	89 04 24             	mov    %eax,(%esp)
c0114a7a:	e8 14 fb ff ff       	call   c0114593 <lock_mm>
    {
        if (!copy_to_user(mm, __stat, stat, sizeof(struct stat))) {
c0114a7f:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
c0114a86:	00 
c0114a87:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114a8a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114a8e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114a91:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114a95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114a98:	89 04 24             	mov    %eax,(%esp)
c0114a9b:	e8 e1 ca ff ff       	call   c0111581 <copy_to_user>
c0114aa0:	85 c0                	test   %eax,%eax
c0114aa2:	75 07                	jne    c0114aab <sysfile_fstat+0x6e>
            ret = -E_INVAL;
c0114aa4:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c0114aab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114aae:	89 04 24             	mov    %eax,(%esp)
c0114ab1:	e8 10 fb ff ff       	call   c01145c6 <unlock_mm>
    return ret;
c0114ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114ab9:	c9                   	leave  
c0114aba:	c3                   	ret    

c0114abb <sysfile_fsync>:

/* sysfile_fsync - sync file */
int
sysfile_fsync(int fd) {
c0114abb:	55                   	push   %ebp
c0114abc:	89 e5                	mov    %esp,%ebp
c0114abe:	83 ec 18             	sub    $0x18,%esp
    return file_fsync(fd);
c0114ac1:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ac4:	89 04 24             	mov    %eax,(%esp)
c0114ac7:	e8 7e f3 ff ff       	call   c0113e4a <file_fsync>
}
c0114acc:	c9                   	leave  
c0114acd:	c3                   	ret    

c0114ace <sysfile_chdir>:

/* sysfile_chdir - change dir */
int
sysfile_chdir(const char *__path) {
c0114ace:	55                   	push   %ebp
c0114acf:	89 e5                	mov    %esp,%ebp
c0114ad1:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c0114ad4:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ad7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114adb:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0114ade:	89 04 24             	mov    %eax,(%esp)
c0114ae1:	e8 06 fb ff ff       	call   c01145ec <copy_path>
c0114ae6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114ae9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114aed:	74 05                	je     c0114af4 <sysfile_chdir+0x26>
        return ret;
c0114aef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114af2:	eb 1c                	jmp    c0114b10 <sysfile_chdir+0x42>
    }
    ret = vfs_chdir(path);
c0114af4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114af7:	89 04 24             	mov    %eax,(%esp)
c0114afa:	e8 4e 64 00 00       	call   c011af4d <vfs_chdir>
c0114aff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c0114b02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114b05:	89 04 24             	mov    %eax,(%esp)
c0114b08:	e8 be 5f ff ff       	call   c010aacb <kfree>
    return ret;
c0114b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114b10:	c9                   	leave  
c0114b11:	c3                   	ret    

c0114b12 <sysfile_link>:

/* sysfile_link - link file */
int
sysfile_link(const char *__path1, const char *__path2) {
c0114b12:	55                   	push   %ebp
c0114b13:	89 e5                	mov    %esp,%ebp
c0114b15:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c0114b18:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b1b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114b1f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0114b22:	89 04 24             	mov    %eax,(%esp)
c0114b25:	e8 c2 fa ff ff       	call   c01145ec <copy_path>
c0114b2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114b2d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114b31:	74 05                	je     c0114b38 <sysfile_link+0x26>
        return ret;
c0114b33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114b36:	eb 59                	jmp    c0114b91 <sysfile_link+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c0114b38:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114b3b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114b3f:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0114b42:	89 04 24             	mov    %eax,(%esp)
c0114b45:	e8 a2 fa ff ff       	call   c01145ec <copy_path>
c0114b4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114b4d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114b51:	74 10                	je     c0114b63 <sysfile_link+0x51>
        kfree(old_path);
c0114b53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114b56:	89 04 24             	mov    %eax,(%esp)
c0114b59:	e8 6d 5f ff ff       	call   c010aacb <kfree>
        return ret;
c0114b5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114b61:	eb 2e                	jmp    c0114b91 <sysfile_link+0x7f>
    }
    ret = vfs_link(old_path, new_path);
c0114b63:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114b66:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114b69:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114b6d:	89 04 24             	mov    %eax,(%esp)
c0114b70:	e8 26 5e 00 00       	call   c011a99b <vfs_link>
c0114b75:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c0114b78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114b7b:	89 04 24             	mov    %eax,(%esp)
c0114b7e:	e8 48 5f ff ff       	call   c010aacb <kfree>
c0114b83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114b86:	89 04 24             	mov    %eax,(%esp)
c0114b89:	e8 3d 5f ff ff       	call   c010aacb <kfree>
    return ret;
c0114b8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114b91:	c9                   	leave  
c0114b92:	c3                   	ret    

c0114b93 <sysfile_rename>:

/* sysfile_rename - rename file */
int
sysfile_rename(const char *__path1, const char *__path2) {
c0114b93:	55                   	push   %ebp
c0114b94:	89 e5                	mov    %esp,%ebp
c0114b96:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c0114b99:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b9c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114ba0:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0114ba3:	89 04 24             	mov    %eax,(%esp)
c0114ba6:	e8 41 fa ff ff       	call   c01145ec <copy_path>
c0114bab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114bae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114bb2:	74 05                	je     c0114bb9 <sysfile_rename+0x26>
        return ret;
c0114bb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114bb7:	eb 59                	jmp    c0114c12 <sysfile_rename+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c0114bb9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114bbc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114bc0:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0114bc3:	89 04 24             	mov    %eax,(%esp)
c0114bc6:	e8 21 fa ff ff       	call   c01145ec <copy_path>
c0114bcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114bce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114bd2:	74 10                	je     c0114be4 <sysfile_rename+0x51>
        kfree(old_path);
c0114bd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114bd7:	89 04 24             	mov    %eax,(%esp)
c0114bda:	e8 ec 5e ff ff       	call   c010aacb <kfree>
        return ret;
c0114bdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114be2:	eb 2e                	jmp    c0114c12 <sysfile_rename+0x7f>
    }
    ret = vfs_rename(old_path, new_path);
c0114be4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114be7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114bea:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114bee:	89 04 24             	mov    %eax,(%esp)
c0114bf1:	e8 be 5c 00 00       	call   c011a8b4 <vfs_rename>
c0114bf6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c0114bf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114bfc:	89 04 24             	mov    %eax,(%esp)
c0114bff:	e8 c7 5e ff ff       	call   c010aacb <kfree>
c0114c04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114c07:	89 04 24             	mov    %eax,(%esp)
c0114c0a:	e8 bc 5e ff ff       	call   c010aacb <kfree>
    return ret;
c0114c0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114c12:	c9                   	leave  
c0114c13:	c3                   	ret    

c0114c14 <sysfile_unlink>:

/* sysfile_unlink - unlink file */
int
sysfile_unlink(const char *__path) {
c0114c14:	55                   	push   %ebp
c0114c15:	89 e5                	mov    %esp,%ebp
c0114c17:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c0114c1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c1d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114c21:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0114c24:	89 04 24             	mov    %eax,(%esp)
c0114c27:	e8 c0 f9 ff ff       	call   c01145ec <copy_path>
c0114c2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114c2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114c33:	74 05                	je     c0114c3a <sysfile_unlink+0x26>
        return ret;
c0114c35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114c38:	eb 1c                	jmp    c0114c56 <sysfile_unlink+0x42>
    }
    ret = vfs_unlink(path);
c0114c3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114c3d:	89 04 24             	mov    %eax,(%esp)
c0114c40:	e8 65 5c 00 00       	call   c011a8aa <vfs_unlink>
c0114c45:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c0114c48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114c4b:	89 04 24             	mov    %eax,(%esp)
c0114c4e:	e8 78 5e ff ff       	call   c010aacb <kfree>
    return ret;
c0114c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114c56:	c9                   	leave  
c0114c57:	c3                   	ret    

c0114c58 <sysfile_getcwd>:

/* sysfile_get cwd - get current working directory */
int
sysfile_getcwd(char *buf, size_t len) {
c0114c58:	55                   	push   %ebp
c0114c59:	89 e5                	mov    %esp,%ebp
c0114c5b:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c0114c5e:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0114c63:	8b 40 18             	mov    0x18(%eax),%eax
c0114c66:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (len == 0) {
c0114c69:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114c6d:	75 07                	jne    c0114c76 <sysfile_getcwd+0x1e>
        return -E_INVAL;
c0114c6f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0114c74:	eb 77                	jmp    c0114ced <sysfile_getcwd+0x95>
    }

    int ret = -E_INVAL;
c0114c76:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    lock_mm(mm);
c0114c7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114c80:	89 04 24             	mov    %eax,(%esp)
c0114c83:	e8 0b f9 ff ff       	call   c0114593 <lock_mm>
    {
        if (user_mem_check(mm, (uintptr_t)buf, len, 1)) {
c0114c88:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c8b:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114c92:	00 
c0114c93:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114c96:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114c9a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114c9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114ca1:	89 04 24             	mov    %eax,(%esp)
c0114ca4:	e8 85 d2 ff ff       	call   c0111f2e <user_mem_check>
c0114ca9:	85 c0                	test   %eax,%eax
c0114cab:	74 32                	je     c0114cdf <sysfile_getcwd+0x87>
            struct iobuf __iob, *iob = iobuf_init(&__iob, buf, len, 0);
c0114cad:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0114cb4:	00 
c0114cb5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114cb8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114cbc:	8b 45 08             	mov    0x8(%ebp),%eax
c0114cbf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114cc3:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0114cc6:	89 04 24             	mov    %eax,(%esp)
c0114cc9:	e8 16 f7 ff ff       	call   c01143e4 <iobuf_init>
c0114cce:	89 45 ec             	mov    %eax,-0x14(%ebp)
            ret = vfs_getcwd(iob);
c0114cd1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114cd4:	89 04 24             	mov    %eax,(%esp)
c0114cd7:	e8 b0 62 00 00       	call   c011af8c <vfs_getcwd>
c0114cdc:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c0114cdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114ce2:	89 04 24             	mov    %eax,(%esp)
c0114ce5:	e8 dc f8 ff ff       	call   c01145c6 <unlock_mm>
    return ret;
c0114cea:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114ced:	c9                   	leave  
c0114cee:	c3                   	ret    

c0114cef <sysfile_mkdir>:

/* sysfile_mkdir - create a dir */
int
sysfile_mkdir(const char *__path) {
c0114cef:	55                   	push   %ebp
c0114cf0:	89 e5                	mov    %esp,%ebp
c0114cf2:	83 ec 28             	sub    $0x28,%esp
	int ret;
	char *path;
	if ((ret = copy_path(&path, __path)) != 0) {
c0114cf5:	8b 45 08             	mov    0x8(%ebp),%eax
c0114cf8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114cfc:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0114cff:	89 04 24             	mov    %eax,(%esp)
c0114d02:	e8 e5 f8 ff ff       	call   c01145ec <copy_path>
c0114d07:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114d0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114d0e:	74 05                	je     c0114d15 <sysfile_mkdir+0x26>
        return ret;
c0114d10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114d13:	eb 1c                	jmp    c0114d31 <sysfile_mkdir+0x42>
    }
    ret = file_mkdir(path);
c0114d15:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114d18:	89 04 24             	mov    %eax,(%esp)
c0114d1b:	e8 13 f2 ff ff       	call   c0113f33 <file_mkdir>
c0114d20:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c0114d23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114d26:	89 04 24             	mov    %eax,(%esp)
c0114d29:	e8 9d 5d ff ff       	call   c010aacb <kfree>
    return ret;
c0114d2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114d31:	c9                   	leave  
c0114d32:	c3                   	ret    

c0114d33 <sysfile_getdirentry>:

/* sysfile_getdirentry - get the file entry in DIR */
int
sysfile_getdirentry(int fd, struct dirent *__direntp) {
c0114d33:	55                   	push   %ebp
c0114d34:	89 e5                	mov    %esp,%ebp
c0114d36:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c0114d39:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0114d3e:	8b 40 18             	mov    0x18(%eax),%eax
c0114d41:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct dirent *direntp;
    if ((direntp = kmalloc(sizeof(struct dirent))) == NULL) {
c0114d44:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0114d4b:	e8 60 5d ff ff       	call   c010aab0 <kmalloc>
c0114d50:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114d53:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0114d57:	75 0a                	jne    c0114d63 <sysfile_getdirentry+0x30>
        return -E_NO_MEM;
c0114d59:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0114d5e:	e9 c2 00 00 00       	jmp    c0114e25 <sysfile_getdirentry+0xf2>
    }

    int ret = 0;
c0114d63:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_mm(mm);
c0114d6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114d6d:	89 04 24             	mov    %eax,(%esp)
c0114d70:	e8 1e f8 ff ff       	call   c0114593 <lock_mm>
    {
        if (!copy_from_user(mm, &(direntp->offset), &(__direntp->offset), sizeof(direntp->offset), 1)) {
c0114d75:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114d78:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114d7b:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114d82:	00 
c0114d83:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c0114d8a:	00 
c0114d8b:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114d8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114d93:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114d96:	89 04 24             	mov    %eax,(%esp)
c0114d99:	e8 92 c7 ff ff       	call   c0111530 <copy_from_user>
c0114d9e:	85 c0                	test   %eax,%eax
c0114da0:	75 07                	jne    c0114da9 <sysfile_getdirentry+0x76>
            ret = -E_INVAL;
c0114da2:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c0114da9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114dac:	89 04 24             	mov    %eax,(%esp)
c0114daf:	e8 12 f8 ff ff       	call   c01145c6 <unlock_mm>

    if (ret != 0 || (ret = file_getdirentry(fd, direntp)) != 0) {
c0114db4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114db8:	75 5d                	jne    c0114e17 <sysfile_getdirentry+0xe4>
c0114dba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114dbd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114dc1:	8b 45 08             	mov    0x8(%ebp),%eax
c0114dc4:	89 04 24             	mov    %eax,(%esp)
c0114dc7:	e8 80 f1 ff ff       	call   c0113f4c <file_getdirentry>
c0114dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114dcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114dd3:	75 42                	jne    c0114e17 <sysfile_getdirentry+0xe4>
        goto out;
    }

    lock_mm(mm);
c0114dd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114dd8:	89 04 24             	mov    %eax,(%esp)
c0114ddb:	e8 b3 f7 ff ff       	call   c0114593 <lock_mm>
    {
        if (!copy_to_user(mm, __direntp, direntp, sizeof(struct dirent))) {
c0114de0:	c7 44 24 0c 04 01 00 	movl   $0x104,0xc(%esp)
c0114de7:	00 
c0114de8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114deb:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114def:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114df2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114df6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114df9:	89 04 24             	mov    %eax,(%esp)
c0114dfc:	e8 80 c7 ff ff       	call   c0111581 <copy_to_user>
c0114e01:	85 c0                	test   %eax,%eax
c0114e03:	75 07                	jne    c0114e0c <sysfile_getdirentry+0xd9>
            ret = -E_INVAL;
c0114e05:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c0114e0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114e0f:	89 04 24             	mov    %eax,(%esp)
c0114e12:	e8 af f7 ff ff       	call   c01145c6 <unlock_mm>

out:
    kfree(direntp);
c0114e17:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114e1a:	89 04 24             	mov    %eax,(%esp)
c0114e1d:	e8 a9 5c ff ff       	call   c010aacb <kfree>
    return ret;
c0114e22:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114e25:	c9                   	leave  
c0114e26:	c3                   	ret    

c0114e27 <sysfile_dup>:

/* sysfile_dup -  duplicate fd1 to fd2 */
int
sysfile_dup(int fd1, int fd2) {
c0114e27:	55                   	push   %ebp
c0114e28:	89 e5                	mov    %esp,%ebp
c0114e2a:	83 ec 18             	sub    $0x18,%esp
    return file_dup(fd1, fd2);
c0114e2d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114e30:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e34:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e37:	89 04 24             	mov    %eax,(%esp)
c0114e3a:	e8 4c f2 ff ff       	call   c011408b <file_dup>
}
c0114e3f:	c9                   	leave  
c0114e40:	c3                   	ret    

c0114e41 <sysfile_pipe>:

int
sysfile_pipe(int *fd_store) {
c0114e41:	55                   	push   %ebp
c0114e42:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0114e44:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0114e49:	5d                   	pop    %ebp
c0114e4a:	c3                   	ret    

c0114e4b <sysfile_mkfifo>:

int
sysfile_mkfifo(const char *__name, uint32_t open_flags) {
c0114e4b:	55                   	push   %ebp
c0114e4c:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0114e4e:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0114e53:	5d                   	pop    %ebp
c0114e54:	c3                   	ret    

c0114e55 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c0114e55:	52                   	push   %edx
    call *%ebx              # call fn
c0114e56:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c0114e58:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c0114e59:	e8 b3 0e 00 00       	call   c0115d11 <do_exit>

c0114e5e <timer_init>:

#define le2timer(le, member)            \
to_struct((le), timer_t, member)

static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c0114e5e:	55                   	push   %ebp
c0114e5f:	89 e5                	mov    %esp,%ebp
c0114e61:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c0114e64:	8b 55 10             	mov    0x10(%ebp),%edx
c0114e67:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e6a:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c0114e6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e6f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114e72:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c0114e75:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e78:	83 c0 08             	add    $0x8,%eax
c0114e7b:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0114e7e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0114e81:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0114e84:	89 50 04             	mov    %edx,0x4(%eax)
c0114e87:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0114e8a:	8b 50 04             	mov    0x4(%eax),%edx
c0114e8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0114e90:	89 10                	mov    %edx,(%eax)
    return timer;
c0114e92:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0114e95:	c9                   	leave  
c0114e96:	c3                   	ret    

c0114e97 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0114e97:	55                   	push   %ebp
c0114e98:	89 e5                	mov    %esp,%ebp
c0114e9a:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0114e9d:	9c                   	pushf  
c0114e9e:	58                   	pop    %eax
c0114e9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0114ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0114ea5:	25 00 02 00 00       	and    $0x200,%eax
c0114eaa:	85 c0                	test   %eax,%eax
c0114eac:	74 0c                	je     c0114eba <__intr_save+0x23>
        intr_disable();
c0114eae:	e8 ee d5 fe ff       	call   c01024a1 <intr_disable>
        return 1;
c0114eb3:	b8 01 00 00 00       	mov    $0x1,%eax
c0114eb8:	eb 05                	jmp    c0114ebf <__intr_save+0x28>
    }
    return 0;
c0114eba:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0114ebf:	c9                   	leave  
c0114ec0:	c3                   	ret    

c0114ec1 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0114ec1:	55                   	push   %ebp
c0114ec2:	89 e5                	mov    %esp,%ebp
c0114ec4:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0114ec7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0114ecb:	74 05                	je     c0114ed2 <__intr_restore+0x11>
        intr_enable();
c0114ecd:	e8 c9 d5 fe ff       	call   c010249b <intr_enable>
    }
}
c0114ed2:	c9                   	leave  
c0114ed3:	c3                   	ret    

c0114ed4 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0114ed4:	55                   	push   %ebp
c0114ed5:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0114ed7:	8b 55 08             	mov    0x8(%ebp),%edx
c0114eda:	a1 6c 11 17 c0       	mov    0xc017116c,%eax
c0114edf:	29 c2                	sub    %eax,%edx
c0114ee1:	89 d0                	mov    %edx,%eax
c0114ee3:	c1 f8 02             	sar    $0x2,%eax
c0114ee6:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0114eec:	5d                   	pop    %ebp
c0114eed:	c3                   	ret    

c0114eee <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0114eee:	55                   	push   %ebp
c0114eef:	89 e5                	mov    %esp,%ebp
c0114ef1:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0114ef4:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ef7:	89 04 24             	mov    %eax,(%esp)
c0114efa:	e8 d5 ff ff ff       	call   c0114ed4 <page2ppn>
c0114eff:	c1 e0 0c             	shl    $0xc,%eax
}
c0114f02:	c9                   	leave  
c0114f03:	c3                   	ret    

c0114f04 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0114f04:	55                   	push   %ebp
c0114f05:	89 e5                	mov    %esp,%ebp
c0114f07:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0114f0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f0d:	c1 e8 0c             	shr    $0xc,%eax
c0114f10:	89 c2                	mov    %eax,%edx
c0114f12:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c0114f17:	39 c2                	cmp    %eax,%edx
c0114f19:	72 1c                	jb     c0114f37 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0114f1b:	c7 44 24 08 e8 66 12 	movl   $0xc01266e8,0x8(%esp)
c0114f22:	c0 
c0114f23:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0114f2a:	00 
c0114f2b:	c7 04 24 07 67 12 c0 	movl   $0xc0126707,(%esp)
c0114f32:	e8 df c2 fe ff       	call   c0101216 <__panic>
    }
    return &pages[PPN(pa)];
c0114f37:	8b 0d 6c 11 17 c0    	mov    0xc017116c,%ecx
c0114f3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f40:	c1 e8 0c             	shr    $0xc,%eax
c0114f43:	89 c2                	mov    %eax,%edx
c0114f45:	89 d0                	mov    %edx,%eax
c0114f47:	c1 e0 03             	shl    $0x3,%eax
c0114f4a:	01 d0                	add    %edx,%eax
c0114f4c:	c1 e0 02             	shl    $0x2,%eax
c0114f4f:	01 c8                	add    %ecx,%eax
}
c0114f51:	c9                   	leave  
c0114f52:	c3                   	ret    

c0114f53 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0114f53:	55                   	push   %ebp
c0114f54:	89 e5                	mov    %esp,%ebp
c0114f56:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0114f59:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f5c:	89 04 24             	mov    %eax,(%esp)
c0114f5f:	e8 8a ff ff ff       	call   c0114eee <page2pa>
c0114f64:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114f6a:	c1 e8 0c             	shr    $0xc,%eax
c0114f6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114f70:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c0114f75:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0114f78:	72 23                	jb     c0114f9d <page2kva+0x4a>
c0114f7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114f7d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114f81:	c7 44 24 08 18 67 12 	movl   $0xc0126718,0x8(%esp)
c0114f88:	c0 
c0114f89:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0114f90:	00 
c0114f91:	c7 04 24 07 67 12 c0 	movl   $0xc0126707,(%esp)
c0114f98:	e8 79 c2 fe ff       	call   c0101216 <__panic>
c0114f9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114fa0:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0114fa5:	c9                   	leave  
c0114fa6:	c3                   	ret    

c0114fa7 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0114fa7:	55                   	push   %ebp
c0114fa8:	89 e5                	mov    %esp,%ebp
c0114faa:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c0114fad:	8b 45 08             	mov    0x8(%ebp),%eax
c0114fb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114fb3:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0114fba:	77 23                	ja     c0114fdf <kva2page+0x38>
c0114fbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114fbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114fc3:	c7 44 24 08 3c 67 12 	movl   $0xc012673c,0x8(%esp)
c0114fca:	c0 
c0114fcb:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0114fd2:	00 
c0114fd3:	c7 04 24 07 67 12 c0 	movl   $0xc0126707,(%esp)
c0114fda:	e8 37 c2 fe ff       	call   c0101216 <__panic>
c0114fdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114fe2:	05 00 00 00 40       	add    $0x40000000,%eax
c0114fe7:	89 04 24             	mov    %eax,(%esp)
c0114fea:	e8 15 ff ff ff       	call   c0114f04 <pa2page>
}
c0114fef:	c9                   	leave  
c0114ff0:	c3                   	ret    

c0114ff1 <mm_count_inc>:
set_mm_count(struct mm_struct *mm, int val) {
    mm->mm_count = val;
}

static inline int
mm_count_inc(struct mm_struct *mm) {
c0114ff1:	55                   	push   %ebp
c0114ff2:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c0114ff4:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ff7:	8b 40 18             	mov    0x18(%eax),%eax
c0114ffa:	8d 50 01             	lea    0x1(%eax),%edx
c0114ffd:	8b 45 08             	mov    0x8(%ebp),%eax
c0115000:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c0115003:	8b 45 08             	mov    0x8(%ebp),%eax
c0115006:	8b 40 18             	mov    0x18(%eax),%eax
}
c0115009:	5d                   	pop    %ebp
c011500a:	c3                   	ret    

c011500b <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c011500b:	55                   	push   %ebp
c011500c:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c011500e:	8b 45 08             	mov    0x8(%ebp),%eax
c0115011:	8b 40 18             	mov    0x18(%eax),%eax
c0115014:	8d 50 ff             	lea    -0x1(%eax),%edx
c0115017:	8b 45 08             	mov    0x8(%ebp),%eax
c011501a:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c011501d:	8b 45 08             	mov    0x8(%ebp),%eax
c0115020:	8b 40 18             	mov    0x18(%eax),%eax
}
c0115023:	5d                   	pop    %ebp
c0115024:	c3                   	ret    

c0115025 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c0115025:	55                   	push   %ebp
c0115026:	89 e5                	mov    %esp,%ebp
c0115028:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c011502b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011502f:	74 25                	je     c0115056 <lock_mm+0x31>
        down(&(mm->mm_sem));
c0115031:	8b 45 08             	mov    0x8(%ebp),%eax
c0115034:	83 c0 1c             	add    $0x1c,%eax
c0115037:	89 04 24             	mov    %eax,(%esp)
c011503a:	e8 9d db ff ff       	call   c0112bdc <down>
        if (current != NULL) {
c011503f:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0115044:	85 c0                	test   %eax,%eax
c0115046:	74 0e                	je     c0115056 <lock_mm+0x31>
            mm->locked_by = current->pid;
c0115048:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c011504d:	8b 50 04             	mov    0x4(%eax),%edx
c0115050:	8b 45 08             	mov    0x8(%ebp),%eax
c0115053:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c0115056:	c9                   	leave  
c0115057:	c3                   	ret    

c0115058 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c0115058:	55                   	push   %ebp
c0115059:	89 e5                	mov    %esp,%ebp
c011505b:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c011505e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0115062:	74 18                	je     c011507c <unlock_mm+0x24>
        up(&(mm->mm_sem));
c0115064:	8b 45 08             	mov    0x8(%ebp),%eax
c0115067:	83 c0 1c             	add    $0x1c,%eax
c011506a:	89 04 24             	mov    %eax,(%esp)
c011506d:	e8 4f db ff ff       	call   c0112bc1 <up>
        mm->locked_by = 0;
c0115072:	8b 45 08             	mov    0x8(%ebp),%eax
c0115075:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c011507c:	c9                   	leave  
c011507d:	c3                   	ret    

c011507e <files_count_inc>:

static inline int
files_count_inc(struct files_struct *filesp) {
c011507e:	55                   	push   %ebp
c011507f:	89 e5                	mov    %esp,%ebp
    filesp->files_count += 1;
c0115081:	8b 45 08             	mov    0x8(%ebp),%eax
c0115084:	8b 40 08             	mov    0x8(%eax),%eax
c0115087:	8d 50 01             	lea    0x1(%eax),%edx
c011508a:	8b 45 08             	mov    0x8(%ebp),%eax
c011508d:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c0115090:	8b 45 08             	mov    0x8(%ebp),%eax
c0115093:	8b 40 08             	mov    0x8(%eax),%eax
}
c0115096:	5d                   	pop    %ebp
c0115097:	c3                   	ret    

c0115098 <files_count_dec>:

static inline int
files_count_dec(struct files_struct *filesp) {
c0115098:	55                   	push   %ebp
c0115099:	89 e5                	mov    %esp,%ebp
    filesp->files_count -= 1;
c011509b:	8b 45 08             	mov    0x8(%ebp),%eax
c011509e:	8b 40 08             	mov    0x8(%eax),%eax
c01150a1:	8d 50 ff             	lea    -0x1(%eax),%edx
c01150a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01150a7:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c01150aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01150ad:	8b 40 08             	mov    0x8(%eax),%eax
}
c01150b0:	5d                   	pop    %ebp
c01150b1:	c3                   	ret    

c01150b2 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c01150b2:	55                   	push   %ebp
c01150b3:	89 e5                	mov    %esp,%ebp
c01150b5:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c01150b8:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
c01150bf:	e8 ec 59 ff ff       	call   c010aab0 <kmalloc>
c01150c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c01150c7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01150cb:	0f 84 70 01 00 00    	je     c0115241 <alloc_proc+0x18f>
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
    //LAB8:EXERCISE2 YOUR CODE HINT:need add some code to init fs in proc_struct, ...
        proc->state = PROC_UNINIT;
c01150d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01150d4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c01150da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01150dd:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c01150e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01150e7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c01150ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01150f1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c01150f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01150fb:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c0115102:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115105:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c011510c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011510f:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c0115116:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115119:	83 c0 1c             	add    $0x1c,%eax
c011511c:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c0115123:	00 
c0115124:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011512b:	00 
c011512c:	89 04 24             	mov    %eax,(%esp)
c011512f:	e8 cb bf 00 00       	call   c01210ff <memset>
        proc->tf = NULL;
c0115134:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115137:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c011513e:	8b 15 68 11 17 c0    	mov    0xc0171168,%edx
c0115144:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115147:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c011514a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011514d:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c0115154:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115157:	83 c0 48             	add    $0x48,%eax
c011515a:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c0115161:	00 
c0115162:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0115169:	00 
c011516a:	89 04 24             	mov    %eax,(%esp)
c011516d:	e8 8d bf 00 00       	call   c01210ff <memset>
        proc->wait_state = 0;
c0115172:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115175:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c011517c:	00 00 00 
        proc->cptr = proc->optr = proc->yptr = NULL;
c011517f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115182:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c0115189:	00 00 00 
c011518c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011518f:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c0115195:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115198:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c011519e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01151a1:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c01151a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01151aa:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
        proc->rq = NULL;
c01151b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01151b3:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c01151ba:	00 00 00 
        list_init(&(proc->run_link));
c01151bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01151c0:	05 a4 00 00 00       	add    $0xa4,%eax
c01151c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01151c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01151cb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01151ce:	89 50 04             	mov    %edx,0x4(%eax)
c01151d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01151d4:	8b 50 04             	mov    0x4(%eax),%edx
c01151d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01151da:	89 10                	mov    %edx,(%eax)
        proc->time_slice = 0;
c01151dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01151df:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c01151e6:	00 00 00 
        proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c01151e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01151ec:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
c01151f3:	00 00 00 
c01151f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01151f9:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
c01151ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115202:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
c0115208:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011520b:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
c0115211:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115214:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
        proc->stride = 0;
c011521a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011521d:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c0115224:	00 00 00 
        proc->priority = 0;
c0115227:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011522a:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c0115231:	00 00 00 
        proc->filesp = NULL;
c0115234:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115237:	c7 80 c4 00 00 00 00 	movl   $0x0,0xc4(%eax)
c011523e:	00 00 00 
    }
    return proc;
c0115241:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0115244:	c9                   	leave  
c0115245:	c3                   	ret    

c0115246 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c0115246:	55                   	push   %ebp
c0115247:	89 e5                	mov    %esp,%ebp
c0115249:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c011524c:	8b 45 08             	mov    0x8(%ebp),%eax
c011524f:	83 c0 48             	add    $0x48,%eax
c0115252:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c0115259:	00 
c011525a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0115261:	00 
c0115262:	89 04 24             	mov    %eax,(%esp)
c0115265:	e8 95 be 00 00       	call   c01210ff <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c011526a:	8b 45 08             	mov    0x8(%ebp),%eax
c011526d:	8d 50 48             	lea    0x48(%eax),%edx
c0115270:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c0115277:	00 
c0115278:	8b 45 0c             	mov    0xc(%ebp),%eax
c011527b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011527f:	89 14 24             	mov    %edx,(%esp)
c0115282:	e8 5a bf 00 00       	call   c01211e1 <memcpy>
}
c0115287:	c9                   	leave  
c0115288:	c3                   	ret    

c0115289 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c0115289:	55                   	push   %ebp
c011528a:	89 e5                	mov    %esp,%ebp
c011528c:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c011528f:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c0115296:	00 
c0115297:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011529e:	00 
c011529f:	c7 04 24 a0 00 17 c0 	movl   $0xc01700a0,(%esp)
c01152a6:	e8 54 be 00 00       	call   c01210ff <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c01152ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01152ae:	83 c0 48             	add    $0x48,%eax
c01152b1:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c01152b8:	00 
c01152b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01152bd:	c7 04 24 a0 00 17 c0 	movl   $0xc01700a0,(%esp)
c01152c4:	e8 18 bf 00 00       	call   c01211e1 <memcpy>
}
c01152c9:	c9                   	leave  
c01152ca:	c3                   	ret    

c01152cb <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c01152cb:	55                   	push   %ebp
c01152cc:	89 e5                	mov    %esp,%ebp
c01152ce:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c01152d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01152d4:	83 c0 7c             	add    $0x7c,%eax
c01152d7:	c7 45 fc 3c 13 17 c0 	movl   $0xc017133c,-0x4(%ebp)
c01152de:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01152e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01152e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01152e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01152ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01152ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01152f0:	8b 40 04             	mov    0x4(%eax),%eax
c01152f3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01152f6:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01152f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01152fc:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01152ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0115302:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0115305:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0115308:	89 10                	mov    %edx,(%eax)
c011530a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011530d:	8b 10                	mov    (%eax),%edx
c011530f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115312:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0115315:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115318:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011531b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c011531e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115321:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0115324:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c0115326:	8b 45 08             	mov    0x8(%ebp),%eax
c0115329:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c0115330:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c0115333:	8b 45 08             	mov    0x8(%ebp),%eax
c0115336:	8b 40 14             	mov    0x14(%eax),%eax
c0115339:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c011533f:	8b 45 08             	mov    0x8(%ebp),%eax
c0115342:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c0115348:	8b 45 08             	mov    0x8(%ebp),%eax
c011534b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c0115351:	85 c0                	test   %eax,%eax
c0115353:	74 12                	je     c0115367 <set_links+0x9c>
        proc->optr->yptr = proc;
c0115355:	8b 45 08             	mov    0x8(%ebp),%eax
c0115358:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c011535e:	8b 55 08             	mov    0x8(%ebp),%edx
c0115361:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c0115367:	8b 45 08             	mov    0x8(%ebp),%eax
c011536a:	8b 40 14             	mov    0x14(%eax),%eax
c011536d:	8b 55 08             	mov    0x8(%ebp),%edx
c0115370:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c0115376:	a1 80 00 17 c0       	mov    0xc0170080,%eax
c011537b:	83 c0 01             	add    $0x1,%eax
c011537e:	a3 80 00 17 c0       	mov    %eax,0xc0170080
}
c0115383:	c9                   	leave  
c0115384:	c3                   	ret    

c0115385 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c0115385:	55                   	push   %ebp
c0115386:	89 e5                	mov    %esp,%ebp
c0115388:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c011538b:	8b 45 08             	mov    0x8(%ebp),%eax
c011538e:	83 c0 7c             	add    $0x7c,%eax
c0115391:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0115394:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0115397:	8b 40 04             	mov    0x4(%eax),%eax
c011539a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c011539d:	8b 12                	mov    (%edx),%edx
c011539f:	89 55 f8             	mov    %edx,-0x8(%ebp)
c01153a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01153a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01153a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01153ab:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01153ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01153b1:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01153b4:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c01153b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01153b9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c01153bf:	85 c0                	test   %eax,%eax
c01153c1:	74 18                	je     c01153db <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c01153c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01153c6:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c01153cc:	8b 55 08             	mov    0x8(%ebp),%edx
c01153cf:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c01153d5:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c01153db:	8b 45 08             	mov    0x8(%ebp),%eax
c01153de:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c01153e4:	85 c0                	test   %eax,%eax
c01153e6:	74 1a                	je     c0115402 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c01153e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01153eb:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c01153f1:	8b 55 08             	mov    0x8(%ebp),%edx
c01153f4:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c01153fa:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c0115400:	eb 15                	jmp    c0115417 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c0115402:	8b 45 08             	mov    0x8(%ebp),%eax
c0115405:	8b 40 14             	mov    0x14(%eax),%eax
c0115408:	8b 55 08             	mov    0x8(%ebp),%edx
c011540b:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c0115411:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c0115417:	a1 80 00 17 c0       	mov    0xc0170080,%eax
c011541c:	83 e8 01             	sub    $0x1,%eax
c011541f:	a3 80 00 17 c0       	mov    %eax,0xc0170080
}
c0115424:	c9                   	leave  
c0115425:	c3                   	ret    

c0115426 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c0115426:	55                   	push   %ebp
c0115427:	89 e5                	mov    %esp,%ebp
c0115429:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c011542c:	c7 45 f8 3c 13 17 c0 	movl   $0xc017133c,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c0115433:	a1 08 ab 16 c0       	mov    0xc016ab08,%eax
c0115438:	83 c0 01             	add    $0x1,%eax
c011543b:	a3 08 ab 16 c0       	mov    %eax,0xc016ab08
c0115440:	a1 08 ab 16 c0       	mov    0xc016ab08,%eax
c0115445:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c011544a:	7e 0c                	jle    c0115458 <get_pid+0x32>
        last_pid = 1;
c011544c:	c7 05 08 ab 16 c0 01 	movl   $0x1,0xc016ab08
c0115453:	00 00 00 
        goto inside;
c0115456:	eb 13                	jmp    c011546b <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c0115458:	8b 15 08 ab 16 c0    	mov    0xc016ab08,%edx
c011545e:	a1 0c ab 16 c0       	mov    0xc016ab0c,%eax
c0115463:	39 c2                	cmp    %eax,%edx
c0115465:	0f 8c ac 00 00 00    	jl     c0115517 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c011546b:	c7 05 0c ab 16 c0 00 	movl   $0x2000,0xc016ab0c
c0115472:	20 00 00 
    repeat:
        le = list;
c0115475:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115478:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c011547b:	eb 7f                	jmp    c01154fc <get_pid+0xd6>
            proc = le2proc(le, list_link);
c011547d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0115480:	83 e8 7c             	sub    $0x7c,%eax
c0115483:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c0115486:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115489:	8b 50 04             	mov    0x4(%eax),%edx
c011548c:	a1 08 ab 16 c0       	mov    0xc016ab08,%eax
c0115491:	39 c2                	cmp    %eax,%edx
c0115493:	75 3e                	jne    c01154d3 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c0115495:	a1 08 ab 16 c0       	mov    0xc016ab08,%eax
c011549a:	83 c0 01             	add    $0x1,%eax
c011549d:	a3 08 ab 16 c0       	mov    %eax,0xc016ab08
c01154a2:	8b 15 08 ab 16 c0    	mov    0xc016ab08,%edx
c01154a8:	a1 0c ab 16 c0       	mov    0xc016ab0c,%eax
c01154ad:	39 c2                	cmp    %eax,%edx
c01154af:	7c 4b                	jl     c01154fc <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c01154b1:	a1 08 ab 16 c0       	mov    0xc016ab08,%eax
c01154b6:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c01154bb:	7e 0a                	jle    c01154c7 <get_pid+0xa1>
                        last_pid = 1;
c01154bd:	c7 05 08 ab 16 c0 01 	movl   $0x1,0xc016ab08
c01154c4:	00 00 00 
                    }
                    next_safe = MAX_PID;
c01154c7:	c7 05 0c ab 16 c0 00 	movl   $0x2000,0xc016ab0c
c01154ce:	20 00 00 
                    goto repeat;
c01154d1:	eb a2                	jmp    c0115475 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c01154d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01154d6:	8b 50 04             	mov    0x4(%eax),%edx
c01154d9:	a1 08 ab 16 c0       	mov    0xc016ab08,%eax
c01154de:	39 c2                	cmp    %eax,%edx
c01154e0:	7e 1a                	jle    c01154fc <get_pid+0xd6>
c01154e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01154e5:	8b 50 04             	mov    0x4(%eax),%edx
c01154e8:	a1 0c ab 16 c0       	mov    0xc016ab0c,%eax
c01154ed:	39 c2                	cmp    %eax,%edx
c01154ef:	7d 0b                	jge    c01154fc <get_pid+0xd6>
                next_safe = proc->pid;
c01154f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01154f4:	8b 40 04             	mov    0x4(%eax),%eax
c01154f7:	a3 0c ab 16 c0       	mov    %eax,0xc016ab0c
c01154fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01154ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0115502:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115505:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c0115508:	89 45 fc             	mov    %eax,-0x4(%ebp)
c011550b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011550e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0115511:	0f 85 66 ff ff ff    	jne    c011547d <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c0115517:	a1 08 ab 16 c0       	mov    0xc016ab08,%eax
}
c011551c:	c9                   	leave  
c011551d:	c3                   	ret    

c011551e <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c011551e:	55                   	push   %ebp
c011551f:	89 e5                	mov    %esp,%ebp
c0115521:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c0115524:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0115529:	39 45 08             	cmp    %eax,0x8(%ebp)
c011552c:	74 63                	je     c0115591 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c011552e:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0115533:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115536:	8b 45 08             	mov    0x8(%ebp),%eax
c0115539:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c011553c:	e8 56 f9 ff ff       	call   c0114e97 <__intr_save>
c0115541:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c0115544:	8b 45 08             	mov    0x8(%ebp),%eax
c0115547:	a3 68 e0 16 c0       	mov    %eax,0xc016e068
            load_esp0(next->kstack + KSTACKSIZE);
c011554c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011554f:	8b 40 0c             	mov    0xc(%eax),%eax
c0115552:	05 00 20 00 00       	add    $0x2000,%eax
c0115557:	89 04 24             	mov    %eax,(%esp)
c011555a:	e8 c7 6e ff ff       	call   c010c426 <load_esp0>
            lcr3(next->cr3);
c011555f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115562:	8b 40 40             	mov    0x40(%eax),%eax
c0115565:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c0115568:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011556b:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c011556e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115571:	8d 50 1c             	lea    0x1c(%eax),%edx
c0115574:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115577:	83 c0 1c             	add    $0x1c,%eax
c011557a:	89 54 24 04          	mov    %edx,0x4(%esp)
c011557e:	89 04 24             	mov    %eax,(%esp)
c0115581:	e8 67 24 00 00       	call   c01179ed <switch_to>
        }
        local_intr_restore(intr_flag);
c0115586:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115589:	89 04 24             	mov    %eax,(%esp)
c011558c:	e8 30 f9 ff ff       	call   c0114ec1 <__intr_restore>
    }
}
c0115591:	c9                   	leave  
c0115592:	c3                   	ret    

c0115593 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c0115593:	55                   	push   %ebp
c0115594:	89 e5                	mov    %esp,%ebp
c0115596:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c0115599:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c011559e:	8b 40 3c             	mov    0x3c(%eax),%eax
c01155a1:	89 04 24             	mov    %eax,(%esp)
c01155a4:	e8 f0 d8 fe ff       	call   c0102e99 <forkrets>
}
c01155a9:	c9                   	leave  
c01155aa:	c3                   	ret    

c01155ab <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c01155ab:	55                   	push   %ebp
c01155ac:	89 e5                	mov    %esp,%ebp
c01155ae:	53                   	push   %ebx
c01155af:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c01155b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01155b5:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c01155bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01155be:	8b 40 04             	mov    0x4(%eax),%eax
c01155c1:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c01155c8:	00 
c01155c9:	89 04 24             	mov    %eax,(%esp)
c01155cc:	e8 d4 af 00 00       	call   c01205a5 <hash32>
c01155d1:	c1 e0 03             	shl    $0x3,%eax
c01155d4:	05 80 e0 16 c0       	add    $0xc016e080,%eax
c01155d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01155dc:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c01155df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01155e2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01155e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01155e8:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01155eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01155ee:	8b 40 04             	mov    0x4(%eax),%eax
c01155f1:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01155f4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01155f7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01155fa:	89 55 e0             	mov    %edx,-0x20(%ebp)
c01155fd:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0115600:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0115603:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0115606:	89 10                	mov    %edx,(%eax)
c0115608:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011560b:	8b 10                	mov    (%eax),%edx
c011560d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0115610:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0115613:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0115616:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0115619:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c011561c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011561f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0115622:	89 10                	mov    %edx,(%eax)
}
c0115624:	83 c4 34             	add    $0x34,%esp
c0115627:	5b                   	pop    %ebx
c0115628:	5d                   	pop    %ebp
c0115629:	c3                   	ret    

c011562a <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c011562a:	55                   	push   %ebp
c011562b:	89 e5                	mov    %esp,%ebp
c011562d:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c0115630:	8b 45 08             	mov    0x8(%ebp),%eax
c0115633:	05 84 00 00 00       	add    $0x84,%eax
c0115638:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c011563b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011563e:	8b 40 04             	mov    0x4(%eax),%eax
c0115641:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0115644:	8b 12                	mov    (%edx),%edx
c0115646:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0115649:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c011564c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c011564f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0115652:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0115655:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115658:	8b 55 f8             	mov    -0x8(%ebp),%edx
c011565b:	89 10                	mov    %edx,(%eax)
}
c011565d:	c9                   	leave  
c011565e:	c3                   	ret    

c011565f <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c011565f:	55                   	push   %ebp
c0115660:	89 e5                	mov    %esp,%ebp
c0115662:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c0115665:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0115669:	7e 61                	jle    c01156cc <find_proc+0x6d>
c011566b:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c0115672:	7f 58                	jg     c01156cc <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c0115674:	8b 45 08             	mov    0x8(%ebp),%eax
c0115677:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c011567e:	00 
c011567f:	89 04 24             	mov    %eax,(%esp)
c0115682:	e8 1e af 00 00       	call   c01205a5 <hash32>
c0115687:	c1 e0 03             	shl    $0x3,%eax
c011568a:	05 80 e0 16 c0       	add    $0xc016e080,%eax
c011568f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115692:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115695:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c0115698:	eb 1b                	jmp    c01156b5 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c011569a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011569d:	2d 84 00 00 00       	sub    $0x84,%eax
c01156a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c01156a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01156a8:	8b 40 04             	mov    0x4(%eax),%eax
c01156ab:	3b 45 08             	cmp    0x8(%ebp),%eax
c01156ae:	75 05                	jne    c01156b5 <find_proc+0x56>
                return proc;
c01156b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01156b3:	eb 1c                	jmp    c01156d1 <find_proc+0x72>
c01156b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01156b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01156bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01156be:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c01156c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01156c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01156c7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01156ca:	75 ce                	jne    c011569a <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c01156cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01156d1:	c9                   	leave  
c01156d2:	c3                   	ret    

c01156d3 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c01156d3:	55                   	push   %ebp
c01156d4:	89 e5                	mov    %esp,%ebp
c01156d6:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c01156d9:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c01156e0:	00 
c01156e1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01156e8:	00 
c01156e9:	8d 45 ac             	lea    -0x54(%ebp),%eax
c01156ec:	89 04 24             	mov    %eax,(%esp)
c01156ef:	e8 0b ba 00 00       	call   c01210ff <memset>
    tf.tf_cs = KERNEL_CS;
c01156f4:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c01156fa:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c0115700:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0115704:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c0115708:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c011570c:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c0115710:	8b 45 08             	mov    0x8(%ebp),%eax
c0115713:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c0115716:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115719:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c011571c:	b8 55 4e 11 c0       	mov    $0xc0114e55,%eax
c0115721:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c0115724:	8b 45 10             	mov    0x10(%ebp),%eax
c0115727:	80 cc 01             	or     $0x1,%ah
c011572a:	89 c2                	mov    %eax,%edx
c011572c:	8d 45 ac             	lea    -0x54(%ebp),%eax
c011572f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115733:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011573a:	00 
c011573b:	89 14 24             	mov    %edx,(%esp)
c011573e:	e8 0e 04 00 00       	call   c0115b51 <do_fork>
}
c0115743:	c9                   	leave  
c0115744:	c3                   	ret    

c0115745 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c0115745:	55                   	push   %ebp
c0115746:	89 e5                	mov    %esp,%ebp
c0115748:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c011574b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0115752:	e8 06 6e ff ff       	call   c010c55d <alloc_pages>
c0115757:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c011575a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011575e:	74 1a                	je     c011577a <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c0115760:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115763:	89 04 24             	mov    %eax,(%esp)
c0115766:	e8 e8 f7 ff ff       	call   c0114f53 <page2kva>
c011576b:	89 c2                	mov    %eax,%edx
c011576d:	8b 45 08             	mov    0x8(%ebp),%eax
c0115770:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c0115773:	b8 00 00 00 00       	mov    $0x0,%eax
c0115778:	eb 05                	jmp    c011577f <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c011577a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c011577f:	c9                   	leave  
c0115780:	c3                   	ret    

c0115781 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c0115781:	55                   	push   %ebp
c0115782:	89 e5                	mov    %esp,%ebp
c0115784:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c0115787:	8b 45 08             	mov    0x8(%ebp),%eax
c011578a:	8b 40 0c             	mov    0xc(%eax),%eax
c011578d:	89 04 24             	mov    %eax,(%esp)
c0115790:	e8 12 f8 ff ff       	call   c0114fa7 <kva2page>
c0115795:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c011579c:	00 
c011579d:	89 04 24             	mov    %eax,(%esp)
c01157a0:	e8 23 6e ff ff       	call   c010c5c8 <free_pages>
}
c01157a5:	c9                   	leave  
c01157a6:	c3                   	ret    

c01157a7 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c01157a7:	55                   	push   %ebp
c01157a8:	89 e5                	mov    %esp,%ebp
c01157aa:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c01157ad:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01157b4:	e8 a4 6d ff ff       	call   c010c55d <alloc_pages>
c01157b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01157bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01157c0:	75 0a                	jne    c01157cc <setup_pgdir+0x25>
        return -E_NO_MEM;
c01157c2:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01157c7:	e9 80 00 00 00       	jmp    c011584c <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c01157cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01157cf:	89 04 24             	mov    %eax,(%esp)
c01157d2:	e8 7c f7 ff ff       	call   c0114f53 <page2kva>
c01157d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c01157da:	a1 00 aa 16 c0       	mov    0xc016aa00,%eax
c01157df:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01157e6:	00 
c01157e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01157eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01157ee:	89 04 24             	mov    %eax,(%esp)
c01157f1:	e8 eb b9 00 00       	call   c01211e1 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c01157f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01157f9:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c01157ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115802:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0115805:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c011580c:	77 23                	ja     c0115831 <setup_pgdir+0x8a>
c011580e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115811:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0115815:	c7 44 24 08 3c 67 12 	movl   $0xc012673c,0x8(%esp)
c011581c:	c0 
c011581d:	c7 44 24 04 39 01 00 	movl   $0x139,0x4(%esp)
c0115824:	00 
c0115825:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c011582c:	e8 e5 b9 fe ff       	call   c0101216 <__panic>
c0115831:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115834:	05 00 00 00 40       	add    $0x40000000,%eax
c0115839:	83 c8 03             	or     $0x3,%eax
c011583c:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c011583e:	8b 45 08             	mov    0x8(%ebp),%eax
c0115841:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0115844:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0115847:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011584c:	c9                   	leave  
c011584d:	c3                   	ret    

c011584e <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c011584e:	55                   	push   %ebp
c011584f:	89 e5                	mov    %esp,%ebp
c0115851:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c0115854:	8b 45 08             	mov    0x8(%ebp),%eax
c0115857:	8b 40 0c             	mov    0xc(%eax),%eax
c011585a:	89 04 24             	mov    %eax,(%esp)
c011585d:	e8 45 f7 ff ff       	call   c0114fa7 <kva2page>
c0115862:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0115869:	00 
c011586a:	89 04 24             	mov    %eax,(%esp)
c011586d:	e8 56 6d ff ff       	call   c010c5c8 <free_pages>
}
c0115872:	c9                   	leave  
c0115873:	c3                   	ret    

c0115874 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c0115874:	55                   	push   %ebp
c0115875:	89 e5                	mov    %esp,%ebp
c0115877:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c011587a:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c011587f:	8b 40 18             	mov    0x18(%eax),%eax
c0115882:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c0115885:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0115889:	75 0a                	jne    c0115895 <copy_mm+0x21>
        return 0;
c011588b:	b8 00 00 00 00       	mov    $0x0,%eax
c0115890:	e9 f9 00 00 00       	jmp    c011598e <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c0115895:	8b 45 08             	mov    0x8(%ebp),%eax
c0115898:	25 00 01 00 00       	and    $0x100,%eax
c011589d:	85 c0                	test   %eax,%eax
c011589f:	74 08                	je     c01158a9 <copy_mm+0x35>
        mm = oldmm;
c01158a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01158a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c01158a7:	eb 78                	jmp    c0115921 <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c01158a9:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c01158b0:	e8 52 b5 ff ff       	call   c0110e07 <mm_create>
c01158b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01158b8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01158bc:	75 05                	jne    c01158c3 <copy_mm+0x4f>
        goto bad_mm;
c01158be:	e9 c8 00 00 00       	jmp    c011598b <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c01158c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01158c6:	89 04 24             	mov    %eax,(%esp)
c01158c9:	e8 d9 fe ff ff       	call   c01157a7 <setup_pgdir>
c01158ce:	85 c0                	test   %eax,%eax
c01158d0:	74 05                	je     c01158d7 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c01158d2:	e9 a9 00 00 00       	jmp    c0115980 <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c01158d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01158da:	89 04 24             	mov    %eax,(%esp)
c01158dd:	e8 43 f7 ff ff       	call   c0115025 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c01158e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01158e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01158e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01158ec:	89 04 24             	mov    %eax,(%esp)
c01158ef:	e8 63 ba ff ff       	call   c0111357 <dup_mmap>
c01158f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c01158f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01158fa:	89 04 24             	mov    %eax,(%esp)
c01158fd:	e8 56 f7 ff ff       	call   c0115058 <unlock_mm>

    if (ret != 0) {
c0115902:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0115906:	74 19                	je     c0115921 <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c0115908:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c0115909:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011590c:	89 04 24             	mov    %eax,(%esp)
c011590f:	e8 44 bb ff ff       	call   c0111458 <exit_mmap>
    put_pgdir(mm);
c0115914:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115917:	89 04 24             	mov    %eax,(%esp)
c011591a:	e8 2f ff ff ff       	call   c011584e <put_pgdir>
c011591f:	eb 5f                	jmp    c0115980 <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c0115921:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115924:	89 04 24             	mov    %eax,(%esp)
c0115927:	e8 c5 f6 ff ff       	call   c0114ff1 <mm_count_inc>
    proc->mm = mm;
c011592c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011592f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0115932:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c0115935:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115938:	8b 40 0c             	mov    0xc(%eax),%eax
c011593b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011593e:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c0115945:	77 23                	ja     c011596a <copy_mm+0xf6>
c0115947:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011594a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011594e:	c7 44 24 08 3c 67 12 	movl   $0xc012673c,0x8(%esp)
c0115955:	c0 
c0115956:	c7 44 24 04 68 01 00 	movl   $0x168,0x4(%esp)
c011595d:	00 
c011595e:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0115965:	e8 ac b8 fe ff       	call   c0101216 <__panic>
c011596a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011596d:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c0115973:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115976:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c0115979:	b8 00 00 00 00       	mov    $0x0,%eax
c011597e:	eb 0e                	jmp    c011598e <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c0115980:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115983:	89 04 24             	mov    %eax,(%esp)
c0115986:	e8 01 b8 ff ff       	call   c011118c <mm_destroy>
bad_mm:
    return ret;
c011598b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c011598e:	c9                   	leave  
c011598f:	c3                   	ret    

c0115990 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c0115990:	55                   	push   %ebp
c0115991:	89 e5                	mov    %esp,%ebp
c0115993:	57                   	push   %edi
c0115994:	56                   	push   %esi
c0115995:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c0115996:	8b 45 08             	mov    0x8(%ebp),%eax
c0115999:	8b 40 0c             	mov    0xc(%eax),%eax
c011599c:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c01159a1:	89 c2                	mov    %eax,%edx
c01159a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01159a6:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c01159a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01159ac:	8b 40 3c             	mov    0x3c(%eax),%eax
c01159af:	8b 55 10             	mov    0x10(%ebp),%edx
c01159b2:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c01159b7:	89 c1                	mov    %eax,%ecx
c01159b9:	83 e1 01             	and    $0x1,%ecx
c01159bc:	85 c9                	test   %ecx,%ecx
c01159be:	74 0e                	je     c01159ce <copy_thread+0x3e>
c01159c0:	0f b6 0a             	movzbl (%edx),%ecx
c01159c3:	88 08                	mov    %cl,(%eax)
c01159c5:	83 c0 01             	add    $0x1,%eax
c01159c8:	83 c2 01             	add    $0x1,%edx
c01159cb:	83 eb 01             	sub    $0x1,%ebx
c01159ce:	89 c1                	mov    %eax,%ecx
c01159d0:	83 e1 02             	and    $0x2,%ecx
c01159d3:	85 c9                	test   %ecx,%ecx
c01159d5:	74 0f                	je     c01159e6 <copy_thread+0x56>
c01159d7:	0f b7 0a             	movzwl (%edx),%ecx
c01159da:	66 89 08             	mov    %cx,(%eax)
c01159dd:	83 c0 02             	add    $0x2,%eax
c01159e0:	83 c2 02             	add    $0x2,%edx
c01159e3:	83 eb 02             	sub    $0x2,%ebx
c01159e6:	89 d9                	mov    %ebx,%ecx
c01159e8:	c1 e9 02             	shr    $0x2,%ecx
c01159eb:	89 c7                	mov    %eax,%edi
c01159ed:	89 d6                	mov    %edx,%esi
c01159ef:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c01159f1:	89 f2                	mov    %esi,%edx
c01159f3:	89 f8                	mov    %edi,%eax
c01159f5:	b9 00 00 00 00       	mov    $0x0,%ecx
c01159fa:	89 de                	mov    %ebx,%esi
c01159fc:	83 e6 02             	and    $0x2,%esi
c01159ff:	85 f6                	test   %esi,%esi
c0115a01:	74 0b                	je     c0115a0e <copy_thread+0x7e>
c0115a03:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c0115a07:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c0115a0b:	83 c1 02             	add    $0x2,%ecx
c0115a0e:	83 e3 01             	and    $0x1,%ebx
c0115a11:	85 db                	test   %ebx,%ebx
c0115a13:	74 07                	je     c0115a1c <copy_thread+0x8c>
c0115a15:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c0115a19:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c0115a1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0115a1f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0115a22:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c0115a29:	8b 45 08             	mov    0x8(%ebp),%eax
c0115a2c:	8b 40 3c             	mov    0x3c(%eax),%eax
c0115a2f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0115a32:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c0115a35:	8b 45 08             	mov    0x8(%ebp),%eax
c0115a38:	8b 40 3c             	mov    0x3c(%eax),%eax
c0115a3b:	8b 55 08             	mov    0x8(%ebp),%edx
c0115a3e:	8b 52 3c             	mov    0x3c(%edx),%edx
c0115a41:	8b 52 40             	mov    0x40(%edx),%edx
c0115a44:	80 ce 02             	or     $0x2,%dh
c0115a47:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c0115a4a:	ba 93 55 11 c0       	mov    $0xc0115593,%edx
c0115a4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0115a52:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c0115a55:	8b 45 08             	mov    0x8(%ebp),%eax
c0115a58:	8b 40 3c             	mov    0x3c(%eax),%eax
c0115a5b:	89 c2                	mov    %eax,%edx
c0115a5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0115a60:	89 50 20             	mov    %edx,0x20(%eax)
}
c0115a63:	5b                   	pop    %ebx
c0115a64:	5e                   	pop    %esi
c0115a65:	5f                   	pop    %edi
c0115a66:	5d                   	pop    %ebp
c0115a67:	c3                   	ret    

c0115a68 <copy_fs>:

//copy_fs&put_fs function used by do_fork in LAB8
static int
copy_fs(uint32_t clone_flags, struct proc_struct *proc) {
c0115a68:	55                   	push   %ebp
c0115a69:	89 e5                	mov    %esp,%ebp
c0115a6b:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp, *old_filesp = current->filesp;
c0115a6e:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0115a73:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c0115a79:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(old_filesp != NULL);
c0115a7c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0115a80:	75 24                	jne    c0115aa6 <copy_fs+0x3e>
c0115a82:	c7 44 24 0c 74 67 12 	movl   $0xc0126774,0xc(%esp)
c0115a89:	c0 
c0115a8a:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c0115a91:	c0 
c0115a92:	c7 44 24 04 85 01 00 	movl   $0x185,0x4(%esp)
c0115a99:	00 
c0115a9a:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0115aa1:	e8 70 b7 fe ff       	call   c0101216 <__panic>

    if (clone_flags & CLONE_FS) {
c0115aa6:	8b 45 08             	mov    0x8(%ebp),%eax
c0115aa9:	25 00 08 00 00       	and    $0x800,%eax
c0115aae:	85 c0                	test   %eax,%eax
c0115ab0:	74 08                	je     c0115aba <copy_fs+0x52>
        filesp = old_filesp;
c0115ab2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115ab5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_files_struct;
c0115ab8:	eb 40                	jmp    c0115afa <copy_fs+0x92>
    }

    int ret = -E_NO_MEM;
c0115aba:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((filesp = files_create()) == NULL) {
c0115ac1:	e8 80 e6 ff ff       	call   c0114146 <files_create>
c0115ac6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115ac9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0115acd:	75 02                	jne    c0115ad1 <copy_fs+0x69>
        goto bad_files_struct;
c0115acf:	eb 47                	jmp    c0115b18 <copy_fs+0xb0>
    }

    if ((ret = dup_files(filesp, old_filesp)) != 0) {
c0115ad1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115ad4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115adb:	89 04 24             	mov    %eax,(%esp)
c0115ade:	e8 0c e8 ff ff       	call   c01142ef <dup_files>
c0115ae3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115ae6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0115aea:	74 0e                	je     c0115afa <copy_fs+0x92>
        goto bad_dup_cleanup_fs;
c0115aec:	90                   	nop
    files_count_inc(filesp);
    proc->filesp = filesp;
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
c0115aed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115af0:	89 04 24             	mov    %eax,(%esp)
c0115af3:	e8 b1 e6 ff ff       	call   c01141a9 <files_destroy>
c0115af8:	eb 1e                	jmp    c0115b18 <copy_fs+0xb0>
    if ((ret = dup_files(filesp, old_filesp)) != 0) {
        goto bad_dup_cleanup_fs;
    }

good_files_struct:
    files_count_inc(filesp);
c0115afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115afd:	89 04 24             	mov    %eax,(%esp)
c0115b00:	e8 79 f5 ff ff       	call   c011507e <files_count_inc>
    proc->filesp = filesp;
c0115b05:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115b08:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0115b0b:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
    return 0;
c0115b11:	b8 00 00 00 00       	mov    $0x0,%eax
c0115b16:	eb 03                	jmp    c0115b1b <copy_fs+0xb3>

bad_dup_cleanup_fs:
    files_destroy(filesp);
bad_files_struct:
    return ret;
c0115b18:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0115b1b:	c9                   	leave  
c0115b1c:	c3                   	ret    

c0115b1d <put_fs>:

static void
put_fs(struct proc_struct *proc) {
c0115b1d:	55                   	push   %ebp
c0115b1e:	89 e5                	mov    %esp,%ebp
c0115b20:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = proc->filesp;
c0115b23:	8b 45 08             	mov    0x8(%ebp),%eax
c0115b26:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c0115b2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (filesp != NULL) {
c0115b2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0115b33:	74 1a                	je     c0115b4f <put_fs+0x32>
        if (files_count_dec(filesp) == 0) {
c0115b35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115b38:	89 04 24             	mov    %eax,(%esp)
c0115b3b:	e8 58 f5 ff ff       	call   c0115098 <files_count_dec>
c0115b40:	85 c0                	test   %eax,%eax
c0115b42:	75 0b                	jne    c0115b4f <put_fs+0x32>
            files_destroy(filesp);
c0115b44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115b47:	89 04 24             	mov    %eax,(%esp)
c0115b4a:	e8 5a e6 ff ff       	call   c01141a9 <files_destroy>
        }
    }
}
c0115b4f:	c9                   	leave  
c0115b50:	c3                   	ret    

c0115b51 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c0115b51:	55                   	push   %ebp
c0115b52:	89 e5                	mov    %esp,%ebp
c0115b54:	56                   	push   %esi
c0115b55:	53                   	push   %ebx
c0115b56:	83 ec 40             	sub    $0x40,%esp
    int ret = -E_NO_FREE_PROC;
c0115b59:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c0115b60:	a1 80 00 17 c0       	mov    0xc0170080,%eax
c0115b65:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0115b6a:	7e 05                	jle    c0115b71 <do_fork+0x20>
        goto fork_out;
c0115b6c:	e9 7c 01 00 00       	jmp    c0115ced <do_fork+0x19c>
    }
    ret = -E_NO_MEM;
c0115b71:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    if ((proc = alloc_proc()) == NULL) {
c0115b78:	e8 35 f5 ff ff       	call   c01150b2 <alloc_proc>
c0115b7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0115b80:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0115b84:	75 05                	jne    c0115b8b <do_fork+0x3a>
        goto fork_out;
c0115b86:	e9 62 01 00 00       	jmp    c0115ced <do_fork+0x19c>
    }

    proc->parent = current;
c0115b8b:	8b 15 68 e0 16 c0    	mov    0xc016e068,%edx
c0115b91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115b94:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c0115b97:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0115b9c:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0115ba2:	85 c0                	test   %eax,%eax
c0115ba4:	74 24                	je     c0115bca <do_fork+0x79>
c0115ba6:	c7 44 24 0c 9c 67 12 	movl   $0xc012679c,0xc(%esp)
c0115bad:	c0 
c0115bae:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c0115bb5:	c0 
c0115bb6:	c7 44 24 04 de 01 00 	movl   $0x1de,0x4(%esp)
c0115bbd:	00 
c0115bbe:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0115bc5:	e8 4c b6 fe ff       	call   c0101216 <__panic>

    if (setup_kstack(proc) != 0) {
c0115bca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115bcd:	89 04 24             	mov    %eax,(%esp)
c0115bd0:	e8 70 fb ff ff       	call   c0115745 <setup_kstack>
c0115bd5:	85 c0                	test   %eax,%eax
c0115bd7:	74 05                	je     c0115bde <do_fork+0x8d>
        goto bad_fork_cleanup_proc;
c0115bd9:	e9 1f 01 00 00       	jmp    c0115cfd <do_fork+0x1ac>
    }
    if (copy_fs(clone_flags, proc) != 0) { //for LAB8
c0115bde:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115be1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115be5:	8b 45 08             	mov    0x8(%ebp),%eax
c0115be8:	89 04 24             	mov    %eax,(%esp)
c0115beb:	e8 78 fe ff ff       	call   c0115a68 <copy_fs>
c0115bf0:	85 c0                	test   %eax,%eax
c0115bf2:	74 05                	je     c0115bf9 <do_fork+0xa8>
        goto bad_fork_cleanup_kstack;
c0115bf4:	e9 f9 00 00 00       	jmp    c0115cf2 <do_fork+0x1a1>
    }
    if (copy_mm(clone_flags, proc) != 0) {
c0115bf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115bfc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115c00:	8b 45 08             	mov    0x8(%ebp),%eax
c0115c03:	89 04 24             	mov    %eax,(%esp)
c0115c06:	e8 69 fc ff ff       	call   c0115874 <copy_mm>
c0115c0b:	85 c0                	test   %eax,%eax
c0115c0d:	74 11                	je     c0115c20 <do_fork+0xcf>
        goto bad_fork_cleanup_fs;
c0115c0f:	90                   	nop
    ret = proc->pid;
fork_out:
    return ret;

bad_fork_cleanup_fs:  //for LAB8
    put_fs(proc);
c0115c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115c13:	89 04 24             	mov    %eax,(%esp)
c0115c16:	e8 02 ff ff ff       	call   c0115b1d <put_fs>
c0115c1b:	e9 d2 00 00 00       	jmp    c0115cf2 <do_fork+0x1a1>
        goto bad_fork_cleanup_kstack;
    }
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_fs;
    }
    copy_thread(proc, stack, tf);
c0115c20:	8b 45 10             	mov    0x10(%ebp),%eax
c0115c23:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115c27:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115c2a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115c2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115c31:	89 04 24             	mov    %eax,(%esp)
c0115c34:	e8 57 fd ff ff       	call   c0115990 <copy_thread>

    bool intr_flag;
    local_intr_save(intr_flag);
c0115c39:	e8 59 f2 ff ff       	call   c0114e97 <__intr_save>
c0115c3e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c0115c41:	e8 e0 f7 ff ff       	call   c0115426 <get_pid>
c0115c46:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0115c49:	89 42 04             	mov    %eax,0x4(%edx)
        hash_proc(proc);
c0115c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115c4f:	89 04 24             	mov    %eax,(%esp)
c0115c52:	e8 54 f9 ff ff       	call   c01155ab <hash_proc>
        set_links(proc);
c0115c57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115c5a:	89 04 24             	mov    %eax,(%esp)
c0115c5d:	e8 69 f6 ff ff       	call   c01152cb <set_links>

    }
    local_intr_restore(intr_flag);
c0115c62:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115c65:	89 04 24             	mov    %eax,(%esp)
c0115c68:	e8 54 f2 ff ff       	call   c0114ec1 <__intr_restore>

    char* std[4]={"PROC_UNINIT","PROC_SLEEPING","PROC_RUNNABLE","PROC_ZOMBIE"};
c0115c6d:	c7 45 dc b5 67 12 c0 	movl   $0xc01267b5,-0x24(%ebp)
c0115c74:	c7 45 e0 c1 67 12 c0 	movl   $0xc01267c1,-0x20(%ebp)
c0115c7b:	c7 45 e4 cf 67 12 c0 	movl   $0xc01267cf,-0x1c(%ebp)
c0115c82:	c7 45 e8 dd 67 12 c0 	movl   $0xc01267dd,-0x18(%ebp)
    cprintf("create proc ... \n");
c0115c89:	c7 04 24 e9 67 12 c0 	movl   $0xc01267e9,(%esp)
c0115c90:	e8 5e a7 fe ff       	call   c01003f3 <cprintf>

    cprintf("pid:%d    state:%s    name:%s    time_slice:%d    runtime:%d\n",
c0115c95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115c98:	8b 58 08             	mov    0x8(%eax),%ebx
c0115c9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115c9e:	8b 88 ac 00 00 00    	mov    0xac(%eax),%ecx
        proc->pid, std[proc->state],proc->name,proc->time_slice,proc->runs);
c0115ca4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115ca7:	8d 70 48             	lea    0x48(%eax),%esi
c0115caa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115cad:	8b 00                	mov    (%eax),%eax
    local_intr_restore(intr_flag);

    char* std[4]={"PROC_UNINIT","PROC_SLEEPING","PROC_RUNNABLE","PROC_ZOMBIE"};
    cprintf("create proc ... \n");

    cprintf("pid:%d    state:%s    name:%s    time_slice:%d    runtime:%d\n",
c0115caf:	8b 54 85 dc          	mov    -0x24(%ebp,%eax,4),%edx
c0115cb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115cb6:	8b 40 04             	mov    0x4(%eax),%eax
c0115cb9:	89 5c 24 14          	mov    %ebx,0x14(%esp)
c0115cbd:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0115cc1:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0115cc5:	89 54 24 08          	mov    %edx,0x8(%esp)
c0115cc9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115ccd:	c7 04 24 fc 67 12 c0 	movl   $0xc01267fc,(%esp)
c0115cd4:	e8 1a a7 fe ff       	call   c01003f3 <cprintf>
        proc->pid, std[proc->state],proc->name,proc->time_slice,proc->runs);

    wakeup_proc(proc);
c0115cd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115cdc:	89 04 24             	mov    %eax,(%esp)
c0115cdf:	e8 26 26 00 00       	call   c011830a <wakeup_proc>

    ret = proc->pid;
c0115ce4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115ce7:	8b 40 04             	mov    0x4(%eax),%eax
c0115cea:	89 45 f4             	mov    %eax,-0xc(%ebp)
fork_out:
    return ret;
c0115ced:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115cf0:	eb 18                	jmp    c0115d0a <do_fork+0x1b9>

bad_fork_cleanup_fs:  //for LAB8
    put_fs(proc);
bad_fork_cleanup_kstack:
    put_kstack(proc);
c0115cf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115cf5:	89 04 24             	mov    %eax,(%esp)
c0115cf8:	e8 84 fa ff ff       	call   c0115781 <put_kstack>
bad_fork_cleanup_proc:
    kfree(proc);
c0115cfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115d00:	89 04 24             	mov    %eax,(%esp)
c0115d03:	e8 c3 4d ff ff       	call   c010aacb <kfree>
    goto fork_out;
c0115d08:	eb e3                	jmp    c0115ced <do_fork+0x19c>
}
c0115d0a:	83 c4 40             	add    $0x40,%esp
c0115d0d:	5b                   	pop    %ebx
c0115d0e:	5e                   	pop    %esi
c0115d0f:	5d                   	pop    %ebp
c0115d10:	c3                   	ret    

c0115d11 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c0115d11:	55                   	push   %ebp
c0115d12:	89 e5                	mov    %esp,%ebp
c0115d14:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c0115d17:	8b 15 68 e0 16 c0    	mov    0xc016e068,%edx
c0115d1d:	a1 60 e0 16 c0       	mov    0xc016e060,%eax
c0115d22:	39 c2                	cmp    %eax,%edx
c0115d24:	75 1c                	jne    c0115d42 <do_exit+0x31>
        panic("idleproc exit.\n");
c0115d26:	c7 44 24 08 3a 68 12 	movl   $0xc012683a,0x8(%esp)
c0115d2d:	c0 
c0115d2e:	c7 44 24 04 11 02 00 	movl   $0x211,0x4(%esp)
c0115d35:	00 
c0115d36:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0115d3d:	e8 d4 b4 fe ff       	call   c0101216 <__panic>
    }
    if (current == initproc) {
c0115d42:	8b 15 68 e0 16 c0    	mov    0xc016e068,%edx
c0115d48:	a1 64 e0 16 c0       	mov    0xc016e064,%eax
c0115d4d:	39 c2                	cmp    %eax,%edx
c0115d4f:	75 1c                	jne    c0115d6d <do_exit+0x5c>
        panic("initproc exit.\n");
c0115d51:	c7 44 24 08 4a 68 12 	movl   $0xc012684a,0x8(%esp)
c0115d58:	c0 
c0115d59:	c7 44 24 04 14 02 00 	movl   $0x214,0x4(%esp)
c0115d60:	00 
c0115d61:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0115d68:	e8 a9 b4 fe ff       	call   c0101216 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c0115d6d:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0115d72:	8b 40 18             	mov    0x18(%eax),%eax
c0115d75:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c0115d78:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0115d7c:	74 4a                	je     c0115dc8 <do_exit+0xb7>
        lcr3(boot_cr3);
c0115d7e:	a1 68 11 17 c0       	mov    0xc0171168,%eax
c0115d83:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0115d86:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115d89:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c0115d8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115d8f:	89 04 24             	mov    %eax,(%esp)
c0115d92:	e8 74 f2 ff ff       	call   c011500b <mm_count_dec>
c0115d97:	85 c0                	test   %eax,%eax
c0115d99:	75 21                	jne    c0115dbc <do_exit+0xab>
            exit_mmap(mm);
c0115d9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115d9e:	89 04 24             	mov    %eax,(%esp)
c0115da1:	e8 b2 b6 ff ff       	call   c0111458 <exit_mmap>
            put_pgdir(mm);
c0115da6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115da9:	89 04 24             	mov    %eax,(%esp)
c0115dac:	e8 9d fa ff ff       	call   c011584e <put_pgdir>
            mm_destroy(mm);
c0115db1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115db4:	89 04 24             	mov    %eax,(%esp)
c0115db7:	e8 d0 b3 ff ff       	call   c011118c <mm_destroy>
        }
        current->mm = NULL;
c0115dbc:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0115dc1:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    put_fs(current); //for LAB8
c0115dc8:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0115dcd:	89 04 24             	mov    %eax,(%esp)
c0115dd0:	e8 48 fd ff ff       	call   c0115b1d <put_fs>
    current->state = PROC_ZOMBIE;
c0115dd5:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0115dda:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c0115de0:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0115de5:	8b 55 08             	mov    0x8(%ebp),%edx
c0115de8:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c0115dee:	e8 a4 f0 ff ff       	call   c0114e97 <__intr_save>
c0115df3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c0115df6:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0115dfb:	8b 40 14             	mov    0x14(%eax),%eax
c0115dfe:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c0115e01:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115e04:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0115e0a:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c0115e0f:	75 10                	jne    c0115e21 <do_exit+0x110>
            wakeup_proc(proc);
c0115e11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115e14:	89 04 24             	mov    %eax,(%esp)
c0115e17:	e8 ee 24 00 00       	call   c011830a <wakeup_proc>
        }
        while (current->cptr != NULL) {
c0115e1c:	e9 ac 00 00 00       	jmp    c0115ecd <do_exit+0x1bc>
c0115e21:	e9 a7 00 00 00       	jmp    c0115ecd <do_exit+0x1bc>
            proc = current->cptr;
c0115e26:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0115e2b:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c0115e31:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c0115e34:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0115e39:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0115e3c:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c0115e42:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c0115e48:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115e4b:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c0115e52:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c0115e55:	a1 64 e0 16 c0       	mov    0xc016e064,%eax
c0115e5a:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c0115e60:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115e63:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c0115e69:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115e6c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c0115e72:	85 c0                	test   %eax,%eax
c0115e74:	74 14                	je     c0115e8a <do_exit+0x179>
                initproc->cptr->yptr = proc;
c0115e76:	a1 64 e0 16 c0       	mov    0xc016e064,%eax
c0115e7b:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c0115e81:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0115e84:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c0115e8a:	8b 15 64 e0 16 c0    	mov    0xc016e064,%edx
c0115e90:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115e93:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c0115e96:	a1 64 e0 16 c0       	mov    0xc016e064,%eax
c0115e9b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0115e9e:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c0115ea4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115ea7:	8b 00                	mov    (%eax),%eax
c0115ea9:	83 f8 03             	cmp    $0x3,%eax
c0115eac:	75 1f                	jne    c0115ecd <do_exit+0x1bc>
                if (initproc->wait_state == WT_CHILD) {
c0115eae:	a1 64 e0 16 c0       	mov    0xc016e064,%eax
c0115eb3:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0115eb9:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c0115ebe:	75 0d                	jne    c0115ecd <do_exit+0x1bc>
                    wakeup_proc(initproc);
c0115ec0:	a1 64 e0 16 c0       	mov    0xc016e064,%eax
c0115ec5:	89 04 24             	mov    %eax,(%esp)
c0115ec8:	e8 3d 24 00 00       	call   c011830a <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c0115ecd:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0115ed2:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c0115ed8:	85 c0                	test   %eax,%eax
c0115eda:	0f 85 46 ff ff ff    	jne    c0115e26 <do_exit+0x115>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c0115ee0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115ee3:	89 04 24             	mov    %eax,(%esp)
c0115ee6:	e8 d6 ef ff ff       	call   c0114ec1 <__intr_restore>
    
    schedule();
c0115eeb:	e8 b6 24 00 00       	call   c01183a6 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c0115ef0:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0115ef5:	8b 40 04             	mov    0x4(%eax),%eax
c0115ef8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0115efc:	c7 44 24 08 5c 68 12 	movl   $0xc012685c,0x8(%esp)
c0115f03:	c0 
c0115f04:	c7 44 24 04 41 02 00 	movl   $0x241,0x4(%esp)
c0115f0b:	00 
c0115f0c:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0115f13:	e8 fe b2 fe ff       	call   c0101216 <__panic>

c0115f18 <load_icode_read>:
}

//load_icode_read is used by load_icode in LAB8
static int
load_icode_read(int fd, void *buf, size_t len, off_t offset) {
c0115f18:	55                   	push   %ebp
c0115f19:	89 e5                	mov    %esp,%ebp
c0115f1b:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) != 0) {
c0115f1e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0115f25:	00 
c0115f26:	8b 45 14             	mov    0x14(%ebp),%eax
c0115f29:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115f2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0115f30:	89 04 24             	mov    %eax,(%esp)
c0115f33:	e8 e4 ea ff ff       	call   c0114a1c <sysfile_seek>
c0115f38:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115f3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0115f3f:	74 05                	je     c0115f46 <load_icode_read+0x2e>
        return ret;
c0115f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115f44:	eb 38                	jmp    c0115f7e <load_icode_read+0x66>
    }
    if ((ret = sysfile_read(fd, buf, len)) != len) {
c0115f46:	8b 45 10             	mov    0x10(%ebp),%eax
c0115f49:	89 44 24 08          	mov    %eax,0x8(%esp)
c0115f4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115f50:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115f54:	8b 45 08             	mov    0x8(%ebp),%eax
c0115f57:	89 04 24             	mov    %eax,(%esp)
c0115f5a:	e8 cb e7 ff ff       	call   c011472a <sysfile_read>
c0115f5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115f62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115f65:	3b 45 10             	cmp    0x10(%ebp),%eax
c0115f68:	74 0f                	je     c0115f79 <load_icode_read+0x61>
        return (ret < 0) ? ret : -1;
c0115f6a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0115f6f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0115f73:	0f 48 45 f4          	cmovs  -0xc(%ebp),%eax
c0115f77:	eb 05                	jmp    c0115f7e <load_icode_read+0x66>
    }
    return 0;
c0115f79:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0115f7e:	c9                   	leave  
c0115f7f:	c3                   	ret    

c0115f80 <load_icode>:

// load_icode -  called by sys_exec-->do_execve
  
static int
load_icode(int fd, int argc, char **kargv) {
c0115f80:	55                   	push   %ebp
c0115f81:	89 e5                	mov    %esp,%ebp
c0115f83:	53                   	push   %ebx
c0115f84:	81 ec e4 00 00 00    	sub    $0xe4,%esp
     * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO)
     * (6) setup uargc and uargv in user stacks
     * (7) setup trapframe for user environment
     * (8) if up steps failed, you should cleanup the env.
     */
    assert(argc >= 0 && argc <= EXEC_MAX_ARG_NUM);
c0115f8a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0115f8e:	78 06                	js     c0115f96 <load_icode+0x16>
c0115f90:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c0115f94:	7e 24                	jle    c0115fba <load_icode+0x3a>
c0115f96:	c7 44 24 0c 7c 68 12 	movl   $0xc012687c,0xc(%esp)
c0115f9d:	c0 
c0115f9e:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c0115fa5:	c0 
c0115fa6:	c7 44 24 04 6d 02 00 	movl   $0x26d,0x4(%esp)
c0115fad:	00 
c0115fae:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0115fb5:	e8 5c b2 fe ff       	call   c0101216 <__panic>

    if (current->mm != NULL) {
c0115fba:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0115fbf:	8b 40 18             	mov    0x18(%eax),%eax
c0115fc2:	85 c0                	test   %eax,%eax
c0115fc4:	74 1c                	je     c0115fe2 <load_icode+0x62>
        panic("load_icode: current->mm must be empty.\n");
c0115fc6:	c7 44 24 08 a4 68 12 	movl   $0xc01268a4,0x8(%esp)
c0115fcd:	c0 
c0115fce:	c7 44 24 04 70 02 00 	movl   $0x270,0x4(%esp)
c0115fd5:	00 
c0115fd6:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0115fdd:	e8 34 b2 fe ff       	call   c0101216 <__panic>
    }

    int ret = -E_NO_MEM;
c0115fe2:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    if ((mm = mm_create()) == NULL) {
c0115fe9:	e8 19 ae ff ff       	call   c0110e07 <mm_create>
c0115fee:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0115ff1:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0115ff5:	75 06                	jne    c0115ffd <load_icode+0x7d>
        goto bad_mm;
c0115ff7:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c0115ff8:	e9 85 07 00 00       	jmp    c0116782 <load_icode+0x802>
    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c0115ffd:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0116000:	89 04 24             	mov    %eax,(%esp)
c0116003:	e8 9f f7 ff ff       	call   c01157a7 <setup_pgdir>
c0116008:	85 c0                	test   %eax,%eax
c011600a:	74 05                	je     c0116011 <load_icode+0x91>
        goto bad_pgdir_cleanup_mm;
c011600c:	e9 8c 07 00 00       	jmp    c011679d <load_icode+0x81d>
    }

    struct Page *page;

    struct elfhdr __elf, *elf = &__elf;
c0116011:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c0116017:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) {
c011601a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0116021:	00 
c0116022:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
c0116029:	00 
c011602a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011602d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0116031:	8b 45 08             	mov    0x8(%ebp),%eax
c0116034:	89 04 24             	mov    %eax,(%esp)
c0116037:	e8 dc fe ff ff       	call   c0115f18 <load_icode_read>
c011603c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011603f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0116043:	74 05                	je     c011604a <load_icode+0xca>
        goto bad_elf_cleanup_pgdir;
c0116045:	e9 48 07 00 00       	jmp    c0116792 <load_icode+0x812>
    }

    if (elf->e_magic != ELF_MAGIC) {
c011604a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011604d:	8b 00                	mov    (%eax),%eax
c011604f:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c0116054:	74 0c                	je     c0116062 <load_icode+0xe2>
        ret = -E_INVAL_ELF;
c0116056:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c011605d:	e9 30 07 00 00       	jmp    c0116792 <load_icode+0x812>
    }

    struct proghdr __ph, *ph = &__ph;
c0116062:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
c0116068:	89 45 c0             	mov    %eax,-0x40(%ebp)
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c011606b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c0116072:	e9 76 03 00 00       	jmp    c01163ed <load_icode+0x46d>
        off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum;
c0116077:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011607a:	8b 40 1c             	mov    0x1c(%eax),%eax
c011607d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0116080:	c1 e2 05             	shl    $0x5,%edx
c0116083:	01 d0                	add    %edx,%eax
c0116085:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
c0116088:	8b 45 bc             	mov    -0x44(%ebp),%eax
c011608b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011608f:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c0116096:	00 
c0116097:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011609a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011609e:	8b 45 08             	mov    0x8(%ebp),%eax
c01160a1:	89 04 24             	mov    %eax,(%esp)
c01160a4:	e8 6f fe ff ff       	call   c0115f18 <load_icode_read>
c01160a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01160ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01160b0:	74 05                	je     c01160b7 <load_icode+0x137>
            goto bad_cleanup_mmap;
c01160b2:	e9 d0 06 00 00       	jmp    c0116787 <load_icode+0x807>
        }
        if (ph->p_type != ELF_PT_LOAD) {
c01160b7:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01160ba:	8b 00                	mov    (%eax),%eax
c01160bc:	83 f8 01             	cmp    $0x1,%eax
c01160bf:	74 05                	je     c01160c6 <load_icode+0x146>
            continue ;
c01160c1:	e9 23 03 00 00       	jmp    c01163e9 <load_icode+0x469>
        }
        if (ph->p_filesz > ph->p_memsz) {
c01160c6:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01160c9:	8b 50 10             	mov    0x10(%eax),%edx
c01160cc:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01160cf:	8b 40 14             	mov    0x14(%eax),%eax
c01160d2:	39 c2                	cmp    %eax,%edx
c01160d4:	76 0c                	jbe    c01160e2 <load_icode+0x162>
            ret = -E_INVAL_ELF;
c01160d6:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c01160dd:	e9 a5 06 00 00       	jmp    c0116787 <load_icode+0x807>
        }
        if (ph->p_filesz == 0) {
c01160e2:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01160e5:	8b 40 10             	mov    0x10(%eax),%eax
c01160e8:	85 c0                	test   %eax,%eax
c01160ea:	75 05                	jne    c01160f1 <load_icode+0x171>
            continue ;
c01160ec:	e9 f8 02 00 00       	jmp    c01163e9 <load_icode+0x469>
        }
        vm_flags = 0, perm = PTE_U;
c01160f1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01160f8:	c7 45 e8 04 00 00 00 	movl   $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c01160ff:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0116102:	8b 40 18             	mov    0x18(%eax),%eax
c0116105:	83 e0 01             	and    $0x1,%eax
c0116108:	85 c0                	test   %eax,%eax
c011610a:	74 04                	je     c0116110 <load_icode+0x190>
c011610c:	83 4d ec 04          	orl    $0x4,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c0116110:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0116113:	8b 40 18             	mov    0x18(%eax),%eax
c0116116:	83 e0 02             	and    $0x2,%eax
c0116119:	85 c0                	test   %eax,%eax
c011611b:	74 04                	je     c0116121 <load_icode+0x1a1>
c011611d:	83 4d ec 02          	orl    $0x2,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c0116121:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0116124:	8b 40 18             	mov    0x18(%eax),%eax
c0116127:	83 e0 04             	and    $0x4,%eax
c011612a:	85 c0                	test   %eax,%eax
c011612c:	74 04                	je     c0116132 <load_icode+0x1b2>
c011612e:	83 4d ec 01          	orl    $0x1,-0x14(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c0116132:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0116135:	83 e0 02             	and    $0x2,%eax
c0116138:	85 c0                	test   %eax,%eax
c011613a:	74 04                	je     c0116140 <load_icode+0x1c0>
c011613c:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c0116140:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0116143:	8b 50 14             	mov    0x14(%eax),%edx
c0116146:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0116149:	8b 40 08             	mov    0x8(%eax),%eax
c011614c:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0116153:	00 
c0116154:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0116157:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c011615b:	89 54 24 08          	mov    %edx,0x8(%esp)
c011615f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0116163:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0116166:	89 04 24             	mov    %eax,(%esp)
c0116169:	e8 c0 b0 ff ff       	call   c011122e <mm_map>
c011616e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0116171:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0116175:	74 05                	je     c011617c <load_icode+0x1fc>
            goto bad_cleanup_mmap;
c0116177:	e9 0b 06 00 00       	jmp    c0116787 <load_icode+0x807>
        }
        off_t offset = ph->p_offset;
c011617c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011617f:	8b 40 04             	mov    0x4(%eax),%eax
c0116182:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c0116185:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0116188:	8b 40 08             	mov    0x8(%eax),%eax
c011618b:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011618e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0116191:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0116194:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0116197:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c011619c:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c011619f:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

        end = ph->p_va + ph->p_filesz;
c01161a6:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01161a9:	8b 50 08             	mov    0x8(%eax),%edx
c01161ac:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01161af:	8b 40 10             	mov    0x10(%eax),%eax
c01161b2:	01 d0                	add    %edx,%eax
c01161b4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        while (start < end) {
c01161b7:	e9 b1 00 00 00       	jmp    c011626d <load_icode+0x2ed>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c01161bc:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01161bf:	8b 40 0c             	mov    0xc(%eax),%eax
c01161c2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01161c5:	89 54 24 08          	mov    %edx,0x8(%esp)
c01161c9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01161cc:	89 54 24 04          	mov    %edx,0x4(%esp)
c01161d0:	89 04 24             	mov    %eax,(%esp)
c01161d3:	e8 32 72 ff ff       	call   c010d40a <pgdir_alloc_page>
c01161d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01161db:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01161df:	75 0c                	jne    c01161ed <load_icode+0x26d>
                ret = -E_NO_MEM;
c01161e1:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c01161e8:	e9 9a 05 00 00       	jmp    c0116787 <load_icode+0x807>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c01161ed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01161f0:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01161f3:	29 c2                	sub    %eax,%edx
c01161f5:	89 d0                	mov    %edx,%eax
c01161f7:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01161fa:	b8 00 10 00 00       	mov    $0x1000,%eax
c01161ff:	2b 45 b0             	sub    -0x50(%ebp),%eax
c0116202:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0116205:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c011620c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c011620f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0116212:	73 0d                	jae    c0116221 <load_icode+0x2a1>
                size -= la - end;
c0116214:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0116217:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c011621a:	29 c2                	sub    %eax,%edx
c011621c:	89 d0                	mov    %edx,%eax
c011621e:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
c0116221:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0116224:	89 04 24             	mov    %eax,(%esp)
c0116227:	e8 27 ed ff ff       	call   c0114f53 <page2kva>
c011622c:	8b 55 b0             	mov    -0x50(%ebp),%edx
c011622f:	01 c2                	add    %eax,%edx
c0116231:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0116234:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0116238:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011623b:	89 44 24 08          	mov    %eax,0x8(%esp)
c011623f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0116243:	8b 45 08             	mov    0x8(%ebp),%eax
c0116246:	89 04 24             	mov    %eax,(%esp)
c0116249:	e8 ca fc ff ff       	call   c0115f18 <load_icode_read>
c011624e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0116251:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0116255:	74 05                	je     c011625c <load_icode+0x2dc>
                goto bad_cleanup_mmap;
c0116257:	e9 2b 05 00 00       	jmp    c0116787 <load_icode+0x807>
            }
            start += size, offset += size;
c011625c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011625f:	01 45 d8             	add    %eax,-0x28(%ebp)
c0116262:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0116265:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0116268:	01 d0                	add    %edx,%eax
c011626a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);

        ret = -E_NO_MEM;

        end = ph->p_va + ph->p_filesz;
        while (start < end) {
c011626d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0116270:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c0116273:	0f 82 43 ff ff ff    	jb     c01161bc <load_icode+0x23c>
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
                goto bad_cleanup_mmap;
            }
            start += size, offset += size;
        }
        end = ph->p_va + ph->p_memsz;
c0116279:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011627c:	8b 50 08             	mov    0x8(%eax),%edx
c011627f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0116282:	8b 40 14             	mov    0x14(%eax),%eax
c0116285:	01 d0                	add    %edx,%eax
c0116287:	89 45 b4             	mov    %eax,-0x4c(%ebp)

        if (start < la) {
c011628a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011628d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0116290:	0f 83 b0 00 00 00    	jae    c0116346 <load_icode+0x3c6>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c0116296:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0116299:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c011629c:	75 05                	jne    c01162a3 <load_icode+0x323>
                continue ;
c011629e:	e9 46 01 00 00       	jmp    c01163e9 <load_icode+0x469>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c01162a3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01162a6:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01162a9:	29 c2                	sub    %eax,%edx
c01162ab:	89 d0                	mov    %edx,%eax
c01162ad:	05 00 10 00 00       	add    $0x1000,%eax
c01162b2:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01162b5:	b8 00 10 00 00       	mov    $0x1000,%eax
c01162ba:	2b 45 b0             	sub    -0x50(%ebp),%eax
c01162bd:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c01162c0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01162c3:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c01162c6:	73 0d                	jae    c01162d5 <load_icode+0x355>
                size -= la - end;
c01162c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01162cb:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01162ce:	29 c2                	sub    %eax,%edx
c01162d0:	89 d0                	mov    %edx,%eax
c01162d2:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c01162d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01162d8:	89 04 24             	mov    %eax,(%esp)
c01162db:	e8 73 ec ff ff       	call   c0114f53 <page2kva>
c01162e0:	8b 55 b0             	mov    -0x50(%ebp),%edx
c01162e3:	01 c2                	add    %eax,%edx
c01162e5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01162e8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01162ec:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01162f3:	00 
c01162f4:	89 14 24             	mov    %edx,(%esp)
c01162f7:	e8 03 ae 00 00       	call   c01210ff <memset>
            start += size;
c01162fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01162ff:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c0116302:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0116305:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0116308:	73 08                	jae    c0116312 <load_icode+0x392>
c011630a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011630d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c0116310:	74 34                	je     c0116346 <load_icode+0x3c6>
c0116312:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0116315:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0116318:	72 08                	jb     c0116322 <load_icode+0x3a2>
c011631a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011631d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0116320:	74 24                	je     c0116346 <load_icode+0x3c6>
c0116322:	c7 44 24 0c cc 68 12 	movl   $0xc01268cc,0xc(%esp)
c0116329:	c0 
c011632a:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c0116331:	c0 
c0116332:	c7 44 24 04 c3 02 00 	movl   $0x2c3,0x4(%esp)
c0116339:	00 
c011633a:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0116341:	e8 d0 ae fe ff       	call   c0101216 <__panic>
        }
        while (start < end) {
c0116346:	e9 92 00 00 00       	jmp    c01163dd <load_icode+0x45d>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c011634b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011634e:	8b 40 0c             	mov    0xc(%eax),%eax
c0116351:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0116354:	89 54 24 08          	mov    %edx,0x8(%esp)
c0116358:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c011635b:	89 54 24 04          	mov    %edx,0x4(%esp)
c011635f:	89 04 24             	mov    %eax,(%esp)
c0116362:	e8 a3 70 ff ff       	call   c010d40a <pgdir_alloc_page>
c0116367:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011636a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011636e:	75 0c                	jne    c011637c <load_icode+0x3fc>
                ret = -E_NO_MEM;
c0116370:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c0116377:	e9 0b 04 00 00       	jmp    c0116787 <load_icode+0x807>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c011637c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011637f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0116382:	29 c2                	sub    %eax,%edx
c0116384:	89 d0                	mov    %edx,%eax
c0116386:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0116389:	b8 00 10 00 00       	mov    $0x1000,%eax
c011638e:	2b 45 b0             	sub    -0x50(%ebp),%eax
c0116391:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0116394:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c011639b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c011639e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c01163a1:	73 0d                	jae    c01163b0 <load_icode+0x430>
                size -= la - end;
c01163a3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01163a6:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01163a9:	29 c2                	sub    %eax,%edx
c01163ab:	89 d0                	mov    %edx,%eax
c01163ad:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c01163b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01163b3:	89 04 24             	mov    %eax,(%esp)
c01163b6:	e8 98 eb ff ff       	call   c0114f53 <page2kva>
c01163bb:	8b 55 b0             	mov    -0x50(%ebp),%edx
c01163be:	01 c2                	add    %eax,%edx
c01163c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01163c3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01163c7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01163ce:	00 
c01163cf:	89 14 24             	mov    %edx,(%esp)
c01163d2:	e8 28 ad 00 00       	call   c01210ff <memset>
            start += size;
c01163d7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01163da:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c01163dd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01163e0:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c01163e3:	0f 82 62 ff ff ff    	jb     c011634b <load_icode+0x3cb>
        goto bad_elf_cleanup_pgdir;
    }

    struct proghdr __ph, *ph = &__ph;
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c01163e9:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c01163ed:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01163f0:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c01163f4:	0f b7 c0             	movzwl %ax,%eax
c01163f7:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c01163fa:	0f 87 77 fc ff ff    	ja     c0116077 <load_icode+0xf7>
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    sysfile_close(fd);
c0116400:	8b 45 08             	mov    0x8(%ebp),%eax
c0116403:	89 04 24             	mov    %eax,(%esp)
c0116406:	e8 0c e3 ff ff       	call   c0114717 <sysfile_close>

    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c011640b:	c7 45 ec 0b 00 00 00 	movl   $0xb,-0x14(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c0116412:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0116419:	00 
c011641a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011641d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0116421:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c0116428:	00 
c0116429:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c0116430:	af 
c0116431:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0116434:	89 04 24             	mov    %eax,(%esp)
c0116437:	e8 f2 ad ff ff       	call   c011122e <mm_map>
c011643c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011643f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0116443:	74 05                	je     c011644a <load_icode+0x4ca>
        goto bad_cleanup_mmap;
c0116445:	e9 3d 03 00 00       	jmp    c0116787 <load_icode+0x807>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c011644a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011644d:	8b 40 0c             	mov    0xc(%eax),%eax
c0116450:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c0116457:	00 
c0116458:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c011645f:	af 
c0116460:	89 04 24             	mov    %eax,(%esp)
c0116463:	e8 a2 6f ff ff       	call   c010d40a <pgdir_alloc_page>
c0116468:	85 c0                	test   %eax,%eax
c011646a:	75 24                	jne    c0116490 <load_icode+0x510>
c011646c:	c7 44 24 0c 08 69 12 	movl   $0xc0126908,0xc(%esp)
c0116473:	c0 
c0116474:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c011647b:	c0 
c011647c:	c7 44 24 04 d8 02 00 	movl   $0x2d8,0x4(%esp)
c0116483:	00 
c0116484:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c011648b:	e8 86 ad fe ff       	call   c0101216 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c0116490:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0116493:	8b 40 0c             	mov    0xc(%eax),%eax
c0116496:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c011649d:	00 
c011649e:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c01164a5:	af 
c01164a6:	89 04 24             	mov    %eax,(%esp)
c01164a9:	e8 5c 6f ff ff       	call   c010d40a <pgdir_alloc_page>
c01164ae:	85 c0                	test   %eax,%eax
c01164b0:	75 24                	jne    c01164d6 <load_icode+0x556>
c01164b2:	c7 44 24 0c 4c 69 12 	movl   $0xc012694c,0xc(%esp)
c01164b9:	c0 
c01164ba:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c01164c1:	c0 
c01164c2:	c7 44 24 04 d9 02 00 	movl   $0x2d9,0x4(%esp)
c01164c9:	00 
c01164ca:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c01164d1:	e8 40 ad fe ff       	call   c0101216 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c01164d6:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01164d9:	8b 40 0c             	mov    0xc(%eax),%eax
c01164dc:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c01164e3:	00 
c01164e4:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c01164eb:	af 
c01164ec:	89 04 24             	mov    %eax,(%esp)
c01164ef:	e8 16 6f ff ff       	call   c010d40a <pgdir_alloc_page>
c01164f4:	85 c0                	test   %eax,%eax
c01164f6:	75 24                	jne    c011651c <load_icode+0x59c>
c01164f8:	c7 44 24 0c 90 69 12 	movl   $0xc0126990,0xc(%esp)
c01164ff:	c0 
c0116500:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c0116507:	c0 
c0116508:	c7 44 24 04 da 02 00 	movl   $0x2da,0x4(%esp)
c011650f:	00 
c0116510:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0116517:	e8 fa ac fe ff       	call   c0101216 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c011651c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011651f:	8b 40 0c             	mov    0xc(%eax),%eax
c0116522:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c0116529:	00 
c011652a:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c0116531:	af 
c0116532:	89 04 24             	mov    %eax,(%esp)
c0116535:	e8 d0 6e ff ff       	call   c010d40a <pgdir_alloc_page>
c011653a:	85 c0                	test   %eax,%eax
c011653c:	75 24                	jne    c0116562 <load_icode+0x5e2>
c011653e:	c7 44 24 0c d4 69 12 	movl   $0xc01269d4,0xc(%esp)
c0116545:	c0 
c0116546:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c011654d:	c0 
c011654e:	c7 44 24 04 db 02 00 	movl   $0x2db,0x4(%esp)
c0116555:	00 
c0116556:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c011655d:	e8 b4 ac fe ff       	call   c0101216 <__panic>
    
    mm_count_inc(mm);
c0116562:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0116565:	89 04 24             	mov    %eax,(%esp)
c0116568:	e8 84 ea ff ff       	call   c0114ff1 <mm_count_inc>
    current->mm = mm;
c011656d:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0116572:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0116575:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c0116578:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c011657d:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0116580:	8b 52 0c             	mov    0xc(%edx),%edx
c0116583:	89 55 ac             	mov    %edx,-0x54(%ebp)
c0116586:	81 7d ac ff ff ff bf 	cmpl   $0xbfffffff,-0x54(%ebp)
c011658d:	77 23                	ja     c01165b2 <load_icode+0x632>
c011658f:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0116592:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0116596:	c7 44 24 08 3c 67 12 	movl   $0xc012673c,0x8(%esp)
c011659d:	c0 
c011659e:	c7 44 24 04 df 02 00 	movl   $0x2df,0x4(%esp)
c01165a5:	00 
c01165a6:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c01165ad:	e8 64 ac fe ff       	call   c0101216 <__panic>
c01165b2:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01165b5:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c01165bb:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c01165be:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01165c1:	8b 40 0c             	mov    0xc(%eax),%eax
c01165c4:	89 45 a8             	mov    %eax,-0x58(%ebp)
c01165c7:	81 7d a8 ff ff ff bf 	cmpl   $0xbfffffff,-0x58(%ebp)
c01165ce:	77 23                	ja     c01165f3 <load_icode+0x673>
c01165d0:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01165d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01165d7:	c7 44 24 08 3c 67 12 	movl   $0xc012673c,0x8(%esp)
c01165de:	c0 
c01165df:	c7 44 24 04 e0 02 00 	movl   $0x2e0,0x4(%esp)
c01165e6:	00 
c01165e7:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c01165ee:	e8 23 ac fe ff       	call   c0101216 <__panic>
c01165f3:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01165f6:	05 00 00 00 40       	add    $0x40000000,%eax
c01165fb:	89 45 98             	mov    %eax,-0x68(%ebp)
c01165fe:	8b 45 98             	mov    -0x68(%ebp),%eax
c0116601:	0f 22 d8             	mov    %eax,%cr3

    //setup argc, argv
    uint32_t argv_size=0, i;
c0116604:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c011660b:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c0116612:	eb 30                	jmp    c0116644 <load_icode+0x6c4>
        argv_size += strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
c0116614:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0116617:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c011661e:	8b 45 10             	mov    0x10(%ebp),%eax
c0116621:	01 d0                	add    %edx,%eax
c0116623:	8b 00                	mov    (%eax),%eax
c0116625:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c011662c:	00 
c011662d:	89 04 24             	mov    %eax,(%esp)
c0116630:	e8 9c a7 00 00       	call   c0120dd1 <strnlen>
c0116635:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0116638:	01 d0                	add    %edx,%eax
c011663a:	83 c0 01             	add    $0x1,%eax
c011663d:	89 45 d0             	mov    %eax,-0x30(%ebp)
    current->cr3 = PADDR(mm->pgdir);
    lcr3(PADDR(mm->pgdir));

    //setup argc, argv
    uint32_t argv_size=0, i;
    for (i = 0; i < argc; i ++) {
c0116640:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c0116644:	8b 45 0c             	mov    0xc(%ebp),%eax
c0116647:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c011664a:	77 c8                	ja     c0116614 <load_icode+0x694>
        argv_size += strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
    }

    uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long)+1)*sizeof(long);
c011664c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011664f:	c1 e8 02             	shr    $0x2,%eax
c0116652:	89 c2                	mov    %eax,%edx
c0116654:	b8 00 00 00 00       	mov    $0x0,%eax
c0116659:	29 d0                	sub    %edx,%eax
c011665b:	c1 e0 02             	shl    $0x2,%eax
c011665e:	2d 04 00 00 50       	sub    $0x50000004,%eax
c0116663:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    char** uargv=(char **)(stacktop  - argc * sizeof(char *));
c0116666:	8b 45 0c             	mov    0xc(%ebp),%eax
c0116669:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0116670:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0116673:	29 d0                	sub    %edx,%eax
c0116675:	89 45 a0             	mov    %eax,-0x60(%ebp)
    
    argv_size = 0;
c0116678:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c011667f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c0116686:	eb 67                	jmp    c01166ef <load_icode+0x76f>
        uargv[i] = strcpy((char *)(stacktop + argv_size ), kargv[i]);
c0116688:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011668b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0116692:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0116695:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c0116698:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011669b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01166a2:	8b 45 10             	mov    0x10(%ebp),%eax
c01166a5:	01 d0                	add    %edx,%eax
c01166a7:	8b 10                	mov    (%eax),%edx
c01166a9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01166ac:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c01166af:	01 c8                	add    %ecx,%eax
c01166b1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01166b5:	89 04 24             	mov    %eax,(%esp)
c01166b8:	e8 6b a7 00 00       	call   c0120e28 <strcpy>
c01166bd:	89 03                	mov    %eax,(%ebx)
        argv_size +=  strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
c01166bf:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01166c2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01166c9:	8b 45 10             	mov    0x10(%ebp),%eax
c01166cc:	01 d0                	add    %edx,%eax
c01166ce:	8b 00                	mov    (%eax),%eax
c01166d0:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01166d7:	00 
c01166d8:	89 04 24             	mov    %eax,(%esp)
c01166db:	e8 f1 a6 00 00       	call   c0120dd1 <strnlen>
c01166e0:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01166e3:	01 d0                	add    %edx,%eax
c01166e5:	83 c0 01             	add    $0x1,%eax
c01166e8:	89 45 d0             	mov    %eax,-0x30(%ebp)

    uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long)+1)*sizeof(long);
    char** uargv=(char **)(stacktop  - argc * sizeof(char *));
    
    argv_size = 0;
    for (i = 0; i < argc; i ++) {
c01166eb:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c01166ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c01166f2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c01166f5:	77 91                	ja     c0116688 <load_icode+0x708>
        uargv[i] = strcpy((char *)(stacktop + argv_size ), kargv[i]);
        argv_size +=  strnlen(kargv[i],EXEC_MAX_ARG_LEN + 1)+1;
    }
    
    stacktop = (uintptr_t)uargv - sizeof(int);
c01166f7:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01166fa:	83 e8 04             	sub    $0x4,%eax
c01166fd:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    *(int *)stacktop = argc;
c0116700:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0116703:	8b 55 0c             	mov    0xc(%ebp),%edx
c0116706:	89 10                	mov    %edx,(%eax)
    
    struct trapframe *tf = current->tf;
c0116708:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c011670d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0116710:	89 45 9c             	mov    %eax,-0x64(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c0116713:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c011671a:	00 
c011671b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0116722:	00 
c0116723:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0116726:	89 04 24             	mov    %eax,(%esp)
c0116729:	e8 d1 a9 00 00       	call   c01210ff <memset>
    tf->tf_cs = USER_CS;
c011672e:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0116731:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c0116737:	8b 45 9c             	mov    -0x64(%ebp),%eax
c011673a:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c0116740:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0116743:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c0116747:	8b 45 9c             	mov    -0x64(%ebp),%eax
c011674a:	66 89 50 28          	mov    %dx,0x28(%eax)
c011674e:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0116751:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c0116755:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0116758:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = stacktop;
c011675c:	8b 45 9c             	mov    -0x64(%ebp),%eax
c011675f:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0116762:	89 50 44             	mov    %edx,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c0116765:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0116768:	8b 50 18             	mov    0x18(%eax),%edx
c011676b:	8b 45 9c             	mov    -0x64(%ebp),%eax
c011676e:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c0116771:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0116774:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c011677b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c0116782:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116785:	eb 23                	jmp    c01167aa <load_icode+0x82a>
bad_cleanup_mmap:
    exit_mmap(mm);
c0116787:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011678a:	89 04 24             	mov    %eax,(%esp)
c011678d:	e8 c6 ac ff ff       	call   c0111458 <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c0116792:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0116795:	89 04 24             	mov    %eax,(%esp)
c0116798:	e8 b1 f0 ff ff       	call   c011584e <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c011679d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01167a0:	89 04 24             	mov    %eax,(%esp)
c01167a3:	e8 e4 a9 ff ff       	call   c011118c <mm_destroy>
bad_mm:
    goto out;
c01167a8:	eb d8                	jmp    c0116782 <load_icode+0x802>
}
c01167aa:	81 c4 e4 00 00 00    	add    $0xe4,%esp
c01167b0:	5b                   	pop    %ebx
c01167b1:	5d                   	pop    %ebp
c01167b2:	c3                   	ret    

c01167b3 <put_kargv>:

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
c01167b3:	55                   	push   %ebp
c01167b4:	89 e5                	mov    %esp,%ebp
c01167b6:	83 ec 18             	sub    $0x18,%esp
    while (argc > 0) {
c01167b9:	eb 1d                	jmp    c01167d8 <put_kargv+0x25>
        kfree(kargv[-- argc]);
c01167bb:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c01167bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01167c2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01167c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01167cc:	01 d0                	add    %edx,%eax
c01167ce:	8b 00                	mov    (%eax),%eax
c01167d0:	89 04 24             	mov    %eax,(%esp)
c01167d3:	e8 f3 42 ff ff       	call   c010aacb <kfree>
}

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
    while (argc > 0) {
c01167d8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01167dc:	7f dd                	jg     c01167bb <put_kargv+0x8>
        kfree(kargv[-- argc]);
    }
}
c01167de:	c9                   	leave  
c01167df:	c3                   	ret    

c01167e0 <copy_kargv>:

static int
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
c01167e0:	55                   	push   %ebp
c01167e1:	89 e5                	mov    %esp,%ebp
c01167e3:	83 ec 28             	sub    $0x28,%esp
    int i, ret = -E_INVAL;
c01167e6:	c7 45 f0 fd ff ff ff 	movl   $0xfffffffd,-0x10(%ebp)
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
c01167ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01167f0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01167f7:	8b 45 14             	mov    0x14(%ebp),%eax
c01167fa:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0116801:	00 
c0116802:	89 54 24 08          	mov    %edx,0x8(%esp)
c0116806:	89 44 24 04          	mov    %eax,0x4(%esp)
c011680a:	8b 45 08             	mov    0x8(%ebp),%eax
c011680d:	89 04 24             	mov    %eax,(%esp)
c0116810:	e8 19 b7 ff ff       	call   c0111f2e <user_mem_check>
c0116815:	85 c0                	test   %eax,%eax
c0116817:	75 08                	jne    c0116821 <copy_kargv+0x41>
        return ret;
c0116819:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011681c:	e9 a4 00 00 00       	jmp    c01168c5 <copy_kargv+0xe5>
    }
    for (i = 0; i < argc; i ++) {
c0116821:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0116828:	eb 77                	jmp    c01168a1 <copy_kargv+0xc1>
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
c011682a:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0116831:	e8 7a 42 ff ff       	call   c010aab0 <kmalloc>
c0116836:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0116839:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011683d:	75 0a                	jne    c0116849 <copy_kargv+0x69>
            goto failed_nomem;
c011683f:	90                   	nop
        kargv[i] = buffer;
    }
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c0116840:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c0116847:	eb 67                	jmp    c01168b0 <copy_kargv+0xd0>
    for (i = 0; i < argc; i ++) {
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
            goto failed_nomem;
        }
        if (!copy_string(mm, buffer, argv[i], EXEC_MAX_ARG_LEN + 1)) {
c0116849:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011684c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0116853:	8b 45 14             	mov    0x14(%ebp),%eax
c0116856:	01 d0                	add    %edx,%eax
c0116858:	8b 00                	mov    (%eax),%eax
c011685a:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c0116861:	00 
c0116862:	89 44 24 08          	mov    %eax,0x8(%esp)
c0116866:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0116869:	89 44 24 04          	mov    %eax,0x4(%esp)
c011686d:	8b 45 08             	mov    0x8(%ebp),%eax
c0116870:	89 04 24             	mov    %eax,(%esp)
c0116873:	e8 d9 b7 ff ff       	call   c0112051 <copy_string>
c0116878:	85 c0                	test   %eax,%eax
c011687a:	75 0d                	jne    c0116889 <copy_kargv+0xa9>
            kfree(buffer);
c011687c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011687f:	89 04 24             	mov    %eax,(%esp)
c0116882:	e8 44 42 ff ff       	call   c010aacb <kfree>
            goto failed_cleanup;
c0116887:	eb 27                	jmp    c01168b0 <copy_kargv+0xd0>
        }
        kargv[i] = buffer;
c0116889:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011688c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0116893:	8b 45 10             	mov    0x10(%ebp),%eax
c0116896:	01 c2                	add    %eax,%edx
c0116898:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011689b:	89 02                	mov    %eax,(%edx)
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
    int i, ret = -E_INVAL;
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
        return ret;
    }
    for (i = 0; i < argc; i ++) {
c011689d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01168a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01168a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01168a7:	7c 81                	jl     c011682a <copy_kargv+0x4a>
            kfree(buffer);
            goto failed_cleanup;
        }
        kargv[i] = buffer;
    }
    return 0;
c01168a9:	b8 00 00 00 00       	mov    $0x0,%eax
c01168ae:	eb 15                	jmp    c01168c5 <copy_kargv+0xe5>

failed_nomem:
    ret = -E_NO_MEM;
failed_cleanup:
    put_kargv(i, kargv);
c01168b0:	8b 45 10             	mov    0x10(%ebp),%eax
c01168b3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01168b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01168ba:	89 04 24             	mov    %eax,(%esp)
c01168bd:	e8 f1 fe ff ff       	call   c01167b3 <put_kargv>
    return ret;
c01168c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01168c5:	c9                   	leave  
c01168c6:	c3                   	ret    

c01168c7 <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, int argc, const char **argv) {
c01168c7:	55                   	push   %ebp
c01168c8:	89 e5                	mov    %esp,%ebp
c01168ca:	81 ec e8 00 00 00    	sub    $0xe8,%esp
    static_assert(EXEC_MAX_ARG_LEN >= FS_MAX_FPATH_LEN);
    struct mm_struct *mm = current->mm;
c01168d0:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01168d5:	8b 40 18             	mov    0x18(%eax),%eax
c01168d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(argc >= 1 && argc <= EXEC_MAX_ARG_NUM)) {
c01168db:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01168df:	7e 06                	jle    c01168e7 <do_execve+0x20>
c01168e1:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c01168e5:	7e 0a                	jle    c01168f1 <do_execve+0x2a>
        return -E_INVAL;
c01168e7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01168ec:	e9 11 02 00 00       	jmp    c0116b02 <do_execve+0x23b>
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c01168f1:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c01168f8:	00 
c01168f9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0116900:	00 
c0116901:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c0116904:	89 04 24             	mov    %eax,(%esp)
c0116907:	e8 f3 a7 00 00       	call   c01210ff <memset>
    
    char *kargv[EXEC_MAX_ARG_NUM];
    const char *path;
    
    int ret = -E_INVAL;
c011690c:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    
    lock_mm(mm);
c0116913:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0116916:	89 04 24             	mov    %eax,(%esp)
c0116919:	e8 07 e7 ff ff       	call   c0115025 <lock_mm>
    if (name == NULL) {
c011691e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0116922:	75 29                	jne    c011694d <do_execve+0x86>
        snprintf(local_name, sizeof(local_name), "<null> %d", current->pid);
c0116924:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0116929:	8b 40 04             	mov    0x4(%eax),%eax
c011692c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0116930:	c7 44 24 08 17 6a 12 	movl   $0xc0126a17,0x8(%esp)
c0116937:	c0 
c0116938:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c011693f:	00 
c0116940:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c0116943:	89 04 24             	mov    %eax,(%esp)
c0116946:	e8 e6 a2 00 00       	call   c0120c31 <snprintf>
c011694b:	eb 38                	jmp    c0116985 <do_execve+0xbe>
    }
    else {
        if (!copy_string(mm, local_name, name, sizeof(local_name))) {
c011694d:	c7 44 24 0c 33 00 00 	movl   $0x33,0xc(%esp)
c0116954:	00 
c0116955:	8b 45 08             	mov    0x8(%ebp),%eax
c0116958:	89 44 24 08          	mov    %eax,0x8(%esp)
c011695c:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c011695f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0116963:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0116966:	89 04 24             	mov    %eax,(%esp)
c0116969:	e8 e3 b6 ff ff       	call   c0112051 <copy_string>
c011696e:	85 c0                	test   %eax,%eax
c0116970:	75 13                	jne    c0116985 <do_execve+0xbe>
            unlock_mm(mm);
c0116972:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0116975:	89 04 24             	mov    %eax,(%esp)
c0116978:	e8 db e6 ff ff       	call   c0115058 <unlock_mm>
            return ret;
c011697d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116980:	e9 7d 01 00 00       	jmp    c0116b02 <do_execve+0x23b>
        }
    }
    if ((ret = copy_kargv(mm, argc, kargv, argv)) != 0) {
c0116985:	8b 45 10             	mov    0x10(%ebp),%eax
c0116988:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011698c:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c0116992:	89 44 24 08          	mov    %eax,0x8(%esp)
c0116996:	8b 45 0c             	mov    0xc(%ebp),%eax
c0116999:	89 44 24 04          	mov    %eax,0x4(%esp)
c011699d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01169a0:	89 04 24             	mov    %eax,(%esp)
c01169a3:	e8 38 fe ff ff       	call   c01167e0 <copy_kargv>
c01169a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01169ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01169af:	74 13                	je     c01169c4 <do_execve+0xfd>
        unlock_mm(mm);
c01169b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01169b4:	89 04 24             	mov    %eax,(%esp)
c01169b7:	e8 9c e6 ff ff       	call   c0115058 <unlock_mm>
        return ret;
c01169bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01169bf:	e9 3e 01 00 00       	jmp    c0116b02 <do_execve+0x23b>
    }
    path = argv[0];
c01169c4:	8b 45 10             	mov    0x10(%ebp),%eax
c01169c7:	8b 00                	mov    (%eax),%eax
c01169c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    unlock_mm(mm);
c01169cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01169cf:	89 04 24             	mov    %eax,(%esp)
c01169d2:	e8 81 e6 ff ff       	call   c0115058 <unlock_mm>
    files_closeall(current->filesp);
c01169d7:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01169dc:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c01169e2:	89 04 24             	mov    %eax,(%esp)
c01169e5:	e8 87 d8 ff ff       	call   c0114271 <files_closeall>

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
c01169ea:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01169f1:	00 
c01169f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01169f5:	89 04 24             	mov    %eax,(%esp)
c01169f8:	e8 84 dc ff ff       	call   c0114681 <sysfile_open>
c01169fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0116a00:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0116a03:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0116a06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0116a0a:	79 05                	jns    c0116a11 <do_execve+0x14a>
        goto execve_exit;
c0116a0c:	e9 ae 00 00 00       	jmp    c0116abf <do_execve+0x1f8>
    }
    if (mm != NULL) {
c0116a11:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0116a15:	74 4a                	je     c0116a61 <do_execve+0x19a>
        lcr3(boot_cr3);
c0116a17:	a1 68 11 17 c0       	mov    0xc0171168,%eax
c0116a1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0116a1f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0116a22:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c0116a25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0116a28:	89 04 24             	mov    %eax,(%esp)
c0116a2b:	e8 db e5 ff ff       	call   c011500b <mm_count_dec>
c0116a30:	85 c0                	test   %eax,%eax
c0116a32:	75 21                	jne    c0116a55 <do_execve+0x18e>
            exit_mmap(mm);
c0116a34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0116a37:	89 04 24             	mov    %eax,(%esp)
c0116a3a:	e8 19 aa ff ff       	call   c0111458 <exit_mmap>
            put_pgdir(mm);
c0116a3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0116a42:	89 04 24             	mov    %eax,(%esp)
c0116a45:	e8 04 ee ff ff       	call   c011584e <put_pgdir>
            mm_destroy(mm);
c0116a4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0116a4d:	89 04 24             	mov    %eax,(%esp)
c0116a50:	e8 37 a7 ff ff       	call   c011118c <mm_destroy>
        }
        current->mm = NULL;
c0116a55:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0116a5a:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    ret= -E_NO_MEM;;
c0116a61:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
c0116a68:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c0116a6e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0116a72:	8b 45 0c             	mov    0xc(%ebp),%eax
c0116a75:	89 44 24 04          	mov    %eax,0x4(%esp)
c0116a79:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0116a7c:	89 04 24             	mov    %eax,(%esp)
c0116a7f:	e8 fc f4 ff ff       	call   c0115f80 <load_icode>
c0116a84:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0116a87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0116a8b:	74 02                	je     c0116a8f <do_execve+0x1c8>
        goto execve_exit;
c0116a8d:	eb 30                	jmp    c0116abf <do_execve+0x1f8>
    }
    put_kargv(argc, kargv);
c0116a8f:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c0116a95:	89 44 24 04          	mov    %eax,0x4(%esp)
c0116a99:	8b 45 0c             	mov    0xc(%ebp),%eax
c0116a9c:	89 04 24             	mov    %eax,(%esp)
c0116a9f:	e8 0f fd ff ff       	call   c01167b3 <put_kargv>
    set_proc_name(current, local_name);
c0116aa4:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0116aa9:	8d 55 b1             	lea    -0x4f(%ebp),%edx
c0116aac:	89 54 24 04          	mov    %edx,0x4(%esp)
c0116ab0:	89 04 24             	mov    %eax,(%esp)
c0116ab3:	e8 8e e7 ff ff       	call   c0115246 <set_proc_name>
    return 0;
c0116ab8:	b8 00 00 00 00       	mov    $0x0,%eax
c0116abd:	eb 43                	jmp    c0116b02 <do_execve+0x23b>

execve_exit:
    put_kargv(argc, kargv);
c0116abf:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c0116ac5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0116ac9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0116acc:	89 04 24             	mov    %eax,(%esp)
c0116acf:	e8 df fc ff ff       	call   c01167b3 <put_kargv>
    do_exit(ret);
c0116ad4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116ad7:	89 04 24             	mov    %eax,(%esp)
c0116ada:	e8 32 f2 ff ff       	call   c0115d11 <do_exit>
    panic("already exit: %e.\n", ret);
c0116adf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116ae2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0116ae6:	c7 44 24 08 21 6a 12 	movl   $0xc0126a21,0x8(%esp)
c0116aed:	c0 
c0116aee:	c7 44 24 04 67 03 00 	movl   $0x367,0x4(%esp)
c0116af5:	00 
c0116af6:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0116afd:	e8 14 a7 fe ff       	call   c0101216 <__panic>
}
c0116b02:	c9                   	leave  
c0116b03:	c3                   	ret    

c0116b04 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c0116b04:	55                   	push   %ebp
c0116b05:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c0116b07:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0116b0c:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c0116b13:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0116b18:	5d                   	pop    %ebp
c0116b19:	c3                   	ret    

c0116b1a <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c0116b1a:	55                   	push   %ebp
c0116b1b:	89 e5                	mov    %esp,%ebp
c0116b1d:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c0116b20:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0116b25:	8b 40 18             	mov    0x18(%eax),%eax
c0116b28:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c0116b2b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0116b2f:	74 30                	je     c0116b61 <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c0116b31:	8b 45 0c             	mov    0xc(%ebp),%eax
c0116b34:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0116b3b:	00 
c0116b3c:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0116b43:	00 
c0116b44:	89 44 24 04          	mov    %eax,0x4(%esp)
c0116b48:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0116b4b:	89 04 24             	mov    %eax,(%esp)
c0116b4e:	e8 db b3 ff ff       	call   c0111f2e <user_mem_check>
c0116b53:	85 c0                	test   %eax,%eax
c0116b55:	75 0a                	jne    c0116b61 <do_wait+0x47>
            return -E_INVAL;
c0116b57:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0116b5c:	e9 57 01 00 00       	jmp    c0116cb8 <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c0116b61:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c0116b68:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0116b6c:	74 39                	je     c0116ba7 <do_wait+0x8d>
        proc = find_proc(pid);
c0116b6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0116b71:	89 04 24             	mov    %eax,(%esp)
c0116b74:	e8 e6 ea ff ff       	call   c011565f <find_proc>
c0116b79:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c0116b7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0116b80:	74 5a                	je     c0116bdc <do_wait+0xc2>
c0116b82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116b85:	8b 50 14             	mov    0x14(%eax),%edx
c0116b88:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0116b8d:	39 c2                	cmp    %eax,%edx
c0116b8f:	75 4b                	jne    c0116bdc <do_wait+0xc2>
            haskid = 1;
c0116b91:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c0116b98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116b9b:	8b 00                	mov    (%eax),%eax
c0116b9d:	83 f8 03             	cmp    $0x3,%eax
c0116ba0:	75 3a                	jne    c0116bdc <do_wait+0xc2>
                goto found;
c0116ba2:	e9 89 00 00 00       	jmp    c0116c30 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c0116ba7:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0116bac:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c0116bb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c0116bb5:	eb 1f                	jmp    c0116bd6 <do_wait+0xbc>
            haskid = 1;
c0116bb7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c0116bbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116bc1:	8b 00                	mov    (%eax),%eax
c0116bc3:	83 f8 03             	cmp    $0x3,%eax
c0116bc6:	75 02                	jne    c0116bca <do_wait+0xb0>
                goto found;
c0116bc8:	eb 66                	jmp    c0116c30 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c0116bca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116bcd:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c0116bd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0116bd6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0116bda:	75 db                	jne    c0116bb7 <do_wait+0x9d>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c0116bdc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0116be0:	74 44                	je     c0116c26 <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c0116be2:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0116be7:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c0116bed:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0116bf2:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c0116bf9:	00 00 80 
        schedule();
c0116bfc:	e8 a5 17 00 00       	call   c01183a6 <schedule>
        if (current->flags & PF_EXITING) {
c0116c01:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0116c06:	8b 40 44             	mov    0x44(%eax),%eax
c0116c09:	83 e0 01             	and    $0x1,%eax
c0116c0c:	85 c0                	test   %eax,%eax
c0116c0e:	74 11                	je     c0116c21 <do_wait+0x107>
            do_exit(-E_KILLED);
c0116c10:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0116c17:	e8 f5 f0 ff ff       	call   c0115d11 <do_exit>
        }
        goto repeat;
c0116c1c:	e9 40 ff ff ff       	jmp    c0116b61 <do_wait+0x47>
c0116c21:	e9 3b ff ff ff       	jmp    c0116b61 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c0116c26:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c0116c2b:	e9 88 00 00 00       	jmp    c0116cb8 <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c0116c30:	a1 60 e0 16 c0       	mov    0xc016e060,%eax
c0116c35:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0116c38:	74 0a                	je     c0116c44 <do_wait+0x12a>
c0116c3a:	a1 64 e0 16 c0       	mov    0xc016e064,%eax
c0116c3f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0116c42:	75 1c                	jne    c0116c60 <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c0116c44:	c7 44 24 08 34 6a 12 	movl   $0xc0126a34,0x8(%esp)
c0116c4b:	c0 
c0116c4c:	c7 44 24 04 a0 03 00 	movl   $0x3a0,0x4(%esp)
c0116c53:	00 
c0116c54:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0116c5b:	e8 b6 a5 fe ff       	call   c0101216 <__panic>
    }
    if (code_store != NULL) {
c0116c60:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0116c64:	74 0e                	je     c0116c74 <do_wait+0x15a>
        *code_store = proc->exit_code;
c0116c66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116c69:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c0116c6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0116c72:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c0116c74:	e8 1e e2 ff ff       	call   c0114e97 <__intr_save>
c0116c79:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c0116c7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116c7f:	89 04 24             	mov    %eax,(%esp)
c0116c82:	e8 a3 e9 ff ff       	call   c011562a <unhash_proc>
        remove_links(proc);
c0116c87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116c8a:	89 04 24             	mov    %eax,(%esp)
c0116c8d:	e8 f3 e6 ff ff       	call   c0115385 <remove_links>
    }
    local_intr_restore(intr_flag);
c0116c92:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0116c95:	89 04 24             	mov    %eax,(%esp)
c0116c98:	e8 24 e2 ff ff       	call   c0114ec1 <__intr_restore>
    put_kstack(proc);
c0116c9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116ca0:	89 04 24             	mov    %eax,(%esp)
c0116ca3:	e8 d9 ea ff ff       	call   c0115781 <put_kstack>
    kfree(proc);
c0116ca8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116cab:	89 04 24             	mov    %eax,(%esp)
c0116cae:	e8 18 3e ff ff       	call   c010aacb <kfree>
    return 0;
c0116cb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0116cb8:	c9                   	leave  
c0116cb9:	c3                   	ret    

c0116cba <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c0116cba:	55                   	push   %ebp
c0116cbb:	89 e5                	mov    %esp,%ebp
c0116cbd:	83 ec 38             	sub    $0x38,%esp
    list_entry_t *lec = &proc_list;
c0116cc0:	c7 45 f4 3c 13 17 c0 	movl   $0xc017133c,-0xc(%ebp)
    list_entry_t *pbc = &proc_list;
c0116cc7:	c7 45 f0 3c 13 17 c0 	movl   $0xc017133c,-0x10(%ebp)
    struct proc_struct* pbcw;
    while (list_next(lec) != pbc){
c0116cce:	90                   	nop
c0116ccf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116cd2:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0116cd5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0116cd8:	8b 40 04             	mov    0x4(%eax),%eax
c0116cdb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0116cde:	74 2f                	je     c0116d0f <do_kill+0x55>
c0116ce0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116ce3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0116ce6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0116ce9:	8b 40 04             	mov    0x4(%eax),%eax
       pbcw = le2proc(list_next(lec), list_link);
c0116cec:	83 e8 7c             	sub    $0x7c,%eax
c0116cef:	89 45 ec             	mov    %eax,-0x14(%ebp)
       if(pbcw->pid==pid)
c0116cf2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0116cf5:	8b 40 04             	mov    0x4(%eax),%eax
c0116cf8:	3b 45 08             	cmp    0x8(%ebp),%eax
c0116cfb:	75 11                	jne    c0116d0e <do_kill+0x54>
       {lec->next=lec->next->next;}
c0116cfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116d00:	8b 40 04             	mov    0x4(%eax),%eax
c0116d03:	8b 50 04             	mov    0x4(%eax),%edx
c0116d06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116d09:	89 50 04             	mov    %edx,0x4(%eax)
       break;
c0116d0c:	eb 00                	jmp    c0116d0e <do_kill+0x54>
c0116d0e:	90                   	nop
    }

    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c0116d0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0116d12:	89 04 24             	mov    %eax,(%esp)
c0116d15:	e8 45 e9 ff ff       	call   c011565f <find_proc>
c0116d1a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0116d1d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0116d21:	74 44                	je     c0116d67 <do_kill+0xad>
        if (!(proc->flags & PF_EXITING)) {
c0116d23:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0116d26:	8b 40 44             	mov    0x44(%eax),%eax
c0116d29:	83 e0 01             	and    $0x1,%eax
c0116d2c:	85 c0                	test   %eax,%eax
c0116d2e:	75 30                	jne    c0116d60 <do_kill+0xa6>
            proc->flags |= PF_EXITING;
c0116d30:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0116d33:	8b 40 44             	mov    0x44(%eax),%eax
c0116d36:	83 c8 01             	or     $0x1,%eax
c0116d39:	89 c2                	mov    %eax,%edx
c0116d3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0116d3e:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c0116d41:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0116d44:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0116d4a:	85 c0                	test   %eax,%eax
c0116d4c:	79 0b                	jns    c0116d59 <do_kill+0x9f>
                wakeup_proc(proc);
c0116d4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0116d51:	89 04 24             	mov    %eax,(%esp)
c0116d54:	e8 b1 15 00 00       	call   c011830a <wakeup_proc>
            }
            return 0;
c0116d59:	b8 00 00 00 00       	mov    $0x0,%eax
c0116d5e:	eb 0c                	jmp    c0116d6c <do_kill+0xb2>
        }
        return -E_KILLED;
c0116d60:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c0116d65:	eb 05                	jmp    c0116d6c <do_kill+0xb2>
    }
    return -E_INVAL;
c0116d67:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0116d6c:	c9                   	leave  
c0116d6d:	c3                   	ret    

c0116d6e <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
c0116d6e:	55                   	push   %ebp
c0116d6f:	89 e5                	mov    %esp,%ebp
c0116d71:	53                   	push   %ebx
c0116d72:	83 ec 10             	sub    $0x10,%esp
    int argc = 0, ret;
c0116d75:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (argv[argc] != NULL) {
c0116d7c:	eb 04                	jmp    c0116d82 <kernel_execve+0x14>
        argc ++;
c0116d7e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
    int argc = 0, ret;
    while (argv[argc] != NULL) {
c0116d82:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0116d85:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0116d8c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0116d8f:	01 d0                	add    %edx,%eax
c0116d91:	8b 00                	mov    (%eax),%eax
c0116d93:	85 c0                	test   %eax,%eax
c0116d95:	75 e7                	jne    c0116d7e <kernel_execve+0x10>
        argc ++;
    }
    asm volatile (
c0116d97:	b8 04 00 00 00       	mov    $0x4,%eax
c0116d9c:	8b 55 08             	mov    0x8(%ebp),%edx
c0116d9f:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c0116da2:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c0116da5:	cd 80                	int    $0x80
c0116da7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (argc), "b" (argv)
        : "memory");
    return ret;
c0116daa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0116dad:	83 c4 10             	add    $0x10,%esp
c0116db0:	5b                   	pop    %ebx
c0116db1:	5d                   	pop    %ebp
c0116db2:	c3                   	ret    

c0116db3 <user_main>:

#define KERNEL_EXECVE3(x, s, ...)               __KERNEL_EXECVE3(x, s, ##__VA_ARGS__)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c0116db3:	55                   	push   %ebp
c0116db4:	89 e5                	mov    %esp,%ebp
c0116db6:	83 ec 28             	sub    $0x28,%esp
    KERNEL_EXECVE3(TEST, TESTSCRIPT);
#else
    KERNEL_EXECVE2(TEST);
#endif
#else
    KERNEL_EXECVE(sh);
c0116db9:	c7 45 f0 50 6a 12 c0 	movl   $0xc0126a50,-0x10(%ebp)
c0116dc0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0116dc7:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0116dcc:	8b 40 04             	mov    0x4(%eax),%eax
c0116dcf:	c7 44 24 08 50 6a 12 	movl   $0xc0126a50,0x8(%esp)
c0116dd6:	c0 
c0116dd7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0116ddb:	c7 04 24 54 6a 12 c0 	movl   $0xc0126a54,(%esp)
c0116de2:	e8 0c 96 fe ff       	call   c01003f3 <cprintf>
c0116de7:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0116dea:	89 44 24 04          	mov    %eax,0x4(%esp)
c0116dee:	c7 04 24 50 6a 12 c0 	movl   $0xc0126a50,(%esp)
c0116df5:	e8 74 ff ff ff       	call   c0116d6e <kernel_execve>
#endif
    panic("user_main execve failed.\n");
c0116dfa:	c7 44 24 08 7b 6a 12 	movl   $0xc0126a7b,0x8(%esp)
c0116e01:	c0 
c0116e02:	c7 44 24 04 f5 03 00 	movl   $0x3f5,0x4(%esp)
c0116e09:	00 
c0116e0a:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0116e11:	e8 00 a4 fe ff       	call   c0101216 <__panic>

c0116e16 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c0116e16:	55                   	push   %ebp
c0116e17:	89 e5                	mov    %esp,%ebp
c0116e19:	83 ec 38             	sub    $0x38,%esp
    int ret;
    if ((ret = vfs_set_bootfs("disk0:")) != 0) {
c0116e1c:	c7 04 24 95 6a 12 c0 	movl   $0xc0126a95,(%esp)
c0116e23:	e8 a8 2c 00 00       	call   c0119ad0 <vfs_set_bootfs>
c0116e28:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0116e2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0116e2f:	74 23                	je     c0116e54 <init_main+0x3e>
        panic("set boot fs failed: %e.\n", ret);
c0116e31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0116e34:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0116e38:	c7 44 24 08 9c 6a 12 	movl   $0xc0126a9c,0x8(%esp)
c0116e3f:	c0 
c0116e40:	c7 44 24 04 fd 03 00 	movl   $0x3fd,0x4(%esp)
c0116e47:	00 
c0116e48:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0116e4f:	e8 c2 a3 fe ff       	call   c0101216 <__panic>
    }
    
    size_t nr_free_pages_store = nr_free_pages();
c0116e54:	e8 a1 57 ff ff       	call   c010c5fa <nr_free_pages>
c0116e59:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t kernel_allocated_store = kallocated();
c0116e5c:	e8 32 3b ff ff       	call   c010a993 <kallocated>
c0116e61:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c0116e64:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0116e6b:	00 
c0116e6c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0116e73:	00 
c0116e74:	c7 04 24 b3 6d 11 c0 	movl   $0xc0116db3,(%esp)
c0116e7b:	e8 53 e8 ff ff       	call   c01156d3 <kernel_thread>
c0116e80:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (pid <= 0) {
c0116e83:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0116e87:	7f 1c                	jg     c0116ea5 <init_main+0x8f>
        panic("create user_main failed.\n");
c0116e89:	c7 44 24 08 b5 6a 12 	movl   $0xc0126ab5,0x8(%esp)
c0116e90:	c0 
c0116e91:	c7 44 24 04 05 04 00 	movl   $0x405,0x4(%esp)
c0116e98:	00 
c0116e99:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0116ea0:	e8 71 a3 fe ff       	call   c0101216 <__panic>
    }
// extern void check_sync(void);
//    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c0116ea5:	eb 05                	jmp    c0116eac <init_main+0x96>
        schedule();
c0116ea7:	e8 fa 14 00 00       	call   c01183a6 <schedule>
        panic("create user_main failed.\n");
    }
// extern void check_sync(void);
//    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c0116eac:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0116eb3:	00 
c0116eb4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0116ebb:	e8 5a fc ff ff       	call   c0116b1a <do_wait>
c0116ec0:	85 c0                	test   %eax,%eax
c0116ec2:	74 e3                	je     c0116ea7 <init_main+0x91>
        schedule();
    }

    fs_cleanup();
c0116ec4:	e8 44 d2 ff ff       	call   c011410d <fs_cleanup>
        
    cprintf("all user-mode processes have quit.\n");
c0116ec9:	c7 04 24 d0 6a 12 c0 	movl   $0xc0126ad0,(%esp)
c0116ed0:	e8 1e 95 fe ff       	call   c01003f3 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c0116ed5:	a1 64 e0 16 c0       	mov    0xc016e064,%eax
c0116eda:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c0116ee0:	85 c0                	test   %eax,%eax
c0116ee2:	75 1e                	jne    c0116f02 <init_main+0xec>
c0116ee4:	a1 64 e0 16 c0       	mov    0xc016e064,%eax
c0116ee9:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c0116eef:	85 c0                	test   %eax,%eax
c0116ef1:	75 0f                	jne    c0116f02 <init_main+0xec>
c0116ef3:	a1 64 e0 16 c0       	mov    0xc016e064,%eax
c0116ef8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c0116efe:	85 c0                	test   %eax,%eax
c0116f00:	74 24                	je     c0116f26 <init_main+0x110>
c0116f02:	c7 44 24 0c f4 6a 12 	movl   $0xc0126af4,0xc(%esp)
c0116f09:	c0 
c0116f0a:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c0116f11:	c0 
c0116f12:	c7 44 24 04 11 04 00 	movl   $0x411,0x4(%esp)
c0116f19:	00 
c0116f1a:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0116f21:	e8 f0 a2 fe ff       	call   c0101216 <__panic>
    assert(nr_process == 2);
c0116f26:	a1 80 00 17 c0       	mov    0xc0170080,%eax
c0116f2b:	83 f8 02             	cmp    $0x2,%eax
c0116f2e:	74 24                	je     c0116f54 <init_main+0x13e>
c0116f30:	c7 44 24 0c 3f 6b 12 	movl   $0xc0126b3f,0xc(%esp)
c0116f37:	c0 
c0116f38:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c0116f3f:	c0 
c0116f40:	c7 44 24 04 12 04 00 	movl   $0x412,0x4(%esp)
c0116f47:	00 
c0116f48:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0116f4f:	e8 c2 a2 fe ff       	call   c0101216 <__panic>
c0116f54:	c7 45 e4 3c 13 17 c0 	movl   $0xc017133c,-0x1c(%ebp)
c0116f5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0116f5e:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c0116f61:	8b 15 64 e0 16 c0    	mov    0xc016e064,%edx
c0116f67:	83 c2 7c             	add    $0x7c,%edx
c0116f6a:	39 d0                	cmp    %edx,%eax
c0116f6c:	74 24                	je     c0116f92 <init_main+0x17c>
c0116f6e:	c7 44 24 0c 50 6b 12 	movl   $0xc0126b50,0xc(%esp)
c0116f75:	c0 
c0116f76:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c0116f7d:	c0 
c0116f7e:	c7 44 24 04 13 04 00 	movl   $0x413,0x4(%esp)
c0116f85:	00 
c0116f86:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0116f8d:	e8 84 a2 fe ff       	call   c0101216 <__panic>
c0116f92:	c7 45 e0 3c 13 17 c0 	movl   $0xc017133c,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0116f99:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0116f9c:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c0116f9e:	8b 15 64 e0 16 c0    	mov    0xc016e064,%edx
c0116fa4:	83 c2 7c             	add    $0x7c,%edx
c0116fa7:	39 d0                	cmp    %edx,%eax
c0116fa9:	74 24                	je     c0116fcf <init_main+0x1b9>
c0116fab:	c7 44 24 0c 80 6b 12 	movl   $0xc0126b80,0xc(%esp)
c0116fb2:	c0 
c0116fb3:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c0116fba:	c0 
c0116fbb:	c7 44 24 04 14 04 00 	movl   $0x414,0x4(%esp)
c0116fc2:	00 
c0116fc3:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0116fca:	e8 47 a2 fe ff       	call   c0101216 <__panic>
    assert(nr_free_pages_store == nr_free_pages());
c0116fcf:	e8 26 56 ff ff       	call   c010c5fa <nr_free_pages>
c0116fd4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0116fd7:	74 24                	je     c0116ffd <init_main+0x1e7>
c0116fd9:	c7 44 24 0c b0 6b 12 	movl   $0xc0126bb0,0xc(%esp)
c0116fe0:	c0 
c0116fe1:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c0116fe8:	c0 
c0116fe9:	c7 44 24 04 15 04 00 	movl   $0x415,0x4(%esp)
c0116ff0:	00 
c0116ff1:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0116ff8:	e8 19 a2 fe ff       	call   c0101216 <__panic>
    assert(kernel_allocated_store == kallocated());
c0116ffd:	e8 91 39 ff ff       	call   c010a993 <kallocated>
c0117002:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0117005:	74 24                	je     c011702b <init_main+0x215>
c0117007:	c7 44 24 0c d8 6b 12 	movl   $0xc0126bd8,0xc(%esp)
c011700e:	c0 
c011700f:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c0117016:	c0 
c0117017:	c7 44 24 04 16 04 00 	movl   $0x416,0x4(%esp)
c011701e:	00 
c011701f:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0117026:	e8 eb a1 fe ff       	call   c0101216 <__panic>
    cprintf("init check memory pass.\n");
c011702b:	c7 04 24 ff 6b 12 c0 	movl   $0xc0126bff,(%esp)
c0117032:	e8 bc 93 fe ff       	call   c01003f3 <cprintf>
    return 0;
c0117037:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011703c:	c9                   	leave  
c011703d:	c3                   	ret    

c011703e <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c011703e:	55                   	push   %ebp
c011703f:	89 e5                	mov    %esp,%ebp
c0117041:	56                   	push   %esi
c0117042:	53                   	push   %ebx
c0117043:	83 ec 40             	sub    $0x40,%esp
c0117046:	c7 45 ec 3c 13 17 c0 	movl   $0xc017133c,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c011704d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0117050:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0117053:	89 50 04             	mov    %edx,0x4(%eax)
c0117056:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0117059:	8b 50 04             	mov    0x4(%eax),%edx
c011705c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011705f:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c0117061:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0117068:	eb 26                	jmp    c0117090 <proc_init+0x52>
        list_init(hash_list + i);
c011706a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011706d:	c1 e0 03             	shl    $0x3,%eax
c0117070:	05 80 e0 16 c0       	add    $0xc016e080,%eax
c0117075:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0117078:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011707b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011707e:	89 50 04             	mov    %edx,0x4(%eax)
c0117081:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0117084:	8b 50 04             	mov    0x4(%eax),%edx
c0117087:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011708a:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c011708c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0117090:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c0117097:	7e d1                	jle    c011706a <proc_init+0x2c>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c0117099:	e8 14 e0 ff ff       	call   c01150b2 <alloc_proc>
c011709e:	a3 60 e0 16 c0       	mov    %eax,0xc016e060
c01170a3:	a1 60 e0 16 c0       	mov    0xc016e060,%eax
c01170a8:	85 c0                	test   %eax,%eax
c01170aa:	75 1c                	jne    c01170c8 <proc_init+0x8a>
        panic("cannot alloc idleproc.\n");
c01170ac:	c7 44 24 08 18 6c 12 	movl   $0xc0126c18,0x8(%esp)
c01170b3:	c0 
c01170b4:	c7 44 24 04 27 04 00 	movl   $0x427,0x4(%esp)
c01170bb:	00 
c01170bc:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c01170c3:	e8 4e a1 fe ff       	call   c0101216 <__panic>
    }

    idleproc->pid = 0;
c01170c8:	a1 60 e0 16 c0       	mov    0xc016e060,%eax
c01170cd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c01170d4:	a1 60 e0 16 c0       	mov    0xc016e060,%eax
c01170d9:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c01170df:	a1 60 e0 16 c0       	mov    0xc016e060,%eax
c01170e4:	ba 00 80 16 c0       	mov    $0xc0168000,%edx
c01170e9:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c01170ec:	a1 60 e0 16 c0       	mov    0xc016e060,%eax
c01170f1:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    
    if ((idleproc->filesp = files_create()) == NULL) {
c01170f8:	8b 1d 60 e0 16 c0    	mov    0xc016e060,%ebx
c01170fe:	e8 43 d0 ff ff       	call   c0114146 <files_create>
c0117103:	89 83 c4 00 00 00    	mov    %eax,0xc4(%ebx)
c0117109:	8b 83 c4 00 00 00    	mov    0xc4(%ebx),%eax
c011710f:	85 c0                	test   %eax,%eax
c0117111:	75 1c                	jne    c011712f <proc_init+0xf1>
        panic("create filesp (idleproc) failed.\n");
c0117113:	c7 44 24 08 30 6c 12 	movl   $0xc0126c30,0x8(%esp)
c011711a:	c0 
c011711b:	c7 44 24 04 30 04 00 	movl   $0x430,0x4(%esp)
c0117122:	00 
c0117123:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c011712a:	e8 e7 a0 fe ff       	call   c0101216 <__panic>
    }
    files_count_inc(idleproc->filesp);
c011712f:	a1 60 e0 16 c0       	mov    0xc016e060,%eax
c0117134:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c011713a:	89 04 24             	mov    %eax,(%esp)
c011713d:	e8 3c df ff ff       	call   c011507e <files_count_inc>
    
    set_proc_name(idleproc, "idle");
c0117142:	a1 60 e0 16 c0       	mov    0xc016e060,%eax
c0117147:	c7 44 24 04 52 6c 12 	movl   $0xc0126c52,0x4(%esp)
c011714e:	c0 
c011714f:	89 04 24             	mov    %eax,(%esp)
c0117152:	e8 ef e0 ff ff       	call   c0115246 <set_proc_name>
    nr_process ++;
c0117157:	a1 80 00 17 c0       	mov    0xc0170080,%eax
c011715c:	83 c0 01             	add    $0x1,%eax
c011715f:	a3 80 00 17 c0       	mov    %eax,0xc0170080
    char* std[4]={"PROC_UNINIT","PROC_SLEEPING","PROC_RUNNABLE","PROC_ZOMBIE"};
c0117164:	c7 45 d8 b5 67 12 c0 	movl   $0xc01267b5,-0x28(%ebp)
c011716b:	c7 45 dc c1 67 12 c0 	movl   $0xc01267c1,-0x24(%ebp)
c0117172:	c7 45 e0 cf 67 12 c0 	movl   $0xc01267cf,-0x20(%ebp)
c0117179:	c7 45 e4 dd 67 12 c0 	movl   $0xc01267dd,-0x1c(%ebp)
    current = idleproc;
c0117180:	a1 60 e0 16 c0       	mov    0xc016e060,%eax
c0117185:	a3 68 e0 16 c0       	mov    %eax,0xc016e068
    cprintf("create idleproc ... \n");
c011718a:	c7 04 24 57 6c 12 c0 	movl   $0xc0126c57,(%esp)
c0117191:	e8 5d 92 fe ff       	call   c01003f3 <cprintf>
    cprintf("pid:%d    state:%s    name:%s    time_slice:%d    runtime:%d\n",
        current->pid,std[current->state],current->name,current->time_slice,current->runs);
c0117196:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
    set_proc_name(idleproc, "idle");
    nr_process ++;
    char* std[4]={"PROC_UNINIT","PROC_SLEEPING","PROC_RUNNABLE","PROC_ZOMBIE"};
    current = idleproc;
    cprintf("create idleproc ... \n");
    cprintf("pid:%d    state:%s    name:%s    time_slice:%d    runtime:%d\n",
c011719b:	8b 58 08             	mov    0x8(%eax),%ebx
        current->pid,std[current->state],current->name,current->time_slice,current->runs);
c011719e:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
    set_proc_name(idleproc, "idle");
    nr_process ++;
    char* std[4]={"PROC_UNINIT","PROC_SLEEPING","PROC_RUNNABLE","PROC_ZOMBIE"};
    current = idleproc;
    cprintf("create idleproc ... \n");
    cprintf("pid:%d    state:%s    name:%s    time_slice:%d    runtime:%d\n",
c01171a3:	8b 88 ac 00 00 00    	mov    0xac(%eax),%ecx
        current->pid,std[current->state],current->name,current->time_slice,current->runs);
c01171a9:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01171ae:	8d 70 48             	lea    0x48(%eax),%esi
c01171b1:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01171b6:	8b 00                	mov    (%eax),%eax
    set_proc_name(idleproc, "idle");
    nr_process ++;
    char* std[4]={"PROC_UNINIT","PROC_SLEEPING","PROC_RUNNABLE","PROC_ZOMBIE"};
    current = idleproc;
    cprintf("create idleproc ... \n");
    cprintf("pid:%d    state:%s    name:%s    time_slice:%d    runtime:%d\n",
c01171b8:	8b 54 85 d8          	mov    -0x28(%ebp,%eax,4),%edx
        current->pid,std[current->state],current->name,current->time_slice,current->runs);
c01171bc:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
    set_proc_name(idleproc, "idle");
    nr_process ++;
    char* std[4]={"PROC_UNINIT","PROC_SLEEPING","PROC_RUNNABLE","PROC_ZOMBIE"};
    current = idleproc;
    cprintf("create idleproc ... \n");
    cprintf("pid:%d    state:%s    name:%s    time_slice:%d    runtime:%d\n",
c01171c1:	8b 40 04             	mov    0x4(%eax),%eax
c01171c4:	89 5c 24 14          	mov    %ebx,0x14(%esp)
c01171c8:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01171cc:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01171d0:	89 54 24 08          	mov    %edx,0x8(%esp)
c01171d4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01171d8:	c7 04 24 fc 67 12 c0 	movl   $0xc01267fc,(%esp)
c01171df:	e8 0f 92 fe ff       	call   c01003f3 <cprintf>
        current->pid,std[current->state],current->name,current->time_slice,current->runs);

    int pid = kernel_thread(init_main, NULL, 0);
c01171e4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01171eb:	00 
c01171ec:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01171f3:	00 
c01171f4:	c7 04 24 16 6e 11 c0 	movl   $0xc0116e16,(%esp)
c01171fb:	e8 d3 e4 ff ff       	call   c01156d3 <kernel_thread>
c0117200:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c0117203:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0117207:	7f 1c                	jg     c0117225 <proc_init+0x1e7>
        panic("create init_main failed.\n");
c0117209:	c7 44 24 08 6d 6c 12 	movl   $0xc0126c6d,0x8(%esp)
c0117210:	c0 
c0117211:	c7 44 24 04 3e 04 00 	movl   $0x43e,0x4(%esp)
c0117218:	00 
c0117219:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0117220:	e8 f1 9f fe ff       	call   c0101216 <__panic>
    }

    initproc = find_proc(pid);
c0117225:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0117228:	89 04 24             	mov    %eax,(%esp)
c011722b:	e8 2f e4 ff ff       	call   c011565f <find_proc>
c0117230:	a3 64 e0 16 c0       	mov    %eax,0xc016e064
    set_proc_name(initproc, "init");
c0117235:	a1 64 e0 16 c0       	mov    0xc016e064,%eax
c011723a:	c7 44 24 04 87 6c 12 	movl   $0xc0126c87,0x4(%esp)
c0117241:	c0 
c0117242:	89 04 24             	mov    %eax,(%esp)
c0117245:	e8 fc df ff ff       	call   c0115246 <set_proc_name>

    cprintf("create initproc ... \n");
c011724a:	c7 04 24 8c 6c 12 c0 	movl   $0xc0126c8c,(%esp)
c0117251:	e8 9d 91 fe ff       	call   c01003f3 <cprintf>
    cprintf("pid:%d    state:%s    name:%s    time_slice:%d    runtime:%d\n",
        initproc->pid,std[initproc->state],initproc->name,initproc->time_slice,initproc->runs);
c0117256:	a1 64 e0 16 c0       	mov    0xc016e064,%eax

    initproc = find_proc(pid);
    set_proc_name(initproc, "init");

    cprintf("create initproc ... \n");
    cprintf("pid:%d    state:%s    name:%s    time_slice:%d    runtime:%d\n",
c011725b:	8b 58 08             	mov    0x8(%eax),%ebx
        initproc->pid,std[initproc->state],initproc->name,initproc->time_slice,initproc->runs);
c011725e:	a1 64 e0 16 c0       	mov    0xc016e064,%eax

    initproc = find_proc(pid);
    set_proc_name(initproc, "init");

    cprintf("create initproc ... \n");
    cprintf("pid:%d    state:%s    name:%s    time_slice:%d    runtime:%d\n",
c0117263:	8b 88 ac 00 00 00    	mov    0xac(%eax),%ecx
        initproc->pid,std[initproc->state],initproc->name,initproc->time_slice,initproc->runs);
c0117269:	a1 64 e0 16 c0       	mov    0xc016e064,%eax
c011726e:	8d 70 48             	lea    0x48(%eax),%esi
c0117271:	a1 64 e0 16 c0       	mov    0xc016e064,%eax
c0117276:	8b 00                	mov    (%eax),%eax

    initproc = find_proc(pid);
    set_proc_name(initproc, "init");

    cprintf("create initproc ... \n");
    cprintf("pid:%d    state:%s    name:%s    time_slice:%d    runtime:%d\n",
c0117278:	8b 54 85 d8          	mov    -0x28(%ebp,%eax,4),%edx
        initproc->pid,std[initproc->state],initproc->name,initproc->time_slice,initproc->runs);
c011727c:	a1 64 e0 16 c0       	mov    0xc016e064,%eax

    initproc = find_proc(pid);
    set_proc_name(initproc, "init");

    cprintf("create initproc ... \n");
    cprintf("pid:%d    state:%s    name:%s    time_slice:%d    runtime:%d\n",
c0117281:	8b 40 04             	mov    0x4(%eax),%eax
c0117284:	89 5c 24 14          	mov    %ebx,0x14(%esp)
c0117288:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c011728c:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0117290:	89 54 24 08          	mov    %edx,0x8(%esp)
c0117294:	89 44 24 04          	mov    %eax,0x4(%esp)
c0117298:	c7 04 24 fc 67 12 c0 	movl   $0xc01267fc,(%esp)
c011729f:	e8 4f 91 fe ff       	call   c01003f3 <cprintf>
        initproc->pid,std[initproc->state],initproc->name,initproc->time_slice,initproc->runs);

    assert(idleproc != NULL && idleproc->pid == 0);
c01172a4:	a1 60 e0 16 c0       	mov    0xc016e060,%eax
c01172a9:	85 c0                	test   %eax,%eax
c01172ab:	74 0c                	je     c01172b9 <proc_init+0x27b>
c01172ad:	a1 60 e0 16 c0       	mov    0xc016e060,%eax
c01172b2:	8b 40 04             	mov    0x4(%eax),%eax
c01172b5:	85 c0                	test   %eax,%eax
c01172b7:	74 24                	je     c01172dd <proc_init+0x29f>
c01172b9:	c7 44 24 0c a4 6c 12 	movl   $0xc0126ca4,0xc(%esp)
c01172c0:	c0 
c01172c1:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c01172c8:	c0 
c01172c9:	c7 44 24 04 48 04 00 	movl   $0x448,0x4(%esp)
c01172d0:	00 
c01172d1:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c01172d8:	e8 39 9f fe ff       	call   c0101216 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c01172dd:	a1 64 e0 16 c0       	mov    0xc016e064,%eax
c01172e2:	85 c0                	test   %eax,%eax
c01172e4:	74 0d                	je     c01172f3 <proc_init+0x2b5>
c01172e6:	a1 64 e0 16 c0       	mov    0xc016e064,%eax
c01172eb:	8b 40 04             	mov    0x4(%eax),%eax
c01172ee:	83 f8 01             	cmp    $0x1,%eax
c01172f1:	74 24                	je     c0117317 <proc_init+0x2d9>
c01172f3:	c7 44 24 0c cc 6c 12 	movl   $0xc0126ccc,0xc(%esp)
c01172fa:	c0 
c01172fb:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c0117302:	c0 
c0117303:	c7 44 24 04 49 04 00 	movl   $0x449,0x4(%esp)
c011730a:	00 
c011730b:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0117312:	e8 ff 9e fe ff       	call   c0101216 <__panic>
}
c0117317:	83 c4 40             	add    $0x40,%esp
c011731a:	5b                   	pop    %ebx
c011731b:	5e                   	pop    %esi
c011731c:	5d                   	pop    %ebp
c011731d:	c3                   	ret    

c011731e <cpu_idle>:
// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c011731e:	55                   	push   %ebp
c011731f:	89 e5                	mov    %esp,%ebp
c0117321:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c0117324:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0117329:	8b 40 10             	mov    0x10(%eax),%eax
c011732c:	85 c0                	test   %eax,%eax
c011732e:	74 07                	je     c0117337 <cpu_idle+0x19>
            schedule();
c0117330:	e8 71 10 00 00       	call   c01183a6 <schedule>
        }
    }
c0117335:	eb ed                	jmp    c0117324 <cpu_idle+0x6>
c0117337:	eb eb                	jmp    c0117324 <cpu_idle+0x6>

c0117339 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c0117339:	55                   	push   %ebp
c011733a:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c011733c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0117340:	75 11                	jne    c0117353 <lab6_set_priority+0x1a>
        current->priority = 1;
c0117342:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0117347:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c011734e:	00 00 00 
c0117351:	eb 0e                	jmp    c0117361 <lab6_set_priority+0x28>
    else current->priority = priority;
c0117353:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0117358:	8b 55 08             	mov    0x8(%ebp),%edx
c011735b:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c0117361:	5d                   	pop    %ebp
c0117362:	c3                   	ret    

c0117363 <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c0117363:	55                   	push   %ebp
c0117364:	89 e5                	mov    %esp,%ebp
c0117366:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c0117369:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011736d:	75 07                	jne    c0117376 <do_sleep+0x13>
        return 0;
c011736f:	b8 00 00 00 00       	mov    $0x0,%eax
c0117374:	eb 6b                	jmp    c01173e1 <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c0117376:	e8 1c db ff ff       	call   c0114e97 <__intr_save>
c011737b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c011737e:	8b 55 08             	mov    0x8(%ebp),%edx
c0117381:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0117386:	89 54 24 08          	mov    %edx,0x8(%esp)
c011738a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011738e:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0117391:	89 04 24             	mov    %eax,(%esp)
c0117394:	e8 c5 da ff ff       	call   c0114e5e <timer_init>
c0117399:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c011739c:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01173a1:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c01173a7:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01173ac:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c01173b3:	00 00 80 
    add_timer(timer);
c01173b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01173b9:	89 04 24             	mov    %eax,(%esp)
c01173bc:	e8 70 10 00 00       	call   c0118431 <add_timer>
    local_intr_restore(intr_flag);
c01173c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01173c4:	89 04 24             	mov    %eax,(%esp)
c01173c7:	e8 f5 da ff ff       	call   c0114ec1 <__intr_restore>

    schedule();
c01173cc:	e8 d5 0f 00 00       	call   c01183a6 <schedule>

    del_timer(timer);
c01173d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01173d4:	89 04 24             	mov    %eax,(%esp)
c01173d7:	e8 93 11 00 00       	call   c011856f <del_timer>
    return 0;
c01173dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01173e1:	c9                   	leave  
c01173e2:	c3                   	ret    

c01173e3 <do_malloc>:

int
do_malloc(int n){
c01173e3:	55                   	push   %ebp
c01173e4:	89 e5                	mov    %esp,%ebp
c01173e6:	83 ec 58             	sub    $0x58,%esp
    struct mm_struct *mm = current->mm;
c01173e9:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01173ee:	8b 40 18             	mov    0x18(%eax),%eax
c01173f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(mm != NULL);
c01173f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01173f8:	75 24                	jne    c011741e <do_malloc+0x3b>
c01173fa:	c7 44 24 0c f3 6c 12 	movl   $0xc0126cf3,0xc(%esp)
c0117401:	c0 
c0117402:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c0117409:	c0 
c011740a:	c7 44 24 04 76 04 00 	movl   $0x476,0x4(%esp)
c0117411:	00 
c0117412:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0117419:	e8 f8 9d fe ff       	call   c0101216 <__panic>

    //(4K 1页的话，如果要求4K,相当于多分配一页，页数就是alloc_size
    int alloc_size = n/(PGSIZE);
c011741e:	8b 45 08             	mov    0x8(%ebp),%eax
c0117421:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0117427:	85 c0                	test   %eax,%eax
c0117429:	0f 48 c2             	cmovs  %edx,%eax
c011742c:	c1 f8 0c             	sar    $0xc,%eax
c011742f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(!n%(PGSIZE)){
c0117432:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0117436:	75 04                	jne    c011743c <do_malloc+0x59>
    	alloc_size += 1;
c0117438:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    }

    //就是再往mmap_list里面添加几个vma_struct 就行, 如果最小分配单位是Page
    list_entry_t *le = &(mm->mmap_list);
c011743c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011743f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    print_current_vm();
c0117442:	e8 53 02 00 00       	call   c011769a <print_current_vm>
c0117447:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011744a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c011744d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0117450:	8b 00                	mov    (%eax),%eax



    le = list_prev(le);
c0117452:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct vma_struct *next_vma = le2vma(le, list_link);
c0117455:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0117458:	83 e8 14             	sub    $0x14,%eax
c011745b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011745e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0117461:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0117464:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0117467:	8b 00                	mov    (%eax),%eax
    le = list_prev(le);
c0117469:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct vma_struct *last_vma = le2vma(le, list_link);
c011746c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011746f:	83 e8 14             	sub    $0x14,%eax
c0117472:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    uintptr_t start = last_vma->vm_end + 0x1;
c0117475:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0117478:	8b 40 08             	mov    0x8(%eax),%eax
c011747b:	83 c0 01             	add    $0x1,%eax
c011747e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uintptr_t end = start + alloc_size * PGSIZE;
c0117481:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0117484:	c1 e0 0c             	shl    $0xc,%eax
c0117487:	89 c2                	mov    %eax,%edx
c0117489:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011748c:	01 d0                	add    %edx,%eax
c011748e:	89 45 dc             	mov    %eax,-0x24(%ebp)

    uint32_t new_flags = last_vma->vm_flags;
c0117491:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0117494:	8b 40 0c             	mov    0xc(%eax),%eax
c0117497:	89 45 d8             	mov    %eax,-0x28(%ebp)

    start = ROUNDDOWN(start, PGSIZE), end = ROUNDUP(end, PGSIZE);
c011749a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011749d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01174a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01174a3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01174a8:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01174ab:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
c01174b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01174b5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01174b8:	01 d0                	add    %edx,%eax
c01174ba:	83 e8 01             	sub    $0x1,%eax
c01174bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01174c0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01174c3:	ba 00 00 00 00       	mov    $0x0,%edx
c01174c8:	f7 75 d0             	divl   -0x30(%ebp)
c01174cb:	89 d0                	mov    %edx,%eax
c01174cd:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01174d0:	29 c2                	sub    %eax,%edx
c01174d2:	89 d0                	mov    %edx,%eax
c01174d4:	89 45 dc             	mov    %eax,-0x24(%ebp)

    if(start > last_vma->vm_end && end < next_vma->vm_start){
c01174d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01174da:	8b 40 08             	mov    0x8(%eax),%eax
c01174dd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01174e0:	73 12                	jae    c01174f4 <do_malloc+0x111>
c01174e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01174e5:	8b 40 04             	mov    0x4(%eax),%eax
c01174e8:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01174eb:	76 07                	jbe    c01174f4 <do_malloc+0x111>
	return -E_NO_MEM;
c01174ed:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01174f2:	eb 66                	jmp    c011755a <do_malloc+0x177>
    }

    if (!USER_ACCESS(start, end)) {
c01174f4:	81 7d e0 ff ff 1f 00 	cmpl   $0x1fffff,-0x20(%ebp)
c01174fb:	76 11                	jbe    c011750e <do_malloc+0x12b>
c01174fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0117500:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0117503:	73 09                	jae    c011750e <do_malloc+0x12b>
c0117505:	81 7d dc 00 00 00 b0 	cmpl   $0xb0000000,-0x24(%ebp)
c011750c:	76 07                	jbe    c0117515 <do_malloc+0x132>
        return -E_INVAL;
c011750e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0117513:	eb 45                	jmp    c011755a <do_malloc+0x177>
    }


    struct vma_struct *new_vma = vma_create(start, end, new_flags);
c0117515:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0117518:	89 44 24 08          	mov    %eax,0x8(%esp)
c011751c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011751f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0117523:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0117526:	89 04 24             	mov    %eax,(%esp)
c0117529:	e8 88 99 ff ff       	call   c0110eb6 <vma_create>
c011752e:	89 45 c8             	mov    %eax,-0x38(%ebp)
    if (new_vma == NULL) {
c0117531:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0117535:	75 07                	jne    c011753e <do_malloc+0x15b>
        return -E_NO_MEM;
c0117537:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c011753c:	eb 1c                	jmp    c011755a <do_malloc+0x177>
    }

    insert_vma_struct(mm, new_vma);
c011753e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0117541:	89 44 24 04          	mov    %eax,0x4(%esp)
c0117545:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0117548:	89 04 24             	mov    %eax,(%esp)
c011754b:	e8 0c 9b ff ff       	call   c011105c <insert_vma_struct>
    print_current_vm();
c0117550:	e8 45 01 00 00       	call   c011769a <print_current_vm>
    return 0;
c0117555:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011755a:	c9                   	leave  
c011755b:	c3                   	ret    

c011755c <print_listProc>:

void
print_listProc(void){
c011755c:	55                   	push   %ebp
c011755d:	89 e5                	mov    %esp,%ebp
c011755f:	56                   	push   %esi
c0117560:	53                   	push   %ebx
c0117561:	83 ec 50             	sub    $0x50,%esp
    char* std[4]={"PROC_UNINIT","PROC_SLEEPING","PROC_RUNNABLE","PROC_ZOMBIE"};
c0117564:	c7 45 c8 b5 67 12 c0 	movl   $0xc01267b5,-0x38(%ebp)
c011756b:	c7 45 cc c1 67 12 c0 	movl   $0xc01267c1,-0x34(%ebp)
c0117572:	c7 45 d0 cf 67 12 c0 	movl   $0xc01267cf,-0x30(%ebp)
c0117579:	c7 45 d4 dd 67 12 c0 	movl   $0xc01267dd,-0x2c(%ebp)
    cprintf("\n");
c0117580:	c7 04 24 fe 6c 12 c0 	movl   $0xc0126cfe,(%esp)
c0117587:	e8 67 8e fe ff       	call   c01003f3 <cprintf>
    list_entry_t *lec = &proc_list;
c011758c:	c7 45 f4 3c 13 17 c0 	movl   $0xc017133c,-0xc(%ebp)
    list_entry_t *pbc = &proc_list;
c0117593:	c7 45 ec 3c 13 17 c0 	movl   $0xc017133c,-0x14(%ebp)
    struct proc_struct* pbcw;
    while ((lec = list_next(lec)) != pbc){
c011759a:	e9 d9 00 00 00       	jmp    c0117678 <print_listProc+0x11c>
        pbcw = le2proc(lec, list_link);
c011759f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01175a2:	83 e8 7c             	sub    $0x7c,%eax
c01175a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
        list_entry_t *lem=&pbcw->mm->mmap_list;
c01175a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01175ab:	8b 40 18             	mov    0x18(%eax),%eax
c01175ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *pbm=&pbcw->mm->mmap_list;
c01175b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01175b4:	8b 40 18             	mov    0x18(%eax),%eax
c01175b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        struct vma_struct* pbmw;
        cprintf("pid:%d    state:%s    name:%s    time_slice:%d    runtime:%d\n",pbcw->pid,std[pbcw->state],pbcw->name,pbcw->time_slice,pbcw->runs);
c01175ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01175bd:	8b 58 08             	mov    0x8(%eax),%ebx
c01175c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01175c3:	8b 88 ac 00 00 00    	mov    0xac(%eax),%ecx
c01175c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01175cc:	8d 70 48             	lea    0x48(%eax),%esi
c01175cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01175d2:	8b 00                	mov    (%eax),%eax
c01175d4:	8b 54 85 c8          	mov    -0x38(%ebp,%eax,4),%edx
c01175d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01175db:	8b 40 04             	mov    0x4(%eax),%eax
c01175de:	89 5c 24 14          	mov    %ebx,0x14(%esp)
c01175e2:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01175e6:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01175ea:	89 54 24 08          	mov    %edx,0x8(%esp)
c01175ee:	89 44 24 04          	mov    %eax,0x4(%esp)
c01175f2:	c7 04 24 fc 67 12 c0 	movl   $0xc01267fc,(%esp)
c01175f9:	e8 f5 8d fe ff       	call   c01003f3 <cprintf>
        if(pbcw->pid!=1&&pbcw->state!=3){
c01175fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0117601:	8b 40 04             	mov    0x4(%eax),%eax
c0117604:	83 f8 01             	cmp    $0x1,%eax
c0117607:	74 63                	je     c011766c <print_listProc+0x110>
c0117609:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011760c:	8b 00                	mov    (%eax),%eax
c011760e:	83 f8 03             	cmp    $0x3,%eax
c0117611:	74 59                	je     c011766c <print_listProc+0x110>
            while((lem = list_next(lem)) != pbm){
c0117613:	eb 40                	jmp    c0117655 <print_listProc+0xf9>
		    pbmw=le2vma(lem,list_link);
c0117615:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0117618:	83 e8 14             	sub    $0x14,%eax
c011761b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		    cprintf("\t size:%x [ 0x%x - 0x%x ] \n",(pbmw->vm_end - pbmw->vm_start)/4096, pbmw->vm_start,pbmw->vm_end);
c011761e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0117621:	8b 50 08             	mov    0x8(%eax),%edx
c0117624:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0117627:	8b 40 04             	mov    0x4(%eax),%eax
c011762a:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c011762d:	8b 59 08             	mov    0x8(%ecx),%ebx
c0117630:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0117633:	8b 49 04             	mov    0x4(%ecx),%ecx
c0117636:	29 cb                	sub    %ecx,%ebx
c0117638:	89 d9                	mov    %ebx,%ecx
c011763a:	c1 e9 0c             	shr    $0xc,%ecx
c011763d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0117641:	89 44 24 08          	mov    %eax,0x8(%esp)
c0117645:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0117649:	c7 04 24 00 6d 12 c0 	movl   $0xc0126d00,(%esp)
c0117650:	e8 9e 8d fe ff       	call   c01003f3 <cprintf>
c0117655:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0117658:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c011765b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011765e:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *lem=&pbcw->mm->mmap_list;
        list_entry_t *pbm=&pbcw->mm->mmap_list;
        struct vma_struct* pbmw;
        cprintf("pid:%d    state:%s    name:%s    time_slice:%d    runtime:%d\n",pbcw->pid,std[pbcw->state],pbcw->name,pbcw->time_slice,pbcw->runs);
        if(pbcw->pid!=1&&pbcw->state!=3){
            while((lem = list_next(lem)) != pbm){
c0117661:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0117664:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0117667:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c011766a:	75 a9                	jne    c0117615 <print_listProc+0xb9>
		    pbmw=le2vma(lem,list_link);
		    cprintf("\t size:%x [ 0x%x - 0x%x ] \n",(pbmw->vm_end - pbmw->vm_start)/4096, pbmw->vm_start,pbmw->vm_end);
            }
        }            
        cprintf("\n");
c011766c:	c7 04 24 fe 6c 12 c0 	movl   $0xc0126cfe,(%esp)
c0117673:	e8 7b 8d fe ff       	call   c01003f3 <cprintf>
c0117678:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011767b:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011767e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0117681:	8b 40 04             	mov    0x4(%eax),%eax
    char* std[4]={"PROC_UNINIT","PROC_SLEEPING","PROC_RUNNABLE","PROC_ZOMBIE"};
    cprintf("\n");
    list_entry_t *lec = &proc_list;
    list_entry_t *pbc = &proc_list;
    struct proc_struct* pbcw;
    while ((lec = list_next(lec)) != pbc){
c0117684:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0117687:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011768a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c011768d:	0f 85 0c ff ff ff    	jne    c011759f <print_listProc+0x43>
            }
        }            
        cprintf("\n");
    }

}
c0117693:	83 c4 50             	add    $0x50,%esp
c0117696:	5b                   	pop    %ebx
c0117697:	5e                   	pop    %esi
c0117698:	5d                   	pop    %ebp
c0117699:	c3                   	ret    

c011769a <print_current_vm>:


void
print_current_vm(void){
c011769a:	55                   	push   %ebp
c011769b:	89 e5                	mov    %esp,%ebp
c011769d:	53                   	push   %ebx
c011769e:	83 ec 34             	sub    $0x34,%esp
    char* std[4]={"PROC_UNINIT","PROC_SLEEPING","PROC_RUNNABLE","PROC_ZOMBIE"};
c01176a1:	c7 45 d8 b5 67 12 c0 	movl   $0xc01267b5,-0x28(%ebp)
c01176a8:	c7 45 dc c1 67 12 c0 	movl   $0xc01267c1,-0x24(%ebp)
c01176af:	c7 45 e0 cf 67 12 c0 	movl   $0xc01267cf,-0x20(%ebp)
c01176b6:	c7 45 e4 dd 67 12 c0 	movl   $0xc01267dd,-0x1c(%ebp)
    cprintf("\n");
c01176bd:	c7 04 24 fe 6c 12 c0 	movl   $0xc0126cfe,(%esp)
c01176c4:	e8 2a 8d fe ff       	call   c01003f3 <cprintf>
	
    list_entry_t *le = &current->mm->mmap_list;
c01176c9:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01176ce:	8b 40 18             	mov    0x18(%eax),%eax
c01176d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *head = &current->mm->mmap_list;
c01176d4:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01176d9:	8b 40 18             	mov    0x18(%eax),%eax
c01176dc:	89 45 f0             	mov    %eax,-0x10(%ebp)

    struct vma_struct *vms;
    cprintf("%d :%s :\n",current->pid, std[current->state]);
c01176df:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01176e4:	8b 00                	mov    (%eax),%eax
c01176e6:	8b 54 85 d8          	mov    -0x28(%ebp,%eax,4),%edx
c01176ea:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01176ef:	8b 40 04             	mov    0x4(%eax),%eax
c01176f2:	89 54 24 08          	mov    %edx,0x8(%esp)
c01176f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01176fa:	c7 04 24 1c 6d 12 c0 	movl   $0xc0126d1c,(%esp)
c0117701:	e8 ed 8c fe ff       	call   c01003f3 <cprintf>
    
    while((le = list_next(le)) != head){
c0117706:	eb 40                	jmp    c0117748 <print_current_vm+0xae>
	vms = le2vma(le, list_link);
c0117708:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011770b:	83 e8 14             	sub    $0x14,%eax
c011770e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	cprintf("\t size:%x [ 0x%x - 0x%x ] \n",(vms->vm_end - vms->vm_start)/4096, vms->vm_start, vms->vm_end);
c0117711:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0117714:	8b 50 08             	mov    0x8(%eax),%edx
c0117717:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011771a:	8b 40 04             	mov    0x4(%eax),%eax
c011771d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0117720:	8b 59 08             	mov    0x8(%ecx),%ebx
c0117723:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0117726:	8b 49 04             	mov    0x4(%ecx),%ecx
c0117729:	29 cb                	sub    %ecx,%ebx
c011772b:	89 d9                	mov    %ebx,%ecx
c011772d:	c1 e9 0c             	shr    $0xc,%ecx
c0117730:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0117734:	89 44 24 08          	mov    %eax,0x8(%esp)
c0117738:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011773c:	c7 04 24 00 6d 12 c0 	movl   $0xc0126d00,(%esp)
c0117743:	e8 ab 8c fe ff       	call   c01003f3 <cprintf>
c0117748:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011774b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011774e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0117751:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *head = &current->mm->mmap_list;

    struct vma_struct *vms;
    cprintf("%d :%s :\n",current->pid, std[current->state]);
    
    while((le = list_next(le)) != head){
c0117754:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0117757:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011775a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011775d:	75 a9                	jne    c0117708 <print_current_vm+0x6e>
	vms = le2vma(le, list_link);
	cprintf("\t size:%x [ 0x%x - 0x%x ] \n",(vms->vm_end - vms->vm_start)/4096, vms->vm_start, vms->vm_end);
    }

    cprintf("\n");
c011775f:	c7 04 24 fe 6c 12 c0 	movl   $0xc0126cfe,(%esp)
c0117766:	e8 88 8c fe ff       	call   c01003f3 <cprintf>
}
c011776b:	83 c4 34             	add    $0x34,%esp
c011776e:	5b                   	pop    %ebx
c011776f:	5d                   	pop    %ebp
c0117770:	c3                   	ret    

c0117771 <do_mem>:


void do_mem(void){
c0117771:	55                   	push   %ebp
c0117772:	89 e5                	mov    %esp,%ebp
c0117774:	83 ec 58             	sub    $0x58,%esp
    cprintf("the amount of physical memory (in pages) : %d \n", npage);
c0117777:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c011777c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0117780:	c7 04 24 28 6d 12 c0 	movl   $0xc0126d28,(%esp)
c0117787:	e8 67 8c fe ff       	call   c01003f3 <cprintf>

    struct mm_struct *mm = current->mm;
c011778c:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0117791:	8b 40 18             	mov    0x18(%eax),%eax
c0117794:	89 45 e0             	mov    %eax,-0x20(%ebp)
    list_entry_t *head = &mm->mmap_list;
c0117797:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011779a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	uint32_t num_of_vp = 0;
c011779d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32_t num_of_pp = 0;
c01177a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &mm->mmap_list;
c01177ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01177ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //看一下虚拟地址对应的物理地址
    while((le = list_next(le)) != &(mm->mmap_list)){
c01177b1:	e9 fd 00 00 00       	jmp    c01178b3 <do_mem+0x142>
        struct vma_struct *temp_vma = le2vma(le, list_link);
c01177b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01177b9:	83 e8 14             	sub    $0x14,%eax
c01177bc:	89 45 d8             	mov    %eax,-0x28(%ebp)
        uintptr_t start_addr = temp_vma->vm_start;
c01177bf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01177c2:	8b 40 04             	mov    0x4(%eax),%eax
c01177c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
        uintptr_t end_addr = start_addr + PGSIZE;
c01177c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01177cb:	05 00 10 00 00       	add    $0x1000,%eax
c01177d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uintptr_t end_up = ROUNDUP(temp_vma->vm_end, PGSIZE);
c01177d3:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
c01177da:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01177dd:	8b 50 08             	mov    0x8(%eax),%edx
c01177e0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01177e3:	01 d0                	add    %edx,%eax
c01177e5:	83 e8 01             	sub    $0x1,%eax
c01177e8:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01177eb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01177ee:	ba 00 00 00 00       	mov    $0x0,%edx
c01177f3:	f7 75 d4             	divl   -0x2c(%ebp)
c01177f6:	89 d0                	mov    %edx,%eax
c01177f8:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01177fb:	29 c2                	sub    %eax,%edx
c01177fd:	89 d0                	mov    %edx,%eax
c01177ff:	89 45 cc             	mov    %eax,-0x34(%ebp)
	
	for(;end_addr <= end_up ; start_addr+=PGSIZE, end_addr+=PGSIZE, num_of_vp+=1){
c0117802:	e9 a0 00 00 00       	jmp    c01178a7 <do_mem+0x136>
	        pte_t *pes = get_pte(mm->pgdir ,start_addr, 0);
c0117807:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011780a:	8b 40 0c             	mov    0xc(%eax),%eax
c011780d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0117814:	00 
c0117815:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0117818:	89 54 24 04          	mov    %edx,0x4(%esp)
c011781c:	89 04 24             	mov    %eax,(%esp)
c011781f:	e8 7c 54 ff ff       	call   c010cca0 <get_pte>
c0117824:	89 45 c8             	mov    %eax,-0x38(%ebp)
        
		//PDX(start_addr) 该地址在页目录表中的索引， &pgdir[PDX(start_addr)] 页表地址

		uintptr_t phaddr = (*pes & ~0xFFF)  + (start_addr & 0xFFF);
c0117827:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011782a:	8b 00                	mov    (%eax),%eax
c011782c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0117831:	89 c2                	mov    %eax,%edx
c0117833:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0117836:	25 ff 0f 00 00       	and    $0xfff,%eax
c011783b:	01 d0                	add    %edx,%eax
c011783d:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		//前20位对应物理块号，怎么找物理地址

		assert(pes != NULL);
c0117840:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0117844:	75 24                	jne    c011786a <do_mem+0xf9>
c0117846:	c7 44 24 0c 58 6d 12 	movl   $0xc0126d58,0xc(%esp)
c011784d:	c0 
c011784e:	c7 44 24 08 87 67 12 	movl   $0xc0126787,0x8(%esp)
c0117855:	c0 
c0117856:	c7 44 24 04 e9 04 00 	movl   $0x4e9,0x4(%esp)
c011785d:	00 
c011785e:	c7 04 24 60 67 12 c0 	movl   $0xc0126760,(%esp)
c0117865:	e8 ac 99 fe ff       	call   c0101216 <__panic>
		if(phaddr != 0)
c011786a:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c011786e:	74 04                	je     c0117874 <do_mem+0x103>
			num_of_pp++;
c0117870:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
		cprintf("virtual address [ 0x%x - 0x%x ] ----> physical address [ 0x%x ] \n", start_addr, end_addr, phaddr);
c0117874:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0117877:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011787b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011787e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0117882:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0117885:	89 44 24 04          	mov    %eax,0x4(%esp)
c0117889:	c7 04 24 64 6d 12 c0 	movl   $0xc0126d64,(%esp)
c0117890:	e8 5e 8b fe ff       	call   c01003f3 <cprintf>
        struct vma_struct *temp_vma = le2vma(le, list_link);
        uintptr_t start_addr = temp_vma->vm_start;
        uintptr_t end_addr = start_addr + PGSIZE;
	uintptr_t end_up = ROUNDUP(temp_vma->vm_end, PGSIZE);
	
	for(;end_addr <= end_up ; start_addr+=PGSIZE, end_addr+=PGSIZE, num_of_vp+=1){
c0117895:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
c011789c:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
c01178a3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01178a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01178aa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c01178ad:	0f 86 54 ff ff ff    	jbe    c0117807 <do_mem+0x96>
c01178b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01178b6:	89 45 c0             	mov    %eax,-0x40(%ebp)
c01178b9:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01178bc:	8b 40 04             	mov    0x4(%eax),%eax

	uint32_t num_of_vp = 0;
	uint32_t num_of_pp = 0;
    list_entry_t *le = &mm->mmap_list;
    //看一下虚拟地址对应的物理地址
    while((le = list_next(le)) != &(mm->mmap_list)){
c01178bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01178c2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01178c5:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01178c8:	0f 85 e8 fe ff ff    	jne    c01177b6 <do_mem+0x45>
			num_of_pp++;
		cprintf("virtual address [ 0x%x - 0x%x ] ----> physical address [ 0x%x ] \n", start_addr, end_addr, phaddr);
	}
	
    }
    cprintf("num of virtual page for this process (in pages) : %d \n", num_of_vp);
c01178ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01178d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01178d5:	c7 04 24 a8 6d 12 c0 	movl   $0xc0126da8,(%esp)
c01178dc:	e8 12 8b fe ff       	call   c01003f3 <cprintf>
    cprintf("num of physical page for this prcess (in pages) : %d \n", num_of_pp);
c01178e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01178e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01178e8:	c7 04 24 e0 6d 12 c0 	movl   $0xc0126de0,(%esp)
c01178ef:	e8 ff 8a fe ff       	call   c01003f3 <cprintf>
}
c01178f4:	c9                   	leave  
c01178f5:	c3                   	ret    

c01178f6 <do_list_wait>:

void do_list_wait(void){
c01178f6:	55                   	push   %ebp
c01178f7:	89 e5                	mov    %esp,%ebp
c01178f9:	83 ec 28             	sub    $0x28,%esp
    list_entry_t *lec = &proc_list;
c01178fc:	c7 45 f4 3c 13 17 c0 	movl   $0xc017133c,-0xc(%ebp)
    list_entry_t *pbc = &proc_list;
c0117903:	c7 45 f0 3c 13 17 c0 	movl   $0xc017133c,-0x10(%ebp)
    struct proc_struct* pbcw;
    while ((lec = list_next(lec)) != pbc){
c011790a:	e9 b5 00 00 00       	jmp    c01179c4 <do_list_wait+0xce>
        cprintf("\n");
c011790f:	c7 04 24 fe 6c 12 c0 	movl   $0xc0126cfe,(%esp)
c0117916:	e8 d8 8a fe ff       	call   c01003f3 <cprintf>
        pbcw = le2proc(lec, list_link);
c011791b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011791e:	83 e8 7c             	sub    $0x7c,%eax
c0117921:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if(pbcw->wait_state==WT_KBD)
c0117924:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0117927:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c011792d:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c0117932:	75 18                	jne    c011794c <do_list_wait+0x56>
        {
            cprintf("%d process is waiting IO!",pbcw->pid);
c0117934:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0117937:	8b 40 04             	mov    0x4(%eax),%eax
c011793a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011793e:	c7 04 24 17 6e 12 c0 	movl   $0xc0126e17,(%esp)
c0117945:	e8 a9 8a fe ff       	call   c01003f3 <cprintf>
c011794a:	eb 78                	jmp    c01179c4 <do_list_wait+0xce>
        }
        else if(pbcw->wait_state==WT_TIMER)
c011794c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011794f:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0117955:	3d 02 00 00 80       	cmp    $0x80000002,%eax
c011795a:	75 18                	jne    c0117974 <do_list_wait+0x7e>
        {
            cprintf("%d process is waiting TIMER!",pbcw->pid);
c011795c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011795f:	8b 40 04             	mov    0x4(%eax),%eax
c0117962:	89 44 24 04          	mov    %eax,0x4(%esp)
c0117966:	c7 04 24 31 6e 12 c0 	movl   $0xc0126e31,(%esp)
c011796d:	e8 81 8a fe ff       	call   c01003f3 <cprintf>
c0117972:	eb 50                	jmp    c01179c4 <do_list_wait+0xce>
        }
        else if(pbcw->wait_state==WT_CHILD)
c0117974:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0117977:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c011797d:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c0117982:	75 18                	jne    c011799c <do_list_wait+0xa6>
        {
            cprintf("%d process is waiting CHILD!",pbcw->pid);
c0117984:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0117987:	8b 40 04             	mov    0x4(%eax),%eax
c011798a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011798e:	c7 04 24 4e 6e 12 c0 	movl   $0xc0126e4e,(%esp)
c0117995:	e8 59 8a fe ff       	call   c01003f3 <cprintf>
c011799a:	eb 28                	jmp    c01179c4 <do_list_wait+0xce>
        }
        else if(pbcw->pid != current->pid)
c011799c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011799f:	8b 50 04             	mov    0x4(%eax),%edx
c01179a2:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01179a7:	8b 40 04             	mov    0x4(%eax),%eax
c01179aa:	39 c2                	cmp    %eax,%edx
c01179ac:	74 16                	je     c01179c4 <do_list_wait+0xce>
        {
            cprintf("%d process is waiting CPU!",pbcw->pid);
c01179ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01179b1:	8b 40 04             	mov    0x4(%eax),%eax
c01179b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01179b8:	c7 04 24 6b 6e 12 c0 	movl   $0xc0126e6b,(%esp)
c01179bf:	e8 2f 8a fe ff       	call   c01003f3 <cprintf>
c01179c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01179c7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01179ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01179cd:	8b 40 04             	mov    0x4(%eax),%eax

void do_list_wait(void){
    list_entry_t *lec = &proc_list;
    list_entry_t *pbc = &proc_list;
    struct proc_struct* pbcw;
    while ((lec = list_next(lec)) != pbc){
c01179d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01179d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01179d6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01179d9:	0f 85 30 ff ff ff    	jne    c011790f <do_list_wait+0x19>
        else if(pbcw->pid != current->pid)
        {
            cprintf("%d process is waiting CPU!",pbcw->pid);
        }
    }
    cprintf("\n-----------------\n");
c01179df:	c7 04 24 86 6e 12 c0 	movl   $0xc0126e86,(%esp)
c01179e6:	e8 08 8a fe ff       	call   c01003f3 <cprintf>
}
c01179eb:	c9                   	leave  
c01179ec:	c3                   	ret    

c01179ed <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c01179ed:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c01179f1:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c01179f3:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c01179f6:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c01179f9:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c01179fc:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c01179ff:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c0117a02:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c0117a05:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c0117a08:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c0117a0c:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c0117a0f:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c0117a12:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c0117a15:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c0117a18:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c0117a1b:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c0117a1e:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c0117a21:	ff 30                	pushl  (%eax)

    ret
c0117a23:	c3                   	ret    

c0117a24 <FCFS_init>:
#include <proc.h>
#include <assert.h>
#include <fcfs_sched.h>

static void
FCFS_init(struct run_queue *rq) {
c0117a24:	55                   	push   %ebp
c0117a25:	89 e5                	mov    %esp,%ebp
c0117a27:	83 ec 10             	sub    $0x10,%esp
    list_init(&(rq->run_list));
c0117a2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0117a2d:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0117a30:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0117a33:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0117a36:	89 50 04             	mov    %edx,0x4(%eax)
c0117a39:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0117a3c:	8b 50 04             	mov    0x4(%eax),%edx
c0117a3f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0117a42:	89 10                	mov    %edx,(%eax)
    rq->proc_num = 0;
c0117a44:	8b 45 08             	mov    0x8(%ebp),%eax
c0117a47:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c0117a4e:	c9                   	leave  
c0117a4f:	c3                   	ret    

c0117a50 <FCFS_enqueue>:

static void
FCFS_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c0117a50:	55                   	push   %ebp
c0117a51:	89 e5                	mov    %esp,%ebp
c0117a53:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(proc->run_link)));
c0117a56:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117a59:	05 a4 00 00 00       	add    $0xa4,%eax
c0117a5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0117a61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0117a64:	8b 40 04             	mov    0x4(%eax),%eax
c0117a67:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0117a6a:	0f 94 c0             	sete   %al
c0117a6d:	0f b6 c0             	movzbl %al,%eax
c0117a70:	85 c0                	test   %eax,%eax
c0117a72:	75 24                	jne    c0117a98 <FCFS_enqueue+0x48>
c0117a74:	c7 44 24 0c 9c 6e 12 	movl   $0xc0126e9c,0xc(%esp)
c0117a7b:	c0 
c0117a7c:	c7 44 24 08 ba 6e 12 	movl   $0xc0126eba,0x8(%esp)
c0117a83:	c0 
c0117a84:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
c0117a8b:	00 
c0117a8c:	c7 04 24 cf 6e 12 c0 	movl   $0xc0126ecf,(%esp)
c0117a93:	e8 7e 97 fe ff       	call   c0101216 <__panic>
    list_add_before(&(rq->run_list), &(proc->run_link));
c0117a98:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117a9b:	8d 90 a4 00 00 00    	lea    0xa4(%eax),%edx
c0117aa1:	8b 45 08             	mov    0x8(%ebp),%eax
c0117aa4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0117aa7:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0117aaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0117aad:	8b 00                	mov    (%eax),%eax
c0117aaf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0117ab2:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0117ab5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0117ab8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0117abb:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0117abe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0117ac1:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0117ac4:	89 10                	mov    %edx,(%eax)
c0117ac6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0117ac9:	8b 10                	mov    (%eax),%edx
c0117acb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0117ace:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0117ad1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0117ad4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0117ad7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0117ada:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0117add:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0117ae0:	89 10                	mov    %edx,(%eax)
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c0117ae2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117ae5:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c0117aeb:	85 c0                	test   %eax,%eax
c0117aed:	74 13                	je     c0117b02 <FCFS_enqueue+0xb2>
c0117aef:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117af2:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c0117af8:	8b 45 08             	mov    0x8(%ebp),%eax
c0117afb:	8b 40 0c             	mov    0xc(%eax),%eax
c0117afe:	39 c2                	cmp    %eax,%edx
c0117b00:	7e 0f                	jle    c0117b11 <FCFS_enqueue+0xc1>
        proc->time_slice = rq->max_time_slice;
c0117b02:	8b 45 08             	mov    0x8(%ebp),%eax
c0117b05:	8b 50 0c             	mov    0xc(%eax),%edx
c0117b08:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117b0b:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    proc->rq = rq;
c0117b11:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117b14:	8b 55 08             	mov    0x8(%ebp),%edx
c0117b17:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    rq->proc_num ++;
c0117b1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0117b20:	8b 40 08             	mov    0x8(%eax),%eax
c0117b23:	8d 50 01             	lea    0x1(%eax),%edx
c0117b26:	8b 45 08             	mov    0x8(%ebp),%eax
c0117b29:	89 50 08             	mov    %edx,0x8(%eax)
}
c0117b2c:	c9                   	leave  
c0117b2d:	c3                   	ret    

c0117b2e <FCFS_dequeue>:

static void
FCFS_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c0117b2e:	55                   	push   %ebp
c0117b2f:	89 e5                	mov    %esp,%ebp
c0117b31:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
c0117b34:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117b37:	05 a4 00 00 00       	add    $0xa4,%eax
c0117b3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0117b3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0117b42:	8b 40 04             	mov    0x4(%eax),%eax
c0117b45:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0117b48:	0f 94 c0             	sete   %al
c0117b4b:	0f b6 c0             	movzbl %al,%eax
c0117b4e:	85 c0                	test   %eax,%eax
c0117b50:	75 0e                	jne    c0117b60 <FCFS_dequeue+0x32>
c0117b52:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117b55:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
c0117b5b:	3b 45 08             	cmp    0x8(%ebp),%eax
c0117b5e:	74 24                	je     c0117b84 <FCFS_dequeue+0x56>
c0117b60:	c7 44 24 0c ec 6e 12 	movl   $0xc0126eec,0xc(%esp)
c0117b67:	c0 
c0117b68:	c7 44 24 08 ba 6e 12 	movl   $0xc0126eba,0x8(%esp)
c0117b6f:	c0 
c0117b70:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c0117b77:	00 
c0117b78:	c7 04 24 cf 6e 12 c0 	movl   $0xc0126ecf,(%esp)
c0117b7f:	e8 92 96 fe ff       	call   c0101216 <__panic>
    list_del_init(&(proc->run_link));
c0117b84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117b87:	05 a4 00 00 00       	add    $0xa4,%eax
c0117b8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0117b8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0117b92:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0117b95:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0117b98:	8b 40 04             	mov    0x4(%eax),%eax
c0117b9b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0117b9e:	8b 12                	mov    (%edx),%edx
c0117ba0:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0117ba3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0117ba6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0117ba9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0117bac:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0117baf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0117bb2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0117bb5:	89 10                	mov    %edx,(%eax)
c0117bb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0117bba:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0117bbd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0117bc0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0117bc3:	89 50 04             	mov    %edx,0x4(%eax)
c0117bc6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0117bc9:	8b 50 04             	mov    0x4(%eax),%edx
c0117bcc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0117bcf:	89 10                	mov    %edx,(%eax)
    rq->proc_num --;
c0117bd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0117bd4:	8b 40 08             	mov    0x8(%eax),%eax
c0117bd7:	8d 50 ff             	lea    -0x1(%eax),%edx
c0117bda:	8b 45 08             	mov    0x8(%ebp),%eax
c0117bdd:	89 50 08             	mov    %edx,0x8(%eax)
}
c0117be0:	c9                   	leave  
c0117be1:	c3                   	ret    

c0117be2 <FCFS_pick_next>:

static struct proc_struct *
FCFS_pick_next(struct run_queue *rq) {
c0117be2:	55                   	push   %ebp
c0117be3:	89 e5                	mov    %esp,%ebp
c0117be5:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(rq->run_list));
c0117be8:	8b 45 08             	mov    0x8(%ebp),%eax
c0117beb:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0117bee:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0117bf1:	8b 40 04             	mov    0x4(%eax),%eax
c0117bf4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(rq->run_list)) {
c0117bf7:	8b 45 08             	mov    0x8(%ebp),%eax
c0117bfa:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0117bfd:	74 0a                	je     c0117c09 <FCFS_pick_next+0x27>
        return le2proc(le, run_link);
c0117bff:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0117c02:	2d a4 00 00 00       	sub    $0xa4,%eax
c0117c07:	eb 05                	jmp    c0117c0e <FCFS_pick_next+0x2c>
    }
    return NULL;
c0117c09:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0117c0e:	c9                   	leave  
c0117c0f:	c3                   	ret    

c0117c10 <FCFS_proc_tick>:

static void
FCFS_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c0117c10:	55                   	push   %ebp
c0117c11:	89 e5                	mov    %esp,%ebp
    //     proc->time_slice --;
    // }
    // if (proc->time_slice == 0) {
    //     proc->need_resched = 1;
    // }
}
c0117c13:	5d                   	pop    %ebp
c0117c14:	c3                   	ret    

c0117c15 <FCFS_user_check>:

static int
FCFS_user_check(void){
c0117c15:	55                   	push   %ebp
c0117c16:	89 e5                	mov    %esp,%ebp
	return 0;
c0117c18:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0117c1d:	5d                   	pop    %ebp
c0117c1e:	c3                   	ret    

c0117c1f <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c0117c1f:	55                   	push   %ebp
c0117c20:	89 e5                	mov    %esp,%ebp
c0117c22:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c0117c25:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0117c29:	75 08                	jne    c0117c33 <skew_heap_merge+0x14>
c0117c2b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117c2e:	e9 bd 00 00 00       	jmp    c0117cf0 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c0117c33:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0117c37:	75 08                	jne    c0117c41 <skew_heap_merge+0x22>
c0117c39:	8b 45 08             	mov    0x8(%ebp),%eax
c0117c3c:	e9 af 00 00 00       	jmp    c0117cf0 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c0117c41:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117c44:	89 44 24 04          	mov    %eax,0x4(%esp)
c0117c48:	8b 45 08             	mov    0x8(%ebp),%eax
c0117c4b:	89 04 24             	mov    %eax,(%esp)
c0117c4e:	8b 45 10             	mov    0x10(%ebp),%eax
c0117c51:	ff d0                	call   *%eax
c0117c53:	83 f8 ff             	cmp    $0xffffffff,%eax
c0117c56:	75 4d                	jne    c0117ca5 <skew_heap_merge+0x86>
     {
          r = a->left;
c0117c58:	8b 45 08             	mov    0x8(%ebp),%eax
c0117c5b:	8b 40 04             	mov    0x4(%eax),%eax
c0117c5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c0117c61:	8b 45 08             	mov    0x8(%ebp),%eax
c0117c64:	8b 40 08             	mov    0x8(%eax),%eax
c0117c67:	8b 55 10             	mov    0x10(%ebp),%edx
c0117c6a:	89 54 24 08          	mov    %edx,0x8(%esp)
c0117c6e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0117c71:	89 54 24 04          	mov    %edx,0x4(%esp)
c0117c75:	89 04 24             	mov    %eax,(%esp)
c0117c78:	e8 a2 ff ff ff       	call   c0117c1f <skew_heap_merge>
c0117c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c0117c80:	8b 45 08             	mov    0x8(%ebp),%eax
c0117c83:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0117c86:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c0117c89:	8b 45 08             	mov    0x8(%ebp),%eax
c0117c8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0117c8f:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c0117c92:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0117c96:	74 08                	je     c0117ca0 <skew_heap_merge+0x81>
c0117c98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0117c9b:	8b 55 08             	mov    0x8(%ebp),%edx
c0117c9e:	89 10                	mov    %edx,(%eax)

          return a;
c0117ca0:	8b 45 08             	mov    0x8(%ebp),%eax
c0117ca3:	eb 4b                	jmp    c0117cf0 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c0117ca5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117ca8:	8b 40 04             	mov    0x4(%eax),%eax
c0117cab:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c0117cae:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117cb1:	8b 40 08             	mov    0x8(%eax),%eax
c0117cb4:	8b 55 10             	mov    0x10(%ebp),%edx
c0117cb7:	89 54 24 08          	mov    %edx,0x8(%esp)
c0117cbb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0117cbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0117cc2:	89 04 24             	mov    %eax,(%esp)
c0117cc5:	e8 55 ff ff ff       	call   c0117c1f <skew_heap_merge>
c0117cca:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c0117ccd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117cd0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0117cd3:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c0117cd6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117cd9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0117cdc:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c0117cdf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0117ce3:	74 08                	je     c0117ced <skew_heap_merge+0xce>
c0117ce5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0117ce8:	8b 55 0c             	mov    0xc(%ebp),%edx
c0117ceb:	89 10                	mov    %edx,(%eax)

          return b;
c0117ced:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c0117cf0:	c9                   	leave  
c0117cf1:	c3                   	ret    

c0117cf2 <proc_prior_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_prior_comp_f(void *a, void *b)
{
c0117cf2:	55                   	push   %ebp
c0117cf3:	89 e5                	mov    %esp,%ebp
c0117cf5:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c0117cf8:	8b 45 08             	mov    0x8(%ebp),%eax
c0117cfb:	2d b0 00 00 00       	sub    $0xb0,%eax
c0117d00:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c0117d03:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117d06:	2d b0 00 00 00       	sub    $0xb0,%eax
c0117d0b:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->priority - q->priority;
c0117d0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0117d11:	8b 90 c0 00 00 00    	mov    0xc0(%eax),%edx
c0117d17:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0117d1a:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c0117d20:	29 c2                	sub    %eax,%edx
c0117d22:	89 d0                	mov    %edx,%eax
c0117d24:	89 45 f4             	mov    %eax,-0xc(%ebp)

     if (c > 0) return 1;
c0117d27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0117d2b:	7e 07                	jle    c0117d34 <proc_prior_comp_f+0x42>
c0117d2d:	b8 01 00 00 00       	mov    $0x1,%eax
c0117d32:	eb 12                	jmp    c0117d46 <proc_prior_comp_f+0x54>
     else if (c == 0) return 0;
c0117d34:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0117d38:	75 07                	jne    c0117d41 <proc_prior_comp_f+0x4f>
c0117d3a:	b8 00 00 00 00       	mov    $0x0,%eax
c0117d3f:	eb 05                	jmp    c0117d46 <proc_prior_comp_f+0x54>
     else return -1;
c0117d41:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c0117d46:	c9                   	leave  
c0117d47:	c3                   	ret    

c0117d48 <prior_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see proj13.1/libs/list.h for routines of the list structures.
 */
static void
prior_init(struct run_queue *rq) {
c0117d48:	55                   	push   %ebp
c0117d49:	89 e5                	mov    %esp,%ebp
c0117d4b:	83 ec 10             	sub    $0x10,%esp

     list_init(&(rq->run_list));
c0117d4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0117d51:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0117d54:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0117d57:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0117d5a:	89 50 04             	mov    %edx,0x4(%eax)
c0117d5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0117d60:	8b 50 04             	mov    0x4(%eax),%edx
c0117d63:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0117d66:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c0117d68:	8b 45 08             	mov    0x8(%ebp),%eax
c0117d6b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c0117d72:	8b 45 08             	mov    0x8(%ebp),%eax
c0117d75:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c0117d7c:	c9                   	leave  
c0117d7d:	c3                   	ret    

c0117d7e <prior_enqueue>:
 * 
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
prior_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c0117d7e:	55                   	push   %ebp
c0117d7f:	89 e5                	mov    %esp,%ebp
c0117d81:	83 ec 28             	sub    $0x28,%esp

#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_prior_comp_f);
c0117d84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117d87:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c0117d8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0117d90:	8b 40 10             	mov    0x10(%eax),%eax
c0117d93:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0117d96:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0117d99:	c7 45 ec f2 7c 11 c0 	movl   $0xc0117cf2,-0x14(%ebp)
c0117da0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0117da3:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c0117da6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0117da9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0117daf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0117db2:	8b 10                	mov    (%eax),%edx
c0117db4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0117db7:	89 50 08             	mov    %edx,0x8(%eax)
c0117dba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0117dbd:	8b 50 08             	mov    0x8(%eax),%edx
c0117dc0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0117dc3:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c0117dc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0117dc9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0117dcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0117dd0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0117dd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0117dd7:	89 04 24             	mov    %eax,(%esp)
c0117dda:	e8 40 fe ff ff       	call   c0117c1f <skew_heap_merge>
c0117ddf:	89 c2                	mov    %eax,%edx
 */
static void
prior_enqueue(struct run_queue *rq, struct proc_struct *proc) {

#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c0117de1:	8b 45 08             	mov    0x8(%ebp),%eax
c0117de4:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_prior_comp_f);
#else
     assert(list_empty(&(proc->run_link)));
     list_add_before(&(rq->run_list), &(proc->run_link));
#endif
     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c0117de7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117dea:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c0117df0:	85 c0                	test   %eax,%eax
c0117df2:	74 13                	je     c0117e07 <prior_enqueue+0x89>
c0117df4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117df7:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c0117dfd:	8b 45 08             	mov    0x8(%ebp),%eax
c0117e00:	8b 40 0c             	mov    0xc(%eax),%eax
c0117e03:	39 c2                	cmp    %eax,%edx
c0117e05:	7e 0f                	jle    c0117e16 <prior_enqueue+0x98>
          proc->time_slice = rq->max_time_slice;
c0117e07:	8b 45 08             	mov    0x8(%ebp),%eax
c0117e0a:	8b 50 0c             	mov    0xc(%eax),%edx
c0117e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117e10:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     proc->rq = rq;
c0117e16:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117e19:	8b 55 08             	mov    0x8(%ebp),%edx
c0117e1c:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
     rq->proc_num ++;
c0117e22:	8b 45 08             	mov    0x8(%ebp),%eax
c0117e25:	8b 40 08             	mov    0x8(%eax),%eax
c0117e28:	8d 50 01             	lea    0x1(%eax),%edx
c0117e2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0117e2e:	89 50 08             	mov    %edx,0x8(%eax)
}
c0117e31:	c9                   	leave  
c0117e32:	c3                   	ret    

c0117e33 <prior_dequeue>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
prior_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c0117e33:	55                   	push   %ebp
c0117e34:	89 e5                	mov    %esp,%ebp
c0117e36:	83 ec 38             	sub    $0x38,%esp

#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_prior_comp_f);
c0117e39:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117e3c:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c0117e42:	8b 45 08             	mov    0x8(%ebp),%eax
c0117e45:	8b 40 10             	mov    0x10(%eax),%eax
c0117e48:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0117e4b:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0117e4e:	c7 45 ec f2 7c 11 c0 	movl   $0xc0117cf2,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c0117e55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0117e58:	8b 00                	mov    (%eax),%eax
c0117e5a:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c0117e5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0117e60:	8b 50 08             	mov    0x8(%eax),%edx
c0117e63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0117e66:	8b 40 04             	mov    0x4(%eax),%eax
c0117e69:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0117e6c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0117e70:	89 54 24 04          	mov    %edx,0x4(%esp)
c0117e74:	89 04 24             	mov    %eax,(%esp)
c0117e77:	e8 a3 fd ff ff       	call   c0117c1f <skew_heap_merge>
c0117e7c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c0117e7f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0117e83:	74 08                	je     c0117e8d <prior_dequeue+0x5a>
c0117e85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0117e88:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0117e8b:	89 10                	mov    %edx,(%eax)
     
     if (p)
c0117e8d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0117e91:	74 24                	je     c0117eb7 <prior_dequeue+0x84>
     {
          if (p->left == b)
c0117e93:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0117e96:	8b 40 04             	mov    0x4(%eax),%eax
c0117e99:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0117e9c:	75 0b                	jne    c0117ea9 <prior_dequeue+0x76>
               p->left = rep;
c0117e9e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0117ea1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0117ea4:	89 50 04             	mov    %edx,0x4(%eax)
c0117ea7:	eb 09                	jmp    c0117eb2 <prior_dequeue+0x7f>
          else p->right = rep;
c0117ea9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0117eac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0117eaf:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c0117eb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0117eb5:	eb 03                	jmp    c0117eba <prior_dequeue+0x87>
     }
     else return rep;
c0117eb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0117eba:	89 c2                	mov    %eax,%edx
 */
static void
prior_dequeue(struct run_queue *rq, struct proc_struct *proc) {

#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c0117ebc:	8b 45 08             	mov    0x8(%ebp),%eax
c0117ebf:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_prior_comp_f);
#else
     assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
     list_del_init(&(proc->run_link));
#endif
     rq->proc_num --;
c0117ec2:	8b 45 08             	mov    0x8(%ebp),%eax
c0117ec5:	8b 40 08             	mov    0x8(%eax),%eax
c0117ec8:	8d 50 ff             	lea    -0x1(%eax),%edx
c0117ecb:	8b 45 08             	mov    0x8(%ebp),%eax
c0117ece:	89 50 08             	mov    %edx,0x8(%eax)
}
c0117ed1:	c9                   	leave  
c0117ed2:	c3                   	ret    

c0117ed3 <prior_pick_next>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
prior_pick_next(struct run_queue *rq) {
c0117ed3:	55                   	push   %ebp
c0117ed4:	89 e5                	mov    %esp,%ebp
c0117ed6:	83 ec 28             	sub    $0x28,%esp

#if USE_SKEW_HEAP
     if (rq->lab6_run_pool == NULL) return NULL;
c0117ed9:	8b 45 08             	mov    0x8(%ebp),%eax
c0117edc:	8b 40 10             	mov    0x10(%eax),%eax
c0117edf:	85 c0                	test   %eax,%eax
c0117ee1:	75 0a                	jne    c0117eed <prior_pick_next+0x1a>
c0117ee3:	b8 00 00 00 00       	mov    $0x0,%eax
c0117ee8:	e9 81 00 00 00       	jmp    c0117f6e <prior_pick_next+0x9b>
     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c0117eed:	8b 45 08             	mov    0x8(%ebp),%eax
c0117ef0:	8b 40 10             	mov    0x10(%eax),%eax
c0117ef3:	2d b0 00 00 00       	sub    $0xb0,%eax
c0117ef8:	89 45 f4             	mov    %eax,-0xc(%ebp)
          if ((int32_t)(p->lab6_prior - q->lab6_prior) > 0)
               p = q;
          le = list_next(le);
     }
#endif
     if(p->pid !=2 && p->pid!=1)
c0117efb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0117efe:	8b 40 04             	mov    0x4(%eax),%eax
c0117f01:	83 f8 02             	cmp    $0x2,%eax
c0117f04:	74 53                	je     c0117f59 <prior_pick_next+0x86>
c0117f06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0117f09:	8b 40 04             	mov    0x4(%eax),%eax
c0117f0c:	83 f8 01             	cmp    $0x1,%eax
c0117f0f:	74 48                	je     c0117f59 <prior_pick_next+0x86>
	{
		if(p->priority == 0){
c0117f11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0117f14:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c0117f1a:	85 c0                	test   %eax,%eax
c0117f1c:	75 18                	jne    c0117f36 <prior_pick_next+0x63>
			cprintf("\nproc %d is setting prior\n", p->pid);		
c0117f1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0117f21:	8b 40 04             	mov    0x4(%eax),%eax
c0117f24:	89 44 24 04          	mov    %eax,0x4(%esp)
c0117f28:	c7 04 24 2c 6f 12 c0 	movl   $0xc0126f2c,(%esp)
c0117f2f:	e8 bf 84 fe ff       	call   c01003f3 <cprintf>
c0117f34:	eb 23                	jmp    c0117f59 <prior_pick_next+0x86>
		}
		else
			cprintf("proc %d is running, [prior]=%u \n" ,p->pid, p->priority);
c0117f36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0117f39:	8b 90 c0 00 00 00    	mov    0xc0(%eax),%edx
c0117f3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0117f42:	8b 40 04             	mov    0x4(%eax),%eax
c0117f45:	89 54 24 08          	mov    %edx,0x8(%esp)
c0117f49:	89 44 24 04          	mov    %eax,0x4(%esp)
c0117f4d:	c7 04 24 48 6f 12 c0 	movl   $0xc0126f48,(%esp)
c0117f54:	e8 9a 84 fe ff       	call   c01003f3 <cprintf>
		//do_stride_queue(p->pid);
	}

     p->stride = p->priority;
c0117f59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0117f5c:	8b 90 c0 00 00 00    	mov    0xc0(%eax),%edx
c0117f62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0117f65:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
     return p;
c0117f6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0117f6e:	c9                   	leave  
c0117f6f:	c3                   	ret    

c0117f70 <prior_user_check>:


static int
prior_user_check(void){
c0117f70:	55                   	push   %ebp
c0117f71:	89 e5                	mov    %esp,%ebp
	return 0;
c0117f73:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0117f78:	5d                   	pop    %ebp
c0117f79:	c3                   	ret    

c0117f7a <prior_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
prior_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c0117f7a:	55                   	push   %ebp
c0117f7b:	89 e5                	mov    %esp,%ebp
	
}
c0117f7d:	5d                   	pop    %ebp
c0117f7e:	c3                   	ret    

c0117f7f <RR_init>:
#include <proc.h>
#include <assert.h>
#include <rr_sched.h>

static void
RR_init(struct run_queue *rq) {
c0117f7f:	55                   	push   %ebp
c0117f80:	89 e5                	mov    %esp,%ebp
c0117f82:	83 ec 10             	sub    $0x10,%esp
    list_init(&(rq->run_list));
c0117f85:	8b 45 08             	mov    0x8(%ebp),%eax
c0117f88:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0117f8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0117f8e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0117f91:	89 50 04             	mov    %edx,0x4(%eax)
c0117f94:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0117f97:	8b 50 04             	mov    0x4(%eax),%edx
c0117f9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0117f9d:	89 10                	mov    %edx,(%eax)
    rq->proc_num = 0;
c0117f9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0117fa2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c0117fa9:	c9                   	leave  
c0117faa:	c3                   	ret    

c0117fab <RR_enqueue>:

static void
RR_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c0117fab:	55                   	push   %ebp
c0117fac:	89 e5                	mov    %esp,%ebp
c0117fae:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(proc->run_link)));
c0117fb1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117fb4:	05 a4 00 00 00       	add    $0xa4,%eax
c0117fb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0117fbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0117fbf:	8b 40 04             	mov    0x4(%eax),%eax
c0117fc2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0117fc5:	0f 94 c0             	sete   %al
c0117fc8:	0f b6 c0             	movzbl %al,%eax
c0117fcb:	85 c0                	test   %eax,%eax
c0117fcd:	75 24                	jne    c0117ff3 <RR_enqueue+0x48>
c0117fcf:	c7 44 24 0c 7c 6f 12 	movl   $0xc0126f7c,0xc(%esp)
c0117fd6:	c0 
c0117fd7:	c7 44 24 08 9a 6f 12 	movl   $0xc0126f9a,0x8(%esp)
c0117fde:	c0 
c0117fdf:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
c0117fe6:	00 
c0117fe7:	c7 04 24 af 6f 12 c0 	movl   $0xc0126faf,(%esp)
c0117fee:	e8 23 92 fe ff       	call   c0101216 <__panic>
    list_add_before(&(rq->run_list), &(proc->run_link));
c0117ff3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0117ff6:	8d 90 a4 00 00 00    	lea    0xa4(%eax),%edx
c0117ffc:	8b 45 08             	mov    0x8(%ebp),%eax
c0117fff:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0118002:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0118005:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118008:	8b 00                	mov    (%eax),%eax
c011800a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011800d:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0118010:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0118013:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118016:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0118019:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011801c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011801f:	89 10                	mov    %edx,(%eax)
c0118021:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0118024:	8b 10                	mov    (%eax),%edx
c0118026:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0118029:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c011802c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011802f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0118032:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0118035:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0118038:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011803b:	89 10                	mov    %edx,(%eax)
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c011803d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118040:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c0118046:	85 c0                	test   %eax,%eax
c0118048:	74 13                	je     c011805d <RR_enqueue+0xb2>
c011804a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011804d:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c0118053:	8b 45 08             	mov    0x8(%ebp),%eax
c0118056:	8b 40 0c             	mov    0xc(%eax),%eax
c0118059:	39 c2                	cmp    %eax,%edx
c011805b:	7e 0f                	jle    c011806c <RR_enqueue+0xc1>
        proc->time_slice = rq->max_time_slice;
c011805d:	8b 45 08             	mov    0x8(%ebp),%eax
c0118060:	8b 50 0c             	mov    0xc(%eax),%edx
c0118063:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118066:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    proc->rq = rq;
c011806c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011806f:	8b 55 08             	mov    0x8(%ebp),%edx
c0118072:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    rq->proc_num ++;
c0118078:	8b 45 08             	mov    0x8(%ebp),%eax
c011807b:	8b 40 08             	mov    0x8(%eax),%eax
c011807e:	8d 50 01             	lea    0x1(%eax),%edx
c0118081:	8b 45 08             	mov    0x8(%ebp),%eax
c0118084:	89 50 08             	mov    %edx,0x8(%eax)
}
c0118087:	c9                   	leave  
c0118088:	c3                   	ret    

c0118089 <RR_dequeue>:

static void
RR_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c0118089:	55                   	push   %ebp
c011808a:	89 e5                	mov    %esp,%ebp
c011808c:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
c011808f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118092:	05 a4 00 00 00       	add    $0xa4,%eax
c0118097:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c011809a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011809d:	8b 40 04             	mov    0x4(%eax),%eax
c01180a0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01180a3:	0f 94 c0             	sete   %al
c01180a6:	0f b6 c0             	movzbl %al,%eax
c01180a9:	85 c0                	test   %eax,%eax
c01180ab:	75 0e                	jne    c01180bb <RR_dequeue+0x32>
c01180ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01180b0:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
c01180b6:	3b 45 08             	cmp    0x8(%ebp),%eax
c01180b9:	74 24                	je     c01180df <RR_dequeue+0x56>
c01180bb:	c7 44 24 0c c8 6f 12 	movl   $0xc0126fc8,0xc(%esp)
c01180c2:	c0 
c01180c3:	c7 44 24 08 9a 6f 12 	movl   $0xc0126f9a,0x8(%esp)
c01180ca:	c0 
c01180cb:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c01180d2:	00 
c01180d3:	c7 04 24 af 6f 12 c0 	movl   $0xc0126faf,(%esp)
c01180da:	e8 37 91 fe ff       	call   c0101216 <__panic>
    list_del_init(&(proc->run_link));
c01180df:	8b 45 0c             	mov    0xc(%ebp),%eax
c01180e2:	05 a4 00 00 00       	add    $0xa4,%eax
c01180e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01180ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01180ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01180f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01180f3:	8b 40 04             	mov    0x4(%eax),%eax
c01180f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01180f9:	8b 12                	mov    (%edx),%edx
c01180fb:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01180fe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0118101:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0118104:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0118107:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c011810a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011810d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0118110:	89 10                	mov    %edx,(%eax)
c0118112:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118115:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0118118:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011811b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011811e:	89 50 04             	mov    %edx,0x4(%eax)
c0118121:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0118124:	8b 50 04             	mov    0x4(%eax),%edx
c0118127:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011812a:	89 10                	mov    %edx,(%eax)
    rq->proc_num --;
c011812c:	8b 45 08             	mov    0x8(%ebp),%eax
c011812f:	8b 40 08             	mov    0x8(%eax),%eax
c0118132:	8d 50 ff             	lea    -0x1(%eax),%edx
c0118135:	8b 45 08             	mov    0x8(%ebp),%eax
c0118138:	89 50 08             	mov    %edx,0x8(%eax)
}
c011813b:	c9                   	leave  
c011813c:	c3                   	ret    

c011813d <RR_pick_next>:

static struct proc_struct *
RR_pick_next(struct run_queue *rq) {
c011813d:	55                   	push   %ebp
c011813e:	89 e5                	mov    %esp,%ebp
c0118140:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(rq->run_list));
c0118143:	8b 45 08             	mov    0x8(%ebp),%eax
c0118146:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0118149:	8b 45 f8             	mov    -0x8(%ebp),%eax
c011814c:	8b 40 04             	mov    0x4(%eax),%eax
c011814f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(rq->run_list)) {
c0118152:	8b 45 08             	mov    0x8(%ebp),%eax
c0118155:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0118158:	74 0a                	je     c0118164 <RR_pick_next+0x27>
        return le2proc(le, run_link);
c011815a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011815d:	2d a4 00 00 00       	sub    $0xa4,%eax
c0118162:	eb 05                	jmp    c0118169 <RR_pick_next+0x2c>
    }
    return NULL;
c0118164:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0118169:	c9                   	leave  
c011816a:	c3                   	ret    

c011816b <RR_proc_tick>:

static void
RR_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c011816b:	55                   	push   %ebp
c011816c:	89 e5                	mov    %esp,%ebp
    if (proc->time_slice > 0) {
c011816e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118171:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c0118177:	85 c0                	test   %eax,%eax
c0118179:	7e 15                	jle    c0118190 <RR_proc_tick+0x25>
        proc->time_slice --;
c011817b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011817e:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c0118184:	8d 50 ff             	lea    -0x1(%eax),%edx
c0118187:	8b 45 0c             	mov    0xc(%ebp),%eax
c011818a:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    if (proc->time_slice == 0) {
c0118190:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118193:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c0118199:	85 c0                	test   %eax,%eax
c011819b:	75 0a                	jne    c01181a7 <RR_proc_tick+0x3c>
        proc->need_resched = 1;
c011819d:	8b 45 0c             	mov    0xc(%ebp),%eax
c01181a0:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c01181a7:	5d                   	pop    %ebp
c01181a8:	c3                   	ret    

c01181a9 <RR_user_check>:

static int
RR_user_check(void){
c01181a9:	55                   	push   %ebp
c01181aa:	89 e5                	mov    %esp,%ebp
	return 0;
c01181ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01181b1:	5d                   	pop    %ebp
c01181b2:	c3                   	ret    

c01181b3 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01181b3:	55                   	push   %ebp
c01181b4:	89 e5                	mov    %esp,%ebp
c01181b6:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01181b9:	9c                   	pushf  
c01181ba:	58                   	pop    %eax
c01181bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01181be:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01181c1:	25 00 02 00 00       	and    $0x200,%eax
c01181c6:	85 c0                	test   %eax,%eax
c01181c8:	74 0c                	je     c01181d6 <__intr_save+0x23>
        intr_disable();
c01181ca:	e8 d2 a2 fe ff       	call   c01024a1 <intr_disable>
        return 1;
c01181cf:	b8 01 00 00 00       	mov    $0x1,%eax
c01181d4:	eb 05                	jmp    c01181db <__intr_save+0x28>
    }
    return 0;
c01181d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01181db:	c9                   	leave  
c01181dc:	c3                   	ret    

c01181dd <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01181dd:	55                   	push   %ebp
c01181de:	89 e5                	mov    %esp,%ebp
c01181e0:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01181e3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01181e7:	74 05                	je     c01181ee <__intr_restore+0x11>
        intr_enable();
c01181e9:	e8 ad a2 fe ff       	call   c010249b <intr_enable>
    }
}
c01181ee:	c9                   	leave  
c01181ef:	c3                   	ret    

c01181f0 <sched_class_enqueue>:
const struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c01181f0:	55                   	push   %ebp
c01181f1:	89 e5                	mov    %esp,%ebp
c01181f3:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c01181f6:	a1 60 e0 16 c0       	mov    0xc016e060,%eax
c01181fb:	39 45 08             	cmp    %eax,0x8(%ebp)
c01181fe:	74 1a                	je     c011821a <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c0118200:	a1 44 13 17 c0       	mov    0xc0171344,%eax
c0118205:	8b 40 08             	mov    0x8(%eax),%eax
c0118208:	8b 15 dc 00 17 c0    	mov    0xc01700dc,%edx
c011820e:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0118211:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0118215:	89 14 24             	mov    %edx,(%esp)
c0118218:	ff d0                	call   *%eax
    }
}
c011821a:	c9                   	leave  
c011821b:	c3                   	ret    

c011821c <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c011821c:	55                   	push   %ebp
c011821d:	89 e5                	mov    %esp,%ebp
c011821f:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c0118222:	a1 44 13 17 c0       	mov    0xc0171344,%eax
c0118227:	8b 40 0c             	mov    0xc(%eax),%eax
c011822a:	8b 15 dc 00 17 c0    	mov    0xc01700dc,%edx
c0118230:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0118233:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0118237:	89 14 24             	mov    %edx,(%esp)
c011823a:	ff d0                	call   *%eax
}
c011823c:	c9                   	leave  
c011823d:	c3                   	ret    

c011823e <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c011823e:	55                   	push   %ebp
c011823f:	89 e5                	mov    %esp,%ebp
c0118241:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c0118244:	a1 44 13 17 c0       	mov    0xc0171344,%eax
c0118249:	8b 40 10             	mov    0x10(%eax),%eax
c011824c:	8b 15 dc 00 17 c0    	mov    0xc01700dc,%edx
c0118252:	89 14 24             	mov    %edx,(%esp)
c0118255:	ff d0                	call   *%eax
}
c0118257:	c9                   	leave  
c0118258:	c3                   	ret    

c0118259 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c0118259:	55                   	push   %ebp
c011825a:	89 e5                	mov    %esp,%ebp
c011825c:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c011825f:	a1 60 e0 16 c0       	mov    0xc016e060,%eax
c0118264:	39 45 08             	cmp    %eax,0x8(%ebp)
c0118267:	74 1c                	je     c0118285 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c0118269:	a1 44 13 17 c0       	mov    0xc0171344,%eax
c011826e:	8b 40 14             	mov    0x14(%eax),%eax
c0118271:	8b 15 dc 00 17 c0    	mov    0xc01700dc,%edx
c0118277:	8b 4d 08             	mov    0x8(%ebp),%ecx
c011827a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011827e:	89 14 24             	mov    %edx,(%esp)
c0118281:	ff d0                	call   *%eax
c0118283:	eb 0a                	jmp    c011828f <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c0118285:	8b 45 08             	mov    0x8(%ebp),%eax
c0118288:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c011828f:	c9                   	leave  
c0118290:	c3                   	ret    

c0118291 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c0118291:	55                   	push   %ebp
c0118292:	89 e5                	mov    %esp,%ebp
c0118294:	83 ec 28             	sub    $0x28,%esp
c0118297:	c7 45 f4 d4 00 17 c0 	movl   $0xc01700d4,-0xc(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c011829e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01182a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01182a4:	89 50 04             	mov    %edx,0x4(%eax)
c01182a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01182aa:	8b 50 04             	mov    0x4(%eax),%edx
c01182ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01182b0:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &rr_sched_class;
c01182b2:	c7 05 44 13 17 c0 48 	movl   $0xc016ab48,0xc0171344
c01182b9:	ab 16 c0 

    rq = &__rq;
c01182bc:	c7 05 dc 00 17 c0 e0 	movl   $0xc01700e0,0xc01700dc
c01182c3:	00 17 c0 
    rq->max_time_slice = 5;
c01182c6:	a1 dc 00 17 c0       	mov    0xc01700dc,%eax
c01182cb:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c01182d2:	a1 44 13 17 c0       	mov    0xc0171344,%eax
c01182d7:	8b 40 04             	mov    0x4(%eax),%eax
c01182da:	8b 15 dc 00 17 c0    	mov    0xc01700dc,%edx
c01182e0:	89 14 24             	mov    %edx,(%esp)
c01182e3:	ff d0                	call   *%eax
    cprintf("\n5.调度器\n");
c01182e5:	c7 04 24 08 70 12 c0 	movl   $0xc0127008,(%esp)
c01182ec:	e8 02 81 fe ff       	call   c01003f3 <cprintf>
    cprintf("sched class: %s\n", sched_class->name);
c01182f1:	a1 44 13 17 c0       	mov    0xc0171344,%eax
c01182f6:	8b 00                	mov    (%eax),%eax
c01182f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01182fc:	c7 04 24 16 70 12 c0 	movl   $0xc0127016,(%esp)
c0118303:	e8 eb 80 fe ff       	call   c01003f3 <cprintf>
}
c0118308:	c9                   	leave  
c0118309:	c3                   	ret    

c011830a <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c011830a:	55                   	push   %ebp
c011830b:	89 e5                	mov    %esp,%ebp
c011830d:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c0118310:	8b 45 08             	mov    0x8(%ebp),%eax
c0118313:	8b 00                	mov    (%eax),%eax
c0118315:	83 f8 03             	cmp    $0x3,%eax
c0118318:	75 24                	jne    c011833e <wakeup_proc+0x34>
c011831a:	c7 44 24 0c 27 70 12 	movl   $0xc0127027,0xc(%esp)
c0118321:	c0 
c0118322:	c7 44 24 08 42 70 12 	movl   $0xc0127042,0x8(%esp)
c0118329:	c0 
c011832a:	c7 44 24 04 3e 00 00 	movl   $0x3e,0x4(%esp)
c0118331:	00 
c0118332:	c7 04 24 57 70 12 c0 	movl   $0xc0127057,(%esp)
c0118339:	e8 d8 8e fe ff       	call   c0101216 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c011833e:	e8 70 fe ff ff       	call   c01181b3 <__intr_save>
c0118343:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c0118346:	8b 45 08             	mov    0x8(%ebp),%eax
c0118349:	8b 00                	mov    (%eax),%eax
c011834b:	83 f8 02             	cmp    $0x2,%eax
c011834e:	74 2d                	je     c011837d <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c0118350:	8b 45 08             	mov    0x8(%ebp),%eax
c0118353:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c0118359:	8b 45 08             	mov    0x8(%ebp),%eax
c011835c:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c0118363:	00 00 00 
            if (proc != current) {
c0118366:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c011836b:	39 45 08             	cmp    %eax,0x8(%ebp)
c011836e:	74 29                	je     c0118399 <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c0118370:	8b 45 08             	mov    0x8(%ebp),%eax
c0118373:	89 04 24             	mov    %eax,(%esp)
c0118376:	e8 75 fe ff ff       	call   c01181f0 <sched_class_enqueue>
c011837b:	eb 1c                	jmp    c0118399 <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c011837d:	c7 44 24 08 6d 70 12 	movl   $0xc012706d,0x8(%esp)
c0118384:	c0 
c0118385:	c7 44 24 04 4a 00 00 	movl   $0x4a,0x4(%esp)
c011838c:	00 
c011838d:	c7 04 24 57 70 12 c0 	movl   $0xc0127057,(%esp)
c0118394:	e8 fa 8e fe ff       	call   c0101293 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c0118399:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011839c:	89 04 24             	mov    %eax,(%esp)
c011839f:	e8 39 fe ff ff       	call   c01181dd <__intr_restore>
}
c01183a4:	c9                   	leave  
c01183a5:	c3                   	ret    

c01183a6 <schedule>:

void
schedule(void) {
c01183a6:	55                   	push   %ebp
c01183a7:	89 e5                	mov    %esp,%ebp
c01183a9:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c01183ac:	e8 02 fe ff ff       	call   c01181b3 <__intr_save>
c01183b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c01183b4:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01183b9:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c01183c0:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01183c5:	8b 00                	mov    (%eax),%eax
c01183c7:	83 f8 02             	cmp    $0x2,%eax
c01183ca:	75 0d                	jne    c01183d9 <schedule+0x33>
            sched_class_enqueue(current);
c01183cc:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01183d1:	89 04 24             	mov    %eax,(%esp)
c01183d4:	e8 17 fe ff ff       	call   c01181f0 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c01183d9:	e8 60 fe ff ff       	call   c011823e <sched_class_pick_next>
c01183de:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01183e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01183e5:	74 0b                	je     c01183f2 <schedule+0x4c>
            sched_class_dequeue(next);
c01183e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01183ea:	89 04 24             	mov    %eax,(%esp)
c01183ed:	e8 2a fe ff ff       	call   c011821c <sched_class_dequeue>
        }
        if (next == NULL) {
c01183f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01183f6:	75 08                	jne    c0118400 <schedule+0x5a>
            next = idleproc;
c01183f8:	a1 60 e0 16 c0       	mov    0xc016e060,%eax
c01183fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c0118400:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118403:	8b 40 08             	mov    0x8(%eax),%eax
c0118406:	8d 50 01             	lea    0x1(%eax),%edx
c0118409:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011840c:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c011840f:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0118414:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0118417:	74 0b                	je     c0118424 <schedule+0x7e>
            proc_run(next);
c0118419:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011841c:	89 04 24             	mov    %eax,(%esp)
c011841f:	e8 fa d0 ff ff       	call   c011551e <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c0118424:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118427:	89 04 24             	mov    %eax,(%esp)
c011842a:	e8 ae fd ff ff       	call   c01181dd <__intr_restore>
}
c011842f:	c9                   	leave  
c0118430:	c3                   	ret    

c0118431 <add_timer>:

void
add_timer(timer_t *timer) {
c0118431:	55                   	push   %ebp
c0118432:	89 e5                	mov    %esp,%ebp
c0118434:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0118437:	e8 77 fd ff ff       	call   c01181b3 <__intr_save>
c011843c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c011843f:	8b 45 08             	mov    0x8(%ebp),%eax
c0118442:	8b 00                	mov    (%eax),%eax
c0118444:	85 c0                	test   %eax,%eax
c0118446:	74 0a                	je     c0118452 <add_timer+0x21>
c0118448:	8b 45 08             	mov    0x8(%ebp),%eax
c011844b:	8b 40 04             	mov    0x4(%eax),%eax
c011844e:	85 c0                	test   %eax,%eax
c0118450:	75 24                	jne    c0118476 <add_timer+0x45>
c0118452:	c7 44 24 0c 88 70 12 	movl   $0xc0127088,0xc(%esp)
c0118459:	c0 
c011845a:	c7 44 24 08 42 70 12 	movl   $0xc0127042,0x8(%esp)
c0118461:	c0 
c0118462:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0118469:	00 
c011846a:	c7 04 24 57 70 12 c0 	movl   $0xc0127057,(%esp)
c0118471:	e8 a0 8d fe ff       	call   c0101216 <__panic>
        assert(list_empty(&(timer->timer_link)));
c0118476:	8b 45 08             	mov    0x8(%ebp),%eax
c0118479:	83 c0 08             	add    $0x8,%eax
c011847c:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c011847f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0118482:	8b 40 04             	mov    0x4(%eax),%eax
c0118485:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0118488:	0f 94 c0             	sete   %al
c011848b:	0f b6 c0             	movzbl %al,%eax
c011848e:	85 c0                	test   %eax,%eax
c0118490:	75 24                	jne    c01184b6 <add_timer+0x85>
c0118492:	c7 44 24 0c b4 70 12 	movl   $0xc01270b4,0xc(%esp)
c0118499:	c0 
c011849a:	c7 44 24 08 42 70 12 	movl   $0xc0127042,0x8(%esp)
c01184a1:	c0 
c01184a2:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c01184a9:	00 
c01184aa:	c7 04 24 57 70 12 c0 	movl   $0xc0127057,(%esp)
c01184b1:	e8 60 8d fe ff       	call   c0101216 <__panic>
c01184b6:	c7 45 e4 d4 00 17 c0 	movl   $0xc01700d4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01184bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01184c0:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c01184c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c01184c6:	eb 4a                	jmp    c0118512 <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c01184c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01184cb:	83 e8 08             	sub    $0x8,%eax
c01184ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c01184d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01184d4:	8b 10                	mov    (%eax),%edx
c01184d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01184d9:	8b 00                	mov    (%eax),%eax
c01184db:	39 c2                	cmp    %eax,%edx
c01184dd:	73 13                	jae    c01184f2 <add_timer+0xc1>
                next->expires -= timer->expires;
c01184df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01184e2:	8b 10                	mov    (%eax),%edx
c01184e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01184e7:	8b 00                	mov    (%eax),%eax
c01184e9:	29 c2                	sub    %eax,%edx
c01184eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01184ee:	89 10                	mov    %edx,(%eax)
                break;
c01184f0:	eb 29                	jmp    c011851b <add_timer+0xea>
            }
            timer->expires -= next->expires;
c01184f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01184f5:	8b 10                	mov    (%eax),%edx
c01184f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01184fa:	8b 00                	mov    (%eax),%eax
c01184fc:	29 c2                	sub    %eax,%edx
c01184fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0118501:	89 10                	mov    %edx,(%eax)
c0118503:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118506:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0118509:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011850c:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c011850f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c0118512:	81 7d f4 d4 00 17 c0 	cmpl   $0xc01700d4,-0xc(%ebp)
c0118519:	75 ad                	jne    c01184c8 <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c011851b:	8b 45 08             	mov    0x8(%ebp),%eax
c011851e:	8d 50 08             	lea    0x8(%eax),%edx
c0118521:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118524:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0118527:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c011852a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011852d:	8b 00                	mov    (%eax),%eax
c011852f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0118532:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0118535:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0118538:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011853b:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c011853e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0118541:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0118544:	89 10                	mov    %edx,(%eax)
c0118546:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0118549:	8b 10                	mov    (%eax),%edx
c011854b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011854e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0118551:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0118554:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0118557:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c011855a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011855d:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0118560:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c0118562:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118565:	89 04 24             	mov    %eax,(%esp)
c0118568:	e8 70 fc ff ff       	call   c01181dd <__intr_restore>
}
c011856d:	c9                   	leave  
c011856e:	c3                   	ret    

c011856f <del_timer>:

void
del_timer(timer_t *timer) {
c011856f:	55                   	push   %ebp
c0118570:	89 e5                	mov    %esp,%ebp
c0118572:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0118575:	e8 39 fc ff ff       	call   c01181b3 <__intr_save>
c011857a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c011857d:	8b 45 08             	mov    0x8(%ebp),%eax
c0118580:	83 c0 08             	add    $0x8,%eax
c0118583:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0118586:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0118589:	8b 40 04             	mov    0x4(%eax),%eax
c011858c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c011858f:	0f 94 c0             	sete   %al
c0118592:	0f b6 c0             	movzbl %al,%eax
c0118595:	85 c0                	test   %eax,%eax
c0118597:	0f 85 89 00 00 00    	jne    c0118626 <del_timer+0xb7>
            if (timer->expires != 0) {
c011859d:	8b 45 08             	mov    0x8(%ebp),%eax
c01185a0:	8b 00                	mov    (%eax),%eax
c01185a2:	85 c0                	test   %eax,%eax
c01185a4:	74 35                	je     c01185db <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c01185a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01185a9:	83 c0 08             	add    $0x8,%eax
c01185ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01185af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01185b2:	8b 40 04             	mov    0x4(%eax),%eax
c01185b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c01185b8:	81 7d f0 d4 00 17 c0 	cmpl   $0xc01700d4,-0x10(%ebp)
c01185bf:	74 1a                	je     c01185db <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c01185c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01185c4:	83 e8 08             	sub    $0x8,%eax
c01185c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c01185ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01185cd:	8b 10                	mov    (%eax),%edx
c01185cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01185d2:	8b 00                	mov    (%eax),%eax
c01185d4:	01 c2                	add    %eax,%edx
c01185d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01185d9:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c01185db:	8b 45 08             	mov    0x8(%ebp),%eax
c01185de:	83 c0 08             	add    $0x8,%eax
c01185e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01185e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01185e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01185ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01185ed:	8b 40 04             	mov    0x4(%eax),%eax
c01185f0:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01185f3:	8b 12                	mov    (%edx),%edx
c01185f5:	89 55 d8             	mov    %edx,-0x28(%ebp)
c01185f8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01185fb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01185fe:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0118601:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0118604:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0118607:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011860a:	89 10                	mov    %edx,(%eax)
c011860c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011860f:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0118612:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0118615:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0118618:	89 50 04             	mov    %edx,0x4(%eax)
c011861b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011861e:	8b 50 04             	mov    0x4(%eax),%edx
c0118621:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0118624:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c0118626:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118629:	89 04 24             	mov    %eax,(%esp)
c011862c:	e8 ac fb ff ff       	call   c01181dd <__intr_restore>
}
c0118631:	c9                   	leave  
c0118632:	c3                   	ret    

c0118633 <run_timer_list>:

void
run_timer_list(void) {
c0118633:	55                   	push   %ebp
c0118634:	89 e5                	mov    %esp,%ebp
c0118636:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0118639:	e8 75 fb ff ff       	call   c01181b3 <__intr_save>
c011863e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0118641:	c7 45 e4 d4 00 17 c0 	movl   $0xc01700d4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0118648:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011864b:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c011864e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c0118651:	81 7d f4 d4 00 17 c0 	cmpl   $0xc01700d4,-0xc(%ebp)
c0118658:	0f 84 fb 00 00 00    	je     c0118759 <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c011865e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118661:	83 e8 08             	sub    $0x8,%eax
c0118664:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c0118667:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011866a:	8b 00                	mov    (%eax),%eax
c011866c:	85 c0                	test   %eax,%eax
c011866e:	75 24                	jne    c0118694 <run_timer_list+0x61>
c0118670:	c7 44 24 0c d5 70 12 	movl   $0xc01270d5,0xc(%esp)
c0118677:	c0 
c0118678:	c7 44 24 08 42 70 12 	movl   $0xc0127042,0x8(%esp)
c011867f:	c0 
c0118680:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
c0118687:	00 
c0118688:	c7 04 24 57 70 12 c0 	movl   $0xc0127057,(%esp)
c011868f:	e8 82 8b fe ff       	call   c0101216 <__panic>
            timer->expires --;
c0118694:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118697:	8b 00                	mov    (%eax),%eax
c0118699:	8d 50 ff             	lea    -0x1(%eax),%edx
c011869c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011869f:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c01186a1:	e9 a6 00 00 00       	jmp    c011874c <run_timer_list+0x119>
c01186a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01186a9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01186ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01186af:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c01186b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c01186b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01186b8:	8b 40 04             	mov    0x4(%eax),%eax
c01186bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c01186be:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01186c1:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c01186c7:	85 c0                	test   %eax,%eax
c01186c9:	74 31                	je     c01186fc <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c01186cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01186ce:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c01186d4:	85 c0                	test   %eax,%eax
c01186d6:	78 4a                	js     c0118722 <run_timer_list+0xef>
c01186d8:	c7 44 24 0c ec 70 12 	movl   $0xc01270ec,0xc(%esp)
c01186df:	c0 
c01186e0:	c7 44 24 08 42 70 12 	movl   $0xc0127042,0x8(%esp)
c01186e7:	c0 
c01186e8:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c01186ef:	00 
c01186f0:	c7 04 24 57 70 12 c0 	movl   $0xc0127057,(%esp)
c01186f7:	e8 1a 8b fe ff       	call   c0101216 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c01186fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01186ff:	8b 40 04             	mov    0x4(%eax),%eax
c0118702:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0118706:	c7 44 24 08 10 71 12 	movl   $0xc0127110,0x8(%esp)
c011870d:	c0 
c011870e:	c7 44 24 04 a2 00 00 	movl   $0xa2,0x4(%esp)
c0118715:	00 
c0118716:	c7 04 24 57 70 12 c0 	movl   $0xc0127057,(%esp)
c011871d:	e8 71 8b fe ff       	call   c0101293 <__warn>
                }
                wakeup_proc(proc);
c0118722:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0118725:	89 04 24             	mov    %eax,(%esp)
c0118728:	e8 dd fb ff ff       	call   c011830a <wakeup_proc>
                del_timer(timer);
c011872d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118730:	89 04 24             	mov    %eax,(%esp)
c0118733:	e8 37 fe ff ff       	call   c011856f <del_timer>
                if (le == &timer_list) {
c0118738:	81 7d f4 d4 00 17 c0 	cmpl   $0xc01700d4,-0xc(%ebp)
c011873f:	75 02                	jne    c0118743 <run_timer_list+0x110>
                    break;
c0118741:	eb 16                	jmp    c0118759 <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c0118743:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118746:	83 e8 08             	sub    $0x8,%eax
c0118749:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c011874c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011874f:	8b 00                	mov    (%eax),%eax
c0118751:	85 c0                	test   %eax,%eax
c0118753:	0f 84 4d ff ff ff    	je     c01186a6 <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c0118759:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c011875e:	89 04 24             	mov    %eax,(%esp)
c0118761:	e8 f3 fa ff ff       	call   c0118259 <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c0118766:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0118769:	89 04 24             	mov    %eax,(%esp)
c011876c:	e8 6c fa ff ff       	call   c01181dd <__intr_restore>
}
c0118771:	c9                   	leave  
c0118772:	c3                   	ret    

c0118773 <do_queue>:

void
do_queue(){
c0118773:	55                   	push   %ebp
c0118774:	89 e5                	mov    %esp,%ebp
c0118776:	83 ec 28             	sub    $0x28,%esp
    list_entry_t *le=list_next(&(rq->run_list));
c0118779:	a1 dc 00 17 c0       	mov    0xc01700dc,%eax
c011877e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0118781:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0118784:	8b 40 04             	mov    0x4(%eax),%eax
c0118787:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //cprintf("\t%d",rq->proc_num);
    while(le != &(rq->run_list))
c011878a:	eb 30                	jmp    c01187bc <do_queue+0x49>
    {
        struct proc_struct *proc=le2proc(le,run_link);
c011878c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011878f:	2d a4 00 00 00       	sub    $0xa4,%eax
c0118794:	89 45 f0             	mov    %eax,-0x10(%ebp)
        cprintf("\t%d",proc->pid);
c0118797:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011879a:	8b 40 04             	mov    0x4(%eax),%eax
c011879d:	89 44 24 04          	mov    %eax,0x4(%esp)
c01187a1:	c7 04 24 2f 71 12 c0 	movl   $0xc012712f,(%esp)
c01187a8:	e8 46 7c fe ff       	call   c01003f3 <cprintf>
c01187ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01187b0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01187b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01187b6:	8b 40 04             	mov    0x4(%eax),%eax
        le=list_next(le);
c01187b9:	89 45 f4             	mov    %eax,-0xc(%ebp)

void
do_queue(){
    list_entry_t *le=list_next(&(rq->run_list));
    //cprintf("\t%d",rq->proc_num);
    while(le != &(rq->run_list))
c01187bc:	a1 dc 00 17 c0       	mov    0xc01700dc,%eax
c01187c1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01187c4:	75 c6                	jne    c011878c <do_queue+0x19>
    {
        struct proc_struct *proc=le2proc(le,run_link);
        cprintf("\t%d",proc->pid);
        le=list_next(le);
    }
}
c01187c6:	c9                   	leave  
c01187c7:	c3                   	ret    

c01187c8 <do_change_sched>:

void do_change_sched(unsigned int mode)
{
c01187c8:	55                   	push   %ebp
c01187c9:	89 e5                	mov    %esp,%ebp
c01187cb:	83 ec 18             	sub    $0x18,%esp
     //printf("mode:%u",mode);
     switch (mode)
c01187ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01187d1:	83 f8 02             	cmp    $0x2,%eax
c01187d4:	74 24                	je     c01187fa <do_change_sched+0x32>
c01187d6:	83 f8 02             	cmp    $0x2,%eax
c01187d9:	77 07                	ja     c01187e2 <do_change_sched+0x1a>
c01187db:	83 f8 01             	cmp    $0x1,%eax
c01187de:	74 0e                	je     c01187ee <do_change_sched+0x26>
c01187e0:	eb 3c                	jmp    c011881e <do_change_sched+0x56>
c01187e2:	83 f8 03             	cmp    $0x3,%eax
c01187e5:	74 1f                	je     c0118806 <do_change_sched+0x3e>
c01187e7:	83 f8 04             	cmp    $0x4,%eax
c01187ea:	74 26                	je     c0118812 <do_change_sched+0x4a>
c01187ec:	eb 30                	jmp    c011881e <do_change_sched+0x56>
     {
     case 1:
          sched_class =&stride_sched_class;
c01187ee:	c7 05 44 13 17 c0 64 	movl   $0xc016ab64,0xc0171344
c01187f5:	ab 16 c0 
          break;
c01187f8:	eb 31                	jmp    c011882b <do_change_sched+0x63>
     case 2:
          sched_class =&fcfs_sched_class;
c01187fa:	c7 05 44 13 17 c0 10 	movl   $0xc016ab10,0xc0171344
c0118801:	ab 16 c0 
          break;
c0118804:	eb 25                	jmp    c011882b <do_change_sched+0x63>
     case 3:
          sched_class =&rr_sched_class;
c0118806:	c7 05 44 13 17 c0 48 	movl   $0xc016ab48,0xc0171344
c011880d:	ab 16 c0 
          break;
c0118810:	eb 19                	jmp    c011882b <do_change_sched+0x63>
     case 4:
	  sched_class =&prior_sched_class;
c0118812:	c7 05 44 13 17 c0 2c 	movl   $0xc016ab2c,0xc0171344
c0118819:	ab 16 c0 
	  break;
c011881c:	eb 0d                	jmp    c011882b <do_change_sched+0x63>
     default:
          cprintf("bad argument!\n");
c011881e:	c7 04 24 33 71 12 c0 	movl   $0xc0127133,(%esp)
c0118825:	e8 c9 7b fe ff       	call   c01003f3 <cprintf>
          break;
c011882a:	90                   	nop
     }
     cprintf("change sched: %s !\n",sched_class->name);
c011882b:	a1 44 13 17 c0       	mov    0xc0171344,%eax
c0118830:	8b 00                	mov    (%eax),%eax
c0118832:	89 44 24 04          	mov    %eax,0x4(%esp)
c0118836:	c7 04 24 42 71 12 c0 	movl   $0xc0127142,(%esp)
c011883d:	e8 b1 7b fe ff       	call   c01003f3 <cprintf>
}
c0118842:	c9                   	leave  
c0118843:	c3                   	ret    

c0118844 <inorder>:
     int pid;
     int stride;
     int priority;
};

int inorder(skew_heap_entry_t *a,struct stride_entry q[],int n){
c0118844:	55                   	push   %ebp
c0118845:	89 e5                	mov    %esp,%ebp
c0118847:	83 ec 28             	sub    $0x28,%esp
     if(a==NULL)
c011884a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011884e:	75 08                	jne    c0118858 <inorder+0x14>
          return n;
c0118850:	8b 45 10             	mov    0x10(%ebp),%eax
c0118853:	e9 a9 00 00 00       	jmp    c0118901 <inorder+0xbd>
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c0118858:	8b 45 08             	mov    0x8(%ebp),%eax
c011885b:	2d b0 00 00 00       	sub    $0xb0,%eax
c0118860:	89 45 f4             	mov    %eax,-0xc(%ebp)
     //printf("%d[%d] ",p->pid,p->stride);
     q[n].stride=p->stride;
c0118863:	8b 55 10             	mov    0x10(%ebp),%edx
c0118866:	89 d0                	mov    %edx,%eax
c0118868:	01 c0                	add    %eax,%eax
c011886a:	01 d0                	add    %edx,%eax
c011886c:	c1 e0 02             	shl    $0x2,%eax
c011886f:	89 c2                	mov    %eax,%edx
c0118871:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118874:	01 c2                	add    %eax,%edx
c0118876:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118879:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c011887f:	89 42 04             	mov    %eax,0x4(%edx)
     q[n].pid=p->pid;
c0118882:	8b 55 10             	mov    0x10(%ebp),%edx
c0118885:	89 d0                	mov    %edx,%eax
c0118887:	01 c0                	add    %eax,%eax
c0118889:	01 d0                	add    %edx,%eax
c011888b:	c1 e0 02             	shl    $0x2,%eax
c011888e:	89 c2                	mov    %eax,%edx
c0118890:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118893:	01 c2                	add    %eax,%edx
c0118895:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118898:	8b 40 04             	mov    0x4(%eax),%eax
c011889b:	89 02                	mov    %eax,(%edx)
     q[n].priority=p->priority;
c011889d:	8b 55 10             	mov    0x10(%ebp),%edx
c01188a0:	89 d0                	mov    %edx,%eax
c01188a2:	01 c0                	add    %eax,%eax
c01188a4:	01 d0                	add    %edx,%eax
c01188a6:	c1 e0 02             	shl    $0x2,%eax
c01188a9:	89 c2                	mov    %eax,%edx
c01188ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c01188ae:	01 c2                	add    %eax,%edx
c01188b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01188b3:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c01188b9:	89 42 08             	mov    %eax,0x8(%edx)
     n++;
c01188bc:	83 45 10 01          	addl   $0x1,0x10(%ebp)
     n=inorder(a->left,q,n);
c01188c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01188c3:	8b 40 04             	mov    0x4(%eax),%eax
c01188c6:	8b 55 10             	mov    0x10(%ebp),%edx
c01188c9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01188cd:	8b 55 0c             	mov    0xc(%ebp),%edx
c01188d0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01188d4:	89 04 24             	mov    %eax,(%esp)
c01188d7:	e8 68 ff ff ff       	call   c0118844 <inorder>
c01188dc:	89 45 10             	mov    %eax,0x10(%ebp)
     n=inorder(a->right,q,n);
c01188df:	8b 45 08             	mov    0x8(%ebp),%eax
c01188e2:	8b 40 08             	mov    0x8(%eax),%eax
c01188e5:	8b 55 10             	mov    0x10(%ebp),%edx
c01188e8:	89 54 24 08          	mov    %edx,0x8(%esp)
c01188ec:	8b 55 0c             	mov    0xc(%ebp),%edx
c01188ef:	89 54 24 04          	mov    %edx,0x4(%esp)
c01188f3:	89 04 24             	mov    %eax,(%esp)
c01188f6:	e8 49 ff ff ff       	call   c0118844 <inorder>
c01188fb:	89 45 10             	mov    %eax,0x10(%ebp)
     return n;
c01188fe:	8b 45 10             	mov    0x10(%ebp),%eax


}
c0118901:	c9                   	leave  
c0118902:	c3                   	ret    

c0118903 <sort>:

void sort(struct stride_entry q[],int n)
{
c0118903:	55                   	push   %ebp
c0118904:	89 e5                	mov    %esp,%ebp
c0118906:	83 ec 20             	sub    $0x20,%esp
     int i,j;
     for(i=0;i<n;i++)
c0118909:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0118910:	e9 d0 00 00 00       	jmp    c01189e5 <sort+0xe2>
     {
          for(j=i+1;j<n;j++)
c0118915:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0118918:	83 c0 01             	add    $0x1,%eax
c011891b:	89 45 f8             	mov    %eax,-0x8(%ebp)
c011891e:	e9 b2 00 00 00       	jmp    c01189d5 <sort+0xd2>
          {
               if(q[j].stride<q[i].stride)
c0118923:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0118926:	89 d0                	mov    %edx,%eax
c0118928:	01 c0                	add    %eax,%eax
c011892a:	01 d0                	add    %edx,%eax
c011892c:	c1 e0 02             	shl    $0x2,%eax
c011892f:	89 c2                	mov    %eax,%edx
c0118931:	8b 45 08             	mov    0x8(%ebp),%eax
c0118934:	01 d0                	add    %edx,%eax
c0118936:	8b 48 04             	mov    0x4(%eax),%ecx
c0118939:	8b 55 fc             	mov    -0x4(%ebp),%edx
c011893c:	89 d0                	mov    %edx,%eax
c011893e:	01 c0                	add    %eax,%eax
c0118940:	01 d0                	add    %edx,%eax
c0118942:	c1 e0 02             	shl    $0x2,%eax
c0118945:	89 c2                	mov    %eax,%edx
c0118947:	8b 45 08             	mov    0x8(%ebp),%eax
c011894a:	01 d0                	add    %edx,%eax
c011894c:	8b 40 04             	mov    0x4(%eax),%eax
c011894f:	39 c1                	cmp    %eax,%ecx
c0118951:	7d 7e                	jge    c01189d1 <sort+0xce>
               {
                    struct stride_entry temp;
                    temp=q[j];
c0118953:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0118956:	89 d0                	mov    %edx,%eax
c0118958:	01 c0                	add    %eax,%eax
c011895a:	01 d0                	add    %edx,%eax
c011895c:	c1 e0 02             	shl    $0x2,%eax
c011895f:	89 c2                	mov    %eax,%edx
c0118961:	8b 45 08             	mov    0x8(%ebp),%eax
c0118964:	01 d0                	add    %edx,%eax
c0118966:	8b 10                	mov    (%eax),%edx
c0118968:	89 55 ec             	mov    %edx,-0x14(%ebp)
c011896b:	8b 50 04             	mov    0x4(%eax),%edx
c011896e:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0118971:	8b 40 08             	mov    0x8(%eax),%eax
c0118974:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    q[j]=q[i];
c0118977:	8b 55 f8             	mov    -0x8(%ebp),%edx
c011897a:	89 d0                	mov    %edx,%eax
c011897c:	01 c0                	add    %eax,%eax
c011897e:	01 d0                	add    %edx,%eax
c0118980:	c1 e0 02             	shl    $0x2,%eax
c0118983:	89 c2                	mov    %eax,%edx
c0118985:	8b 45 08             	mov    0x8(%ebp),%eax
c0118988:	01 c2                	add    %eax,%edx
c011898a:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c011898d:	89 c8                	mov    %ecx,%eax
c011898f:	01 c0                	add    %eax,%eax
c0118991:	01 c8                	add    %ecx,%eax
c0118993:	c1 e0 02             	shl    $0x2,%eax
c0118996:	89 c1                	mov    %eax,%ecx
c0118998:	8b 45 08             	mov    0x8(%ebp),%eax
c011899b:	01 c8                	add    %ecx,%eax
c011899d:	8b 08                	mov    (%eax),%ecx
c011899f:	89 0a                	mov    %ecx,(%edx)
c01189a1:	8b 48 04             	mov    0x4(%eax),%ecx
c01189a4:	89 4a 04             	mov    %ecx,0x4(%edx)
c01189a7:	8b 40 08             	mov    0x8(%eax),%eax
c01189aa:	89 42 08             	mov    %eax,0x8(%edx)
                    q[i]=temp;
c01189ad:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01189b0:	89 d0                	mov    %edx,%eax
c01189b2:	01 c0                	add    %eax,%eax
c01189b4:	01 d0                	add    %edx,%eax
c01189b6:	c1 e0 02             	shl    $0x2,%eax
c01189b9:	89 c2                	mov    %eax,%edx
c01189bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01189be:	01 d0                	add    %edx,%eax
c01189c0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01189c3:	89 10                	mov    %edx,(%eax)
c01189c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01189c8:	89 50 04             	mov    %edx,0x4(%eax)
c01189cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01189ce:	89 50 08             	mov    %edx,0x8(%eax)
void sort(struct stride_entry q[],int n)
{
     int i,j;
     for(i=0;i<n;i++)
     {
          for(j=i+1;j<n;j++)
c01189d1:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c01189d5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01189d8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01189db:	0f 8c 42 ff ff ff    	jl     c0118923 <sort+0x20>
}

void sort(struct stride_entry q[],int n)
{
     int i,j;
     for(i=0;i<n;i++)
c01189e1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01189e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01189e8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01189eb:	0f 8c 24 ff ff ff    	jl     c0118915 <sort+0x12>
                    q[j]=q[i];
                    q[i]=temp;
               }
          }
     }
}
c01189f1:	c9                   	leave  
c01189f2:	c3                   	ret    

c01189f3 <skew_heap_trav>:

static inline void skew_heap_trav(skew_heap_entry_t *a, int pid){
c01189f3:	55                   	push   %ebp
c01189f4:	89 e5                	mov    %esp,%ebp
c01189f6:	57                   	push   %edi
c01189f7:	56                   	push   %esi
c01189f8:	53                   	push   %ebx
c01189f9:	81 ec dc 04 00 00    	sub    $0x4dc,%esp
     struct stride_entry queue[100];
     int num=0;
c01189ff:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
     num=inorder(a,queue,num);
c0118a06:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0118a09:	89 44 24 08          	mov    %eax,0x8(%esp)
c0118a0d:	8d 85 30 fb ff ff    	lea    -0x4d0(%ebp),%eax
c0118a13:	89 44 24 04          	mov    %eax,0x4(%esp)
c0118a17:	8b 45 08             	mov    0x8(%ebp),%eax
c0118a1a:	89 04 24             	mov    %eax,(%esp)
c0118a1d:	e8 22 fe ff ff       	call   c0118844 <inorder>
c0118a22:	89 45 e0             	mov    %eax,-0x20(%ebp)
     sort(queue,num);
c0118a25:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0118a28:	89 44 24 04          	mov    %eax,0x4(%esp)
c0118a2c:	8d 85 30 fb ff ff    	lea    -0x4d0(%ebp),%eax
c0118a32:	89 04 24             	mov    %eax,(%esp)
c0118a35:	e8 c9 fe ff ff       	call   c0118903 <sort>
     int i;
//     cprintf("queue:");
     for(i=0;i<num;i++)
c0118a3a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c0118a41:	eb 65                	jmp    c0118aa8 <skew_heap_trav+0xb5>
     {
	if(pid != queue[i].pid)
c0118a43:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0118a46:	89 d0                	mov    %edx,%eax
c0118a48:	01 c0                	add    %eax,%eax
c0118a4a:	01 d0                	add    %edx,%eax
c0118a4c:	c1 e0 02             	shl    $0x2,%eax
c0118a4f:	8d 5d e8             	lea    -0x18(%ebp),%ebx
c0118a52:	01 d8                	add    %ebx,%eax
c0118a54:	2d b8 04 00 00       	sub    $0x4b8,%eax
c0118a59:	8b 00                	mov    (%eax),%eax
c0118a5b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0118a5e:	74 44                	je     c0118aa4 <skew_heap_trav+0xb1>
          cprintf("\t pid=%u priority=[%u] \n",queue[i].pid,queue[i].stride);
c0118a60:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0118a63:	89 d0                	mov    %edx,%eax
c0118a65:	01 c0                	add    %eax,%eax
c0118a67:	01 d0                	add    %edx,%eax
c0118a69:	c1 e0 02             	shl    $0x2,%eax
c0118a6c:	8d 75 e8             	lea    -0x18(%ebp),%esi
c0118a6f:	01 f0                	add    %esi,%eax
c0118a71:	2d b4 04 00 00       	sub    $0x4b4,%eax
c0118a76:	8b 08                	mov    (%eax),%ecx
c0118a78:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0118a7b:	89 d0                	mov    %edx,%eax
c0118a7d:	01 c0                	add    %eax,%eax
c0118a7f:	01 d0                	add    %edx,%eax
c0118a81:	c1 e0 02             	shl    $0x2,%eax
c0118a84:	8d 7d e8             	lea    -0x18(%ebp),%edi
c0118a87:	01 f8                	add    %edi,%eax
c0118a89:	2d b8 04 00 00       	sub    $0x4b8,%eax
c0118a8e:	8b 00                	mov    (%eax),%eax
c0118a90:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0118a94:	89 44 24 04          	mov    %eax,0x4(%esp)
c0118a98:	c7 04 24 56 71 12 c0 	movl   $0xc0127156,(%esp)
c0118a9f:	e8 4f 79 fe ff       	call   c01003f3 <cprintf>
     int num=0;
     num=inorder(a,queue,num);
     sort(queue,num);
     int i;
//     cprintf("queue:");
     for(i=0;i<num;i++)
c0118aa4:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c0118aa8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0118aab:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0118aae:	7c 93                	jl     c0118a43 <skew_heap_trav+0x50>
     {
	if(pid != queue[i].pid)
          cprintf("\t pid=%u priority=[%u] \n",queue[i].pid,queue[i].stride);
          //printf("%d ",queue[i].pid);
     }
     cprintf("\n-------------\n");
c0118ab0:	c7 04 24 6f 71 12 c0 	movl   $0xc012716f,(%esp)
c0118ab7:	e8 37 79 fe ff       	call   c01003f3 <cprintf>
}
c0118abc:	81 c4 dc 04 00 00    	add    $0x4dc,%esp
c0118ac2:	5b                   	pop    %ebx
c0118ac3:	5e                   	pop    %esi
c0118ac4:	5f                   	pop    %edi
c0118ac5:	5d                   	pop    %ebp
c0118ac6:	c3                   	ret    

c0118ac7 <do_stride_queue>:

void do_stride_queue(int pid)
{
c0118ac7:	55                   	push   %ebp
c0118ac8:	89 e5                	mov    %esp,%ebp
c0118aca:	83 ec 18             	sub    $0x18,%esp
    skew_heap_trav(rq->lab6_run_pool, pid);
c0118acd:	a1 dc 00 17 c0       	mov    0xc01700dc,%eax
c0118ad2:	8b 40 10             	mov    0x10(%eax),%eax
c0118ad5:	8b 55 08             	mov    0x8(%ebp),%edx
c0118ad8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0118adc:	89 04 24             	mov    %eax,(%esp)
c0118adf:	e8 0f ff ff ff       	call   c01189f3 <skew_heap_trav>
}
c0118ae4:	c9                   	leave  
c0118ae5:	c3                   	ret    

c0118ae6 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c0118ae6:	55                   	push   %ebp
c0118ae7:	89 e5                	mov    %esp,%ebp
c0118ae9:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c0118aec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0118af0:	75 08                	jne    c0118afa <skew_heap_merge+0x14>
c0118af2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118af5:	e9 bd 00 00 00       	jmp    c0118bb7 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c0118afa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0118afe:	75 08                	jne    c0118b08 <skew_heap_merge+0x22>
c0118b00:	8b 45 08             	mov    0x8(%ebp),%eax
c0118b03:	e9 af 00 00 00       	jmp    c0118bb7 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c0118b08:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118b0b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0118b0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0118b12:	89 04 24             	mov    %eax,(%esp)
c0118b15:	8b 45 10             	mov    0x10(%ebp),%eax
c0118b18:	ff d0                	call   *%eax
c0118b1a:	83 f8 ff             	cmp    $0xffffffff,%eax
c0118b1d:	75 4d                	jne    c0118b6c <skew_heap_merge+0x86>
     {
          r = a->left;
c0118b1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0118b22:	8b 40 04             	mov    0x4(%eax),%eax
c0118b25:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c0118b28:	8b 45 08             	mov    0x8(%ebp),%eax
c0118b2b:	8b 40 08             	mov    0x8(%eax),%eax
c0118b2e:	8b 55 10             	mov    0x10(%ebp),%edx
c0118b31:	89 54 24 08          	mov    %edx,0x8(%esp)
c0118b35:	8b 55 0c             	mov    0xc(%ebp),%edx
c0118b38:	89 54 24 04          	mov    %edx,0x4(%esp)
c0118b3c:	89 04 24             	mov    %eax,(%esp)
c0118b3f:	e8 a2 ff ff ff       	call   c0118ae6 <skew_heap_merge>
c0118b44:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c0118b47:	8b 45 08             	mov    0x8(%ebp),%eax
c0118b4a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0118b4d:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c0118b50:	8b 45 08             	mov    0x8(%ebp),%eax
c0118b53:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0118b56:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c0118b59:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0118b5d:	74 08                	je     c0118b67 <skew_heap_merge+0x81>
c0118b5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118b62:	8b 55 08             	mov    0x8(%ebp),%edx
c0118b65:	89 10                	mov    %edx,(%eax)

          return a;
c0118b67:	8b 45 08             	mov    0x8(%ebp),%eax
c0118b6a:	eb 4b                	jmp    c0118bb7 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c0118b6c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118b6f:	8b 40 04             	mov    0x4(%eax),%eax
c0118b72:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c0118b75:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118b78:	8b 40 08             	mov    0x8(%eax),%eax
c0118b7b:	8b 55 10             	mov    0x10(%ebp),%edx
c0118b7e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0118b82:	89 44 24 04          	mov    %eax,0x4(%esp)
c0118b86:	8b 45 08             	mov    0x8(%ebp),%eax
c0118b89:	89 04 24             	mov    %eax,(%esp)
c0118b8c:	e8 55 ff ff ff       	call   c0118ae6 <skew_heap_merge>
c0118b91:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c0118b94:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118b97:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0118b9a:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c0118b9d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118ba0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0118ba3:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c0118ba6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0118baa:	74 08                	je     c0118bb4 <skew_heap_merge+0xce>
c0118bac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118baf:	8b 55 0c             	mov    0xc(%ebp),%edx
c0118bb2:	89 10                	mov    %edx,(%eax)

          return b;
c0118bb4:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c0118bb7:	c9                   	leave  
c0118bb8:	c3                   	ret    

c0118bb9 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c0118bb9:	55                   	push   %ebp
c0118bba:	89 e5                	mov    %esp,%ebp
c0118bbc:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c0118bbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0118bc2:	2d b0 00 00 00       	sub    $0xb0,%eax
c0118bc7:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c0118bca:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118bcd:	2d b0 00 00 00       	sub    $0xb0,%eax
c0118bd2:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->stride - q->stride;
c0118bd5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0118bd8:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c0118bde:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0118be1:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c0118be7:	29 c2                	sub    %eax,%edx
c0118be9:	89 d0                	mov    %edx,%eax
c0118beb:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c0118bee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0118bf2:	7e 07                	jle    c0118bfb <proc_stride_comp_f+0x42>
c0118bf4:	b8 01 00 00 00       	mov    $0x1,%eax
c0118bf9:	eb 12                	jmp    c0118c0d <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c0118bfb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0118bff:	75 07                	jne    c0118c08 <proc_stride_comp_f+0x4f>
c0118c01:	b8 00 00 00 00       	mov    $0x0,%eax
c0118c06:	eb 05                	jmp    c0118c0d <proc_stride_comp_f+0x54>
     else return -1;
c0118c08:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c0118c0d:	c9                   	leave  
c0118c0e:	c3                   	ret    

c0118c0f <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see proj13.1/libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c0118c0f:	55                   	push   %ebp
c0118c10:	89 e5                	mov    %esp,%ebp
c0118c12:	83 ec 10             	sub    $0x10,%esp

     list_init(&(rq->run_list));
c0118c15:	8b 45 08             	mov    0x8(%ebp),%eax
c0118c18:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0118c1b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0118c1e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0118c21:	89 50 04             	mov    %edx,0x4(%eax)
c0118c24:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0118c27:	8b 50 04             	mov    0x4(%eax),%edx
c0118c2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0118c2d:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c0118c2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0118c32:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c0118c39:	8b 45 08             	mov    0x8(%ebp),%eax
c0118c3c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c0118c43:	c9                   	leave  
c0118c44:	c3                   	ret    

c0118c45 <stride_enqueue>:
 * 
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c0118c45:	55                   	push   %ebp
c0118c46:	89 e5                	mov    %esp,%ebp
c0118c48:	83 ec 28             	sub    $0x28,%esp

#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c0118c4b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118c4e:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c0118c54:	8b 45 08             	mov    0x8(%ebp),%eax
c0118c57:	8b 40 10             	mov    0x10(%eax),%eax
c0118c5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0118c5d:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0118c60:	c7 45 ec b9 8b 11 c0 	movl   $0xc0118bb9,-0x14(%ebp)
c0118c67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118c6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c0118c6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0118c70:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0118c76:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0118c79:	8b 10                	mov    (%eax),%edx
c0118c7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0118c7e:	89 50 08             	mov    %edx,0x8(%eax)
c0118c81:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0118c84:	8b 50 08             	mov    0x8(%eax),%edx
c0118c87:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0118c8a:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c0118c8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0118c90:	89 44 24 08          	mov    %eax,0x8(%esp)
c0118c94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118c97:	89 44 24 04          	mov    %eax,0x4(%esp)
c0118c9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118c9e:	89 04 24             	mov    %eax,(%esp)
c0118ca1:	e8 40 fe ff ff       	call   c0118ae6 <skew_heap_merge>
c0118ca6:	89 c2                	mov    %eax,%edx
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {

#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c0118ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0118cab:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(list_empty(&(proc->run_link)));
     list_add_before(&(rq->run_list), &(proc->run_link));
#endif
     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c0118cae:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118cb1:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c0118cb7:	85 c0                	test   %eax,%eax
c0118cb9:	74 13                	je     c0118cce <stride_enqueue+0x89>
c0118cbb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118cbe:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c0118cc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0118cc7:	8b 40 0c             	mov    0xc(%eax),%eax
c0118cca:	39 c2                	cmp    %eax,%edx
c0118ccc:	7e 0f                	jle    c0118cdd <stride_enqueue+0x98>
          proc->time_slice = rq->max_time_slice;
c0118cce:	8b 45 08             	mov    0x8(%ebp),%eax
c0118cd1:	8b 50 0c             	mov    0xc(%eax),%edx
c0118cd4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118cd7:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     proc->rq = rq;
c0118cdd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118ce0:	8b 55 08             	mov    0x8(%ebp),%edx
c0118ce3:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
     rq->proc_num ++;
c0118ce9:	8b 45 08             	mov    0x8(%ebp),%eax
c0118cec:	8b 40 08             	mov    0x8(%eax),%eax
c0118cef:	8d 50 01             	lea    0x1(%eax),%edx
c0118cf2:	8b 45 08             	mov    0x8(%ebp),%eax
c0118cf5:	89 50 08             	mov    %edx,0x8(%eax)
}
c0118cf8:	c9                   	leave  
c0118cf9:	c3                   	ret    

c0118cfa <stride_dequeue>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c0118cfa:	55                   	push   %ebp
c0118cfb:	89 e5                	mov    %esp,%ebp
c0118cfd:	83 ec 38             	sub    $0x38,%esp

#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c0118d00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118d03:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c0118d09:	8b 45 08             	mov    0x8(%ebp),%eax
c0118d0c:	8b 40 10             	mov    0x10(%eax),%eax
c0118d0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0118d12:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0118d15:	c7 45 ec b9 8b 11 c0 	movl   $0xc0118bb9,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c0118d1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118d1f:	8b 00                	mov    (%eax),%eax
c0118d21:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c0118d24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118d27:	8b 50 08             	mov    0x8(%eax),%edx
c0118d2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118d2d:	8b 40 04             	mov    0x4(%eax),%eax
c0118d30:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0118d33:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0118d37:	89 54 24 04          	mov    %edx,0x4(%esp)
c0118d3b:	89 04 24             	mov    %eax,(%esp)
c0118d3e:	e8 a3 fd ff ff       	call   c0118ae6 <skew_heap_merge>
c0118d43:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c0118d46:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0118d4a:	74 08                	je     c0118d54 <stride_dequeue+0x5a>
c0118d4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0118d4f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0118d52:	89 10                	mov    %edx,(%eax)
     
     if (p)
c0118d54:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0118d58:	74 24                	je     c0118d7e <stride_dequeue+0x84>
     {
          if (p->left == b)
c0118d5a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0118d5d:	8b 40 04             	mov    0x4(%eax),%eax
c0118d60:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0118d63:	75 0b                	jne    c0118d70 <stride_dequeue+0x76>
               p->left = rep;
c0118d65:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0118d68:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0118d6b:	89 50 04             	mov    %edx,0x4(%eax)
c0118d6e:	eb 09                	jmp    c0118d79 <stride_dequeue+0x7f>
          else p->right = rep;
c0118d70:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0118d73:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0118d76:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c0118d79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118d7c:	eb 03                	jmp    c0118d81 <stride_dequeue+0x87>
     }
     else return rep;
c0118d7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0118d81:	89 c2                	mov    %eax,%edx
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {

#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c0118d83:	8b 45 08             	mov    0x8(%ebp),%eax
c0118d86:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
     list_del_init(&(proc->run_link));
#endif
     rq->proc_num --;
c0118d89:	8b 45 08             	mov    0x8(%ebp),%eax
c0118d8c:	8b 40 08             	mov    0x8(%eax),%eax
c0118d8f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0118d92:	8b 45 08             	mov    0x8(%ebp),%eax
c0118d95:	89 50 08             	mov    %edx,0x8(%eax)
}
c0118d98:	c9                   	leave  
c0118d99:	c3                   	ret    

c0118d9a <stride_pick_next>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c0118d9a:	55                   	push   %ebp
c0118d9b:	89 e5                	mov    %esp,%ebp
c0118d9d:	53                   	push   %ebx
c0118d9e:	83 ec 24             	sub    $0x24,%esp

#if USE_SKEW_HEAP
     if (rq->lab6_run_pool == NULL) return NULL;
c0118da1:	8b 45 08             	mov    0x8(%ebp),%eax
c0118da4:	8b 40 10             	mov    0x10(%eax),%eax
c0118da7:	85 c0                	test   %eax,%eax
c0118da9:	75 0a                	jne    c0118db5 <stride_pick_next+0x1b>
c0118dab:	b8 00 00 00 00       	mov    $0x0,%eax
c0118db0:	e9 9c 00 00 00       	jmp    c0118e51 <stride_pick_next+0xb7>
     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c0118db5:	8b 45 08             	mov    0x8(%ebp),%eax
c0118db8:	8b 40 10             	mov    0x10(%eax),%eax
c0118dbb:	2d b0 00 00 00       	sub    $0xb0,%eax
c0118dc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
          if ((int32_t)(p->stride - q->stride) > 0)
               p = q;
          le = list_next(le);
     }
#endif
     if(p->pid !=2 && p->pid!=1)
c0118dc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118dc6:	8b 40 04             	mov    0x4(%eax),%eax
c0118dc9:	83 f8 02             	cmp    $0x2,%eax
c0118dcc:	74 2f                	je     c0118dfd <stride_pick_next+0x63>
c0118dce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118dd1:	8b 40 04             	mov    0x4(%eax),%eax
c0118dd4:	83 f8 01             	cmp    $0x1,%eax
c0118dd7:	74 24                	je     c0118dfd <stride_pick_next+0x63>
	{
		cprintf("proc %d is running \n" ,p->pid);
c0118dd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118ddc:	8b 40 04             	mov    0x4(%eax),%eax
c0118ddf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0118de3:	c7 04 24 7f 71 12 c0 	movl   $0xc012717f,(%esp)
c0118dea:	e8 04 76 fe ff       	call   c01003f3 <cprintf>
		do_stride_queue(p->pid);
c0118def:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118df2:	8b 40 04             	mov    0x4(%eax),%eax
c0118df5:	89 04 24             	mov    %eax,(%esp)
c0118df8:	e8 ca fc ff ff       	call   c0118ac7 <do_stride_queue>
	}

     if (p->priority == 0)
c0118dfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118e00:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c0118e06:	85 c0                	test   %eax,%eax
c0118e08:	75 1a                	jne    c0118e24 <stride_pick_next+0x8a>
          p->stride += BIG_STRIDE;
c0118e0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118e0d:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c0118e13:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c0118e19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118e1c:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
c0118e22:	eb 2a                	jmp    c0118e4e <stride_pick_next+0xb4>
     else p->stride += BIG_STRIDE / p->priority;
c0118e24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118e27:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c0118e2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118e30:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c0118e36:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c0118e3b:	ba 00 00 00 00       	mov    $0x0,%edx
c0118e40:	f7 f3                	div    %ebx
c0118e42:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0118e45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118e48:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
     
     	
     return p;
c0118e4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0118e51:	83 c4 24             	add    $0x24,%esp
c0118e54:	5b                   	pop    %ebx
c0118e55:	5d                   	pop    %ebp
c0118e56:	c3                   	ret    

c0118e57 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c0118e57:	55                   	push   %ebp
c0118e58:	89 e5                	mov    %esp,%ebp

     if (proc->time_slice > 0) {
c0118e5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118e5d:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c0118e63:	85 c0                	test   %eax,%eax
c0118e65:	7e 15                	jle    c0118e7c <stride_proc_tick+0x25>
          proc->time_slice --;
c0118e67:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118e6a:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c0118e70:	8d 50 ff             	lea    -0x1(%eax),%edx
c0118e73:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118e76:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     if (proc->time_slice == 0) {
c0118e7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118e7f:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c0118e85:	85 c0                	test   %eax,%eax
c0118e87:	75 0a                	jne    c0118e93 <stride_proc_tick+0x3c>
          proc->need_resched = 1;
c0118e89:	8b 45 0c             	mov    0xc(%ebp),%eax
c0118e8c:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
     }
}
c0118e93:	5d                   	pop    %ebp
c0118e94:	c3                   	ret    

c0118e95 <stride_user_check>:

static int
stride_user_check(void){
c0118e95:	55                   	push   %ebp
c0118e96:	89 e5                	mov    %esp,%ebp
	return 0;
c0118e98:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0118e9d:	5d                   	pop    %ebp
c0118e9e:	c3                   	ret    

c0118e9f <sys_exit>:
#include <sysfile.h>
#include <swap.h>
#include <sched.h>

static int
sys_exit(uint32_t arg[]) {
c0118e9f:	55                   	push   %ebp
c0118ea0:	89 e5                	mov    %esp,%ebp
c0118ea2:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c0118ea5:	8b 45 08             	mov    0x8(%ebp),%eax
c0118ea8:	8b 00                	mov    (%eax),%eax
c0118eaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c0118ead:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118eb0:	89 04 24             	mov    %eax,(%esp)
c0118eb3:	e8 59 ce ff ff       	call   c0115d11 <do_exit>
}
c0118eb8:	c9                   	leave  
c0118eb9:	c3                   	ret    

c0118eba <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c0118eba:	55                   	push   %ebp
c0118ebb:	89 e5                	mov    %esp,%ebp
c0118ebd:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c0118ec0:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0118ec5:	8b 40 3c             	mov    0x3c(%eax),%eax
c0118ec8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c0118ecb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118ece:	8b 40 44             	mov    0x44(%eax),%eax
c0118ed1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c0118ed4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118ed7:	89 44 24 08          	mov    %eax,0x8(%esp)
c0118edb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118ede:	89 44 24 04          	mov    %eax,0x4(%esp)
c0118ee2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0118ee9:	e8 63 cc ff ff       	call   c0115b51 <do_fork>
}
c0118eee:	c9                   	leave  
c0118eef:	c3                   	ret    

c0118ef0 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c0118ef0:	55                   	push   %ebp
c0118ef1:	89 e5                	mov    %esp,%ebp
c0118ef3:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c0118ef6:	8b 45 08             	mov    0x8(%ebp),%eax
c0118ef9:	8b 00                	mov    (%eax),%eax
c0118efb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c0118efe:	8b 45 08             	mov    0x8(%ebp),%eax
c0118f01:	83 c0 04             	add    $0x4,%eax
c0118f04:	8b 00                	mov    (%eax),%eax
c0118f06:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c0118f09:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118f0c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0118f10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118f13:	89 04 24             	mov    %eax,(%esp)
c0118f16:	e8 ff db ff ff       	call   c0116b1a <do_wait>
}
c0118f1b:	c9                   	leave  
c0118f1c:	c3                   	ret    

c0118f1d <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c0118f1d:	55                   	push   %ebp
c0118f1e:	89 e5                	mov    %esp,%ebp
c0118f20:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c0118f23:	8b 45 08             	mov    0x8(%ebp),%eax
c0118f26:	8b 00                	mov    (%eax),%eax
c0118f28:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int argc = (int)arg[1];
c0118f2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0118f2e:	83 c0 04             	add    $0x4,%eax
c0118f31:	8b 00                	mov    (%eax),%eax
c0118f33:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char **argv = (const char **)arg[2];
c0118f36:	8b 45 08             	mov    0x8(%ebp),%eax
c0118f39:	83 c0 08             	add    $0x8,%eax
c0118f3c:	8b 00                	mov    (%eax),%eax
c0118f3e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return do_execve(name, argc, argv);
c0118f41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0118f44:	89 44 24 08          	mov    %eax,0x8(%esp)
c0118f48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0118f4b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0118f4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118f52:	89 04 24             	mov    %eax,(%esp)
c0118f55:	e8 6d d9 ff ff       	call   c01168c7 <do_execve>
}
c0118f5a:	c9                   	leave  
c0118f5b:	c3                   	ret    

c0118f5c <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c0118f5c:	55                   	push   %ebp
c0118f5d:	89 e5                	mov    %esp,%ebp
c0118f5f:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c0118f62:	e8 9d db ff ff       	call   c0116b04 <do_yield>
}
c0118f67:	c9                   	leave  
c0118f68:	c3                   	ret    

c0118f69 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c0118f69:	55                   	push   %ebp
c0118f6a:	89 e5                	mov    %esp,%ebp
c0118f6c:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c0118f6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0118f72:	8b 00                	mov    (%eax),%eax
c0118f74:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c0118f77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118f7a:	89 04 24             	mov    %eax,(%esp)
c0118f7d:	e8 38 dd ff ff       	call   c0116cba <do_kill>
}
c0118f82:	c9                   	leave  
c0118f83:	c3                   	ret    

c0118f84 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c0118f84:	55                   	push   %ebp
c0118f85:	89 e5                	mov    %esp,%ebp
    return current->pid;
c0118f87:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0118f8c:	8b 40 04             	mov    0x4(%eax),%eax
}
c0118f8f:	5d                   	pop    %ebp
c0118f90:	c3                   	ret    

c0118f91 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c0118f91:	55                   	push   %ebp
c0118f92:	89 e5                	mov    %esp,%ebp
c0118f94:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c0118f97:	8b 45 08             	mov    0x8(%ebp),%eax
c0118f9a:	8b 00                	mov    (%eax),%eax
c0118f9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c0118f9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118fa2:	89 04 24             	mov    %eax,(%esp)
c0118fa5:	e8 6f 74 fe ff       	call   c0100419 <cputchar>
    return 0;
c0118faa:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0118faf:	c9                   	leave  
c0118fb0:	c3                   	ret    

c0118fb1 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c0118fb1:	55                   	push   %ebp
c0118fb2:	89 e5                	mov    %esp,%ebp
c0118fb4:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c0118fb7:	e8 9f 4f ff ff       	call   c010df5b <print_pgdir>
    return 0;
c0118fbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0118fc1:	c9                   	leave  
c0118fc2:	c3                   	ret    

c0118fc3 <sys_gettime>:

static uint32_t
sys_gettime(uint32_t arg[]) {
c0118fc3:	55                   	push   %ebp
c0118fc4:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c0118fc6:	a1 50 11 17 c0       	mov    0xc0171150,%eax
}
c0118fcb:	5d                   	pop    %ebp
c0118fcc:	c3                   	ret    

c0118fcd <sys_lab6_set_priority>:
static uint32_t
sys_lab6_set_priority(uint32_t arg[])
{
c0118fcd:	55                   	push   %ebp
c0118fce:	89 e5                	mov    %esp,%ebp
c0118fd0:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c0118fd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0118fd6:	8b 00                	mov    (%eax),%eax
c0118fd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c0118fdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118fde:	89 04 24             	mov    %eax,(%esp)
c0118fe1:	e8 53 e3 ff ff       	call   c0117339 <lab6_set_priority>
    return 0;
c0118fe6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0118feb:	c9                   	leave  
c0118fec:	c3                   	ret    

c0118fed <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c0118fed:	55                   	push   %ebp
c0118fee:	89 e5                	mov    %esp,%ebp
c0118ff0:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c0118ff3:	8b 45 08             	mov    0x8(%ebp),%eax
c0118ff6:	8b 00                	mov    (%eax),%eax
c0118ff8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c0118ffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0118ffe:	89 04 24             	mov    %eax,(%esp)
c0119001:	e8 5d e3 ff ff       	call   c0117363 <do_sleep>
}
c0119006:	c9                   	leave  
c0119007:	c3                   	ret    

c0119008 <sys_open>:

static int
sys_open(uint32_t arg[]) {
c0119008:	55                   	push   %ebp
c0119009:	89 e5                	mov    %esp,%ebp
c011900b:	83 ec 28             	sub    $0x28,%esp
    const char *path = (const char *)arg[0];
c011900e:	8b 45 08             	mov    0x8(%ebp),%eax
c0119011:	8b 00                	mov    (%eax),%eax
c0119013:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t open_flags = (uint32_t)arg[1];
c0119016:	8b 45 08             	mov    0x8(%ebp),%eax
c0119019:	8b 40 04             	mov    0x4(%eax),%eax
c011901c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_open(path, open_flags);
c011901f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119022:	89 44 24 04          	mov    %eax,0x4(%esp)
c0119026:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119029:	89 04 24             	mov    %eax,(%esp)
c011902c:	e8 50 b6 ff ff       	call   c0114681 <sysfile_open>
}
c0119031:	c9                   	leave  
c0119032:	c3                   	ret    

c0119033 <sys_delete>:

static int
sys_delete(uint32_t arg[]) {
c0119033:	55                   	push   %ebp
c0119034:	89 e5                	mov    %esp,%ebp
c0119036:	83 ec 28             	sub    $0x28,%esp
	const char *path = (const char *)arg[0];
c0119039:	8b 45 08             	mov    0x8(%ebp),%eax
c011903c:	8b 00                	mov    (%eax),%eax
c011903e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t type = (uint32_t)arg[1];
c0119041:	8b 45 08             	mov    0x8(%ebp),%eax
c0119044:	8b 40 04             	mov    0x4(%eax),%eax
c0119047:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return sysfile_delete(path, type);
c011904a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011904d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0119051:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119054:	89 04 24             	mov    %eax,(%esp)
c0119057:	e8 70 b6 ff ff       	call   c01146cc <sysfile_delete>
}
c011905c:	c9                   	leave  
c011905d:	c3                   	ret    

c011905e <sys_close>:

static int
sys_close(uint32_t arg[]) {
c011905e:	55                   	push   %ebp
c011905f:	89 e5                	mov    %esp,%ebp
c0119061:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c0119064:	8b 45 08             	mov    0x8(%ebp),%eax
c0119067:	8b 00                	mov    (%eax),%eax
c0119069:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_close(fd);
c011906c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011906f:	89 04 24             	mov    %eax,(%esp)
c0119072:	e8 a0 b6 ff ff       	call   c0114717 <sysfile_close>
}
c0119077:	c9                   	leave  
c0119078:	c3                   	ret    

c0119079 <sys_read>:

static int
sys_read(uint32_t arg[]) {
c0119079:	55                   	push   %ebp
c011907a:	89 e5                	mov    %esp,%ebp
c011907c:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c011907f:	8b 45 08             	mov    0x8(%ebp),%eax
c0119082:	8b 00                	mov    (%eax),%eax
c0119084:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c0119087:	8b 45 08             	mov    0x8(%ebp),%eax
c011908a:	83 c0 04             	add    $0x4,%eax
c011908d:	8b 00                	mov    (%eax),%eax
c011908f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c0119092:	8b 45 08             	mov    0x8(%ebp),%eax
c0119095:	8b 40 08             	mov    0x8(%eax),%eax
c0119098:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_read(fd, base, len);
c011909b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011909e:	89 44 24 08          	mov    %eax,0x8(%esp)
c01190a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01190a5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01190a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01190ac:	89 04 24             	mov    %eax,(%esp)
c01190af:	e8 76 b6 ff ff       	call   c011472a <sysfile_read>
}
c01190b4:	c9                   	leave  
c01190b5:	c3                   	ret    

c01190b6 <sys_write>:

static int
sys_write(uint32_t arg[]) {
c01190b6:	55                   	push   %ebp
c01190b7:	89 e5                	mov    %esp,%ebp
c01190b9:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c01190bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01190bf:	8b 00                	mov    (%eax),%eax
c01190c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c01190c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01190c7:	83 c0 04             	add    $0x4,%eax
c01190ca:	8b 00                	mov    (%eax),%eax
c01190cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c01190cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01190d2:	8b 40 08             	mov    0x8(%eax),%eax
c01190d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_write(fd, base, len);
c01190d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01190db:	89 44 24 08          	mov    %eax,0x8(%esp)
c01190df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01190e2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01190e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01190e9:	89 04 24             	mov    %eax,(%esp)
c01190ec:	e8 b1 b7 ff ff       	call   c01148a2 <sysfile_write>
}
c01190f1:	c9                   	leave  
c01190f2:	c3                   	ret    

c01190f3 <sys_seek>:

static int
sys_seek(uint32_t arg[]) {
c01190f3:	55                   	push   %ebp
c01190f4:	89 e5                	mov    %esp,%ebp
c01190f6:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c01190f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01190fc:	8b 00                	mov    (%eax),%eax
c01190fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    off_t pos = (off_t)arg[1];
c0119101:	8b 45 08             	mov    0x8(%ebp),%eax
c0119104:	83 c0 04             	add    $0x4,%eax
c0119107:	8b 00                	mov    (%eax),%eax
c0119109:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int whence = (int)arg[2];
c011910c:	8b 45 08             	mov    0x8(%ebp),%eax
c011910f:	83 c0 08             	add    $0x8,%eax
c0119112:	8b 00                	mov    (%eax),%eax
c0119114:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_seek(fd, pos, whence);
c0119117:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011911a:	89 44 24 08          	mov    %eax,0x8(%esp)
c011911e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119121:	89 44 24 04          	mov    %eax,0x4(%esp)
c0119125:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119128:	89 04 24             	mov    %eax,(%esp)
c011912b:	e8 ec b8 ff ff       	call   c0114a1c <sysfile_seek>
}
c0119130:	c9                   	leave  
c0119131:	c3                   	ret    

c0119132 <sys_fstat>:

static int
sys_fstat(uint32_t arg[]) {
c0119132:	55                   	push   %ebp
c0119133:	89 e5                	mov    %esp,%ebp
c0119135:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c0119138:	8b 45 08             	mov    0x8(%ebp),%eax
c011913b:	8b 00                	mov    (%eax),%eax
c011913d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct stat *stat = (struct stat *)arg[1];
c0119140:	8b 45 08             	mov    0x8(%ebp),%eax
c0119143:	83 c0 04             	add    $0x4,%eax
c0119146:	8b 00                	mov    (%eax),%eax
c0119148:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_fstat(fd, stat);
c011914b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011914e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0119152:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119155:	89 04 24             	mov    %eax,(%esp)
c0119158:	e8 e0 b8 ff ff       	call   c0114a3d <sysfile_fstat>
}
c011915d:	c9                   	leave  
c011915e:	c3                   	ret    

c011915f <sys_fsync>:

static int
sys_fsync(uint32_t arg[]) {
c011915f:	55                   	push   %ebp
c0119160:	89 e5                	mov    %esp,%ebp
c0119162:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c0119165:	8b 45 08             	mov    0x8(%ebp),%eax
c0119168:	8b 00                	mov    (%eax),%eax
c011916a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_fsync(fd);
c011916d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119170:	89 04 24             	mov    %eax,(%esp)
c0119173:	e8 43 b9 ff ff       	call   c0114abb <sysfile_fsync>
}
c0119178:	c9                   	leave  
c0119179:	c3                   	ret    

c011917a <sys_getcwd>:

static int
sys_getcwd(uint32_t arg[]) {
c011917a:	55                   	push   %ebp
c011917b:	89 e5                	mov    %esp,%ebp
c011917d:	83 ec 28             	sub    $0x28,%esp
    char *buf = (char *)arg[0];
c0119180:	8b 45 08             	mov    0x8(%ebp),%eax
c0119183:	8b 00                	mov    (%eax),%eax
c0119185:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c0119188:	8b 45 08             	mov    0x8(%ebp),%eax
c011918b:	8b 40 04             	mov    0x4(%eax),%eax
c011918e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getcwd(buf, len);
c0119191:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119194:	89 44 24 04          	mov    %eax,0x4(%esp)
c0119198:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011919b:	89 04 24             	mov    %eax,(%esp)
c011919e:	e8 b5 ba ff ff       	call   c0114c58 <sysfile_getcwd>
}
c01191a3:	c9                   	leave  
c01191a4:	c3                   	ret    

c01191a5 <sys_mkdir>:

static int
sys_mkdir(uint32_t arg[]) {
c01191a5:	55                   	push   %ebp
c01191a6:	89 e5                	mov    %esp,%ebp
c01191a8:	83 ec 28             	sub    $0x28,%esp
	const char *path = (const char *)arg[0];
c01191ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01191ae:	8b 00                	mov    (%eax),%eax
c01191b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return sysfile_mkdir(path);
c01191b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01191b6:	89 04 24             	mov    %eax,(%esp)
c01191b9:	e8 31 bb ff ff       	call   c0114cef <sysfile_mkdir>
}
c01191be:	c9                   	leave  
c01191bf:	c3                   	ret    

c01191c0 <sys_getdirentry>:

static int
sys_getdirentry(uint32_t arg[]) {
c01191c0:	55                   	push   %ebp
c01191c1:	89 e5                	mov    %esp,%ebp
c01191c3:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c01191c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01191c9:	8b 00                	mov    (%eax),%eax
c01191cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct dirent *direntp = (struct dirent *)arg[1];
c01191ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01191d1:	83 c0 04             	add    $0x4,%eax
c01191d4:	8b 00                	mov    (%eax),%eax
c01191d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getdirentry(fd, direntp);
c01191d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01191dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01191e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01191e3:	89 04 24             	mov    %eax,(%esp)
c01191e6:	e8 48 bb ff ff       	call   c0114d33 <sysfile_getdirentry>
}
c01191eb:	c9                   	leave  
c01191ec:	c3                   	ret    

c01191ed <sys_dup>:

static int
sys_dup(uint32_t arg[]) {
c01191ed:	55                   	push   %ebp
c01191ee:	89 e5                	mov    %esp,%ebp
c01191f0:	83 ec 28             	sub    $0x28,%esp
    int fd1 = (int)arg[0];
c01191f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01191f6:	8b 00                	mov    (%eax),%eax
c01191f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int fd2 = (int)arg[1];
c01191fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01191fe:	83 c0 04             	add    $0x4,%eax
c0119201:	8b 00                	mov    (%eax),%eax
c0119203:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_dup(fd1, fd2);
c0119206:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119209:	89 44 24 04          	mov    %eax,0x4(%esp)
c011920d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119210:	89 04 24             	mov    %eax,(%esp)
c0119213:	e8 0f bc ff ff       	call   c0114e27 <sysfile_dup>
}
c0119218:	c9                   	leave  
c0119219:	c3                   	ret    

c011921a <sys_malloc>:

static int
sys_malloc(uint32_t arg[]){
c011921a:	55                   	push   %ebp
c011921b:	89 e5                	mov    %esp,%ebp
c011921d:	83 ec 28             	sub    $0x28,%esp
    int n = (int)arg[0];
c0119220:	8b 45 08             	mov    0x8(%ebp),%eax
c0119223:	8b 00                	mov    (%eax),%eax
c0119225:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_malloc(n);
c0119228:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011922b:	89 04 24             	mov    %eax,(%esp)
c011922e:	e8 b0 e1 ff ff       	call   c01173e3 <do_malloc>
}
c0119233:	c9                   	leave  
c0119234:	c3                   	ret    

c0119235 <sys_queue>:

static void
sys_queue(void){
c0119235:	55                   	push   %ebp
c0119236:	89 e5                	mov    %esp,%ebp
c0119238:	83 ec 08             	sub    $0x8,%esp
    do_queue();
c011923b:	e8 33 f5 ff ff       	call   c0118773 <do_queue>
}
c0119240:	c9                   	leave  
c0119241:	c3                   	ret    

c0119242 <sys_listProc>:

static int 
sys_listProc(uint32_t arg[]){
c0119242:	55                   	push   %ebp
c0119243:	89 e5                	mov    %esp,%ebp
c0119245:	83 ec 08             	sub    $0x8,%esp
    print_listProc();
c0119248:	e8 0f e3 ff ff       	call   c011755c <print_listProc>
    return 0;
c011924d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0119252:	c9                   	leave  
c0119253:	c3                   	ret    

c0119254 <sys_current_vm>:

static void
sys_current_vm(void){
c0119254:	55                   	push   %ebp
c0119255:	89 e5                	mov    %esp,%ebp
c0119257:	83 ec 08             	sub    $0x8,%esp
    print_current_vm();
c011925a:	e8 3b e4 ff ff       	call   c011769a <print_current_vm>
    return 0;
c011925f:	90                   	nop
}
c0119260:	c9                   	leave  
c0119261:	c3                   	ret    

c0119262 <sys_mem>:

static void
sys_mem(void){
c0119262:	55                   	push   %ebp
c0119263:	89 e5                	mov    %esp,%ebp
c0119265:	83 ec 08             	sub    $0x8,%esp
    do_mem();
c0119268:	e8 04 e5 ff ff       	call   c0117771 <do_mem>
    return 0;
c011926d:	90                   	nop
}
c011926e:	c9                   	leave  
c011926f:	c3                   	ret    

c0119270 <sys_chcwd>:

static int
sys_chcwd(uint32_t arg[]) {
c0119270:	55                   	push   %ebp
c0119271:	89 e5                	mov    %esp,%ebp
c0119273:	83 ec 28             	sub    $0x28,%esp
	const char *path = (const char *)arg[0];
c0119276:	8b 45 08             	mov    0x8(%ebp),%eax
c0119279:	8b 00                	mov    (%eax),%eax
c011927b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return sysfile_chdir(path);
c011927e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119281:	89 04 24             	mov    %eax,(%esp)
c0119284:	e8 45 b8 ff ff       	call   c0114ace <sysfile_chdir>
}
c0119289:	c9                   	leave  
c011928a:	c3                   	ret    

c011928b <sys_rename>:

static int
sys_rename(uint32_t arg[]) {
c011928b:	55                   	push   %ebp
c011928c:	89 e5                	mov    %esp,%ebp
c011928e:	83 ec 28             	sub    $0x28,%esp
	const char *oldName = (const char *)arg[0];
c0119291:	8b 45 08             	mov    0x8(%ebp),%eax
c0119294:	8b 00                	mov    (%eax),%eax
c0119296:	89 45 f4             	mov    %eax,-0xc(%ebp)
	const char *newName = (const char *)arg[1];
c0119299:	8b 45 08             	mov    0x8(%ebp),%eax
c011929c:	83 c0 04             	add    $0x4,%eax
c011929f:	8b 00                	mov    (%eax),%eax
c01192a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return sysfile_rename(oldName, newName);
c01192a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01192a7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01192ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01192ae:	89 04 24             	mov    %eax,(%esp)
c01192b1:	e8 dd b8 ff ff       	call   c0114b93 <sysfile_rename>
}
c01192b6:	c9                   	leave  
c01192b7:	c3                   	ret    

c01192b8 <sys_check_pmm>:

static void
sys_check_pmm(uint32_t arg[]){
c01192b8:	55                   	push   %ebp
c01192b9:	89 e5                	mov    %esp,%ebp
c01192bb:	83 ec 18             	sub    $0x18,%esp
	pmm_manager->user_check();
c01192be:	a1 64 11 17 c0       	mov    0xc0171164,%eax
c01192c3:	8b 40 1c             	mov    0x1c(%eax),%eax
c01192c6:	ff d0                	call   *%eax
	cprintf("check successed !\n");
c01192c8:	c7 04 24 a8 71 12 c0 	movl   $0xc01271a8,(%esp)
c01192cf:	e8 1f 71 fe ff       	call   c01003f3 <cprintf>
}
c01192d4:	c9                   	leave  
c01192d5:	c3                   	ret    

c01192d6 <sys_check_swap>:

static void
sys_check_swap(uint32_t arg[]){
c01192d6:	55                   	push   %ebp
c01192d7:	89 e5                	mov    %esp,%ebp
c01192d9:	83 ec 18             	sub    $0x18,%esp
    	sm->user_check();
c01192dc:	a1 34 12 17 c0       	mov    0xc0171234,%eax
c01192e1:	8b 40 20             	mov    0x20(%eax),%eax
c01192e4:	ff d0                	call   *%eax
	cprintf("check successed !\n");
c01192e6:	c7 04 24 a8 71 12 c0 	movl   $0xc01271a8,(%esp)
c01192ed:	e8 01 71 fe ff       	call   c01003f3 <cprintf>
}
c01192f2:	c9                   	leave  
c01192f3:	c3                   	ret    

c01192f4 <sys_check_sched>:

static void
sys_check_sched(uint32_t arg[]){
c01192f4:	55                   	push   %ebp
c01192f5:	89 e5                	mov    %esp,%ebp
c01192f7:	83 ec 18             	sub    $0x18,%esp
	sched_class->user_check();
c01192fa:	a1 44 13 17 c0       	mov    0xc0171344,%eax
c01192ff:	8b 40 18             	mov    0x18(%eax),%eax
c0119302:	ff d0                	call   *%eax
	cprintf("check successed !\n");
c0119304:	c7 04 24 a8 71 12 c0 	movl   $0xc01271a8,(%esp)
c011930b:	e8 e3 70 fe ff       	call   c01003f3 <cprintf>
}
c0119310:	c9                   	leave  
c0119311:	c3                   	ret    

c0119312 <sys_change_swap>:

static int
sys_change_swap(uint32_t arg[]){
c0119312:	55                   	push   %ebp
c0119313:	89 e5                	mov    %esp,%ebp
c0119315:	83 ec 18             	sub    $0x18,%esp
    do_change_swap((unsigned int)arg[0]);
c0119318:	8b 45 08             	mov    0x8(%ebp),%eax
c011931b:	8b 00                	mov    (%eax),%eax
c011931d:	89 04 24             	mov    %eax,(%esp)
c0119320:	e8 f7 59 ff ff       	call   c010ed1c <do_change_swap>
    return 0;
c0119325:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011932a:	c9                   	leave  
c011932b:	c3                   	ret    

c011932c <sys_change_sched>:

static int 
sys_change_sched(uint32_t arg[]){
c011932c:	55                   	push   %ebp
c011932d:	89 e5                	mov    %esp,%ebp
c011932f:	83 ec 18             	sub    $0x18,%esp
    do_change_sched((unsigned int)arg[0]);
c0119332:	8b 45 08             	mov    0x8(%ebp),%eax
c0119335:	8b 00                	mov    (%eax),%eax
c0119337:	89 04 24             	mov    %eax,(%esp)
c011933a:	e8 89 f4 ff ff       	call   c01187c8 <do_change_sched>
    return 0;
c011933f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0119344:	c9                   	leave  
c0119345:	c3                   	ret    

c0119346 <sys_stride_queue>:

static int
sys_stride_queue(void){
c0119346:	55                   	push   %ebp
c0119347:	89 e5                	mov    %esp,%ebp
c0119349:	83 ec 08             	sub    $0x8,%esp
    do_stride_queue();
c011934c:	e8 76 f7 ff ff       	call   c0118ac7 <do_stride_queue>
    return 0;
c0119351:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0119356:	c9                   	leave  
c0119357:	c3                   	ret    

c0119358 <sys_list_wait>:

static void
sys_list_wait(void){
c0119358:	55                   	push   %ebp
c0119359:	89 e5                	mov    %esp,%ebp
c011935b:	83 ec 08             	sub    $0x8,%esp
	do_list_wait();
c011935e:	e8 93 e5 ff ff       	call   c01178f6 <do_list_wait>
}
c0119363:	c9                   	leave  
c0119364:	c3                   	ret    

c0119365 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c0119365:	55                   	push   %ebp
c0119366:	89 e5                	mov    %esp,%ebp
c0119368:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c011936b:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c0119370:	8b 40 3c             	mov    0x3c(%eax),%eax
c0119373:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c0119376:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119379:	8b 40 1c             	mov    0x1c(%eax),%eax
c011937c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c011937f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0119383:	78 60                	js     c01193e5 <syscall+0x80>
c0119385:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119388:	3d ff 00 00 00       	cmp    $0xff,%eax
c011938d:	77 56                	ja     c01193e5 <syscall+0x80>
        if (syscalls[num] != NULL) {
c011938f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119392:	8b 04 85 80 ab 16 c0 	mov    -0x3fe95480(,%eax,4),%eax
c0119399:	85 c0                	test   %eax,%eax
c011939b:	74 48                	je     c01193e5 <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c011939d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01193a0:	8b 40 14             	mov    0x14(%eax),%eax
c01193a3:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c01193a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01193a9:	8b 40 18             	mov    0x18(%eax),%eax
c01193ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c01193af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01193b2:	8b 40 10             	mov    0x10(%eax),%eax
c01193b5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c01193b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01193bb:	8b 00                	mov    (%eax),%eax
c01193bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c01193c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01193c3:	8b 40 04             	mov    0x4(%eax),%eax
c01193c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c01193c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01193cc:	8b 04 85 80 ab 16 c0 	mov    -0x3fe95480(,%eax,4),%eax
c01193d3:	8d 55 dc             	lea    -0x24(%ebp),%edx
c01193d6:	89 14 24             	mov    %edx,(%esp)
c01193d9:	ff d0                	call   *%eax
c01193db:	89 c2                	mov    %eax,%edx
c01193dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01193e0:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c01193e3:	eb 46                	jmp    c011942b <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c01193e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01193e8:	89 04 24             	mov    %eax,(%esp)
c01193eb:	e8 49 94 fe ff       	call   c0102839 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c01193f0:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01193f5:	8d 50 48             	lea    0x48(%eax),%edx
c01193f8:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c01193fd:	8b 40 04             	mov    0x4(%eax),%eax
c0119400:	89 54 24 14          	mov    %edx,0x14(%esp)
c0119404:	89 44 24 10          	mov    %eax,0x10(%esp)
c0119408:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011940b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011940f:	c7 44 24 08 bc 71 12 	movl   $0xc01271bc,0x8(%esp)
c0119416:	c0 
c0119417:	c7 44 24 04 3f 01 00 	movl   $0x13f,0x4(%esp)
c011941e:	00 
c011941f:	c7 04 24 e8 71 12 c0 	movl   $0xc01271e8,(%esp)
c0119426:	e8 eb 7d fe ff       	call   c0101216 <__panic>
            num, current->pid, current->name);
}
c011942b:	c9                   	leave  
c011942c:	c3                   	ret    

c011942d <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c011942d:	55                   	push   %ebp
c011942e:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0119430:	8b 55 08             	mov    0x8(%ebp),%edx
c0119433:	a1 6c 11 17 c0       	mov    0xc017116c,%eax
c0119438:	29 c2                	sub    %eax,%edx
c011943a:	89 d0                	mov    %edx,%eax
c011943c:	c1 f8 02             	sar    $0x2,%eax
c011943f:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0119445:	5d                   	pop    %ebp
c0119446:	c3                   	ret    

c0119447 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0119447:	55                   	push   %ebp
c0119448:	89 e5                	mov    %esp,%ebp
c011944a:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c011944d:	8b 45 08             	mov    0x8(%ebp),%eax
c0119450:	89 04 24             	mov    %eax,(%esp)
c0119453:	e8 d5 ff ff ff       	call   c011942d <page2ppn>
c0119458:	c1 e0 0c             	shl    $0xc,%eax
}
c011945b:	c9                   	leave  
c011945c:	c3                   	ret    

c011945d <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c011945d:	55                   	push   %ebp
c011945e:	89 e5                	mov    %esp,%ebp
c0119460:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0119463:	8b 45 08             	mov    0x8(%ebp),%eax
c0119466:	89 04 24             	mov    %eax,(%esp)
c0119469:	e8 d9 ff ff ff       	call   c0119447 <page2pa>
c011946e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0119471:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119474:	c1 e8 0c             	shr    $0xc,%eax
c0119477:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011947a:	a1 c0 df 16 c0       	mov    0xc016dfc0,%eax
c011947f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0119482:	72 23                	jb     c01194a7 <page2kva+0x4a>
c0119484:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119487:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011948b:	c7 44 24 08 00 72 12 	movl   $0xc0127200,0x8(%esp)
c0119492:	c0 
c0119493:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c011949a:	00 
c011949b:	c7 04 24 23 72 12 c0 	movl   $0xc0127223,(%esp)
c01194a2:	e8 6f 7d fe ff       	call   c0101216 <__panic>
c01194a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01194aa:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01194af:	c9                   	leave  
c01194b0:	c3                   	ret    

c01194b1 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c01194b1:	55                   	push   %ebp
c01194b2:	89 e5                	mov    %esp,%ebp
c01194b4:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c01194b7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01194be:	e8 d6 8a fe ff       	call   c0101f99 <ide_device_valid>
c01194c3:	85 c0                	test   %eax,%eax
c01194c5:	75 1c                	jne    c01194e3 <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c01194c7:	c7 44 24 08 31 72 12 	movl   $0xc0127231,0x8(%esp)
c01194ce:	c0 
c01194cf:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c01194d6:	00 
c01194d7:	c7 04 24 4b 72 12 c0 	movl   $0xc012724b,(%esp)
c01194de:	e8 33 7d fe ff       	call   c0101216 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c01194e3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01194ea:	e8 e9 8a fe ff       	call   c0101fd8 <ide_device_size>
c01194ef:	c1 e8 03             	shr    $0x3,%eax
c01194f2:	a3 1c 12 17 c0       	mov    %eax,0xc017121c
}
c01194f7:	c9                   	leave  
c01194f8:	c3                   	ret    

c01194f9 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c01194f9:	55                   	push   %ebp
c01194fa:	89 e5                	mov    %esp,%ebp
c01194fc:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c01194ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0119502:	89 04 24             	mov    %eax,(%esp)
c0119505:	e8 53 ff ff ff       	call   c011945d <page2kva>
c011950a:	8b 55 08             	mov    0x8(%ebp),%edx
c011950d:	c1 ea 08             	shr    $0x8,%edx
c0119510:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0119513:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0119517:	74 0b                	je     c0119524 <swapfs_read+0x2b>
c0119519:	8b 15 1c 12 17 c0    	mov    0xc017121c,%edx
c011951f:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c0119522:	72 23                	jb     c0119547 <swapfs_read+0x4e>
c0119524:	8b 45 08             	mov    0x8(%ebp),%eax
c0119527:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011952b:	c7 44 24 08 61 72 12 	movl   $0xc0127261,0x8(%esp)
c0119532:	c0 
c0119533:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c011953a:	00 
c011953b:	c7 04 24 4b 72 12 c0 	movl   $0xc012724b,(%esp)
c0119542:	e8 cf 7c fe ff       	call   c0101216 <__panic>
c0119547:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011954a:	c1 e2 03             	shl    $0x3,%edx
c011954d:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c0119554:	00 
c0119555:	89 44 24 08          	mov    %eax,0x8(%esp)
c0119559:	89 54 24 04          	mov    %edx,0x4(%esp)
c011955d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0119564:	e8 ae 8a fe ff       	call   c0102017 <ide_read_secs>
}
c0119569:	c9                   	leave  
c011956a:	c3                   	ret    

c011956b <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c011956b:	55                   	push   %ebp
c011956c:	89 e5                	mov    %esp,%ebp
c011956e:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0119571:	8b 45 0c             	mov    0xc(%ebp),%eax
c0119574:	89 04 24             	mov    %eax,(%esp)
c0119577:	e8 e1 fe ff ff       	call   c011945d <page2kva>
c011957c:	8b 55 08             	mov    0x8(%ebp),%edx
c011957f:	c1 ea 08             	shr    $0x8,%edx
c0119582:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0119585:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0119589:	74 0b                	je     c0119596 <swapfs_write+0x2b>
c011958b:	8b 15 1c 12 17 c0    	mov    0xc017121c,%edx
c0119591:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c0119594:	72 23                	jb     c01195b9 <swapfs_write+0x4e>
c0119596:	8b 45 08             	mov    0x8(%ebp),%eax
c0119599:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011959d:	c7 44 24 08 61 72 12 	movl   $0xc0127261,0x8(%esp)
c01195a4:	c0 
c01195a5:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c01195ac:	00 
c01195ad:	c7 04 24 4b 72 12 c0 	movl   $0xc012724b,(%esp)
c01195b4:	e8 5d 7c fe ff       	call   c0101216 <__panic>
c01195b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01195bc:	c1 e2 03             	shl    $0x3,%edx
c01195bf:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c01195c6:	00 
c01195c7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01195cb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01195cf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01195d6:	e8 7e 8c fe ff       	call   c0102259 <ide_write_secs>
}
c01195db:	c9                   	leave  
c01195dc:	c3                   	ret    

c01195dd <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c01195dd:	55                   	push   %ebp
c01195de:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c01195e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01195e3:	8b 40 30             	mov    0x30(%eax),%eax
}
c01195e6:	5d                   	pop    %ebp
c01195e7:	c3                   	ret    

c01195e8 <inode_open_count>:

static inline int
inode_open_count(struct inode *node) {
c01195e8:	55                   	push   %ebp
c01195e9:	89 e5                	mov    %esp,%ebp
    return node->open_count;
c01195eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01195ee:	8b 40 34             	mov    0x34(%eax),%eax
}
c01195f1:	5d                   	pop    %ebp
c01195f2:	c3                   	ret    

c01195f3 <__alloc_inode>:

/* *
 * __alloc_inode - alloc a inode structure and initialize in_type
 * */
struct inode *
__alloc_inode(int type) {
c01195f3:	55                   	push   %ebp
c01195f4:	89 e5                	mov    %esp,%ebp
c01195f6:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = kmalloc(sizeof(struct inode))) != NULL) {
c01195f9:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c0119600:	e8 ab 14 ff ff       	call   c010aab0 <kmalloc>
c0119605:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0119608:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011960c:	74 09                	je     c0119617 <__alloc_inode+0x24>
        node->in_type = type;
c011960e:	8b 55 08             	mov    0x8(%ebp),%edx
c0119611:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119614:	89 50 2c             	mov    %edx,0x2c(%eax)
    }
    return node;
c0119617:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011961a:	c9                   	leave  
c011961b:	c3                   	ret    

c011961c <inode_init>:
/* *
 * inode_init - initialize a inode structure
 * invoked by vop_init
 * */
void
inode_init(struct inode *node, const struct inode_ops *ops, struct fs *fs) {
c011961c:	55                   	push   %ebp
c011961d:	89 e5                	mov    %esp,%ebp
c011961f:	83 ec 18             	sub    $0x18,%esp
    node->ref_count = 0;
c0119622:	8b 45 08             	mov    0x8(%ebp),%eax
c0119625:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    node->open_count = 0;
c011962c:	8b 45 08             	mov    0x8(%ebp),%eax
c011962f:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    node->in_ops = ops, node->in_fs = fs;
c0119636:	8b 45 08             	mov    0x8(%ebp),%eax
c0119639:	8b 55 0c             	mov    0xc(%ebp),%edx
c011963c:	89 50 3c             	mov    %edx,0x3c(%eax)
c011963f:	8b 45 08             	mov    0x8(%ebp),%eax
c0119642:	8b 55 10             	mov    0x10(%ebp),%edx
c0119645:	89 50 38             	mov    %edx,0x38(%eax)
    vop_ref_inc(node);
c0119648:	8b 45 08             	mov    0x8(%ebp),%eax
c011964b:	89 04 24             	mov    %eax,(%esp)
c011964e:	e8 7b 00 00 00       	call   c01196ce <inode_ref_inc>
}
c0119653:	c9                   	leave  
c0119654:	c3                   	ret    

c0119655 <inode_kill>:
/* *
 * inode_kill - kill a inode structure
 * invoked by vop_kill
 * */
void
inode_kill(struct inode *node) {
c0119655:	55                   	push   %ebp
c0119656:	89 e5                	mov    %esp,%ebp
c0119658:	83 ec 18             	sub    $0x18,%esp
    assert(inode_ref_count(node) == 0);
c011965b:	8b 45 08             	mov    0x8(%ebp),%eax
c011965e:	89 04 24             	mov    %eax,(%esp)
c0119661:	e8 77 ff ff ff       	call   c01195dd <inode_ref_count>
c0119666:	85 c0                	test   %eax,%eax
c0119668:	74 24                	je     c011968e <inode_kill+0x39>
c011966a:	c7 44 24 0c 80 72 12 	movl   $0xc0127280,0xc(%esp)
c0119671:	c0 
c0119672:	c7 44 24 08 9b 72 12 	movl   $0xc012729b,0x8(%esp)
c0119679:	c0 
c011967a:	c7 44 24 04 29 00 00 	movl   $0x29,0x4(%esp)
c0119681:	00 
c0119682:	c7 04 24 b0 72 12 c0 	movl   $0xc01272b0,(%esp)
c0119689:	e8 88 7b fe ff       	call   c0101216 <__panic>
    assert(inode_open_count(node) == 0);
c011968e:	8b 45 08             	mov    0x8(%ebp),%eax
c0119691:	89 04 24             	mov    %eax,(%esp)
c0119694:	e8 4f ff ff ff       	call   c01195e8 <inode_open_count>
c0119699:	85 c0                	test   %eax,%eax
c011969b:	74 24                	je     c01196c1 <inode_kill+0x6c>
c011969d:	c7 44 24 0c c4 72 12 	movl   $0xc01272c4,0xc(%esp)
c01196a4:	c0 
c01196a5:	c7 44 24 08 9b 72 12 	movl   $0xc012729b,0x8(%esp)
c01196ac:	c0 
c01196ad:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c01196b4:	00 
c01196b5:	c7 04 24 b0 72 12 c0 	movl   $0xc01272b0,(%esp)
c01196bc:	e8 55 7b fe ff       	call   c0101216 <__panic>
    kfree(node);
c01196c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01196c4:	89 04 24             	mov    %eax,(%esp)
c01196c7:	e8 ff 13 ff ff       	call   c010aacb <kfree>
}
c01196cc:	c9                   	leave  
c01196cd:	c3                   	ret    

c01196ce <inode_ref_inc>:
/* *
 * inode_ref_inc - increment ref_count
 * invoked by vop_ref_inc
 * */
int
inode_ref_inc(struct inode *node) {
c01196ce:	55                   	push   %ebp
c01196cf:	89 e5                	mov    %esp,%ebp
    node->ref_count += 1;
c01196d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01196d4:	8b 40 30             	mov    0x30(%eax),%eax
c01196d7:	8d 50 01             	lea    0x1(%eax),%edx
c01196da:	8b 45 08             	mov    0x8(%ebp),%eax
c01196dd:	89 50 30             	mov    %edx,0x30(%eax)
    return node->ref_count;
c01196e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01196e3:	8b 40 30             	mov    0x30(%eax),%eax
}
c01196e6:	5d                   	pop    %ebp
c01196e7:	c3                   	ret    

c01196e8 <inode_ref_dec>:
 * inode_ref_dec - decrement ref_count
 * invoked by vop_ref_dec
 * calls vop_reclaim if the ref_count hits zero
 * */
int
inode_ref_dec(struct inode *node) {
c01196e8:	55                   	push   %ebp
c01196e9:	89 e5                	mov    %esp,%ebp
c01196eb:	83 ec 28             	sub    $0x28,%esp
    assert(inode_ref_count(node) > 0);
c01196ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01196f1:	89 04 24             	mov    %eax,(%esp)
c01196f4:	e8 e4 fe ff ff       	call   c01195dd <inode_ref_count>
c01196f9:	85 c0                	test   %eax,%eax
c01196fb:	7f 24                	jg     c0119721 <inode_ref_dec+0x39>
c01196fd:	c7 44 24 0c e0 72 12 	movl   $0xc01272e0,0xc(%esp)
c0119704:	c0 
c0119705:	c7 44 24 08 9b 72 12 	movl   $0xc012729b,0x8(%esp)
c011970c:	c0 
c011970d:	c7 44 24 04 3f 00 00 	movl   $0x3f,0x4(%esp)
c0119714:	00 
c0119715:	c7 04 24 b0 72 12 c0 	movl   $0xc01272b0,(%esp)
c011971c:	e8 f5 7a fe ff       	call   c0101216 <__panic>
    int ref_count, ret;
    node->ref_count-= 1;
c0119721:	8b 45 08             	mov    0x8(%ebp),%eax
c0119724:	8b 40 30             	mov    0x30(%eax),%eax
c0119727:	8d 50 ff             	lea    -0x1(%eax),%edx
c011972a:	8b 45 08             	mov    0x8(%ebp),%eax
c011972d:	89 50 30             	mov    %edx,0x30(%eax)
    ref_count = node->ref_count;
c0119730:	8b 45 08             	mov    0x8(%ebp),%eax
c0119733:	8b 40 30             	mov    0x30(%eax),%eax
c0119736:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ref_count == 0) {
c0119739:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011973d:	0f 85 be 00 00 00    	jne    c0119801 <inode_ref_dec+0x119>
        if ((ret = vop_reclaim(node)) != 0 && ret != -E_BUSY) {
c0119743:	8b 45 08             	mov    0x8(%ebp),%eax
c0119746:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0119749:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011974c:	8b 40 3c             	mov    0x3c(%eax),%eax
c011974f:	8b 40 28             	mov    0x28(%eax),%eax
c0119752:	85 c0                	test   %eax,%eax
c0119754:	75 24                	jne    c011977a <inode_ref_dec+0x92>
c0119756:	c7 44 24 0c fc 72 12 	movl   $0xc01272fc,0xc(%esp)
c011975d:	c0 
c011975e:	c7 44 24 08 9b 72 12 	movl   $0xc012729b,0x8(%esp)
c0119765:	c0 
c0119766:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c011976d:	00 
c011976e:	c7 04 24 b0 72 12 c0 	movl   $0xc01272b0,(%esp)
c0119775:	e8 9c 7a fe ff       	call   c0101216 <__panic>
c011977a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011977e:	74 17                	je     c0119797 <inode_ref_dec+0xaf>
c0119780:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119783:	8b 40 3c             	mov    0x3c(%eax),%eax
c0119786:	85 c0                	test   %eax,%eax
c0119788:	74 0d                	je     c0119797 <inode_ref_dec+0xaf>
c011978a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011978d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0119790:	8b 40 28             	mov    0x28(%eax),%eax
c0119793:	85 c0                	test   %eax,%eax
c0119795:	75 24                	jne    c01197bb <inode_ref_dec+0xd3>
c0119797:	c7 44 24 0c 20 73 12 	movl   $0xc0127320,0xc(%esp)
c011979e:	c0 
c011979f:	c7 44 24 08 9b 72 12 	movl   $0xc012729b,0x8(%esp)
c01197a6:	c0 
c01197a7:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c01197ae:	00 
c01197af:	c7 04 24 b0 72 12 c0 	movl   $0xc01272b0,(%esp)
c01197b6:	e8 5b 7a fe ff       	call   c0101216 <__panic>
c01197bb:	c7 44 24 04 70 73 12 	movl   $0xc0127370,0x4(%esp)
c01197c2:	c0 
c01197c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01197c6:	89 04 24             	mov    %eax,(%esp)
c01197c9:	e8 6a 01 00 00       	call   c0119938 <inode_check>
c01197ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01197d1:	8b 40 3c             	mov    0x3c(%eax),%eax
c01197d4:	8b 40 28             	mov    0x28(%eax),%eax
c01197d7:	8b 55 08             	mov    0x8(%ebp),%edx
c01197da:	89 14 24             	mov    %edx,(%esp)
c01197dd:	ff d0                	call   *%eax
c01197df:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01197e2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01197e6:	74 19                	je     c0119801 <inode_ref_dec+0x119>
c01197e8:	83 7d ec f1          	cmpl   $0xfffffff1,-0x14(%ebp)
c01197ec:	74 13                	je     c0119801 <inode_ref_dec+0x119>
            cprintf("vfs: warning: vop_reclaim: %e.\n", ret);
c01197ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01197f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01197f5:	c7 04 24 78 73 12 c0 	movl   $0xc0127378,(%esp)
c01197fc:	e8 f2 6b fe ff       	call   c01003f3 <cprintf>
        }
    }
    return ref_count;
c0119801:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0119804:	c9                   	leave  
c0119805:	c3                   	ret    

c0119806 <inode_open_inc>:
/* *
 * inode_open_inc - increment the open_count
 * invoked by vop_open_inc
 * */
int
inode_open_inc(struct inode *node) {
c0119806:	55                   	push   %ebp
c0119807:	89 e5                	mov    %esp,%ebp
    node->open_count += 1;
c0119809:	8b 45 08             	mov    0x8(%ebp),%eax
c011980c:	8b 40 34             	mov    0x34(%eax),%eax
c011980f:	8d 50 01             	lea    0x1(%eax),%edx
c0119812:	8b 45 08             	mov    0x8(%ebp),%eax
c0119815:	89 50 34             	mov    %edx,0x34(%eax)
    return node->open_count;
c0119818:	8b 45 08             	mov    0x8(%ebp),%eax
c011981b:	8b 40 34             	mov    0x34(%eax),%eax
}
c011981e:	5d                   	pop    %ebp
c011981f:	c3                   	ret    

c0119820 <inode_open_dec>:
 * inode_open_dec - decrement the open_count
 * invoked by vop_open_dec
 * calls vop_close if the open_count hits zero
 * */
int
inode_open_dec(struct inode *node) {
c0119820:	55                   	push   %ebp
c0119821:	89 e5                	mov    %esp,%ebp
c0119823:	83 ec 28             	sub    $0x28,%esp
    assert(inode_open_count(node) > 0);
c0119826:	8b 45 08             	mov    0x8(%ebp),%eax
c0119829:	89 04 24             	mov    %eax,(%esp)
c011982c:	e8 b7 fd ff ff       	call   c01195e8 <inode_open_count>
c0119831:	85 c0                	test   %eax,%eax
c0119833:	7f 24                	jg     c0119859 <inode_open_dec+0x39>
c0119835:	c7 44 24 0c 98 73 12 	movl   $0xc0127398,0xc(%esp)
c011983c:	c0 
c011983d:	c7 44 24 08 9b 72 12 	movl   $0xc012729b,0x8(%esp)
c0119844:	c0 
c0119845:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
c011984c:	00 
c011984d:	c7 04 24 b0 72 12 c0 	movl   $0xc01272b0,(%esp)
c0119854:	e8 bd 79 fe ff       	call   c0101216 <__panic>
    int open_count, ret;
    node->open_count -= 1;
c0119859:	8b 45 08             	mov    0x8(%ebp),%eax
c011985c:	8b 40 34             	mov    0x34(%eax),%eax
c011985f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0119862:	8b 45 08             	mov    0x8(%ebp),%eax
c0119865:	89 50 34             	mov    %edx,0x34(%eax)
    open_count = node->open_count;
c0119868:	8b 45 08             	mov    0x8(%ebp),%eax
c011986b:	8b 40 34             	mov    0x34(%eax),%eax
c011986e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (open_count == 0) {
c0119871:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0119875:	0f 85 b8 00 00 00    	jne    c0119933 <inode_open_dec+0x113>
        if ((ret = vop_close(node)) != 0) {
c011987b:	8b 45 08             	mov    0x8(%ebp),%eax
c011987e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0119881:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119884:	8b 40 3c             	mov    0x3c(%eax),%eax
c0119887:	8b 40 08             	mov    0x8(%eax),%eax
c011988a:	85 c0                	test   %eax,%eax
c011988c:	75 24                	jne    c01198b2 <inode_open_dec+0x92>
c011988e:	c7 44 24 0c b4 73 12 	movl   $0xc01273b4,0xc(%esp)
c0119895:	c0 
c0119896:	c7 44 24 08 9b 72 12 	movl   $0xc012729b,0x8(%esp)
c011989d:	c0 
c011989e:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c01198a5:	00 
c01198a6:	c7 04 24 b0 72 12 c0 	movl   $0xc01272b0,(%esp)
c01198ad:	e8 64 79 fe ff       	call   c0101216 <__panic>
c01198b2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01198b6:	74 17                	je     c01198cf <inode_open_dec+0xaf>
c01198b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01198bb:	8b 40 3c             	mov    0x3c(%eax),%eax
c01198be:	85 c0                	test   %eax,%eax
c01198c0:	74 0d                	je     c01198cf <inode_open_dec+0xaf>
c01198c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01198c5:	8b 40 3c             	mov    0x3c(%eax),%eax
c01198c8:	8b 40 08             	mov    0x8(%eax),%eax
c01198cb:	85 c0                	test   %eax,%eax
c01198cd:	75 24                	jne    c01198f3 <inode_open_dec+0xd3>
c01198cf:	c7 44 24 0c d8 73 12 	movl   $0xc01273d8,0xc(%esp)
c01198d6:	c0 
c01198d7:	c7 44 24 08 9b 72 12 	movl   $0xc012729b,0x8(%esp)
c01198de:	c0 
c01198df:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c01198e6:	00 
c01198e7:	c7 04 24 b0 72 12 c0 	movl   $0xc01272b0,(%esp)
c01198ee:	e8 23 79 fe ff       	call   c0101216 <__panic>
c01198f3:	c7 44 24 04 26 74 12 	movl   $0xc0127426,0x4(%esp)
c01198fa:	c0 
c01198fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01198fe:	89 04 24             	mov    %eax,(%esp)
c0119901:	e8 32 00 00 00       	call   c0119938 <inode_check>
c0119906:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119909:	8b 40 3c             	mov    0x3c(%eax),%eax
c011990c:	8b 40 08             	mov    0x8(%eax),%eax
c011990f:	8b 55 08             	mov    0x8(%ebp),%edx
c0119912:	89 14 24             	mov    %edx,(%esp)
c0119915:	ff d0                	call   *%eax
c0119917:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011991a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011991e:	74 13                	je     c0119933 <inode_open_dec+0x113>
            cprintf("vfs: warning: vop_close: %e.\n", ret);
c0119920:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0119923:	89 44 24 04          	mov    %eax,0x4(%esp)
c0119927:	c7 04 24 2c 74 12 c0 	movl   $0xc012742c,(%esp)
c011992e:	e8 c0 6a fe ff       	call   c01003f3 <cprintf>
        }
    }
    return open_count;
c0119933:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0119936:	c9                   	leave  
c0119937:	c3                   	ret    

c0119938 <inode_check>:
/* *
 * inode_check - check the various things being valid
 * called before all vop_* calls
 * */
void
inode_check(struct inode *node, const char *opstr) {
c0119938:	55                   	push   %ebp
c0119939:	89 e5                	mov    %esp,%ebp
c011993b:	83 ec 28             	sub    $0x28,%esp
    assert(node != NULL && node->in_ops != NULL);
c011993e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0119942:	74 0a                	je     c011994e <inode_check+0x16>
c0119944:	8b 45 08             	mov    0x8(%ebp),%eax
c0119947:	8b 40 3c             	mov    0x3c(%eax),%eax
c011994a:	85 c0                	test   %eax,%eax
c011994c:	75 24                	jne    c0119972 <inode_check+0x3a>
c011994e:	c7 44 24 0c 4c 74 12 	movl   $0xc012744c,0xc(%esp)
c0119955:	c0 
c0119956:	c7 44 24 08 9b 72 12 	movl   $0xc012729b,0x8(%esp)
c011995d:	c0 
c011995e:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c0119965:	00 
c0119966:	c7 04 24 b0 72 12 c0 	movl   $0xc01272b0,(%esp)
c011996d:	e8 a4 78 fe ff       	call   c0101216 <__panic>
    assert(node->in_ops->vop_magic == VOP_MAGIC);
c0119972:	8b 45 08             	mov    0x8(%ebp),%eax
c0119975:	8b 40 3c             	mov    0x3c(%eax),%eax
c0119978:	8b 00                	mov    (%eax),%eax
c011997a:	3d 76 a4 4b 8c       	cmp    $0x8c4ba476,%eax
c011997f:	74 24                	je     c01199a5 <inode_check+0x6d>
c0119981:	c7 44 24 0c 74 74 12 	movl   $0xc0127474,0xc(%esp)
c0119988:	c0 
c0119989:	c7 44 24 08 9b 72 12 	movl   $0xc012729b,0x8(%esp)
c0119990:	c0 
c0119991:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c0119998:	00 
c0119999:	c7 04 24 b0 72 12 c0 	movl   $0xc01272b0,(%esp)
c01199a0:	e8 71 78 fe ff       	call   c0101216 <__panic>
    int ref_count = inode_ref_count(node), open_count = inode_open_count(node);
c01199a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01199a8:	89 04 24             	mov    %eax,(%esp)
c01199ab:	e8 2d fc ff ff       	call   c01195dd <inode_ref_count>
c01199b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01199b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01199b6:	89 04 24             	mov    %eax,(%esp)
c01199b9:	e8 2a fc ff ff       	call   c01195e8 <inode_open_count>
c01199be:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(ref_count >= open_count && open_count >= 0);
c01199c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01199c4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01199c7:	7c 06                	jl     c01199cf <inode_check+0x97>
c01199c9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01199cd:	79 24                	jns    c01199f3 <inode_check+0xbb>
c01199cf:	c7 44 24 0c 9c 74 12 	movl   $0xc012749c,0xc(%esp)
c01199d6:	c0 
c01199d7:	c7 44 24 08 9b 72 12 	movl   $0xc012729b,0x8(%esp)
c01199de:	c0 
c01199df:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
c01199e6:	00 
c01199e7:	c7 04 24 b0 72 12 c0 	movl   $0xc01272b0,(%esp)
c01199ee:	e8 23 78 fe ff       	call   c0101216 <__panic>
    assert(ref_count < MAX_INODE_COUNT && open_count < MAX_INODE_COUNT);
c01199f3:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
c01199fa:	7f 09                	jg     c0119a05 <inode_check+0xcd>
c01199fc:	81 7d f0 ff ff 00 00 	cmpl   $0xffff,-0x10(%ebp)
c0119a03:	7e 24                	jle    c0119a29 <inode_check+0xf1>
c0119a05:	c7 44 24 0c c8 74 12 	movl   $0xc01274c8,0xc(%esp)
c0119a0c:	c0 
c0119a0d:	c7 44 24 08 9b 72 12 	movl   $0xc012729b,0x8(%esp)
c0119a14:	c0 
c0119a15:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c0119a1c:	00 
c0119a1d:	c7 04 24 b0 72 12 c0 	movl   $0xc01272b0,(%esp)
c0119a24:	e8 ed 77 fe ff       	call   c0101216 <__panic>
}
c0119a29:	c9                   	leave  
c0119a2a:	c3                   	ret    

c0119a2b <__alloc_fs>:

extern void vfs_devlist_init(void);

// __alloc_fs - allocate memory for fs, and set fs type
struct fs *
__alloc_fs(int type) {
c0119a2b:	55                   	push   %ebp
c0119a2c:	89 e5                	mov    %esp,%ebp
c0119a2e:	83 ec 28             	sub    $0x28,%esp
    struct fs *fs;
    if ((fs = kmalloc(sizeof(struct fs))) != NULL) {
c0119a31:	c7 04 24 80 00 00 00 	movl   $0x80,(%esp)
c0119a38:	e8 73 10 ff ff       	call   c010aab0 <kmalloc>
c0119a3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0119a40:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0119a44:	74 09                	je     c0119a4f <__alloc_fs+0x24>
        fs->fs_type = type;
c0119a46:	8b 55 08             	mov    0x8(%ebp),%edx
c0119a49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119a4c:	89 50 6c             	mov    %edx,0x6c(%eax)
    }
    return fs;
c0119a4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0119a52:	c9                   	leave  
c0119a53:	c3                   	ret    

c0119a54 <vfs_init>:

// vfs_init -  vfs initialize
void
vfs_init(void) {
c0119a54:	55                   	push   %ebp
c0119a55:	89 e5                	mov    %esp,%ebp
c0119a57:	83 ec 18             	sub    $0x18,%esp
    sem_init(&bootfs_sem, 1);
c0119a5a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0119a61:	00 
c0119a62:	c7 04 24 f4 00 17 c0 	movl   $0xc01700f4,(%esp)
c0119a69:	e8 e0 8f ff ff       	call   c0112a4e <sem_init>
    vfs_devlist_init();
c0119a6e:	e8 63 01 00 00       	call   c0119bd6 <vfs_devlist_init>
}
c0119a73:	c9                   	leave  
c0119a74:	c3                   	ret    

c0119a75 <lock_bootfs>:

// lock_bootfs - lock  for bootfs
static void
lock_bootfs(void) {
c0119a75:	55                   	push   %ebp
c0119a76:	89 e5                	mov    %esp,%ebp
c0119a78:	83 ec 18             	sub    $0x18,%esp
    down(&bootfs_sem);
c0119a7b:	c7 04 24 f4 00 17 c0 	movl   $0xc01700f4,(%esp)
c0119a82:	e8 55 91 ff ff       	call   c0112bdc <down>
}
c0119a87:	c9                   	leave  
c0119a88:	c3                   	ret    

c0119a89 <unlock_bootfs>:
// ulock_bootfs - ulock for bootfs
static void
unlock_bootfs(void) {
c0119a89:	55                   	push   %ebp
c0119a8a:	89 e5                	mov    %esp,%ebp
c0119a8c:	83 ec 18             	sub    $0x18,%esp
    up(&bootfs_sem);
c0119a8f:	c7 04 24 f4 00 17 c0 	movl   $0xc01700f4,(%esp)
c0119a96:	e8 26 91 ff ff       	call   c0112bc1 <up>
}
c0119a9b:	c9                   	leave  
c0119a9c:	c3                   	ret    

c0119a9d <change_bootfs>:

// change_bootfs - set the new fs inode 
static void
change_bootfs(struct inode *node) {
c0119a9d:	55                   	push   %ebp
c0119a9e:	89 e5                	mov    %esp,%ebp
c0119aa0:	83 ec 28             	sub    $0x28,%esp
    struct inode *old;
    lock_bootfs();
c0119aa3:	e8 cd ff ff ff       	call   c0119a75 <lock_bootfs>
    {
        old = bootfs_node, bootfs_node = node;
c0119aa8:	a1 00 01 17 c0       	mov    0xc0170100,%eax
c0119aad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0119ab0:	8b 45 08             	mov    0x8(%ebp),%eax
c0119ab3:	a3 00 01 17 c0       	mov    %eax,0xc0170100
    }
    unlock_bootfs();
c0119ab8:	e8 cc ff ff ff       	call   c0119a89 <unlock_bootfs>
    if (old != NULL) {
c0119abd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0119ac1:	74 0b                	je     c0119ace <change_bootfs+0x31>
        vop_ref_dec(old);
c0119ac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119ac6:	89 04 24             	mov    %eax,(%esp)
c0119ac9:	e8 1a fc ff ff       	call   c01196e8 <inode_ref_dec>
    }
}
c0119ace:	c9                   	leave  
c0119acf:	c3                   	ret    

c0119ad0 <vfs_set_bootfs>:

// vfs_set_bootfs - change the dir of file system
int
vfs_set_bootfs(char *fsname) {
c0119ad0:	55                   	push   %ebp
c0119ad1:	89 e5                	mov    %esp,%ebp
c0119ad3:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c0119ad6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    if (fsname != NULL) {
c0119add:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0119ae1:	74 62                	je     c0119b45 <vfs_set_bootfs+0x75>
        char *s;
        if ((s = strchr(fsname, ':')) == NULL || s[1] != '\0') {
c0119ae3:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c0119aea:	00 
c0119aeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0119aee:	89 04 24             	mov    %eax,(%esp)
c0119af1:	e8 4a 74 00 00       	call   c0120f40 <strchr>
c0119af6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0119af9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0119afd:	74 0d                	je     c0119b0c <vfs_set_bootfs+0x3c>
c0119aff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119b02:	83 c0 01             	add    $0x1,%eax
c0119b05:	0f b6 00             	movzbl (%eax),%eax
c0119b08:	84 c0                	test   %al,%al
c0119b0a:	74 07                	je     c0119b13 <vfs_set_bootfs+0x43>
            return -E_INVAL;
c0119b0c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0119b11:	eb 42                	jmp    c0119b55 <vfs_set_bootfs+0x85>
        }
        int ret;
        if ((ret = vfs_chdir(fsname)) != 0) {
c0119b13:	8b 45 08             	mov    0x8(%ebp),%eax
c0119b16:	89 04 24             	mov    %eax,(%esp)
c0119b19:	e8 2f 14 00 00       	call   c011af4d <vfs_chdir>
c0119b1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0119b21:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0119b25:	74 05                	je     c0119b2c <vfs_set_bootfs+0x5c>
            return ret;
c0119b27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119b2a:	eb 29                	jmp    c0119b55 <vfs_set_bootfs+0x85>
        }
        if ((ret = vfs_get_curdir(&node)) != 0) {
c0119b2c:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0119b2f:	89 04 24             	mov    %eax,(%esp)
c0119b32:	e8 b9 12 00 00       	call   c011adf0 <vfs_get_curdir>
c0119b37:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0119b3a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0119b3e:	74 05                	je     c0119b45 <vfs_set_bootfs+0x75>
            return ret;
c0119b40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119b43:	eb 10                	jmp    c0119b55 <vfs_set_bootfs+0x85>
        }
    }
    change_bootfs(node);
c0119b45:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0119b48:	89 04 24             	mov    %eax,(%esp)
c0119b4b:	e8 4d ff ff ff       	call   c0119a9d <change_bootfs>
    return 0;
c0119b50:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0119b55:	c9                   	leave  
c0119b56:	c3                   	ret    

c0119b57 <vfs_get_bootfs>:

// vfs_get_bootfs - get the inode of bootfs
int
vfs_get_bootfs(struct inode **node_store) {
c0119b57:	55                   	push   %ebp
c0119b58:	89 e5                	mov    %esp,%ebp
c0119b5a:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c0119b5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (bootfs_node != NULL) {
c0119b64:	a1 00 01 17 c0       	mov    0xc0170100,%eax
c0119b69:	85 c0                	test   %eax,%eax
c0119b6b:	74 25                	je     c0119b92 <vfs_get_bootfs+0x3b>
        lock_bootfs();
c0119b6d:	e8 03 ff ff ff       	call   c0119a75 <lock_bootfs>
        {
            if ((node = bootfs_node) != NULL) {
c0119b72:	a1 00 01 17 c0       	mov    0xc0170100,%eax
c0119b77:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0119b7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0119b7e:	74 0d                	je     c0119b8d <vfs_get_bootfs+0x36>
                vop_ref_inc(bootfs_node);
c0119b80:	a1 00 01 17 c0       	mov    0xc0170100,%eax
c0119b85:	89 04 24             	mov    %eax,(%esp)
c0119b88:	e8 41 fb ff ff       	call   c01196ce <inode_ref_inc>
            }
        }
        unlock_bootfs();
c0119b8d:	e8 f7 fe ff ff       	call   c0119a89 <unlock_bootfs>
    }
    if (node == NULL) {
c0119b92:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0119b96:	75 07                	jne    c0119b9f <vfs_get_bootfs+0x48>
        return -E_NOENT;
c0119b98:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0119b9d:	eb 0d                	jmp    c0119bac <vfs_get_bootfs+0x55>
    }
    *node_store = node;
c0119b9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0119ba2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0119ba5:	89 10                	mov    %edx,(%eax)
    return 0;
c0119ba7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0119bac:	c9                   	leave  
c0119bad:	c3                   	ret    

c0119bae <lock_vdev_list>:

static list_entry_t vdev_list;     // device info list in vfs layer
static semaphore_t vdev_list_sem;

static void
lock_vdev_list(void) {
c0119bae:	55                   	push   %ebp
c0119baf:	89 e5                	mov    %esp,%ebp
c0119bb1:	83 ec 18             	sub    $0x18,%esp
    down(&vdev_list_sem);
c0119bb4:	c7 04 24 0c 01 17 c0 	movl   $0xc017010c,(%esp)
c0119bbb:	e8 1c 90 ff ff       	call   c0112bdc <down>
}
c0119bc0:	c9                   	leave  
c0119bc1:	c3                   	ret    

c0119bc2 <unlock_vdev_list>:

static void
unlock_vdev_list(void) {
c0119bc2:	55                   	push   %ebp
c0119bc3:	89 e5                	mov    %esp,%ebp
c0119bc5:	83 ec 18             	sub    $0x18,%esp
    up(&vdev_list_sem);
c0119bc8:	c7 04 24 0c 01 17 c0 	movl   $0xc017010c,(%esp)
c0119bcf:	e8 ed 8f ff ff       	call   c0112bc1 <up>
}
c0119bd4:	c9                   	leave  
c0119bd5:	c3                   	ret    

c0119bd6 <vfs_devlist_init>:

void
vfs_devlist_init(void) {
c0119bd6:	55                   	push   %ebp
c0119bd7:	89 e5                	mov    %esp,%ebp
c0119bd9:	83 ec 28             	sub    $0x28,%esp
c0119bdc:	c7 45 f4 04 01 17 c0 	movl   $0xc0170104,-0xc(%ebp)
c0119be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119be6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0119be9:	89 50 04             	mov    %edx,0x4(%eax)
c0119bec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119bef:	8b 50 04             	mov    0x4(%eax),%edx
c0119bf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119bf5:	89 10                	mov    %edx,(%eax)
    list_init(&vdev_list);
    sem_init(&vdev_list_sem, 1);
c0119bf7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0119bfe:	00 
c0119bff:	c7 04 24 0c 01 17 c0 	movl   $0xc017010c,(%esp)
c0119c06:	e8 43 8e ff ff       	call   c0112a4e <sem_init>
}
c0119c0b:	c9                   	leave  
c0119c0c:	c3                   	ret    

c0119c0d <vfs_cleanup>:

// vfs_cleanup - finally clean (or sync) fs
void
vfs_cleanup(void) {
c0119c0d:	55                   	push   %ebp
c0119c0e:	89 e5                	mov    %esp,%ebp
c0119c10:	83 ec 38             	sub    $0x38,%esp
c0119c13:	c7 45 e8 04 01 17 c0 	movl   $0xc0170104,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0119c1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0119c1d:	8b 40 04             	mov    0x4(%eax),%eax
c0119c20:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0119c23:	0f 94 c0             	sete   %al
c0119c26:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c0119c29:	85 c0                	test   %eax,%eax
c0119c2b:	75 57                	jne    c0119c84 <vfs_cleanup+0x77>
        lock_vdev_list();
c0119c2d:	e8 7c ff ff ff       	call   c0119bae <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c0119c32:	c7 45 f0 04 01 17 c0 	movl   $0xc0170104,-0x10(%ebp)
c0119c39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119c3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c0119c3f:	eb 27                	jmp    c0119c68 <vfs_cleanup+0x5b>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c0119c41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119c44:	83 e8 10             	sub    $0x10,%eax
c0119c47:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->fs != NULL) {
c0119c4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0119c4d:	8b 40 08             	mov    0x8(%eax),%eax
c0119c50:	85 c0                	test   %eax,%eax
c0119c52:	74 14                	je     c0119c68 <vfs_cleanup+0x5b>
                    fsop_cleanup(vdev->fs);
c0119c54:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0119c57:	8b 40 08             	mov    0x8(%eax),%eax
c0119c5a:	8b 40 7c             	mov    0x7c(%eax),%eax
c0119c5d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0119c60:	8b 52 08             	mov    0x8(%edx),%edx
c0119c63:	89 14 24             	mov    %edx,(%esp)
c0119c66:	ff d0                	call   *%eax
c0119c68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119c6b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0119c6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0119c71:	8b 40 04             	mov    0x4(%eax),%eax
vfs_cleanup(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c0119c74:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0119c77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119c7a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0119c7d:	75 c2                	jne    c0119c41 <vfs_cleanup+0x34>
                if (vdev->fs != NULL) {
                    fsop_cleanup(vdev->fs);
                }
            }
        }
        unlock_vdev_list();
c0119c7f:	e8 3e ff ff ff       	call   c0119bc2 <unlock_vdev_list>
    }
}
c0119c84:	c9                   	leave  
c0119c85:	c3                   	ret    

c0119c86 <vfs_get_root>:
/*
 * vfs_get_root - Given a device name (stdin, stdout, etc.), hand
 *                back an appropriate inode.
 */
int
vfs_get_root(const char *devname, struct inode **node_store) {
c0119c86:	55                   	push   %ebp
c0119c87:	89 e5                	mov    %esp,%ebp
c0119c89:	83 ec 38             	sub    $0x38,%esp
    assert(devname != NULL);
c0119c8c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0119c90:	75 24                	jne    c0119cb6 <vfs_get_root+0x30>
c0119c92:	c7 44 24 0c 04 75 12 	movl   $0xc0127504,0xc(%esp)
c0119c99:	c0 
c0119c9a:	c7 44 24 08 14 75 12 	movl   $0xc0127514,0x8(%esp)
c0119ca1:	c0 
c0119ca2:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c0119ca9:	00 
c0119caa:	c7 04 24 29 75 12 c0 	movl   $0xc0127529,(%esp)
c0119cb1:	e8 60 75 fe ff       	call   c0101216 <__panic>
    int ret = -E_NO_DEV;
c0119cb6:	c7 45 f4 f3 ff ff ff 	movl   $0xfffffff3,-0xc(%ebp)
c0119cbd:	c7 45 e0 04 01 17 c0 	movl   $0xc0170104,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0119cc4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0119cc7:	8b 40 04             	mov    0x4(%eax),%eax
c0119cca:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c0119ccd:	0f 94 c0             	sete   %al
c0119cd0:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c0119cd3:	85 c0                	test   %eax,%eax
c0119cd5:	0f 85 c3 00 00 00    	jne    c0119d9e <vfs_get_root+0x118>
        lock_vdev_list();
c0119cdb:	e8 ce fe ff ff       	call   c0119bae <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c0119ce0:	c7 45 e8 04 01 17 c0 	movl   $0xc0170104,-0x18(%ebp)
c0119ce7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0119cea:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while ((le = list_next(le)) != list) {
c0119ced:	e9 8c 00 00 00       	jmp    c0119d7e <vfs_get_root+0xf8>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c0119cf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119cf5:	83 e8 10             	sub    $0x10,%eax
c0119cf8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (strcmp(devname, vdev->devname) == 0) {
c0119cfb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0119cfe:	8b 00                	mov    (%eax),%eax
c0119d00:	89 44 24 04          	mov    %eax,0x4(%esp)
c0119d04:	8b 45 08             	mov    0x8(%ebp),%eax
c0119d07:	89 04 24             	mov    %eax,(%esp)
c0119d0a:	e8 92 71 00 00       	call   c0120ea1 <strcmp>
c0119d0f:	85 c0                	test   %eax,%eax
c0119d11:	75 6b                	jne    c0119d7e <vfs_get_root+0xf8>
                    struct inode *found = NULL;
c0119d13:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
                    if (vdev->fs != NULL) {
c0119d1a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0119d1d:	8b 40 08             	mov    0x8(%eax),%eax
c0119d20:	85 c0                	test   %eax,%eax
c0119d22:	74 19                	je     c0119d3d <vfs_get_root+0xb7>
                        found = fsop_get_root(vdev->fs);
c0119d24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0119d27:	8b 40 08             	mov    0x8(%eax),%eax
c0119d2a:	8b 40 74             	mov    0x74(%eax),%eax
c0119d2d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0119d30:	8b 52 08             	mov    0x8(%edx),%edx
c0119d33:	89 14 24             	mov    %edx,(%esp)
c0119d36:	ff d0                	call   *%eax
c0119d38:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0119d3b:	eb 21                	jmp    c0119d5e <vfs_get_root+0xd8>
                    }
                    else if (!vdev->mountable) {
c0119d3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0119d40:	8b 40 0c             	mov    0xc(%eax),%eax
c0119d43:	85 c0                	test   %eax,%eax
c0119d45:	75 17                	jne    c0119d5e <vfs_get_root+0xd8>
                        vop_ref_inc(vdev->devnode);
c0119d47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0119d4a:	8b 40 04             	mov    0x4(%eax),%eax
c0119d4d:	89 04 24             	mov    %eax,(%esp)
c0119d50:	e8 79 f9 ff ff       	call   c01196ce <inode_ref_inc>
                        found = vdev->devnode;
c0119d55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0119d58:	8b 40 04             	mov    0x4(%eax),%eax
c0119d5b:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    }
                    if (found != NULL) {
c0119d5e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0119d62:	74 11                	je     c0119d75 <vfs_get_root+0xef>
                        ret = 0, *node_store = found;
c0119d64:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0119d6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0119d6e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0119d71:	89 10                	mov    %edx,(%eax)
                    }
                    else {
                        ret = -E_NA_DEV;
                    }
                    break;
c0119d73:	eb 24                	jmp    c0119d99 <vfs_get_root+0x113>
                    }
                    if (found != NULL) {
                        ret = 0, *node_store = found;
                    }
                    else {
                        ret = -E_NA_DEV;
c0119d75:	c7 45 f4 f2 ff ff ff 	movl   $0xfffffff2,-0xc(%ebp)
                    }
                    break;
c0119d7c:	eb 1b                	jmp    c0119d99 <vfs_get_root+0x113>
c0119d7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119d81:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0119d84:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0119d87:	8b 40 04             	mov    0x4(%eax),%eax
    int ret = -E_NO_DEV;
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c0119d8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0119d8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119d90:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0119d93:	0f 85 59 ff ff ff    	jne    c0119cf2 <vfs_get_root+0x6c>
                    }
                    break;
                }
            }
        }
        unlock_vdev_list();
c0119d99:	e8 24 fe ff ff       	call   c0119bc2 <unlock_vdev_list>
    }
    return ret;
c0119d9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0119da1:	c9                   	leave  
c0119da2:	c3                   	ret    

c0119da3 <vfs_get_devname>:

/*
 * vfs_get_devname - Given a filesystem, hand back the name of the device it's mounted on.
 */
const char *
vfs_get_devname(struct fs *fs) {
c0119da3:	55                   	push   %ebp
c0119da4:	89 e5                	mov    %esp,%ebp
c0119da6:	83 ec 28             	sub    $0x28,%esp
    assert(fs != NULL);
c0119da9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0119dad:	75 24                	jne    c0119dd3 <vfs_get_devname+0x30>
c0119daf:	c7 44 24 0c 3e 75 12 	movl   $0xc012753e,0xc(%esp)
c0119db6:	c0 
c0119db7:	c7 44 24 08 14 75 12 	movl   $0xc0127514,0x8(%esp)
c0119dbe:	c0 
c0119dbf:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0119dc6:	00 
c0119dc7:	c7 04 24 29 75 12 c0 	movl   $0xc0127529,(%esp)
c0119dce:	e8 43 74 fe ff       	call   c0101216 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c0119dd3:	c7 45 f0 04 01 17 c0 	movl   $0xc0170104,-0x10(%ebp)
c0119dda:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119ddd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0119de0:	eb 1b                	jmp    c0119dfd <vfs_get_devname+0x5a>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c0119de2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119de5:	83 e8 10             	sub    $0x10,%eax
c0119de8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->fs == fs) {
c0119deb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0119dee:	8b 40 08             	mov    0x8(%eax),%eax
c0119df1:	3b 45 08             	cmp    0x8(%ebp),%eax
c0119df4:	75 07                	jne    c0119dfd <vfs_get_devname+0x5a>
            return vdev->devname;
c0119df6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0119df9:	8b 00                	mov    (%eax),%eax
c0119dfb:	eb 1c                	jmp    c0119e19 <vfs_get_devname+0x76>
c0119dfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119e00:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0119e03:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0119e06:	8b 40 04             	mov    0x4(%eax),%eax
 */
const char *
vfs_get_devname(struct fs *fs) {
    assert(fs != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c0119e09:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0119e0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119e0f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0119e12:	75 ce                	jne    c0119de2 <vfs_get_devname+0x3f>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (vdev->fs == fs) {
            return vdev->devname;
        }
    }
    return NULL;
c0119e14:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0119e19:	c9                   	leave  
c0119e1a:	c3                   	ret    

c0119e1b <check_devname_conflict>:

/*
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
c0119e1b:	55                   	push   %ebp
c0119e1c:	89 e5                	mov    %esp,%ebp
c0119e1e:	83 ec 28             	sub    $0x28,%esp
    list_entry_t *list = &vdev_list, *le = list;
c0119e21:	c7 45 f0 04 01 17 c0 	movl   $0xc0170104,-0x10(%ebp)
c0119e28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119e2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0119e2e:	eb 28                	jmp    c0119e58 <check_devname_conflict+0x3d>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c0119e30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119e33:	83 e8 10             	sub    $0x10,%eax
c0119e36:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (strcmp(vdev->devname, devname) == 0) {
c0119e39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0119e3c:	8b 00                	mov    (%eax),%eax
c0119e3e:	8b 55 08             	mov    0x8(%ebp),%edx
c0119e41:	89 54 24 04          	mov    %edx,0x4(%esp)
c0119e45:	89 04 24             	mov    %eax,(%esp)
c0119e48:	e8 54 70 00 00       	call   c0120ea1 <strcmp>
c0119e4d:	85 c0                	test   %eax,%eax
c0119e4f:	75 07                	jne    c0119e58 <check_devname_conflict+0x3d>
            return 0;
c0119e51:	b8 00 00 00 00       	mov    $0x0,%eax
c0119e56:	eb 1c                	jmp    c0119e74 <check_devname_conflict+0x59>
c0119e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119e5b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0119e5e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0119e61:	8b 40 04             	mov    0x4(%eax),%eax
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c0119e64:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0119e67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119e6a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0119e6d:	75 c1                	jne    c0119e30 <check_devname_conflict+0x15>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (strcmp(vdev->devname, devname) == 0) {
            return 0;
        }
    }
    return 1;
c0119e6f:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0119e74:	c9                   	leave  
c0119e75:	c3                   	ret    

c0119e76 <vfs_do_add>:
* If "mountable" is set, the device will be treated as one that expects
* to have a filesystem mounted on it, and a raw device will be created
* for direct access.
*/
static int
vfs_do_add(const char *devname, struct inode *devnode, struct fs *fs, bool mountable) {
c0119e76:	55                   	push   %ebp
c0119e77:	89 e5                	mov    %esp,%ebp
c0119e79:	83 ec 48             	sub    $0x48,%esp
    assert(devname != NULL);
c0119e7c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0119e80:	75 24                	jne    c0119ea6 <vfs_do_add+0x30>
c0119e82:	c7 44 24 0c 04 75 12 	movl   $0xc0127504,0xc(%esp)
c0119e89:	c0 
c0119e8a:	c7 44 24 08 14 75 12 	movl   $0xc0127514,0x8(%esp)
c0119e91:	c0 
c0119e92:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
c0119e99:	00 
c0119e9a:	c7 04 24 29 75 12 c0 	movl   $0xc0127529,(%esp)
c0119ea1:	e8 70 73 fe ff       	call   c0101216 <__panic>
    assert((devnode == NULL && !mountable) || (devnode != NULL && check_inode_type(devnode, device)));
c0119ea6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0119eaa:	75 06                	jne    c0119eb2 <vfs_do_add+0x3c>
c0119eac:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0119eb0:	74 37                	je     c0119ee9 <vfs_do_add+0x73>
c0119eb2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0119eb6:	74 0d                	je     c0119ec5 <vfs_do_add+0x4f>
c0119eb8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0119ebb:	8b 40 2c             	mov    0x2c(%eax),%eax
c0119ebe:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0119ec3:	74 24                	je     c0119ee9 <vfs_do_add+0x73>
c0119ec5:	c7 44 24 0c 4c 75 12 	movl   $0xc012754c,0xc(%esp)
c0119ecc:	c0 
c0119ecd:	c7 44 24 08 14 75 12 	movl   $0xc0127514,0x8(%esp)
c0119ed4:	c0 
c0119ed5:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
c0119edc:	00 
c0119edd:	c7 04 24 29 75 12 c0 	movl   $0xc0127529,(%esp)
c0119ee4:	e8 2d 73 fe ff       	call   c0101216 <__panic>
    if (strlen(devname) > FS_MAX_DNAME_LEN) {
c0119ee9:	8b 45 08             	mov    0x8(%ebp),%eax
c0119eec:	89 04 24             	mov    %eax,(%esp)
c0119eef:	e8 b5 6e 00 00       	call   c0120da9 <strlen>
c0119ef4:	83 f8 1f             	cmp    $0x1f,%eax
c0119ef7:	76 0a                	jbe    c0119f03 <vfs_do_add+0x8d>
        return -E_TOO_BIG;
c0119ef9:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
c0119efe:	e9 00 01 00 00       	jmp    c011a003 <vfs_do_add+0x18d>
    }

    int ret = -E_NO_MEM;
c0119f03:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    char *s_devname;
    if ((s_devname = strdup(devname)) == NULL) {
c0119f0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0119f0d:	89 04 24             	mov    %eax,(%esp)
c0119f10:	e8 7f 65 fe ff       	call   c0100494 <strdup>
c0119f15:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0119f18:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0119f1c:	75 08                	jne    c0119f26 <vfs_do_add+0xb0>
        return ret;
c0119f1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0119f21:	e9 dd 00 00 00       	jmp    c011a003 <vfs_do_add+0x18d>
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
c0119f26:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0119f2d:	e8 7e 0b ff ff       	call   c010aab0 <kmalloc>
c0119f32:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0119f35:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0119f39:	75 05                	jne    c0119f40 <vfs_do_add+0xca>
        goto failed_cleanup_name;
c0119f3b:	e9 b5 00 00 00       	jmp    c0119ff5 <vfs_do_add+0x17f>
    }

    ret = -E_EXISTS;
c0119f40:	c7 45 f4 e9 ff ff ff 	movl   $0xffffffe9,-0xc(%ebp)
    lock_vdev_list();
c0119f47:	e8 62 fc ff ff       	call   c0119bae <lock_vdev_list>
    if (!check_devname_conflict(s_devname)) {
c0119f4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119f4f:	89 04 24             	mov    %eax,(%esp)
c0119f52:	e8 c4 fe ff ff       	call   c0119e1b <check_devname_conflict>
c0119f57:	85 c0                	test   %eax,%eax
c0119f59:	75 16                	jne    c0119f71 <vfs_do_add+0xfb>
        unlock_vdev_list();
c0119f5b:	e8 62 fc ff ff       	call   c0119bc2 <unlock_vdev_list>
        goto failed_cleanup_vdev;
c0119f60:	90                   	nop
    list_add(&vdev_list, &(vdev->vdev_link));
    unlock_vdev_list();
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
c0119f61:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0119f64:	89 04 24             	mov    %eax,(%esp)
c0119f67:	e8 5f 0b ff ff       	call   c010aacb <kfree>
c0119f6c:	e9 84 00 00 00       	jmp    c0119ff5 <vfs_do_add+0x17f>
    lock_vdev_list();
    if (!check_devname_conflict(s_devname)) {
        unlock_vdev_list();
        goto failed_cleanup_vdev;
    }
    vdev->devname = s_devname;
c0119f71:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0119f74:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0119f77:	89 10                	mov    %edx,(%eax)
    vdev->devnode = devnode;
c0119f79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0119f7c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0119f7f:	89 50 04             	mov    %edx,0x4(%eax)
    vdev->mountable = mountable;
c0119f82:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0119f85:	8b 55 14             	mov    0x14(%ebp),%edx
c0119f88:	89 50 0c             	mov    %edx,0xc(%eax)
    vdev->fs = fs;
c0119f8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0119f8e:	8b 55 10             	mov    0x10(%ebp),%edx
c0119f91:	89 50 08             	mov    %edx,0x8(%eax)

    list_add(&vdev_list, &(vdev->vdev_link));
c0119f94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0119f97:	83 c0 10             	add    $0x10,%eax
c0119f9a:	c7 45 e8 04 01 17 c0 	movl   $0xc0170104,-0x18(%ebp)
c0119fa1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0119fa4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0119fa7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0119faa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0119fad:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0119fb0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0119fb3:	8b 40 04             	mov    0x4(%eax),%eax
c0119fb6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0119fb9:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0119fbc:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0119fbf:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0119fc2:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0119fc5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0119fc8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0119fcb:	89 10                	mov    %edx,(%eax)
c0119fcd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0119fd0:	8b 10                	mov    (%eax),%edx
c0119fd2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0119fd5:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0119fd8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0119fdb:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0119fde:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0119fe1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0119fe4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0119fe7:	89 10                	mov    %edx,(%eax)
    unlock_vdev_list();
c0119fe9:	e8 d4 fb ff ff       	call   c0119bc2 <unlock_vdev_list>
    return 0;
c0119fee:	b8 00 00 00 00       	mov    $0x0,%eax
c0119ff3:	eb 0e                	jmp    c011a003 <vfs_do_add+0x18d>

failed_cleanup_vdev:
    kfree(vdev);
failed_cleanup_name:
    kfree(s_devname);
c0119ff5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0119ff8:	89 04 24             	mov    %eax,(%esp)
c0119ffb:	e8 cb 0a ff ff       	call   c010aacb <kfree>
    return ret;
c011a000:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011a003:	c9                   	leave  
c011a004:	c3                   	ret    

c011a005 <vfs_add_fs>:
/*
 * vfs_add_fs - Add a new fs,  by name. See  vfs_do_add information for the description of
 *              mountable.
 */
int
vfs_add_fs(const char *devname, struct fs *fs) {
c011a005:	55                   	push   %ebp
c011a006:	89 e5                	mov    %esp,%ebp
c011a008:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, NULL, fs, 0);
c011a00b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c011a012:	00 
c011a013:	8b 45 0c             	mov    0xc(%ebp),%eax
c011a016:	89 44 24 08          	mov    %eax,0x8(%esp)
c011a01a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011a021:	00 
c011a022:	8b 45 08             	mov    0x8(%ebp),%eax
c011a025:	89 04 24             	mov    %eax,(%esp)
c011a028:	e8 49 fe ff ff       	call   c0119e76 <vfs_do_add>
}
c011a02d:	c9                   	leave  
c011a02e:	c3                   	ret    

c011a02f <vfs_add_dev>:
/*
 * vfs_add_dev - Add a new device, by name. See  vfs_do_add information for the description of
 *               mountable.
 */
int
vfs_add_dev(const char *devname, struct inode *devnode, bool mountable) {
c011a02f:	55                   	push   %ebp
c011a030:	89 e5                	mov    %esp,%ebp
c011a032:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, devnode, NULL, mountable);
c011a035:	8b 45 10             	mov    0x10(%ebp),%eax
c011a038:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011a03c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011a043:	00 
c011a044:	8b 45 0c             	mov    0xc(%ebp),%eax
c011a047:	89 44 24 04          	mov    %eax,0x4(%esp)
c011a04b:	8b 45 08             	mov    0x8(%ebp),%eax
c011a04e:	89 04 24             	mov    %eax,(%esp)
c011a051:	e8 20 fe ff ff       	call   c0119e76 <vfs_do_add>
}
c011a056:	c9                   	leave  
c011a057:	c3                   	ret    

c011a058 <find_mount>:
/*
 * find_mount - Look for a mountable device named DEVNAME.
 *              Should already hold vdev_list lock.
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
c011a058:	55                   	push   %ebp
c011a059:	89 e5                	mov    %esp,%ebp
c011a05b:	83 ec 28             	sub    $0x28,%esp
    assert(devname != NULL);
c011a05e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011a062:	75 24                	jne    c011a088 <find_mount+0x30>
c011a064:	c7 44 24 0c 04 75 12 	movl   $0xc0127504,0xc(%esp)
c011a06b:	c0 
c011a06c:	c7 44 24 08 14 75 12 	movl   $0xc0127514,0x8(%esp)
c011a073:	c0 
c011a074:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c011a07b:	00 
c011a07c:	c7 04 24 29 75 12 c0 	movl   $0xc0127529,(%esp)
c011a083:	e8 8e 71 fe ff       	call   c0101216 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c011a088:	c7 45 f0 04 01 17 c0 	movl   $0xc0170104,-0x10(%ebp)
c011a08f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a092:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c011a095:	eb 3a                	jmp    c011a0d1 <find_mount+0x79>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c011a097:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011a09a:	83 e8 10             	sub    $0x10,%eax
c011a09d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
c011a0a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011a0a3:	8b 40 0c             	mov    0xc(%eax),%eax
c011a0a6:	85 c0                	test   %eax,%eax
c011a0a8:	74 27                	je     c011a0d1 <find_mount+0x79>
c011a0aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011a0ad:	8b 00                	mov    (%eax),%eax
c011a0af:	8b 55 08             	mov    0x8(%ebp),%edx
c011a0b2:	89 54 24 04          	mov    %edx,0x4(%esp)
c011a0b6:	89 04 24             	mov    %eax,(%esp)
c011a0b9:	e8 e3 6d 00 00       	call   c0120ea1 <strcmp>
c011a0be:	85 c0                	test   %eax,%eax
c011a0c0:	75 0f                	jne    c011a0d1 <find_mount+0x79>
            *vdev_store = vdev;
c011a0c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c011a0c5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011a0c8:	89 10                	mov    %edx,(%eax)
            return 0;
c011a0ca:	b8 00 00 00 00       	mov    $0x0,%eax
c011a0cf:	eb 1c                	jmp    c011a0ed <find_mount+0x95>
c011a0d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011a0d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c011a0d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011a0da:	8b 40 04             	mov    0x4(%eax),%eax
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
    assert(devname != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c011a0dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011a0e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011a0e3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011a0e6:	75 af                	jne    c011a097 <find_mount+0x3f>
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
            *vdev_store = vdev;
            return 0;
        }
    }
    return -E_NO_DEV;
c011a0e8:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
c011a0ed:	c9                   	leave  
c011a0ee:	c3                   	ret    

c011a0ef <vfs_mount>:
 *             set up the filesystem and hand back a struct fs.
 *
 * The DATA argument is passed through unchanged to MOUNTFUNC.
 */
int
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
c011a0ef:	55                   	push   %ebp
c011a0f0:	89 e5                	mov    %esp,%ebp
c011a0f2:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c011a0f5:	e8 b4 fa ff ff       	call   c0119bae <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c011a0fa:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011a0fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c011a101:	8b 45 08             	mov    0x8(%ebp),%eax
c011a104:	89 04 24             	mov    %eax,(%esp)
c011a107:	e8 4c ff ff ff       	call   c011a058 <find_mount>
c011a10c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011a10f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011a113:	74 05                	je     c011a11a <vfs_mount+0x2b>
        goto out;
c011a115:	e9 00 01 00 00       	jmp    c011a21a <vfs_mount+0x12b>
    }
    if (vdev->fs != NULL) {
c011a11a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011a11d:	8b 40 08             	mov    0x8(%eax),%eax
c011a120:	85 c0                	test   %eax,%eax
c011a122:	74 0c                	je     c011a130 <vfs_mount+0x41>
        ret = -E_BUSY;
c011a124:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
        goto out;
c011a12b:	e9 ea 00 00 00       	jmp    c011a21a <vfs_mount+0x12b>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c011a130:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011a133:	8b 00                	mov    (%eax),%eax
c011a135:	85 c0                	test   %eax,%eax
c011a137:	74 0a                	je     c011a143 <vfs_mount+0x54>
c011a139:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011a13c:	8b 40 0c             	mov    0xc(%eax),%eax
c011a13f:	85 c0                	test   %eax,%eax
c011a141:	75 24                	jne    c011a167 <vfs_mount+0x78>
c011a143:	c7 44 24 0c a8 75 12 	movl   $0xc01275a8,0xc(%esp)
c011a14a:	c0 
c011a14b:	c7 44 24 08 14 75 12 	movl   $0xc0127514,0x8(%esp)
c011a152:	c0 
c011a153:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
c011a15a:	00 
c011a15b:	c7 04 24 29 75 12 c0 	movl   $0xc0127529,(%esp)
c011a162:	e8 af 70 fe ff       	call   c0101216 <__panic>

    struct device *dev = vop_info(vdev->devnode, device);
c011a167:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011a16a:	8b 40 04             	mov    0x4(%eax),%eax
c011a16d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011a170:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011a174:	74 0d                	je     c011a183 <vfs_mount+0x94>
c011a176:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a179:	8b 40 2c             	mov    0x2c(%eax),%eax
c011a17c:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011a181:	74 24                	je     c011a1a7 <vfs_mount+0xb8>
c011a183:	c7 44 24 0c d4 75 12 	movl   $0xc01275d4,0xc(%esp)
c011a18a:	c0 
c011a18b:	c7 44 24 08 14 75 12 	movl   $0xc0127514,0x8(%esp)
c011a192:	c0 
c011a193:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c011a19a:	00 
c011a19b:	c7 04 24 29 75 12 c0 	movl   $0xc0127529,(%esp)
c011a1a2:	e8 6f 70 fe ff       	call   c0101216 <__panic>
c011a1a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a1aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = mountfunc(dev, &(vdev->fs))) == 0) {
c011a1ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011a1b0:	83 c0 08             	add    $0x8,%eax
c011a1b3:	89 44 24 04          	mov    %eax,0x4(%esp)
c011a1b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011a1ba:	89 04 24             	mov    %eax,(%esp)
c011a1bd:	8b 45 0c             	mov    0xc(%ebp),%eax
c011a1c0:	ff d0                	call   *%eax
c011a1c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011a1c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011a1c9:	75 4f                	jne    c011a21a <vfs_mount+0x12b>
        assert(vdev->fs != NULL);
c011a1cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011a1ce:	8b 40 08             	mov    0x8(%eax),%eax
c011a1d1:	85 c0                	test   %eax,%eax
c011a1d3:	75 24                	jne    c011a1f9 <vfs_mount+0x10a>
c011a1d5:	c7 44 24 0c 07 76 12 	movl   $0xc0127607,0xc(%esp)
c011a1dc:	c0 
c011a1dd:	c7 44 24 08 14 75 12 	movl   $0xc0127514,0x8(%esp)
c011a1e4:	c0 
c011a1e5:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c011a1ec:	00 
c011a1ed:	c7 04 24 29 75 12 c0 	movl   $0xc0127529,(%esp)
c011a1f4:	e8 1d 70 fe ff       	call   c0101216 <__panic>
	cprintf("\n9.虚拟文件系统设备名\n");
c011a1f9:	c7 04 24 18 76 12 c0 	movl   $0xc0127618,(%esp)
c011a200:	e8 ee 61 fe ff       	call   c01003f3 <cprintf>
        cprintf("vfs: mount %s.\n", vdev->devname);
c011a205:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011a208:	8b 00                	mov    (%eax),%eax
c011a20a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011a20e:	c7 04 24 38 76 12 c0 	movl   $0xc0127638,(%esp)
c011a215:	e8 d9 61 fe ff       	call   c01003f3 <cprintf>
    }

out:
    unlock_vdev_list();
c011a21a:	e8 a3 f9 ff ff       	call   c0119bc2 <unlock_vdev_list>
    return ret;
c011a21f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011a222:	c9                   	leave  
c011a223:	c3                   	ret    

c011a224 <vfs_unmount>:
/*
 * vfs_unmount - Unmount a filesystem/device by name.
 *               First calls FSOP_SYNC on the filesystem; then calls FSOP_UNMOUNT.
 */
int
vfs_unmount(const char *devname) {
c011a224:	55                   	push   %ebp
c011a225:	89 e5                	mov    %esp,%ebp
c011a227:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c011a22a:	e8 7f f9 ff ff       	call   c0119bae <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c011a22f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c011a232:	89 44 24 04          	mov    %eax,0x4(%esp)
c011a236:	8b 45 08             	mov    0x8(%ebp),%eax
c011a239:	89 04 24             	mov    %eax,(%esp)
c011a23c:	e8 17 fe ff ff       	call   c011a058 <find_mount>
c011a241:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011a244:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011a248:	74 05                	je     c011a24f <vfs_unmount+0x2b>
        goto out;
c011a24a:	e9 a8 00 00 00       	jmp    c011a2f7 <vfs_unmount+0xd3>
    }
    if (vdev->fs == NULL) {
c011a24f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a252:	8b 40 08             	mov    0x8(%eax),%eax
c011a255:	85 c0                	test   %eax,%eax
c011a257:	75 0c                	jne    c011a265 <vfs_unmount+0x41>
        ret = -E_INVAL;
c011a259:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        goto out;
c011a260:	e9 92 00 00 00       	jmp    c011a2f7 <vfs_unmount+0xd3>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c011a265:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a268:	8b 00                	mov    (%eax),%eax
c011a26a:	85 c0                	test   %eax,%eax
c011a26c:	74 0a                	je     c011a278 <vfs_unmount+0x54>
c011a26e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a271:	8b 40 0c             	mov    0xc(%eax),%eax
c011a274:	85 c0                	test   %eax,%eax
c011a276:	75 24                	jne    c011a29c <vfs_unmount+0x78>
c011a278:	c7 44 24 0c a8 75 12 	movl   $0xc01275a8,0xc(%esp)
c011a27f:	c0 
c011a280:	c7 44 24 08 14 75 12 	movl   $0xc0127514,0x8(%esp)
c011a287:	c0 
c011a288:	c7 44 24 04 09 01 00 	movl   $0x109,0x4(%esp)
c011a28f:	00 
c011a290:	c7 04 24 29 75 12 c0 	movl   $0xc0127529,(%esp)
c011a297:	e8 7a 6f fe ff       	call   c0101216 <__panic>

    if ((ret = fsop_sync(vdev->fs)) != 0) {
c011a29c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a29f:	8b 40 08             	mov    0x8(%eax),%eax
c011a2a2:	8b 40 70             	mov    0x70(%eax),%eax
c011a2a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011a2a8:	8b 52 08             	mov    0x8(%edx),%edx
c011a2ab:	89 14 24             	mov    %edx,(%esp)
c011a2ae:	ff d0                	call   *%eax
c011a2b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011a2b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011a2b7:	74 02                	je     c011a2bb <vfs_unmount+0x97>
        goto out;
c011a2b9:	eb 3c                	jmp    c011a2f7 <vfs_unmount+0xd3>
    }
    if ((ret = fsop_unmount(vdev->fs)) == 0) {
c011a2bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a2be:	8b 40 08             	mov    0x8(%eax),%eax
c011a2c1:	8b 40 78             	mov    0x78(%eax),%eax
c011a2c4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011a2c7:	8b 52 08             	mov    0x8(%edx),%edx
c011a2ca:	89 14 24             	mov    %edx,(%esp)
c011a2cd:	ff d0                	call   *%eax
c011a2cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011a2d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011a2d6:	75 1f                	jne    c011a2f7 <vfs_unmount+0xd3>
        vdev->fs = NULL;
c011a2d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a2db:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        cprintf("vfs: unmount %s.\n", vdev->devname);
c011a2e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a2e5:	8b 00                	mov    (%eax),%eax
c011a2e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c011a2eb:	c7 04 24 48 76 12 c0 	movl   $0xc0127648,(%esp)
c011a2f2:	e8 fc 60 fe ff       	call   c01003f3 <cprintf>
    }

out:
    unlock_vdev_list();
c011a2f7:	e8 c6 f8 ff ff       	call   c0119bc2 <unlock_vdev_list>
    return ret;
c011a2fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011a2ff:	c9                   	leave  
c011a300:	c3                   	ret    

c011a301 <vfs_unmount_all>:

/*
 * vfs_unmount_all - Global unmount function.
 */
int
vfs_unmount_all(void) {
c011a301:	55                   	push   %ebp
c011a302:	89 e5                	mov    %esp,%ebp
c011a304:	83 ec 38             	sub    $0x38,%esp
c011a307:	c7 45 e4 04 01 17 c0 	movl   $0xc0170104,-0x1c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c011a30e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011a311:	8b 40 04             	mov    0x4(%eax),%eax
c011a314:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c011a317:	0f 94 c0             	sete   %al
c011a31a:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c011a31d:	85 c0                	test   %eax,%eax
c011a31f:	0f 85 f1 00 00 00    	jne    c011a416 <vfs_unmount_all+0x115>
        lock_vdev_list();
c011a325:	e8 84 f8 ff ff       	call   c0119bae <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c011a32a:	c7 45 f0 04 01 17 c0 	movl   $0xc0170104,-0x10(%ebp)
c011a331:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a334:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c011a337:	e9 ba 00 00 00       	jmp    c011a3f6 <vfs_unmount_all+0xf5>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c011a33c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011a33f:	83 e8 10             	sub    $0x10,%eax
c011a342:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->mountable && vdev->fs != NULL) {
c011a345:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011a348:	8b 40 0c             	mov    0xc(%eax),%eax
c011a34b:	85 c0                	test   %eax,%eax
c011a34d:	0f 84 a3 00 00 00    	je     c011a3f6 <vfs_unmount_all+0xf5>
c011a353:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011a356:	8b 40 08             	mov    0x8(%eax),%eax
c011a359:	85 c0                	test   %eax,%eax
c011a35b:	0f 84 95 00 00 00    	je     c011a3f6 <vfs_unmount_all+0xf5>
                    int ret;
                    if ((ret = fsop_sync(vdev->fs)) != 0) {
c011a361:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011a364:	8b 40 08             	mov    0x8(%eax),%eax
c011a367:	8b 40 70             	mov    0x70(%eax),%eax
c011a36a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011a36d:	8b 52 08             	mov    0x8(%edx),%edx
c011a370:	89 14 24             	mov    %edx,(%esp)
c011a373:	ff d0                	call   *%eax
c011a375:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011a378:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011a37c:	74 1e                	je     c011a39c <vfs_unmount_all+0x9b>
                        cprintf("vfs: warning: sync failed for %s: %e.\n", vdev->devname, ret);
c011a37e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011a381:	8b 00                	mov    (%eax),%eax
c011a383:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011a386:	89 54 24 08          	mov    %edx,0x8(%esp)
c011a38a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011a38e:	c7 04 24 5c 76 12 c0 	movl   $0xc012765c,(%esp)
c011a395:	e8 59 60 fe ff       	call   c01003f3 <cprintf>
                        continue ;
c011a39a:	eb 5a                	jmp    c011a3f6 <vfs_unmount_all+0xf5>
                    }
                    if ((ret = fsop_unmount(vdev->fs)) != 0) {
c011a39c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011a39f:	8b 40 08             	mov    0x8(%eax),%eax
c011a3a2:	8b 40 78             	mov    0x78(%eax),%eax
c011a3a5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011a3a8:	8b 52 08             	mov    0x8(%edx),%edx
c011a3ab:	89 14 24             	mov    %edx,(%esp)
c011a3ae:	ff d0                	call   *%eax
c011a3b0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011a3b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011a3b7:	74 1e                	je     c011a3d7 <vfs_unmount_all+0xd6>
                        cprintf("vfs: warning: unmount failed for %s: %e.\n", vdev->devname, ret);
c011a3b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011a3bc:	8b 00                	mov    (%eax),%eax
c011a3be:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011a3c1:	89 54 24 08          	mov    %edx,0x8(%esp)
c011a3c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c011a3c9:	c7 04 24 84 76 12 c0 	movl   $0xc0127684,(%esp)
c011a3d0:	e8 1e 60 fe ff       	call   c01003f3 <cprintf>
                        continue ;
c011a3d5:	eb 1f                	jmp    c011a3f6 <vfs_unmount_all+0xf5>
                    }
                    vdev->fs = NULL;
c011a3d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011a3da:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                    cprintf("vfs: unmount %s.\n", vdev->devname);
c011a3e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011a3e4:	8b 00                	mov    (%eax),%eax
c011a3e6:	89 44 24 04          	mov    %eax,0x4(%esp)
c011a3ea:	c7 04 24 48 76 12 c0 	movl   $0xc0127648,(%esp)
c011a3f1:	e8 fd 5f fe ff       	call   c01003f3 <cprintf>
c011a3f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011a3f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c011a3fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011a3ff:	8b 40 04             	mov    0x4(%eax),%eax
vfs_unmount_all(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c011a402:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011a405:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011a408:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011a40b:	0f 85 2b ff ff ff    	jne    c011a33c <vfs_unmount_all+0x3b>
                    vdev->fs = NULL;
                    cprintf("vfs: unmount %s.\n", vdev->devname);
                }
            }
        }
        unlock_vdev_list();
c011a411:	e8 ac f7 ff ff       	call   c0119bc2 <unlock_vdev_list>
    }
    return 0;
c011a416:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011a41b:	c9                   	leave  
c011a41c:	c3                   	ret    

c011a41d <vfs_open>:
#include <assert.h>


// open file in vfs, get/create inode for file with filename path.
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
c011a41d:	55                   	push   %ebp
c011a41e:	89 e5                	mov    %esp,%ebp
c011a420:	53                   	push   %ebx
c011a421:	83 ec 44             	sub    $0x44,%esp
    bool can_write = 0;
c011a424:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    switch (open_flags & O_ACCMODE) {
c011a42b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011a42e:	83 e0 03             	and    $0x3,%eax
c011a431:	85 c0                	test   %eax,%eax
c011a433:	74 18                	je     c011a44d <vfs_open+0x30>
c011a435:	83 f8 02             	cmp    $0x2,%eax
c011a438:	77 09                	ja     c011a443 <vfs_open+0x26>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
        can_write = 1;
c011a43a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        break;
c011a441:	eb 0b                	jmp    c011a44e <vfs_open+0x31>
    default:
        return -E_INVAL;
c011a443:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011a448:	e9 4d 03 00 00       	jmp    c011a79a <vfs_open+0x37d>
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
    bool can_write = 0;
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c011a44d:	90                   	nop
        break;
    default:
        return -E_INVAL;
    }

    if (open_flags & O_TRUNC) {
c011a44e:	8b 45 0c             	mov    0xc(%ebp),%eax
c011a451:	83 e0 10             	and    $0x10,%eax
c011a454:	85 c0                	test   %eax,%eax
c011a456:	74 10                	je     c011a468 <vfs_open+0x4b>
        if (!can_write) {
c011a458:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011a45c:	75 0a                	jne    c011a468 <vfs_open+0x4b>
            return -E_INVAL;
c011a45e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011a463:	e9 32 03 00 00       	jmp    c011a79a <vfs_open+0x37d>
        }
    }

    int ret; 
    struct inode *node;
    bool excl = (open_flags & O_EXCL) != 0;
c011a468:	8b 45 0c             	mov    0xc(%ebp),%eax
c011a46b:	83 e0 08             	and    $0x8,%eax
c011a46e:	85 c0                	test   %eax,%eax
c011a470:	0f 95 c0             	setne  %al
c011a473:	0f b6 c0             	movzbl %al,%eax
c011a476:	89 45 f0             	mov    %eax,-0x10(%ebp)
    bool create = (open_flags & O_CREAT) != 0;
c011a479:	8b 45 0c             	mov    0xc(%ebp),%eax
c011a47c:	83 e0 04             	and    $0x4,%eax
c011a47f:	85 c0                	test   %eax,%eax
c011a481:	0f 95 c0             	setne  %al
c011a484:	0f b6 c0             	movzbl %al,%eax
c011a487:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ret = vfs_lookup(path, &node);
c011a48a:	8d 45 d8             	lea    -0x28(%ebp),%eax
c011a48d:	89 44 24 04          	mov    %eax,0x4(%esp)
c011a491:	8b 45 08             	mov    0x8(%ebp),%eax
c011a494:	89 04 24             	mov    %eax,(%esp)
c011a497:	e8 a2 07 00 00       	call   c011ac3e <vfs_lookup>
c011a49c:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (ret != 0) {
c011a49f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011a4a3:	0f 84 fd 00 00 00    	je     c011a5a6 <vfs_open+0x189>
        if (ret == -16 && (create)) {
c011a4a9:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
c011a4ad:	0f 85 eb 00 00 00    	jne    c011a59e <vfs_open+0x181>
c011a4b3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011a4b7:	0f 84 e1 00 00 00    	je     c011a59e <vfs_open+0x181>
            char *name;
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
c011a4bd:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c011a4c0:	89 44 24 08          	mov    %eax,0x8(%esp)
c011a4c4:	8d 45 d0             	lea    -0x30(%ebp),%eax
c011a4c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c011a4cb:	8b 45 08             	mov    0x8(%ebp),%eax
c011a4ce:	89 04 24             	mov    %eax,(%esp)
c011a4d1:	e8 79 08 00 00       	call   c011ad4f <vfs_lookup_parent>
c011a4d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011a4d9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011a4dd:	74 08                	je     c011a4e7 <vfs_open+0xca>
                return ret;
c011a4df:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011a4e2:	e9 b3 02 00 00       	jmp    c011a79a <vfs_open+0x37d>
            }
			//cprintf("ready to start fun vop_create().\n");
            ret = vop_create(dir, name, excl, &node);
c011a4e7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011a4ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011a4ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011a4f0:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a4f3:	8b 40 38             	mov    0x38(%eax),%eax
c011a4f6:	85 c0                	test   %eax,%eax
c011a4f8:	75 24                	jne    c011a51e <vfs_open+0x101>
c011a4fa:	c7 44 24 0c b0 76 12 	movl   $0xc01276b0,0xc(%esp)
c011a501:	c0 
c011a502:	c7 44 24 08 d3 76 12 	movl   $0xc01276d3,0x8(%esp)
c011a509:	c0 
c011a50a:	c7 44 24 04 2d 00 00 	movl   $0x2d,0x4(%esp)
c011a511:	00 
c011a512:	c7 04 24 e8 76 12 c0 	movl   $0xc01276e8,(%esp)
c011a519:	e8 f8 6c fe ff       	call   c0101216 <__panic>
c011a51e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011a522:	74 17                	je     c011a53b <vfs_open+0x11e>
c011a524:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011a527:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a52a:	85 c0                	test   %eax,%eax
c011a52c:	74 0d                	je     c011a53b <vfs_open+0x11e>
c011a52e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011a531:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a534:	8b 40 38             	mov    0x38(%eax),%eax
c011a537:	85 c0                	test   %eax,%eax
c011a539:	75 24                	jne    c011a55f <vfs_open+0x142>
c011a53b:	c7 44 24 0c 00 77 12 	movl   $0xc0127700,0xc(%esp)
c011a542:	c0 
c011a543:	c7 44 24 08 d3 76 12 	movl   $0xc01276d3,0x8(%esp)
c011a54a:	c0 
c011a54b:	c7 44 24 04 2d 00 00 	movl   $0x2d,0x4(%esp)
c011a552:	00 
c011a553:	c7 04 24 e8 76 12 c0 	movl   $0xc01276e8,(%esp)
c011a55a:	e8 b7 6c fe ff       	call   c0101216 <__panic>
c011a55f:	c7 44 24 04 4f 77 12 	movl   $0xc012774f,0x4(%esp)
c011a566:	c0 
c011a567:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011a56a:	89 04 24             	mov    %eax,(%esp)
c011a56d:	e8 c6 f3 ff ff       	call   c0119938 <inode_check>
c011a572:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011a575:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a578:	8b 40 38             	mov    0x38(%eax),%eax
c011a57b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c011a57e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c011a581:	8d 5d d8             	lea    -0x28(%ebp),%ebx
c011a584:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c011a588:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c011a58b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c011a58f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011a593:	89 14 24             	mov    %edx,(%esp)
c011a596:	ff d0                	call   *%eax
c011a598:	89 45 e8             	mov    %eax,-0x18(%ebp)
    bool excl = (open_flags & O_EXCL) != 0;
    bool create = (open_flags & O_CREAT) != 0;
    ret = vfs_lookup(path, &node);

    if (ret != 0) {
        if (ret == -16 && (create)) {
c011a59b:	90                   	nop
c011a59c:	eb 1e                	jmp    c011a5bc <vfs_open+0x19f>
                return ret;
            }
			//cprintf("ready to start fun vop_create().\n");
            ret = vop_create(dir, name, excl, &node);
			//cprintf("vop_create() fun finished\n");
        } else return ret;
c011a59e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011a5a1:	e9 f4 01 00 00       	jmp    c011a79a <vfs_open+0x37d>
    } else if (excl && create) {
c011a5a6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011a5aa:	74 10                	je     c011a5bc <vfs_open+0x19f>
c011a5ac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011a5b0:	74 0a                	je     c011a5bc <vfs_open+0x19f>
        return -E_EXISTS;
c011a5b2:	b8 e9 ff ff ff       	mov    $0xffffffe9,%eax
c011a5b7:	e9 de 01 00 00       	jmp    c011a79a <vfs_open+0x37d>
    }
    assert(node != NULL);
c011a5bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011a5bf:	85 c0                	test   %eax,%eax
c011a5c1:	75 24                	jne    c011a5e7 <vfs_open+0x1ca>
c011a5c3:	c7 44 24 0c 56 77 12 	movl   $0xc0127756,0xc(%esp)
c011a5ca:	c0 
c011a5cb:	c7 44 24 08 d3 76 12 	movl   $0xc01276d3,0x8(%esp)
c011a5d2:	c0 
c011a5d3:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c011a5da:	00 
c011a5db:	c7 04 24 e8 76 12 c0 	movl   $0xc01276e8,(%esp)
c011a5e2:	e8 2f 6c fe ff       	call   c0101216 <__panic>
    
    if ((ret = vop_open(node, open_flags)) != 0) {
c011a5e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011a5ea:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011a5ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011a5f0:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a5f3:	8b 40 04             	mov    0x4(%eax),%eax
c011a5f6:	85 c0                	test   %eax,%eax
c011a5f8:	75 24                	jne    c011a61e <vfs_open+0x201>
c011a5fa:	c7 44 24 0c 64 77 12 	movl   $0xc0127764,0xc(%esp)
c011a601:	c0 
c011a602:	c7 44 24 08 d3 76 12 	movl   $0xc01276d3,0x8(%esp)
c011a609:	c0 
c011a60a:	c7 44 24 04 35 00 00 	movl   $0x35,0x4(%esp)
c011a611:	00 
c011a612:	c7 04 24 e8 76 12 c0 	movl   $0xc01276e8,(%esp)
c011a619:	e8 f8 6b fe ff       	call   c0101216 <__panic>
c011a61e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c011a622:	74 17                	je     c011a63b <vfs_open+0x21e>
c011a624:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011a627:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a62a:	85 c0                	test   %eax,%eax
c011a62c:	74 0d                	je     c011a63b <vfs_open+0x21e>
c011a62e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011a631:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a634:	8b 40 04             	mov    0x4(%eax),%eax
c011a637:	85 c0                	test   %eax,%eax
c011a639:	75 24                	jne    c011a65f <vfs_open+0x242>
c011a63b:	c7 44 24 0c 88 77 12 	movl   $0xc0127788,0xc(%esp)
c011a642:	c0 
c011a643:	c7 44 24 08 d3 76 12 	movl   $0xc01276d3,0x8(%esp)
c011a64a:	c0 
c011a64b:	c7 44 24 04 35 00 00 	movl   $0x35,0x4(%esp)
c011a652:	00 
c011a653:	c7 04 24 e8 76 12 c0 	movl   $0xc01276e8,(%esp)
c011a65a:	e8 b7 6b fe ff       	call   c0101216 <__panic>
c011a65f:	c7 44 24 04 d5 77 12 	movl   $0xc01277d5,0x4(%esp)
c011a666:	c0 
c011a667:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011a66a:	89 04 24             	mov    %eax,(%esp)
c011a66d:	e8 c6 f2 ff ff       	call   c0119938 <inode_check>
c011a672:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011a675:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a678:	8b 40 04             	mov    0x4(%eax),%eax
c011a67b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011a67e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c011a681:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011a685:	89 14 24             	mov    %edx,(%esp)
c011a688:	ff d0                	call   *%eax
c011a68a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011a68d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011a691:	74 13                	je     c011a6a6 <vfs_open+0x289>
        vop_ref_dec(node);
c011a693:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011a696:	89 04 24             	mov    %eax,(%esp)
c011a699:	e8 4a f0 ff ff       	call   c01196e8 <inode_ref_dec>
        return ret;
c011a69e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011a6a1:	e9 f4 00 00 00       	jmp    c011a79a <vfs_open+0x37d>
    }

    vop_open_inc(node);
c011a6a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011a6a9:	89 04 24             	mov    %eax,(%esp)
c011a6ac:	e8 55 f1 ff ff       	call   c0119806 <inode_open_inc>
    if (open_flags & O_TRUNC || create) {
c011a6b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c011a6b4:	83 e0 10             	and    $0x10,%eax
c011a6b7:	85 c0                	test   %eax,%eax
c011a6b9:	75 0a                	jne    c011a6c5 <vfs_open+0x2a8>
c011a6bb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011a6bf:	0f 84 c8 00 00 00    	je     c011a78d <vfs_open+0x370>
        if ((ret = vop_truncate(node, 0)) != 0) {
c011a6c5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011a6c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c011a6cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011a6ce:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a6d1:	8b 40 34             	mov    0x34(%eax),%eax
c011a6d4:	85 c0                	test   %eax,%eax
c011a6d6:	75 24                	jne    c011a6fc <vfs_open+0x2df>
c011a6d8:	c7 44 24 0c dc 77 12 	movl   $0xc01277dc,0xc(%esp)
c011a6df:	c0 
c011a6e0:	c7 44 24 08 d3 76 12 	movl   $0xc01276d3,0x8(%esp)
c011a6e7:	c0 
c011a6e8:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c011a6ef:	00 
c011a6f0:	c7 04 24 e8 76 12 c0 	movl   $0xc01276e8,(%esp)
c011a6f7:	e8 1a 6b fe ff       	call   c0101216 <__panic>
c011a6fc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011a700:	74 17                	je     c011a719 <vfs_open+0x2fc>
c011a702:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011a705:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a708:	85 c0                	test   %eax,%eax
c011a70a:	74 0d                	je     c011a719 <vfs_open+0x2fc>
c011a70c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011a70f:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a712:	8b 40 34             	mov    0x34(%eax),%eax
c011a715:	85 c0                	test   %eax,%eax
c011a717:	75 24                	jne    c011a73d <vfs_open+0x320>
c011a719:	c7 44 24 0c 04 78 12 	movl   $0xc0127804,0xc(%esp)
c011a720:	c0 
c011a721:	c7 44 24 08 d3 76 12 	movl   $0xc01276d3,0x8(%esp)
c011a728:	c0 
c011a729:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c011a730:	00 
c011a731:	c7 04 24 e8 76 12 c0 	movl   $0xc01276e8,(%esp)
c011a738:	e8 d9 6a fe ff       	call   c0101216 <__panic>
c011a73d:	c7 44 24 04 55 78 12 	movl   $0xc0127855,0x4(%esp)
c011a744:	c0 
c011a745:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011a748:	89 04 24             	mov    %eax,(%esp)
c011a74b:	e8 e8 f1 ff ff       	call   c0119938 <inode_check>
c011a750:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011a753:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a756:	8b 40 34             	mov    0x34(%eax),%eax
c011a759:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011a75c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011a763:	00 
c011a764:	89 14 24             	mov    %edx,(%esp)
c011a767:	ff d0                	call   *%eax
c011a769:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011a76c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011a770:	74 1b                	je     c011a78d <vfs_open+0x370>
            vop_open_dec(node);
c011a772:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011a775:	89 04 24             	mov    %eax,(%esp)
c011a778:	e8 a3 f0 ff ff       	call   c0119820 <inode_open_dec>
            vop_ref_dec(node);
c011a77d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011a780:	89 04 24             	mov    %eax,(%esp)
c011a783:	e8 60 ef ff ff       	call   c01196e8 <inode_ref_dec>
            return ret;
c011a788:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011a78b:	eb 0d                	jmp    c011a79a <vfs_open+0x37d>
        }
    }
    *node_store = node;
c011a78d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011a790:	8b 45 10             	mov    0x10(%ebp),%eax
c011a793:	89 10                	mov    %edx,(%eax)
    return 0;
c011a795:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011a79a:	83 c4 44             	add    $0x44,%esp
c011a79d:	5b                   	pop    %ebx
c011a79e:	5d                   	pop    %ebp
c011a79f:	c3                   	ret    

c011a7a0 <vfs_delete>:

//delete file in vfs
int
vfs_delete(char *path, uint32_t type) {
c011a7a0:	55                   	push   %ebp
c011a7a1:	89 e5                	mov    %esp,%ebp
c011a7a3:	53                   	push   %ebx
c011a7a4:	83 ec 24             	sub    $0x24,%esp
	int ret;
	char *name;
	struct inode *dir;
	if((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
c011a7a7:	8d 45 ec             	lea    -0x14(%ebp),%eax
c011a7aa:	89 44 24 08          	mov    %eax,0x8(%esp)
c011a7ae:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011a7b1:	89 44 24 04          	mov    %eax,0x4(%esp)
c011a7b5:	8b 45 08             	mov    0x8(%ebp),%eax
c011a7b8:	89 04 24             	mov    %eax,(%esp)
c011a7bb:	e8 8f 05 00 00       	call   c011ad4f <vfs_lookup_parent>
c011a7c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011a7c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011a7c7:	74 08                	je     c011a7d1 <vfs_delete+0x31>
		return ret;
c011a7c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011a7cc:	e9 b0 00 00 00       	jmp    c011a881 <vfs_delete+0xe1>
	}
	ret = vop_delete(dir, name, type);
c011a7d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011a7d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011a7d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a7da:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a7dd:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a7e0:	85 c0                	test   %eax,%eax
c011a7e2:	75 24                	jne    c011a808 <vfs_delete+0x68>
c011a7e4:	c7 44 24 0c 60 78 12 	movl   $0xc0127860,0xc(%esp)
c011a7eb:	c0 
c011a7ec:	c7 44 24 08 d3 76 12 	movl   $0xc01276d3,0x8(%esp)
c011a7f3:	c0 
c011a7f4:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
c011a7fb:	00 
c011a7fc:	c7 04 24 e8 76 12 c0 	movl   $0xc01276e8,(%esp)
c011a803:	e8 0e 6a fe ff       	call   c0101216 <__panic>
c011a808:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011a80c:	74 17                	je     c011a825 <vfs_delete+0x85>
c011a80e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a811:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a814:	85 c0                	test   %eax,%eax
c011a816:	74 0d                	je     c011a825 <vfs_delete+0x85>
c011a818:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a81b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a81e:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a821:	85 c0                	test   %eax,%eax
c011a823:	75 24                	jne    c011a849 <vfs_delete+0xa9>
c011a825:	c7 44 24 0c 84 78 12 	movl   $0xc0127884,0xc(%esp)
c011a82c:	c0 
c011a82d:	c7 44 24 08 d3 76 12 	movl   $0xc01276d3,0x8(%esp)
c011a834:	c0 
c011a835:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
c011a83c:	00 
c011a83d:	c7 04 24 e8 76 12 c0 	movl   $0xc01276e8,(%esp)
c011a844:	e8 cd 69 fe ff       	call   c0101216 <__panic>
c011a849:	c7 44 24 04 d3 78 12 	movl   $0xc01278d3,0x4(%esp)
c011a850:	c0 
c011a851:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a854:	89 04 24             	mov    %eax,(%esp)
c011a857:	e8 dc f0 ff ff       	call   c0119938 <inode_check>
c011a85c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a85f:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a862:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a865:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c011a868:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011a86b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c011a86e:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c011a872:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011a876:	89 14 24             	mov    %edx,(%esp)
c011a879:	ff d0                	call   *%eax
c011a87b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
c011a87e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011a881:	83 c4 24             	add    $0x24,%esp
c011a884:	5b                   	pop    %ebx
c011a885:	5d                   	pop    %ebp
c011a886:	c3                   	ret    

c011a887 <vfs_close>:

// close file in vfs
int
vfs_close(struct inode *node) {
c011a887:	55                   	push   %ebp
c011a888:	89 e5                	mov    %esp,%ebp
c011a88a:	83 ec 18             	sub    $0x18,%esp
    vop_open_dec(node);
c011a88d:	8b 45 08             	mov    0x8(%ebp),%eax
c011a890:	89 04 24             	mov    %eax,(%esp)
c011a893:	e8 88 ef ff ff       	call   c0119820 <inode_open_dec>
    vop_ref_dec(node);
c011a898:	8b 45 08             	mov    0x8(%ebp),%eax
c011a89b:	89 04 24             	mov    %eax,(%esp)
c011a89e:	e8 45 ee ff ff       	call   c01196e8 <inode_ref_dec>
    return 0;
c011a8a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011a8a8:	c9                   	leave  
c011a8a9:	c3                   	ret    

c011a8aa <vfs_unlink>:

// unimplement
int
vfs_unlink(char *path) {
c011a8aa:	55                   	push   %ebp
c011a8ab:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011a8ad:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c011a8b2:	5d                   	pop    %ebp
c011a8b3:	c3                   	ret    

c011a8b4 <vfs_rename>:

// rename file or dir
int
vfs_rename(char *old_path, char *new_path) {
c011a8b4:	55                   	push   %ebp
c011a8b5:	89 e5                	mov    %esp,%ebp
c011a8b7:	53                   	push   %ebx
c011a8b8:	83 ec 24             	sub    $0x24,%esp
    int ret;
	char *oldName;
	struct inode *parDir;
	if((ret = vfs_lookup_parent(old_path, &parDir, &oldName)) != 0) {
c011a8bb:	8d 45 ec             	lea    -0x14(%ebp),%eax
c011a8be:	89 44 24 08          	mov    %eax,0x8(%esp)
c011a8c2:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011a8c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c011a8c9:	8b 45 08             	mov    0x8(%ebp),%eax
c011a8cc:	89 04 24             	mov    %eax,(%esp)
c011a8cf:	e8 7b 04 00 00       	call   c011ad4f <vfs_lookup_parent>
c011a8d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011a8d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011a8db:	74 08                	je     c011a8e5 <vfs_rename+0x31>
		return ret;
c011a8dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011a8e0:	e9 b0 00 00 00       	jmp    c011a995 <vfs_rename+0xe1>
	}
	ret = vop_rename(parDir, oldName, new_path);
c011a8e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011a8e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011a8eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a8ee:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a8f1:	8b 40 48             	mov    0x48(%eax),%eax
c011a8f4:	85 c0                	test   %eax,%eax
c011a8f6:	75 24                	jne    c011a91c <vfs_rename+0x68>
c011a8f8:	c7 44 24 0c dc 78 12 	movl   $0xc01278dc,0xc(%esp)
c011a8ff:	c0 
c011a900:	c7 44 24 08 d3 76 12 	movl   $0xc01276d3,0x8(%esp)
c011a907:	c0 
c011a908:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c011a90f:	00 
c011a910:	c7 04 24 e8 76 12 c0 	movl   $0xc01276e8,(%esp)
c011a917:	e8 fa 68 fe ff       	call   c0101216 <__panic>
c011a91c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011a920:	74 17                	je     c011a939 <vfs_rename+0x85>
c011a922:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a925:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a928:	85 c0                	test   %eax,%eax
c011a92a:	74 0d                	je     c011a939 <vfs_rename+0x85>
c011a92c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a92f:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a932:	8b 40 48             	mov    0x48(%eax),%eax
c011a935:	85 c0                	test   %eax,%eax
c011a937:	75 24                	jne    c011a95d <vfs_rename+0xa9>
c011a939:	c7 44 24 0c 00 79 12 	movl   $0xc0127900,0xc(%esp)
c011a940:	c0 
c011a941:	c7 44 24 08 d3 76 12 	movl   $0xc01276d3,0x8(%esp)
c011a948:	c0 
c011a949:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c011a950:	00 
c011a951:	c7 04 24 e8 76 12 c0 	movl   $0xc01276e8,(%esp)
c011a958:	e8 b9 68 fe ff       	call   c0101216 <__panic>
c011a95d:	c7 44 24 04 4f 79 12 	movl   $0xc012794f,0x4(%esp)
c011a964:	c0 
c011a965:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a968:	89 04 24             	mov    %eax,(%esp)
c011a96b:	e8 c8 ef ff ff       	call   c0119938 <inode_check>
c011a970:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a973:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a976:	8b 40 48             	mov    0x48(%eax),%eax
c011a979:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c011a97c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011a97f:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c011a982:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c011a986:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011a98a:	89 14 24             	mov    %edx,(%esp)
c011a98d:	ff d0                	call   *%eax
c011a98f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
c011a992:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011a995:	83 c4 24             	add    $0x24,%esp
c011a998:	5b                   	pop    %ebx
c011a999:	5d                   	pop    %ebp
c011a99a:	c3                   	ret    

c011a99b <vfs_link>:

// unimplement
int
vfs_link(char *old_path, char *new_path) {
c011a99b:	55                   	push   %ebp
c011a99c:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011a99e:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c011a9a3:	5d                   	pop    %ebp
c011a9a4:	c3                   	ret    

c011a9a5 <vfs_symlink>:

// unimplement
int
vfs_symlink(char *old_path, char *new_path) {
c011a9a5:	55                   	push   %ebp
c011a9a6:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011a9a8:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c011a9ad:	5d                   	pop    %ebp
c011a9ae:	c3                   	ret    

c011a9af <vfs_readlink>:

// unimplement
int
vfs_readlink(char *path, struct iobuf *iob) {
c011a9af:	55                   	push   %ebp
c011a9b0:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011a9b2:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c011a9b7:	5d                   	pop    %ebp
c011a9b8:	c3                   	ret    

c011a9b9 <vfs_mkdir>:

// create a dir
int
vfs_mkdir(char *path){
c011a9b9:	55                   	push   %ebp
c011a9ba:	89 e5                	mov    %esp,%ebp
c011a9bc:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *name;
    struct inode *par_dir;  //parent dir node
    if((ret = vfs_lookup_parent(path, &par_dir, &name)) != 0) {
c011a9bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
c011a9c2:	89 44 24 08          	mov    %eax,0x8(%esp)
c011a9c6:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011a9c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c011a9cd:	8b 45 08             	mov    0x8(%ebp),%eax
c011a9d0:	89 04 24             	mov    %eax,(%esp)
c011a9d3:	e8 77 03 00 00       	call   c011ad4f <vfs_lookup_parent>
c011a9d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011a9db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011a9df:	74 08                	je     c011a9e9 <vfs_mkdir+0x30>
        return ret;
c011a9e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011a9e4:	e9 a9 00 00 00       	jmp    c011aa92 <vfs_mkdir+0xd9>
    }
    ret = vop_mkdir(par_dir, name);
c011a9e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011a9ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011a9ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011a9f2:	8b 40 3c             	mov    0x3c(%eax),%eax
c011a9f5:	8b 40 20             	mov    0x20(%eax),%eax
c011a9f8:	85 c0                	test   %eax,%eax
c011a9fa:	75 24                	jne    c011aa20 <vfs_mkdir+0x67>
c011a9fc:	c7 44 24 0c 58 79 12 	movl   $0xc0127958,0xc(%esp)
c011aa03:	c0 
c011aa04:	c7 44 24 08 d3 76 12 	movl   $0xc01276d3,0x8(%esp)
c011aa0b:	c0 
c011aa0c:	c7 44 24 04 89 00 00 	movl   $0x89,0x4(%esp)
c011aa13:	00 
c011aa14:	c7 04 24 e8 76 12 c0 	movl   $0xc01276e8,(%esp)
c011aa1b:	e8 f6 67 fe ff       	call   c0101216 <__panic>
c011aa20:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011aa24:	74 17                	je     c011aa3d <vfs_mkdir+0x84>
c011aa26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011aa29:	8b 40 3c             	mov    0x3c(%eax),%eax
c011aa2c:	85 c0                	test   %eax,%eax
c011aa2e:	74 0d                	je     c011aa3d <vfs_mkdir+0x84>
c011aa30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011aa33:	8b 40 3c             	mov    0x3c(%eax),%eax
c011aa36:	8b 40 20             	mov    0x20(%eax),%eax
c011aa39:	85 c0                	test   %eax,%eax
c011aa3b:	75 24                	jne    c011aa61 <vfs_mkdir+0xa8>
c011aa3d:	c7 44 24 0c 7c 79 12 	movl   $0xc012797c,0xc(%esp)
c011aa44:	c0 
c011aa45:	c7 44 24 08 d3 76 12 	movl   $0xc01276d3,0x8(%esp)
c011aa4c:	c0 
c011aa4d:	c7 44 24 04 89 00 00 	movl   $0x89,0x4(%esp)
c011aa54:	00 
c011aa55:	c7 04 24 e8 76 12 c0 	movl   $0xc01276e8,(%esp)
c011aa5c:	e8 b5 67 fe ff       	call   c0101216 <__panic>
c011aa61:	c7 44 24 04 ca 79 12 	movl   $0xc01279ca,0x4(%esp)
c011aa68:	c0 
c011aa69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011aa6c:	89 04 24             	mov    %eax,(%esp)
c011aa6f:	e8 c4 ee ff ff       	call   c0119938 <inode_check>
c011aa74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011aa77:	8b 40 3c             	mov    0x3c(%eax),%eax
c011aa7a:	8b 40 20             	mov    0x20(%eax),%eax
c011aa7d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c011aa80:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011aa83:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011aa87:	89 14 24             	mov    %edx,(%esp)
c011aa8a:	ff d0                	call   *%eax
c011aa8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c011aa8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011aa92:	c9                   	leave  
c011aa93:	c3                   	ret    

c011aa94 <get_device>:
 * get_device- Common code to pull the device name, if any, off the front of a
 *             path and choose the inode to begin the name lookup relative to.
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
c011aa94:	55                   	push   %ebp
c011aa95:	89 e5                	mov    %esp,%ebp
c011aa97:	83 ec 38             	sub    $0x38,%esp
    int i, slash = -1, colon = -1;
c011aa9a:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c011aaa1:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
    for (i = 0; path[i] != '\0'; i ++) {
c011aaa8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c011aaaf:	eb 32                	jmp    c011aae3 <get_device+0x4f>
        if (path[i] == ':') { colon = i; break; }
c011aab1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011aab4:	8b 45 08             	mov    0x8(%ebp),%eax
c011aab7:	01 d0                	add    %edx,%eax
c011aab9:	0f b6 00             	movzbl (%eax),%eax
c011aabc:	3c 3a                	cmp    $0x3a,%al
c011aabe:	75 08                	jne    c011aac8 <get_device+0x34>
c011aac0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011aac3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011aac6:	eb 2a                	jmp    c011aaf2 <get_device+0x5e>
        if (path[i] == '/') { slash = i; break; }
c011aac8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011aacb:	8b 45 08             	mov    0x8(%ebp),%eax
c011aace:	01 d0                	add    %edx,%eax
c011aad0:	0f b6 00             	movzbl (%eax),%eax
c011aad3:	3c 2f                	cmp    $0x2f,%al
c011aad5:	75 08                	jne    c011aadf <get_device+0x4b>
c011aad7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011aada:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011aadd:	eb 13                	jmp    c011aaf2 <get_device+0x5e>
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
    int i, slash = -1, colon = -1;
    for (i = 0; path[i] != '\0'; i ++) {
c011aadf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011aae3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011aae6:	8b 45 08             	mov    0x8(%ebp),%eax
c011aae9:	01 d0                	add    %edx,%eax
c011aaeb:	0f b6 00             	movzbl (%eax),%eax
c011aaee:	84 c0                	test   %al,%al
c011aaf0:	75 bf                	jne    c011aab1 <get_device+0x1d>
        if (path[i] == ':') { colon = i; break; }
        if (path[i] == '/') { slash = i; break; }
    }
    if (colon < 0 && slash != 0) {
c011aaf2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011aaf6:	79 1e                	jns    c011ab16 <get_device+0x82>
c011aaf8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011aafc:	74 18                	je     c011ab16 <get_device+0x82>
        /* *
         * No colon before a slash, so no device name specified, and the slash isn't leading
         * or is also absent, so this is a relative path or just a bare filename. Start from
         * the current directory, and use the whole thing as the subpath.
         * */
        *subpath = path;
c011aafe:	8b 45 0c             	mov    0xc(%ebp),%eax
c011ab01:	8b 55 08             	mov    0x8(%ebp),%edx
c011ab04:	89 10                	mov    %edx,(%eax)
        return vfs_get_curdir(node_store);
c011ab06:	8b 45 10             	mov    0x10(%ebp),%eax
c011ab09:	89 04 24             	mov    %eax,(%esp)
c011ab0c:	e8 df 02 00 00       	call   c011adf0 <vfs_get_curdir>
c011ab11:	e9 26 01 00 00       	jmp    c011ac3c <get_device+0x1a8>
    }
    if (colon > 0) {
c011ab16:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011ab1a:	7e 42                	jle    c011ab5e <get_device+0xca>
        /* device:path - get root of device's filesystem */
        path[colon] = '\0';
c011ab1c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011ab1f:	8b 45 08             	mov    0x8(%ebp),%eax
c011ab22:	01 d0                	add    %edx,%eax
c011ab24:	c6 00 00             	movb   $0x0,(%eax)

        /* device:/path - skip slash, treat as device:path */
        while (path[++ colon] == '/');
c011ab27:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c011ab2b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011ab2e:	8b 45 08             	mov    0x8(%ebp),%eax
c011ab31:	01 d0                	add    %edx,%eax
c011ab33:	0f b6 00             	movzbl (%eax),%eax
c011ab36:	3c 2f                	cmp    $0x2f,%al
c011ab38:	74 ed                	je     c011ab27 <get_device+0x93>
        *subpath = path + colon;
c011ab3a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011ab3d:	8b 45 08             	mov    0x8(%ebp),%eax
c011ab40:	01 c2                	add    %eax,%edx
c011ab42:	8b 45 0c             	mov    0xc(%ebp),%eax
c011ab45:	89 10                	mov    %edx,(%eax)
        return vfs_get_root(path, node_store);
c011ab47:	8b 45 10             	mov    0x10(%ebp),%eax
c011ab4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011ab4e:	8b 45 08             	mov    0x8(%ebp),%eax
c011ab51:	89 04 24             	mov    %eax,(%esp)
c011ab54:	e8 2d f1 ff ff       	call   c0119c86 <vfs_get_root>
c011ab59:	e9 de 00 00 00       	jmp    c011ac3c <get_device+0x1a8>
     * we have either /path or :path
     * /path is a path relative to the root of the "boot filesystem"
     * :path is a path relative to the root of the current filesystem
     * */
    int ret;
    if (*path == '/') {
c011ab5e:	8b 45 08             	mov    0x8(%ebp),%eax
c011ab61:	0f b6 00             	movzbl (%eax),%eax
c011ab64:	3c 2f                	cmp    $0x2f,%al
c011ab66:	75 20                	jne    c011ab88 <get_device+0xf4>
        if ((ret = vfs_get_bootfs(node_store)) != 0) {
c011ab68:	8b 45 10             	mov    0x10(%ebp),%eax
c011ab6b:	89 04 24             	mov    %eax,(%esp)
c011ab6e:	e8 e4 ef ff ff       	call   c0119b57 <vfs_get_bootfs>
c011ab73:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011ab76:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011ab7a:	0f 84 a1 00 00 00    	je     c011ac21 <get_device+0x18d>
            return ret;
c011ab80:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011ab83:	e9 b4 00 00 00       	jmp    c011ac3c <get_device+0x1a8>
        }
    }
    else {
        assert(*path == ':');
c011ab88:	8b 45 08             	mov    0x8(%ebp),%eax
c011ab8b:	0f b6 00             	movzbl (%eax),%eax
c011ab8e:	3c 3a                	cmp    $0x3a,%al
c011ab90:	74 24                	je     c011abb6 <get_device+0x122>
c011ab92:	c7 44 24 0c d0 79 12 	movl   $0xc01279d0,0xc(%esp)
c011ab99:	c0 
c011ab9a:	c7 44 24 08 dd 79 12 	movl   $0xc01279dd,0x8(%esp)
c011aba1:	c0 
c011aba2:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c011aba9:	00 
c011abaa:	c7 04 24 f2 79 12 c0 	movl   $0xc01279f2,(%esp)
c011abb1:	e8 60 66 fe ff       	call   c0101216 <__panic>
        struct inode *node;
        if ((ret = vfs_get_curdir(&node)) != 0) {
c011abb6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c011abb9:	89 04 24             	mov    %eax,(%esp)
c011abbc:	e8 2f 02 00 00       	call   c011adf0 <vfs_get_curdir>
c011abc1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011abc4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011abc8:	74 05                	je     c011abcf <get_device+0x13b>
            return ret;
c011abca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011abcd:	eb 6d                	jmp    c011ac3c <get_device+0x1a8>
        }
        /* The current directory may not be a device, so it must have a fs. */
        assert(node->in_fs != NULL);
c011abcf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011abd2:	8b 40 38             	mov    0x38(%eax),%eax
c011abd5:	85 c0                	test   %eax,%eax
c011abd7:	75 24                	jne    c011abfd <get_device+0x169>
c011abd9:	c7 44 24 0c 0a 7a 12 	movl   $0xc0127a0a,0xc(%esp)
c011abe0:	c0 
c011abe1:	c7 44 24 08 dd 79 12 	movl   $0xc01279dd,0x8(%esp)
c011abe8:	c0 
c011abe9:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c011abf0:	00 
c011abf1:	c7 04 24 f2 79 12 c0 	movl   $0xc01279f2,(%esp)
c011abf8:	e8 19 66 fe ff       	call   c0101216 <__panic>
        *node_store = fsop_get_root(node->in_fs);
c011abfd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011ac00:	8b 40 38             	mov    0x38(%eax),%eax
c011ac03:	8b 40 74             	mov    0x74(%eax),%eax
c011ac06:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011ac09:	8b 52 38             	mov    0x38(%edx),%edx
c011ac0c:	89 14 24             	mov    %edx,(%esp)
c011ac0f:	ff d0                	call   *%eax
c011ac11:	8b 55 10             	mov    0x10(%ebp),%edx
c011ac14:	89 02                	mov    %eax,(%edx)
        vop_ref_dec(node);
c011ac16:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011ac19:	89 04 24             	mov    %eax,(%esp)
c011ac1c:	e8 c7 ea ff ff       	call   c01196e8 <inode_ref_dec>
    }

    /* ///... or :/... */
    while (*(++ path) == '/');
c011ac21:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011ac25:	8b 45 08             	mov    0x8(%ebp),%eax
c011ac28:	0f b6 00             	movzbl (%eax),%eax
c011ac2b:	3c 2f                	cmp    $0x2f,%al
c011ac2d:	74 f2                	je     c011ac21 <get_device+0x18d>
    *subpath = path;
c011ac2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c011ac32:	8b 55 08             	mov    0x8(%ebp),%edx
c011ac35:	89 10                	mov    %edx,(%eax)
    return 0;
c011ac37:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011ac3c:	c9                   	leave  
c011ac3d:	c3                   	ret    

c011ac3e <vfs_lookup>:

/*
 * vfs_lookup - get the inode according to the path filename
 */
int
vfs_lookup(char *path, struct inode **node_store) {
c011ac3e:	55                   	push   %ebp
c011ac3f:	89 e5                	mov    %esp,%ebp
c011ac41:	56                   	push   %esi
c011ac42:	53                   	push   %ebx
c011ac43:	83 ec 20             	sub    $0x20,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c011ac46:	8b 45 08             	mov    0x8(%ebp),%eax
c011ac49:	8d 55 ec             	lea    -0x14(%ebp),%edx
c011ac4c:	89 54 24 08          	mov    %edx,0x8(%esp)
c011ac50:	8d 75 08             	lea    0x8(%ebp),%esi
c011ac53:	89 74 24 04          	mov    %esi,0x4(%esp)
c011ac57:	89 04 24             	mov    %eax,(%esp)
c011ac5a:	e8 35 fe ff ff       	call   c011aa94 <get_device>
c011ac5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011ac62:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011ac66:	74 08                	je     c011ac70 <vfs_lookup+0x32>
        return ret;
c011ac68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011ac6b:	e9 d8 00 00 00       	jmp    c011ad48 <vfs_lookup+0x10a>
    }
    if (*path != '\0') {
c011ac70:	8b 45 08             	mov    0x8(%ebp),%eax
c011ac73:	0f b6 00             	movzbl (%eax),%eax
c011ac76:	84 c0                	test   %al,%al
c011ac78:	0f 84 bd 00 00 00    	je     c011ad3b <vfs_lookup+0xfd>
        ret = vop_lookup(node, path, node_store);
c011ac7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011ac81:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011ac84:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011ac87:	8b 40 3c             	mov    0x3c(%eax),%eax
c011ac8a:	8b 40 40             	mov    0x40(%eax),%eax
c011ac8d:	85 c0                	test   %eax,%eax
c011ac8f:	75 24                	jne    c011acb5 <vfs_lookup+0x77>
c011ac91:	c7 44 24 0c 20 7a 12 	movl   $0xc0127a20,0xc(%esp)
c011ac98:	c0 
c011ac99:	c7 44 24 08 dd 79 12 	movl   $0xc01279dd,0x8(%esp)
c011aca0:	c0 
c011aca1:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
c011aca8:	00 
c011aca9:	c7 04 24 f2 79 12 c0 	movl   $0xc01279f2,(%esp)
c011acb0:	e8 61 65 fe ff       	call   c0101216 <__panic>
c011acb5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011acb9:	74 17                	je     c011acd2 <vfs_lookup+0x94>
c011acbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011acbe:	8b 40 3c             	mov    0x3c(%eax),%eax
c011acc1:	85 c0                	test   %eax,%eax
c011acc3:	74 0d                	je     c011acd2 <vfs_lookup+0x94>
c011acc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011acc8:	8b 40 3c             	mov    0x3c(%eax),%eax
c011accb:	8b 40 40             	mov    0x40(%eax),%eax
c011acce:	85 c0                	test   %eax,%eax
c011acd0:	75 24                	jne    c011acf6 <vfs_lookup+0xb8>
c011acd2:	c7 44 24 0c 44 7a 12 	movl   $0xc0127a44,0xc(%esp)
c011acd9:	c0 
c011acda:	c7 44 24 08 dd 79 12 	movl   $0xc01279dd,0x8(%esp)
c011ace1:	c0 
c011ace2:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
c011ace9:	00 
c011acea:	c7 04 24 f2 79 12 c0 	movl   $0xc01279f2,(%esp)
c011acf1:	e8 20 65 fe ff       	call   c0101216 <__panic>
c011acf6:	c7 44 24 04 93 7a 12 	movl   $0xc0127a93,0x4(%esp)
c011acfd:	c0 
c011acfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011ad01:	89 04 24             	mov    %eax,(%esp)
c011ad04:	e8 2f ec ff ff       	call   c0119938 <inode_check>
c011ad09:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011ad0c:	8b 40 3c             	mov    0x3c(%eax),%eax
c011ad0f:	8b 40 40             	mov    0x40(%eax),%eax
c011ad12:	8b 4d 08             	mov    0x8(%ebp),%ecx
c011ad15:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011ad18:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c011ad1b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c011ad1f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011ad23:	89 14 24             	mov    %edx,(%esp)
c011ad26:	ff d0                	call   *%eax
c011ad28:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c011ad2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011ad2e:	89 04 24             	mov    %eax,(%esp)
c011ad31:	e8 b2 e9 ff ff       	call   c01196e8 <inode_ref_dec>
        return ret;
c011ad36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011ad39:	eb 0d                	jmp    c011ad48 <vfs_lookup+0x10a>
    }
    *node_store = node;
c011ad3b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011ad3e:	8b 45 0c             	mov    0xc(%ebp),%eax
c011ad41:	89 10                	mov    %edx,(%eax)
    return 0;
c011ad43:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011ad48:	83 c4 20             	add    $0x20,%esp
c011ad4b:	5b                   	pop    %ebx
c011ad4c:	5e                   	pop    %esi
c011ad4d:	5d                   	pop    %ebp
c011ad4e:	c3                   	ret    

c011ad4f <vfs_lookup_parent>:
/*
 * vfs_lookup_parent - Name-to-vnode translation.
 *  (In BSD, both of these are subsumed by namei().)
 */
int
vfs_lookup_parent(char *path, struct inode **node_store, char **endp){
c011ad4f:	55                   	push   %ebp
c011ad50:	89 e5                	mov    %esp,%ebp
c011ad52:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c011ad55:	8b 45 08             	mov    0x8(%ebp),%eax
c011ad58:	8d 55 f0             	lea    -0x10(%ebp),%edx
c011ad5b:	89 54 24 08          	mov    %edx,0x8(%esp)
c011ad5f:	8d 4d 08             	lea    0x8(%ebp),%ecx
c011ad62:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011ad66:	89 04 24             	mov    %eax,(%esp)
c011ad69:	e8 26 fd ff ff       	call   c011aa94 <get_device>
c011ad6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011ad71:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011ad75:	74 05                	je     c011ad7c <vfs_lookup_parent+0x2d>
        return ret;
c011ad77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011ad7a:	eb 15                	jmp    c011ad91 <vfs_lookup_parent+0x42>
    }
    *endp = path;
c011ad7c:	8b 55 08             	mov    0x8(%ebp),%edx
c011ad7f:	8b 45 10             	mov    0x10(%ebp),%eax
c011ad82:	89 10                	mov    %edx,(%eax)
    *node_store = node;
c011ad84:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011ad87:	8b 45 0c             	mov    0xc(%ebp),%eax
c011ad8a:	89 10                	mov    %edx,(%eax)
    return 0;
c011ad8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011ad91:	c9                   	leave  
c011ad92:	c3                   	ret    

c011ad93 <get_cwd_nolock>:

/*
 * get_cwd_nolock - retrieve current process's working directory. without lock protect
 */
static struct inode *
get_cwd_nolock(void) {
c011ad93:	55                   	push   %ebp
c011ad94:	89 e5                	mov    %esp,%ebp
    return current->filesp->pwd;
c011ad96:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c011ad9b:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c011ada1:	8b 00                	mov    (%eax),%eax
}
c011ada3:	5d                   	pop    %ebp
c011ada4:	c3                   	ret    

c011ada5 <set_cwd_nolock>:
/*
 * set_cwd_nolock - set current working directory.
 */
static void
set_cwd_nolock(struct inode *pwd) {
c011ada5:	55                   	push   %ebp
c011ada6:	89 e5                	mov    %esp,%ebp
    current->filesp->pwd = pwd;
c011ada8:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c011adad:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c011adb3:	8b 55 08             	mov    0x8(%ebp),%edx
c011adb6:	89 10                	mov    %edx,(%eax)
}
c011adb8:	5d                   	pop    %ebp
c011adb9:	c3                   	ret    

c011adba <lock_cfs>:

/*
 * lock_cfs - lock the fs related process on current process 
 */
static void
lock_cfs(void) {
c011adba:	55                   	push   %ebp
c011adbb:	89 e5                	mov    %esp,%ebp
c011adbd:	83 ec 18             	sub    $0x18,%esp
    lock_files(current->filesp);
c011adc0:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c011adc5:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c011adcb:	89 04 24             	mov    %eax,(%esp)
c011adce:	e8 47 93 ff ff       	call   c011411a <lock_files>
}
c011add3:	c9                   	leave  
c011add4:	c3                   	ret    

c011add5 <unlock_cfs>:
/*
 * unlock_cfs - unlock the fs related process on current process 
 */
static void
unlock_cfs(void) {
c011add5:	55                   	push   %ebp
c011add6:	89 e5                	mov    %esp,%ebp
c011add8:	83 ec 18             	sub    $0x18,%esp
    unlock_files(current->filesp);
c011addb:	a1 68 e0 16 c0       	mov    0xc016e068,%eax
c011ade0:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c011ade6:	89 04 24             	mov    %eax,(%esp)
c011ade9:	e8 42 93 ff ff       	call   c0114130 <unlock_files>
}
c011adee:	c9                   	leave  
c011adef:	c3                   	ret    

c011adf0 <vfs_get_curdir>:

/*
 *  vfs_get_curdir - Get current directory as a inode.
 */
int
vfs_get_curdir(struct inode **dir_store) {
c011adf0:	55                   	push   %ebp
c011adf1:	89 e5                	mov    %esp,%ebp
c011adf3:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = get_cwd_nolock()) != NULL) {
c011adf6:	e8 98 ff ff ff       	call   c011ad93 <get_cwd_nolock>
c011adfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011adfe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011ae02:	74 1a                	je     c011ae1e <vfs_get_curdir+0x2e>
        vop_ref_inc(node);
c011ae04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011ae07:	89 04 24             	mov    %eax,(%esp)
c011ae0a:	e8 bf e8 ff ff       	call   c01196ce <inode_ref_inc>
        *dir_store = node;
c011ae0f:	8b 45 08             	mov    0x8(%ebp),%eax
c011ae12:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011ae15:	89 10                	mov    %edx,(%eax)
        return 0;
c011ae17:	b8 00 00 00 00       	mov    $0x0,%eax
c011ae1c:	eb 05                	jmp    c011ae23 <vfs_get_curdir+0x33>
    }
    return -E_NOENT;
c011ae1e:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c011ae23:	c9                   	leave  
c011ae24:	c3                   	ret    

c011ae25 <vfs_set_curdir>:
/*
 * vfs_set_curdir - Set current directory as a inode.
 *                  The passed inode must in fact be a directory.
 */
int
vfs_set_curdir(struct inode *dir) {
c011ae25:	55                   	push   %ebp
c011ae26:	89 e5                	mov    %esp,%ebp
c011ae28:	83 ec 28             	sub    $0x28,%esp
    int ret = 0;
c011ae2b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_cfs();
c011ae32:	e8 83 ff ff ff       	call   c011adba <lock_cfs>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
c011ae37:	e8 57 ff ff ff       	call   c011ad93 <get_cwd_nolock>
c011ae3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011ae3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011ae42:	3b 45 08             	cmp    0x8(%ebp),%eax
c011ae45:	0f 84 f8 00 00 00    	je     c011af43 <vfs_set_curdir+0x11e>
        if (dir != NULL) {
c011ae4b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011ae4f:	0f 84 d2 00 00 00    	je     c011af27 <vfs_set_curdir+0x102>
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
c011ae55:	8b 45 08             	mov    0x8(%ebp),%eax
c011ae58:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011ae5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011ae5e:	8b 40 3c             	mov    0x3c(%eax),%eax
c011ae61:	8b 40 2c             	mov    0x2c(%eax),%eax
c011ae64:	85 c0                	test   %eax,%eax
c011ae66:	75 24                	jne    c011ae8c <vfs_set_curdir+0x67>
c011ae68:	c7 44 24 0c 9c 7a 12 	movl   $0xc0127a9c,0xc(%esp)
c011ae6f:	c0 
c011ae70:	c7 44 24 08 c0 7a 12 	movl   $0xc0127ac0,0x8(%esp)
c011ae77:	c0 
c011ae78:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c011ae7f:	00 
c011ae80:	c7 04 24 d5 7a 12 c0 	movl   $0xc0127ad5,(%esp)
c011ae87:	e8 8a 63 fe ff       	call   c0101216 <__panic>
c011ae8c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011ae90:	74 17                	je     c011aea9 <vfs_set_curdir+0x84>
c011ae92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011ae95:	8b 40 3c             	mov    0x3c(%eax),%eax
c011ae98:	85 c0                	test   %eax,%eax
c011ae9a:	74 0d                	je     c011aea9 <vfs_set_curdir+0x84>
c011ae9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011ae9f:	8b 40 3c             	mov    0x3c(%eax),%eax
c011aea2:	8b 40 2c             	mov    0x2c(%eax),%eax
c011aea5:	85 c0                	test   %eax,%eax
c011aea7:	75 24                	jne    c011aecd <vfs_set_curdir+0xa8>
c011aea9:	c7 44 24 0c ec 7a 12 	movl   $0xc0127aec,0xc(%esp)
c011aeb0:	c0 
c011aeb1:	c7 44 24 08 c0 7a 12 	movl   $0xc0127ac0,0x8(%esp)
c011aeb8:	c0 
c011aeb9:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c011aec0:	00 
c011aec1:	c7 04 24 d5 7a 12 c0 	movl   $0xc0127ad5,(%esp)
c011aec8:	e8 49 63 fe ff       	call   c0101216 <__panic>
c011aecd:	c7 44 24 04 3c 7b 12 	movl   $0xc0127b3c,0x4(%esp)
c011aed4:	c0 
c011aed5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011aed8:	89 04 24             	mov    %eax,(%esp)
c011aedb:	e8 58 ea ff ff       	call   c0119938 <inode_check>
c011aee0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011aee3:	8b 40 3c             	mov    0x3c(%eax),%eax
c011aee6:	8b 40 2c             	mov    0x2c(%eax),%eax
c011aee9:	8d 55 e8             	lea    -0x18(%ebp),%edx
c011aeec:	89 54 24 04          	mov    %edx,0x4(%esp)
c011aef0:	8b 55 08             	mov    0x8(%ebp),%edx
c011aef3:	89 14 24             	mov    %edx,(%esp)
c011aef6:	ff d0                	call   *%eax
c011aef8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011aefb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011aeff:	74 02                	je     c011af03 <vfs_set_curdir+0xde>
                goto out;
c011af01:	eb 40                	jmp    c011af43 <vfs_set_curdir+0x11e>
            }
            if (!S_ISDIR(type)) {
c011af03:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011af06:	25 00 70 00 00       	and    $0x7000,%eax
c011af0b:	3d 00 20 00 00       	cmp    $0x2000,%eax
c011af10:	74 0a                	je     c011af1c <vfs_set_curdir+0xf7>
                ret = -E_NOTDIR;
c011af12:	c7 45 f4 ee ff ff ff 	movl   $0xffffffee,-0xc(%ebp)
                goto out;
c011af19:	90                   	nop
c011af1a:	eb 27                	jmp    c011af43 <vfs_set_curdir+0x11e>
            }
            vop_ref_inc(dir);
c011af1c:	8b 45 08             	mov    0x8(%ebp),%eax
c011af1f:	89 04 24             	mov    %eax,(%esp)
c011af22:	e8 a7 e7 ff ff       	call   c01196ce <inode_ref_inc>
        }
        set_cwd_nolock(dir);
c011af27:	8b 45 08             	mov    0x8(%ebp),%eax
c011af2a:	89 04 24             	mov    %eax,(%esp)
c011af2d:	e8 73 fe ff ff       	call   c011ada5 <set_cwd_nolock>
        if (old_dir != NULL) {
c011af32:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011af36:	74 0b                	je     c011af43 <vfs_set_curdir+0x11e>
            vop_ref_dec(old_dir);
c011af38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011af3b:	89 04 24             	mov    %eax,(%esp)
c011af3e:	e8 a5 e7 ff ff       	call   c01196e8 <inode_ref_dec>
        }
    }
out:
    unlock_cfs();
c011af43:	e8 8d fe ff ff       	call   c011add5 <unlock_cfs>
    return ret;
c011af48:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011af4b:	c9                   	leave  
c011af4c:	c3                   	ret    

c011af4d <vfs_chdir>:
/*
 * vfs_chdir - Set current directory, as a pathname. Use vfs_lookup to translate
 *             it to a inode.
 */
int
vfs_chdir(char *path) {
c011af4d:	55                   	push   %ebp
c011af4e:	89 e5                	mov    %esp,%ebp
c011af50:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_lookup(path, &node)) == 0) {
c011af53:	8d 45 f0             	lea    -0x10(%ebp),%eax
c011af56:	89 44 24 04          	mov    %eax,0x4(%esp)
c011af5a:	8b 45 08             	mov    0x8(%ebp),%eax
c011af5d:	89 04 24             	mov    %eax,(%esp)
c011af60:	e8 d9 fc ff ff       	call   c011ac3e <vfs_lookup>
c011af65:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011af68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011af6c:	75 19                	jne    c011af87 <vfs_chdir+0x3a>
        ret = vfs_set_curdir(node);
c011af6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011af71:	89 04 24             	mov    %eax,(%esp)
c011af74:	e8 ac fe ff ff       	call   c011ae25 <vfs_set_curdir>
c011af79:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c011af7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011af7f:	89 04 24             	mov    %eax,(%esp)
c011af82:	e8 61 e7 ff ff       	call   c01196e8 <inode_ref_dec>
    }
    return ret;
c011af87:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011af8a:	c9                   	leave  
c011af8b:	c3                   	ret    

c011af8c <vfs_getcwd>:
/*
 * vfs_getcwd - retrieve current working directory(cwd).
 */
int
vfs_getcwd(struct iobuf *iob) {
c011af8c:	55                   	push   %ebp
c011af8d:	89 e5                	mov    %esp,%ebp
c011af8f:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_get_curdir(&node)) != 0) {
c011af92:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011af95:	89 04 24             	mov    %eax,(%esp)
c011af98:	e8 53 fe ff ff       	call   c011adf0 <vfs_get_curdir>
c011af9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011afa0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011afa4:	74 08                	je     c011afae <vfs_getcwd+0x22>
        return ret;
c011afa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011afa9:	e9 6e 01 00 00       	jmp    c011b11c <vfs_getcwd+0x190>
    }
    assert(node->in_fs != NULL);
c011afae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011afb1:	8b 40 38             	mov    0x38(%eax),%eax
c011afb4:	85 c0                	test   %eax,%eax
c011afb6:	75 24                	jne    c011afdc <vfs_getcwd+0x50>
c011afb8:	c7 44 24 0c 44 7b 12 	movl   $0xc0127b44,0xc(%esp)
c011afbf:	c0 
c011afc0:	c7 44 24 08 c0 7a 12 	movl   $0xc0127ac0,0x8(%esp)
c011afc7:	c0 
c011afc8:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c011afcf:	00 
c011afd0:	c7 04 24 d5 7a 12 c0 	movl   $0xc0127ad5,(%esp)
c011afd7:	e8 3a 62 fe ff       	call   c0101216 <__panic>

    const char *devname = vfs_get_devname(node->in_fs);
c011afdc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011afdf:	8b 40 38             	mov    0x38(%eax),%eax
c011afe2:	89 04 24             	mov    %eax,(%esp)
c011afe5:	e8 b9 ed ff ff       	call   c0119da3 <vfs_get_devname>
c011afea:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
c011afed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011aff0:	89 04 24             	mov    %eax,(%esp)
c011aff3:	e8 b1 5d 00 00       	call   c0120da9 <strlen>
c011aff8:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011afff:	00 
c011b000:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011b007:	00 
c011b008:	89 44 24 08          	mov    %eax,0x8(%esp)
c011b00c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011b00f:	89 44 24 04          	mov    %eax,0x4(%esp)
c011b013:	8b 45 08             	mov    0x8(%ebp),%eax
c011b016:	89 04 24             	mov    %eax,(%esp)
c011b019:	e8 f4 93 ff ff       	call   c0114412 <iobuf_move>
c011b01e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011b021:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011b025:	74 05                	je     c011b02c <vfs_getcwd+0xa0>
        goto out;
c011b027:	e9 e2 00 00 00       	jmp    c011b10e <vfs_getcwd+0x182>
    }
    char colon = ':';
c011b02c:	c6 45 e7 3a          	movb   $0x3a,-0x19(%ebp)
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
c011b030:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011b037:	00 
c011b038:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011b03f:	00 
c011b040:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011b047:	00 
c011b048:	8d 45 e7             	lea    -0x19(%ebp),%eax
c011b04b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011b04f:	8b 45 08             	mov    0x8(%ebp),%eax
c011b052:	89 04 24             	mov    %eax,(%esp)
c011b055:	e8 b8 93 ff ff       	call   c0114412 <iobuf_move>
c011b05a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011b05d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011b061:	74 05                	je     c011b068 <vfs_getcwd+0xdc>
        goto out;
c011b063:	e9 a6 00 00 00       	jmp    c011b10e <vfs_getcwd+0x182>
    }
    ret = vop_namefile(node, iob);
c011b068:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011b06b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011b06e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011b071:	8b 40 3c             	mov    0x3c(%eax),%eax
c011b074:	8b 40 1c             	mov    0x1c(%eax),%eax
c011b077:	85 c0                	test   %eax,%eax
c011b079:	75 24                	jne    c011b09f <vfs_getcwd+0x113>
c011b07b:	c7 44 24 0c 58 7b 12 	movl   $0xc0127b58,0xc(%esp)
c011b082:	c0 
c011b083:	c7 44 24 08 c0 7a 12 	movl   $0xc0127ac0,0x8(%esp)
c011b08a:	c0 
c011b08b:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c011b092:	00 
c011b093:	c7 04 24 d5 7a 12 c0 	movl   $0xc0127ad5,(%esp)
c011b09a:	e8 77 61 fe ff       	call   c0101216 <__panic>
c011b09f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011b0a3:	74 17                	je     c011b0bc <vfs_getcwd+0x130>
c011b0a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011b0a8:	8b 40 3c             	mov    0x3c(%eax),%eax
c011b0ab:	85 c0                	test   %eax,%eax
c011b0ad:	74 0d                	je     c011b0bc <vfs_getcwd+0x130>
c011b0af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011b0b2:	8b 40 3c             	mov    0x3c(%eax),%eax
c011b0b5:	8b 40 1c             	mov    0x1c(%eax),%eax
c011b0b8:	85 c0                	test   %eax,%eax
c011b0ba:	75 24                	jne    c011b0e0 <vfs_getcwd+0x154>
c011b0bc:	c7 44 24 0c 80 7b 12 	movl   $0xc0127b80,0xc(%esp)
c011b0c3:	c0 
c011b0c4:	c7 44 24 08 c0 7a 12 	movl   $0xc0127ac0,0x8(%esp)
c011b0cb:	c0 
c011b0cc:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c011b0d3:	00 
c011b0d4:	c7 04 24 d5 7a 12 c0 	movl   $0xc0127ad5,(%esp)
c011b0db:	e8 36 61 fe ff       	call   c0101216 <__panic>
c011b0e0:	c7 44 24 04 d1 7b 12 	movl   $0xc0127bd1,0x4(%esp)
c011b0e7:	c0 
c011b0e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011b0eb:	89 04 24             	mov    %eax,(%esp)
c011b0ee:	e8 45 e8 ff ff       	call   c0119938 <inode_check>
c011b0f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011b0f6:	8b 40 3c             	mov    0x3c(%eax),%eax
c011b0f9:	8b 40 1c             	mov    0x1c(%eax),%eax
c011b0fc:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011b0ff:	8b 4d 08             	mov    0x8(%ebp),%ecx
c011b102:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c011b106:	89 14 24             	mov    %edx,(%esp)
c011b109:	ff d0                	call   *%eax
c011b10b:	89 45 f4             	mov    %eax,-0xc(%ebp)

out:
    vop_ref_dec(node);
c011b10e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011b111:	89 04 24             	mov    %eax,(%esp)
c011b114:	e8 cf e5 ff ff       	call   c01196e8 <inode_ref_dec>
    return ret;
c011b119:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011b11c:	c9                   	leave  
c011b11d:	c3                   	ret    

c011b11e <dev_open>:

/*
 * dev_open - Called for each open().
 */
static int
dev_open(struct inode *node, uint32_t open_flags) {
c011b11e:	55                   	push   %ebp
c011b11f:	89 e5                	mov    %esp,%ebp
c011b121:	83 ec 28             	sub    $0x28,%esp
    if (open_flags & (O_CREAT | O_TRUNC | O_EXCL | O_APPEND)) {
c011b124:	8b 45 0c             	mov    0xc(%ebp),%eax
c011b127:	83 e0 3c             	and    $0x3c,%eax
c011b12a:	85 c0                	test   %eax,%eax
c011b12c:	74 07                	je     c011b135 <dev_open+0x17>
        return -E_INVAL;
c011b12e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011b133:	eb 58                	jmp    c011b18d <dev_open+0x6f>
    }
    struct device *dev = vop_info(node, device);
c011b135:	8b 45 08             	mov    0x8(%ebp),%eax
c011b138:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011b13b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011b13f:	74 0d                	je     c011b14e <dev_open+0x30>
c011b141:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b144:	8b 40 2c             	mov    0x2c(%eax),%eax
c011b147:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011b14c:	74 24                	je     c011b172 <dev_open+0x54>
c011b14e:	c7 44 24 0c e0 7b 12 	movl   $0xc0127be0,0xc(%esp)
c011b155:	c0 
c011b156:	c7 44 24 08 13 7c 12 	movl   $0xc0127c13,0x8(%esp)
c011b15d:	c0 
c011b15e:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c011b165:	00 
c011b166:	c7 04 24 28 7c 12 c0 	movl   $0xc0127c28,(%esp)
c011b16d:	e8 a4 60 fe ff       	call   c0101216 <__panic>
c011b172:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b175:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_open(dev, open_flags);
c011b178:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011b17b:	8b 40 08             	mov    0x8(%eax),%eax
c011b17e:	8b 55 0c             	mov    0xc(%ebp),%edx
c011b181:	89 54 24 04          	mov    %edx,0x4(%esp)
c011b185:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011b188:	89 14 24             	mov    %edx,(%esp)
c011b18b:	ff d0                	call   *%eax
}
c011b18d:	c9                   	leave  
c011b18e:	c3                   	ret    

c011b18f <dev_close>:

/*
 * dev_close - Called on the last close(). Just pass through.
 */
static int
dev_close(struct inode *node) {
c011b18f:	55                   	push   %ebp
c011b190:	89 e5                	mov    %esp,%ebp
c011b192:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c011b195:	8b 45 08             	mov    0x8(%ebp),%eax
c011b198:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011b19b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011b19f:	74 0d                	je     c011b1ae <dev_close+0x1f>
c011b1a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b1a4:	8b 40 2c             	mov    0x2c(%eax),%eax
c011b1a7:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011b1ac:	74 24                	je     c011b1d2 <dev_close+0x43>
c011b1ae:	c7 44 24 0c e0 7b 12 	movl   $0xc0127be0,0xc(%esp)
c011b1b5:	c0 
c011b1b6:	c7 44 24 08 13 7c 12 	movl   $0xc0127c13,0x8(%esp)
c011b1bd:	c0 
c011b1be:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c011b1c5:	00 
c011b1c6:	c7 04 24 28 7c 12 c0 	movl   $0xc0127c28,(%esp)
c011b1cd:	e8 44 60 fe ff       	call   c0101216 <__panic>
c011b1d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b1d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_close(dev);
c011b1d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011b1db:	8b 40 0c             	mov    0xc(%eax),%eax
c011b1de:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011b1e1:	89 14 24             	mov    %edx,(%esp)
c011b1e4:	ff d0                	call   *%eax
}
c011b1e6:	c9                   	leave  
c011b1e7:	c3                   	ret    

c011b1e8 <dev_read>:

/*
 * dev_read -Called for read. Hand off to iobuf.
 */
static int
dev_read(struct inode *node, struct iobuf *iob) {
c011b1e8:	55                   	push   %ebp
c011b1e9:	89 e5                	mov    %esp,%ebp
c011b1eb:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c011b1ee:	8b 45 08             	mov    0x8(%ebp),%eax
c011b1f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011b1f4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011b1f8:	74 0d                	je     c011b207 <dev_read+0x1f>
c011b1fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b1fd:	8b 40 2c             	mov    0x2c(%eax),%eax
c011b200:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011b205:	74 24                	je     c011b22b <dev_read+0x43>
c011b207:	c7 44 24 0c e0 7b 12 	movl   $0xc0127be0,0xc(%esp)
c011b20e:	c0 
c011b20f:	c7 44 24 08 13 7c 12 	movl   $0xc0127c13,0x8(%esp)
c011b216:	c0 
c011b217:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
c011b21e:	00 
c011b21f:	c7 04 24 28 7c 12 c0 	movl   $0xc0127c28,(%esp)
c011b226:	e8 eb 5f fe ff       	call   c0101216 <__panic>
c011b22b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b22e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 0);
c011b231:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011b234:	8b 40 10             	mov    0x10(%eax),%eax
c011b237:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011b23e:	00 
c011b23f:	8b 55 0c             	mov    0xc(%ebp),%edx
c011b242:	89 54 24 04          	mov    %edx,0x4(%esp)
c011b246:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011b249:	89 14 24             	mov    %edx,(%esp)
c011b24c:	ff d0                	call   *%eax
}
c011b24e:	c9                   	leave  
c011b24f:	c3                   	ret    

c011b250 <dev_write>:

/*
 * dev_write -Called for write. Hand off to iobuf.
 */
static int
dev_write(struct inode *node, struct iobuf *iob) {
c011b250:	55                   	push   %ebp
c011b251:	89 e5                	mov    %esp,%ebp
c011b253:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c011b256:	8b 45 08             	mov    0x8(%ebp),%eax
c011b259:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011b25c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011b260:	74 0d                	je     c011b26f <dev_write+0x1f>
c011b262:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b265:	8b 40 2c             	mov    0x2c(%eax),%eax
c011b268:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011b26d:	74 24                	je     c011b293 <dev_write+0x43>
c011b26f:	c7 44 24 0c e0 7b 12 	movl   $0xc0127be0,0xc(%esp)
c011b276:	c0 
c011b277:	c7 44 24 08 13 7c 12 	movl   $0xc0127c13,0x8(%esp)
c011b27e:	c0 
c011b27f:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c011b286:	00 
c011b287:	c7 04 24 28 7c 12 c0 	movl   $0xc0127c28,(%esp)
c011b28e:	e8 83 5f fe ff       	call   c0101216 <__panic>
c011b293:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b296:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 1);
c011b299:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011b29c:	8b 40 10             	mov    0x10(%eax),%eax
c011b29f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011b2a6:	00 
c011b2a7:	8b 55 0c             	mov    0xc(%ebp),%edx
c011b2aa:	89 54 24 04          	mov    %edx,0x4(%esp)
c011b2ae:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011b2b1:	89 14 24             	mov    %edx,(%esp)
c011b2b4:	ff d0                	call   *%eax
}
c011b2b6:	c9                   	leave  
c011b2b7:	c3                   	ret    

c011b2b8 <dev_ioctl>:

/*
 * dev_ioctl - Called for ioctl(). Just pass through.
 */
static int
dev_ioctl(struct inode *node, int op, void *data) {
c011b2b8:	55                   	push   %ebp
c011b2b9:	89 e5                	mov    %esp,%ebp
c011b2bb:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c011b2be:	8b 45 08             	mov    0x8(%ebp),%eax
c011b2c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011b2c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011b2c8:	74 0d                	je     c011b2d7 <dev_ioctl+0x1f>
c011b2ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b2cd:	8b 40 2c             	mov    0x2c(%eax),%eax
c011b2d0:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011b2d5:	74 24                	je     c011b2fb <dev_ioctl+0x43>
c011b2d7:	c7 44 24 0c e0 7b 12 	movl   $0xc0127be0,0xc(%esp)
c011b2de:	c0 
c011b2df:	c7 44 24 08 13 7c 12 	movl   $0xc0127c13,0x8(%esp)
c011b2e6:	c0 
c011b2e7:	c7 44 24 04 35 00 00 	movl   $0x35,0x4(%esp)
c011b2ee:	00 
c011b2ef:	c7 04 24 28 7c 12 c0 	movl   $0xc0127c28,(%esp)
c011b2f6:	e8 1b 5f fe ff       	call   c0101216 <__panic>
c011b2fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b2fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_ioctl(dev, op, data);
c011b301:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011b304:	8b 40 14             	mov    0x14(%eax),%eax
c011b307:	8b 55 10             	mov    0x10(%ebp),%edx
c011b30a:	89 54 24 08          	mov    %edx,0x8(%esp)
c011b30e:	8b 55 0c             	mov    0xc(%ebp),%edx
c011b311:	89 54 24 04          	mov    %edx,0x4(%esp)
c011b315:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011b318:	89 14 24             	mov    %edx,(%esp)
c011b31b:	ff d0                	call   *%eax
}
c011b31d:	c9                   	leave  
c011b31e:	c3                   	ret    

c011b31f <dev_fstat>:
 * dev_fstat - Called for stat().
 *             Set the type and the size (block devices only).
 *             The link count for a device is always 1.
 */
static int
dev_fstat(struct inode *node, struct stat *stat) {
c011b31f:	55                   	push   %ebp
c011b320:	89 e5                	mov    %esp,%ebp
c011b322:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c011b325:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c011b32c:	00 
c011b32d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011b334:	00 
c011b335:	8b 45 0c             	mov    0xc(%ebp),%eax
c011b338:	89 04 24             	mov    %eax,(%esp)
c011b33b:	e8 bf 5d 00 00       	call   c01210ff <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c011b340:	8b 45 08             	mov    0x8(%ebp),%eax
c011b343:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011b346:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b349:	8b 40 3c             	mov    0x3c(%eax),%eax
c011b34c:	8b 40 2c             	mov    0x2c(%eax),%eax
c011b34f:	85 c0                	test   %eax,%eax
c011b351:	75 24                	jne    c011b377 <dev_fstat+0x58>
c011b353:	c7 44 24 0c 3c 7c 12 	movl   $0xc0127c3c,0xc(%esp)
c011b35a:	c0 
c011b35b:	c7 44 24 08 13 7c 12 	movl   $0xc0127c13,0x8(%esp)
c011b362:	c0 
c011b363:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c011b36a:	00 
c011b36b:	c7 04 24 28 7c 12 c0 	movl   $0xc0127c28,(%esp)
c011b372:	e8 9f 5e fe ff       	call   c0101216 <__panic>
c011b377:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011b37b:	74 17                	je     c011b394 <dev_fstat+0x75>
c011b37d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b380:	8b 40 3c             	mov    0x3c(%eax),%eax
c011b383:	85 c0                	test   %eax,%eax
c011b385:	74 0d                	je     c011b394 <dev_fstat+0x75>
c011b387:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b38a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011b38d:	8b 40 2c             	mov    0x2c(%eax),%eax
c011b390:	85 c0                	test   %eax,%eax
c011b392:	75 24                	jne    c011b3b8 <dev_fstat+0x99>
c011b394:	c7 44 24 0c 60 7c 12 	movl   $0xc0127c60,0xc(%esp)
c011b39b:	c0 
c011b39c:	c7 44 24 08 13 7c 12 	movl   $0xc0127c13,0x8(%esp)
c011b3a3:	c0 
c011b3a4:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c011b3ab:	00 
c011b3ac:	c7 04 24 28 7c 12 c0 	movl   $0xc0127c28,(%esp)
c011b3b3:	e8 5e 5e fe ff       	call   c0101216 <__panic>
c011b3b8:	c7 44 24 04 b0 7c 12 	movl   $0xc0127cb0,0x4(%esp)
c011b3bf:	c0 
c011b3c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b3c3:	89 04 24             	mov    %eax,(%esp)
c011b3c6:	e8 6d e5 ff ff       	call   c0119938 <inode_check>
c011b3cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b3ce:	8b 40 3c             	mov    0x3c(%eax),%eax
c011b3d1:	8b 40 2c             	mov    0x2c(%eax),%eax
c011b3d4:	8b 55 0c             	mov    0xc(%ebp),%edx
c011b3d7:	89 54 24 04          	mov    %edx,0x4(%esp)
c011b3db:	8b 55 08             	mov    0x8(%ebp),%edx
c011b3de:	89 14 24             	mov    %edx,(%esp)
c011b3e1:	ff d0                	call   *%eax
c011b3e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011b3e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011b3ea:	74 05                	je     c011b3f1 <dev_fstat+0xd2>
        return ret;
c011b3ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011b3ef:	eb 72                	jmp    c011b463 <dev_fstat+0x144>
    }
    struct device *dev = vop_info(node, device);
c011b3f1:	8b 45 08             	mov    0x8(%ebp),%eax
c011b3f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011b3f7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011b3fb:	74 0d                	je     c011b40a <dev_fstat+0xeb>
c011b3fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011b400:	8b 40 2c             	mov    0x2c(%eax),%eax
c011b403:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011b408:	74 24                	je     c011b42e <dev_fstat+0x10f>
c011b40a:	c7 44 24 0c e0 7b 12 	movl   $0xc0127be0,0xc(%esp)
c011b411:	c0 
c011b412:	c7 44 24 08 13 7c 12 	movl   $0xc0127c13,0x8(%esp)
c011b419:	c0 
c011b41a:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c011b421:	00 
c011b422:	c7 04 24 28 7c 12 c0 	movl   $0xc0127c28,(%esp)
c011b429:	e8 e8 5d fe ff       	call   c0101216 <__panic>
c011b42e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011b431:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = 1;
c011b434:	8b 45 0c             	mov    0xc(%ebp),%eax
c011b437:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    stat->st_blocks = dev->d_blocks;
c011b43e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011b441:	8b 10                	mov    (%eax),%edx
c011b443:	8b 45 0c             	mov    0xc(%ebp),%eax
c011b446:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = stat->st_blocks * dev->d_blocksize;
c011b449:	8b 45 0c             	mov    0xc(%ebp),%eax
c011b44c:	8b 50 08             	mov    0x8(%eax),%edx
c011b44f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011b452:	8b 40 04             	mov    0x4(%eax),%eax
c011b455:	0f af d0             	imul   %eax,%edx
c011b458:	8b 45 0c             	mov    0xc(%ebp),%eax
c011b45b:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c011b45e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011b463:	c9                   	leave  
c011b464:	c3                   	ret    

c011b465 <dev_gettype>:
 * dev_gettype - Return the type. A device is a "block device" if it has a known
 *               length. A device that generates data in a stream is a "character
 *               device".
 */
static int
dev_gettype(struct inode *node, uint32_t *type_store) {
c011b465:	55                   	push   %ebp
c011b466:	89 e5                	mov    %esp,%ebp
c011b468:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c011b46b:	8b 45 08             	mov    0x8(%ebp),%eax
c011b46e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011b471:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011b475:	74 0d                	je     c011b484 <dev_gettype+0x1f>
c011b477:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b47a:	8b 40 2c             	mov    0x2c(%eax),%eax
c011b47d:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011b482:	74 24                	je     c011b4a8 <dev_gettype+0x43>
c011b484:	c7 44 24 0c e0 7b 12 	movl   $0xc0127be0,0xc(%esp)
c011b48b:	c0 
c011b48c:	c7 44 24 08 13 7c 12 	movl   $0xc0127c13,0x8(%esp)
c011b493:	c0 
c011b494:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c011b49b:	00 
c011b49c:	c7 04 24 28 7c 12 c0 	movl   $0xc0127c28,(%esp)
c011b4a3:	e8 6e 5d fe ff       	call   c0101216 <__panic>
c011b4a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b4ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *type_store = (dev->d_blocks > 0) ? S_IFBLK : S_IFCHR;
c011b4ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011b4b1:	8b 00                	mov    (%eax),%eax
c011b4b3:	85 c0                	test   %eax,%eax
c011b4b5:	74 07                	je     c011b4be <dev_gettype+0x59>
c011b4b7:	b8 00 50 00 00       	mov    $0x5000,%eax
c011b4bc:	eb 05                	jmp    c011b4c3 <dev_gettype+0x5e>
c011b4be:	b8 00 40 00 00       	mov    $0x4000,%eax
c011b4c3:	8b 55 0c             	mov    0xc(%ebp),%edx
c011b4c6:	89 02                	mov    %eax,(%edx)
    return 0;
c011b4c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011b4cd:	c9                   	leave  
c011b4ce:	c3                   	ret    

c011b4cf <dev_tryseek>:
 * dev_tryseek - Attempt a seek.
 *               For block devices, require block alignment.
 *               For character devices, prohibit seeking entirely.
 */
static int
dev_tryseek(struct inode *node, off_t pos) {
c011b4cf:	55                   	push   %ebp
c011b4d0:	89 e5                	mov    %esp,%ebp
c011b4d2:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c011b4d5:	8b 45 08             	mov    0x8(%ebp),%eax
c011b4d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011b4db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011b4df:	74 0d                	je     c011b4ee <dev_tryseek+0x1f>
c011b4e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b4e4:	8b 40 2c             	mov    0x2c(%eax),%eax
c011b4e7:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011b4ec:	74 24                	je     c011b512 <dev_tryseek+0x43>
c011b4ee:	c7 44 24 0c e0 7b 12 	movl   $0xc0127be0,0xc(%esp)
c011b4f5:	c0 
c011b4f6:	c7 44 24 08 13 7c 12 	movl   $0xc0127c13,0x8(%esp)
c011b4fd:	c0 
c011b4fe:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c011b505:	00 
c011b506:	c7 04 24 28 7c 12 c0 	movl   $0xc0127c28,(%esp)
c011b50d:	e8 04 5d fe ff       	call   c0101216 <__panic>
c011b512:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b515:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev->d_blocks > 0) {
c011b518:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011b51b:	8b 00                	mov    (%eax),%eax
c011b51d:	85 c0                	test   %eax,%eax
c011b51f:	74 38                	je     c011b559 <dev_tryseek+0x8a>
        if ((pos % dev->d_blocksize) == 0) {
c011b521:	8b 45 0c             	mov    0xc(%ebp),%eax
c011b524:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011b527:	8b 4a 04             	mov    0x4(%edx),%ecx
c011b52a:	ba 00 00 00 00       	mov    $0x0,%edx
c011b52f:	f7 f1                	div    %ecx
c011b531:	89 d0                	mov    %edx,%eax
c011b533:	85 c0                	test   %eax,%eax
c011b535:	75 22                	jne    c011b559 <dev_tryseek+0x8a>
            if (pos >= 0 && pos < dev->d_blocks * dev->d_blocksize) {
c011b537:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011b53b:	78 1c                	js     c011b559 <dev_tryseek+0x8a>
c011b53d:	8b 55 0c             	mov    0xc(%ebp),%edx
c011b540:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011b543:	8b 08                	mov    (%eax),%ecx
c011b545:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011b548:	8b 40 04             	mov    0x4(%eax),%eax
c011b54b:	0f af c1             	imul   %ecx,%eax
c011b54e:	39 c2                	cmp    %eax,%edx
c011b550:	73 07                	jae    c011b559 <dev_tryseek+0x8a>
                return 0;
c011b552:	b8 00 00 00 00       	mov    $0x0,%eax
c011b557:	eb 05                	jmp    c011b55e <dev_tryseek+0x8f>
            }
        }
    }
    return -E_INVAL;
c011b559:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c011b55e:	c9                   	leave  
c011b55f:	c3                   	ret    

c011b560 <dev_lookup>:
 * mode.
 *
 * However, we have no support for this in the base system.
 */
static int
dev_lookup(struct inode *node, char *path, struct inode **node_store) {
c011b560:	55                   	push   %ebp
c011b561:	89 e5                	mov    %esp,%ebp
c011b563:	83 ec 18             	sub    $0x18,%esp
    if (*path != '\0') {
c011b566:	8b 45 0c             	mov    0xc(%ebp),%eax
c011b569:	0f b6 00             	movzbl (%eax),%eax
c011b56c:	84 c0                	test   %al,%al
c011b56e:	74 07                	je     c011b577 <dev_lookup+0x17>
        return -E_NOENT;
c011b570:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c011b575:	eb 18                	jmp    c011b58f <dev_lookup+0x2f>
    }
    vop_ref_inc(node);
c011b577:	8b 45 08             	mov    0x8(%ebp),%eax
c011b57a:	89 04 24             	mov    %eax,(%esp)
c011b57d:	e8 4c e1 ff ff       	call   c01196ce <inode_ref_inc>
    *node_store = node;
c011b582:	8b 45 10             	mov    0x10(%ebp),%eax
c011b585:	8b 55 08             	mov    0x8(%ebp),%edx
c011b588:	89 10                	mov    %edx,(%eax)
    return 0;
c011b58a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011b58f:	c9                   	leave  
c011b590:	c3                   	ret    

c011b591 <dev_init>:
        dev_init_##x();                                 \
    } while (0)

/* dev_init - Initialization functions for builtin vfs-level devices. */
void
dev_init(void) {
c011b591:	55                   	push   %ebp
c011b592:	89 e5                	mov    %esp,%ebp
c011b594:	83 ec 08             	sub    $0x8,%esp
   // init_device(null);
    init_device(stdin);
c011b597:	e8 8f 07 00 00       	call   c011bd2b <dev_init_stdin>
    init_device(stdout);
c011b59c:	e8 0a 09 00 00       	call   c011beab <dev_init_stdout>
    init_device(disk0);
c011b5a1:	e8 26 04 00 00       	call   c011b9cc <dev_init_disk0>
}
c011b5a6:	c9                   	leave  
c011b5a7:	c3                   	ret    

c011b5a8 <dev_create_inode>:
/* dev_create_inode - Create inode for a vfs-level device. */
struct inode *
dev_create_inode(void) {
c011b5a8:	55                   	push   %ebp
c011b5a9:	89 e5                	mov    %esp,%ebp
c011b5ab:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(device)) != NULL) {
c011b5ae:	c7 04 24 34 12 00 00 	movl   $0x1234,(%esp)
c011b5b5:	e8 39 e0 ff ff       	call   c01195f3 <__alloc_inode>
c011b5ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011b5bd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011b5c1:	74 1b                	je     c011b5de <dev_create_inode+0x36>
        vop_init(node, &dev_node_ops, NULL);
c011b5c3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011b5ca:	00 
c011b5cb:	c7 44 24 04 c0 7c 12 	movl   $0xc0127cc0,0x4(%esp)
c011b5d2:	c0 
c011b5d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b5d6:	89 04 24             	mov    %eax,(%esp)
c011b5d9:	e8 3e e0 ff ff       	call   c011961c <inode_init>
    }
    return node;
c011b5de:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011b5e1:	c9                   	leave  
c011b5e2:	c3                   	ret    

c011b5e3 <lock_disk0>:

static char *disk0_buffer;
static semaphore_t disk0_sem;

static void
lock_disk0(void) {
c011b5e3:	55                   	push   %ebp
c011b5e4:	89 e5                	mov    %esp,%ebp
c011b5e6:	83 ec 18             	sub    $0x18,%esp
    down(&(disk0_sem));
c011b5e9:	c7 04 24 1c 01 17 c0 	movl   $0xc017011c,(%esp)
c011b5f0:	e8 e7 75 ff ff       	call   c0112bdc <down>
}
c011b5f5:	c9                   	leave  
c011b5f6:	c3                   	ret    

c011b5f7 <unlock_disk0>:

static void
unlock_disk0(void) {
c011b5f7:	55                   	push   %ebp
c011b5f8:	89 e5                	mov    %esp,%ebp
c011b5fa:	83 ec 18             	sub    $0x18,%esp
    up(&(disk0_sem));
c011b5fd:	c7 04 24 1c 01 17 c0 	movl   $0xc017011c,(%esp)
c011b604:	e8 b8 75 ff ff       	call   c0112bc1 <up>
}
c011b609:	c9                   	leave  
c011b60a:	c3                   	ret    

c011b60b <disk0_open>:

static int
disk0_open(struct device *dev, uint32_t open_flags) {
c011b60b:	55                   	push   %ebp
c011b60c:	89 e5                	mov    %esp,%ebp
    return 0;
c011b60e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011b613:	5d                   	pop    %ebp
c011b614:	c3                   	ret    

c011b615 <disk0_close>:

static int
disk0_close(struct device *dev) {
c011b615:	55                   	push   %ebp
c011b616:	89 e5                	mov    %esp,%ebp
    return 0;
c011b618:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011b61d:	5d                   	pop    %ebp
c011b61e:	c3                   	ret    

c011b61f <disk0_read_blks_nolock>:

static void
disk0_read_blks_nolock(uint32_t blkno, uint32_t nblks) {
c011b61f:	55                   	push   %ebp
c011b620:	89 e5                	mov    %esp,%ebp
c011b622:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c011b625:	8b 45 08             	mov    0x8(%ebp),%eax
c011b628:	c1 e0 03             	shl    $0x3,%eax
c011b62b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011b62e:	8b 45 0c             	mov    0xc(%ebp),%eax
c011b631:	c1 e0 03             	shl    $0x3,%eax
c011b634:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_read_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c011b637:	a1 18 01 17 c0       	mov    0xc0170118,%eax
c011b63c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011b63f:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011b643:	89 44 24 08          	mov    %eax,0x8(%esp)
c011b647:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b64a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011b64e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c011b655:	e8 bd 69 fe ff       	call   c0102017 <ide_read_secs>
c011b65a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011b65d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011b661:	74 3f                	je     c011b6a2 <disk0_read_blks_nolock+0x83>
        panic("disk0: read blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c011b663:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011b666:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c011b66a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011b66d:	89 44 24 18          	mov    %eax,0x18(%esp)
c011b671:	8b 45 0c             	mov    0xc(%ebp),%eax
c011b674:	89 44 24 14          	mov    %eax,0x14(%esp)
c011b678:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b67b:	89 44 24 10          	mov    %eax,0x10(%esp)
c011b67f:	8b 45 08             	mov    0x8(%ebp),%eax
c011b682:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011b686:	c7 44 24 08 0c 7d 12 	movl   $0xc0127d0c,0x8(%esp)
c011b68d:	c0 
c011b68e:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c011b695:	00 
c011b696:	c7 04 24 54 7d 12 c0 	movl   $0xc0127d54,(%esp)
c011b69d:	e8 74 5b fe ff       	call   c0101216 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c011b6a2:	c9                   	leave  
c011b6a3:	c3                   	ret    

c011b6a4 <disk0_write_blks_nolock>:

static void
disk0_write_blks_nolock(uint32_t blkno, uint32_t nblks) {
c011b6a4:	55                   	push   %ebp
c011b6a5:	89 e5                	mov    %esp,%ebp
c011b6a7:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c011b6aa:	8b 45 08             	mov    0x8(%ebp),%eax
c011b6ad:	c1 e0 03             	shl    $0x3,%eax
c011b6b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011b6b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c011b6b6:	c1 e0 03             	shl    $0x3,%eax
c011b6b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_write_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c011b6bc:	a1 18 01 17 c0       	mov    0xc0170118,%eax
c011b6c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011b6c4:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011b6c8:	89 44 24 08          	mov    %eax,0x8(%esp)
c011b6cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b6cf:	89 44 24 04          	mov    %eax,0x4(%esp)
c011b6d3:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c011b6da:	e8 7a 6b fe ff       	call   c0102259 <ide_write_secs>
c011b6df:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011b6e2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011b6e6:	74 3f                	je     c011b727 <disk0_write_blks_nolock+0x83>
        panic("disk0: write blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c011b6e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011b6eb:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c011b6ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011b6f2:	89 44 24 18          	mov    %eax,0x18(%esp)
c011b6f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c011b6f9:	89 44 24 14          	mov    %eax,0x14(%esp)
c011b6fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b700:	89 44 24 10          	mov    %eax,0x10(%esp)
c011b704:	8b 45 08             	mov    0x8(%ebp),%eax
c011b707:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011b70b:	c7 44 24 08 70 7d 12 	movl   $0xc0127d70,0x8(%esp)
c011b712:	c0 
c011b713:	c7 44 24 04 38 00 00 	movl   $0x38,0x4(%esp)
c011b71a:	00 
c011b71b:	c7 04 24 54 7d 12 c0 	movl   $0xc0127d54,(%esp)
c011b722:	e8 ef 5a fe ff       	call   c0101216 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c011b727:	c9                   	leave  
c011b728:	c3                   	ret    

c011b729 <disk0_io>:

static int
disk0_io(struct device *dev, struct iobuf *iob, bool write) {
c011b729:	55                   	push   %ebp
c011b72a:	89 e5                	mov    %esp,%ebp
c011b72c:	83 ec 48             	sub    $0x48,%esp
    off_t offset = iob->io_offset;
c011b72f:	8b 45 0c             	mov    0xc(%ebp),%eax
c011b732:	8b 40 04             	mov    0x4(%eax),%eax
c011b735:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    size_t resid = iob->io_resid;
c011b738:	8b 45 0c             	mov    0xc(%ebp),%eax
c011b73b:	8b 40 0c             	mov    0xc(%eax),%eax
c011b73e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t blkno = offset / DISK0_BLKSIZE;
c011b741:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011b744:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c011b74a:	85 c0                	test   %eax,%eax
c011b74c:	0f 48 c2             	cmovs  %edx,%eax
c011b74f:	c1 f8 0c             	sar    $0xc,%eax
c011b752:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t nblks = resid / DISK0_BLKSIZE;
c011b755:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b758:	c1 e8 0c             	shr    $0xc,%eax
c011b75b:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* don't allow I/O that isn't block-aligned */
    if ((offset % DISK0_BLKSIZE) != 0 || (resid % DISK0_BLKSIZE) != 0) {
c011b75e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011b761:	25 ff 0f 00 00       	and    $0xfff,%eax
c011b766:	85 c0                	test   %eax,%eax
c011b768:	75 0c                	jne    c011b776 <disk0_io+0x4d>
c011b76a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b76d:	25 ff 0f 00 00       	and    $0xfff,%eax
c011b772:	85 c0                	test   %eax,%eax
c011b774:	74 0a                	je     c011b780 <disk0_io+0x57>
        return -E_INVAL;
c011b776:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011b77b:	e9 7a 01 00 00       	jmp    c011b8fa <disk0_io+0x1d1>
    }

    /* don't allow I/O past the end of disk0 */
    if (blkno + nblks > dev->d_blocks) {
c011b780:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011b783:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011b786:	01 c2                	add    %eax,%edx
c011b788:	8b 45 08             	mov    0x8(%ebp),%eax
c011b78b:	8b 00                	mov    (%eax),%eax
c011b78d:	39 c2                	cmp    %eax,%edx
c011b78f:	76 0a                	jbe    c011b79b <disk0_io+0x72>
        return -E_INVAL;
c011b791:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011b796:	e9 5f 01 00 00       	jmp    c011b8fa <disk0_io+0x1d1>
    }

    /* read/write nothing ? */
    if (nblks == 0) {
c011b79b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011b79f:	75 0a                	jne    c011b7ab <disk0_io+0x82>
        return 0;
c011b7a1:	b8 00 00 00 00       	mov    $0x0,%eax
c011b7a6:	e9 4f 01 00 00       	jmp    c011b8fa <disk0_io+0x1d1>
    }

    lock_disk0();
c011b7ab:	e8 33 fe ff ff       	call   c011b5e3 <lock_disk0>
    while (resid != 0) {
c011b7b0:	e9 31 01 00 00       	jmp    c011b8e6 <disk0_io+0x1bd>
        size_t copied, alen = DISK0_BUFSIZE;
c011b7b5:	c7 45 e8 00 40 00 00 	movl   $0x4000,-0x18(%ebp)
        if (write) {
c011b7bc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011b7c0:	0f 84 89 00 00 00    	je     c011b84f <disk0_io+0x126>
            iobuf_move(iob, disk0_buffer, alen, 0, &copied);
c011b7c6:	a1 18 01 17 c0       	mov    0xc0170118,%eax
c011b7cb:	8d 55 e0             	lea    -0x20(%ebp),%edx
c011b7ce:	89 54 24 10          	mov    %edx,0x10(%esp)
c011b7d2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c011b7d9:	00 
c011b7da:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011b7dd:	89 54 24 08          	mov    %edx,0x8(%esp)
c011b7e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c011b7e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c011b7e8:	89 04 24             	mov    %eax,(%esp)
c011b7eb:	e8 22 8c ff ff       	call   c0114412 <iobuf_move>
            assert(copied != 0 && copied <= resid && copied % DISK0_BLKSIZE == 0);
c011b7f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011b7f3:	85 c0                	test   %eax,%eax
c011b7f5:	74 14                	je     c011b80b <disk0_io+0xe2>
c011b7f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011b7fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c011b7fd:	77 0c                	ja     c011b80b <disk0_io+0xe2>
c011b7ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011b802:	25 ff 0f 00 00       	and    $0xfff,%eax
c011b807:	85 c0                	test   %eax,%eax
c011b809:	74 24                	je     c011b82f <disk0_io+0x106>
c011b80b:	c7 44 24 0c bc 7d 12 	movl   $0xc0127dbc,0xc(%esp)
c011b812:	c0 
c011b813:	c7 44 24 08 fa 7d 12 	movl   $0xc0127dfa,0x8(%esp)
c011b81a:	c0 
c011b81b:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c011b822:	00 
c011b823:	c7 04 24 54 7d 12 c0 	movl   $0xc0127d54,(%esp)
c011b82a:	e8 e7 59 fe ff       	call   c0101216 <__panic>
            nblks = copied / DISK0_BLKSIZE;
c011b82f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011b832:	c1 e8 0c             	shr    $0xc,%eax
c011b835:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_write_blks_nolock(blkno, nblks);
c011b838:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011b83b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011b83f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011b842:	89 04 24             	mov    %eax,(%esp)
c011b845:	e8 5a fe ff ff       	call   c011b6a4 <disk0_write_blks_nolock>
c011b84a:	e9 8b 00 00 00       	jmp    c011b8da <disk0_io+0x1b1>
        }
        else {
            if (alen > resid) {
c011b84f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011b852:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c011b855:	76 06                	jbe    c011b85d <disk0_io+0x134>
                alen = resid;
c011b857:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b85a:	89 45 e8             	mov    %eax,-0x18(%ebp)
            }
            nblks = alen / DISK0_BLKSIZE;
c011b85d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011b860:	c1 e8 0c             	shr    $0xc,%eax
c011b863:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_read_blks_nolock(blkno, nblks);
c011b866:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011b869:	89 44 24 04          	mov    %eax,0x4(%esp)
c011b86d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011b870:	89 04 24             	mov    %eax,(%esp)
c011b873:	e8 a7 fd ff ff       	call   c011b61f <disk0_read_blks_nolock>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
c011b878:	a1 18 01 17 c0       	mov    0xc0170118,%eax
c011b87d:	8d 55 e0             	lea    -0x20(%ebp),%edx
c011b880:	89 54 24 10          	mov    %edx,0x10(%esp)
c011b884:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011b88b:	00 
c011b88c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011b88f:	89 54 24 08          	mov    %edx,0x8(%esp)
c011b893:	89 44 24 04          	mov    %eax,0x4(%esp)
c011b897:	8b 45 0c             	mov    0xc(%ebp),%eax
c011b89a:	89 04 24             	mov    %eax,(%esp)
c011b89d:	e8 70 8b ff ff       	call   c0114412 <iobuf_move>
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
c011b8a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011b8a5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c011b8a8:	75 0c                	jne    c011b8b6 <disk0_io+0x18d>
c011b8aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011b8ad:	25 ff 0f 00 00       	and    $0xfff,%eax
c011b8b2:	85 c0                	test   %eax,%eax
c011b8b4:	74 24                	je     c011b8da <disk0_io+0x1b1>
c011b8b6:	c7 44 24 0c 10 7e 12 	movl   $0xc0127e10,0xc(%esp)
c011b8bd:	c0 
c011b8be:	c7 44 24 08 fa 7d 12 	movl   $0xc0127dfa,0x8(%esp)
c011b8c5:	c0 
c011b8c6:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
c011b8cd:	00 
c011b8ce:	c7 04 24 54 7d 12 c0 	movl   $0xc0127d54,(%esp)
c011b8d5:	e8 3c 59 fe ff       	call   c0101216 <__panic>
        }
        resid -= copied, blkno += nblks;
c011b8da:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011b8dd:	29 45 f4             	sub    %eax,-0xc(%ebp)
c011b8e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011b8e3:	01 45 f0             	add    %eax,-0x10(%ebp)
    if (nblks == 0) {
        return 0;
    }

    lock_disk0();
    while (resid != 0) {
c011b8e6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011b8ea:	0f 85 c5 fe ff ff    	jne    c011b7b5 <disk0_io+0x8c>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
        }
        resid -= copied, blkno += nblks;
    }
    unlock_disk0();
c011b8f0:	e8 02 fd ff ff       	call   c011b5f7 <unlock_disk0>
    return 0;
c011b8f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011b8fa:	c9                   	leave  
c011b8fb:	c3                   	ret    

c011b8fc <disk0_ioctl>:

static int
disk0_ioctl(struct device *dev, int op, void *data) {
c011b8fc:	55                   	push   %ebp
c011b8fd:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011b8ff:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c011b904:	5d                   	pop    %ebp
c011b905:	c3                   	ret    

c011b906 <disk0_device_init>:

static void
disk0_device_init(struct device *dev) {
c011b906:	55                   	push   %ebp
c011b907:	89 e5                	mov    %esp,%ebp
c011b909:	83 ec 18             	sub    $0x18,%esp
    static_assert(DISK0_BLKSIZE % SECTSIZE == 0);
    if (!ide_device_valid(DISK0_DEV_NO)) {
c011b90c:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c011b913:	e8 81 66 fe ff       	call   c0101f99 <ide_device_valid>
c011b918:	85 c0                	test   %eax,%eax
c011b91a:	75 1c                	jne    c011b938 <disk0_device_init+0x32>
        panic("disk0 device isn't available.\n");
c011b91c:	c7 44 24 08 40 7e 12 	movl   $0xc0127e40,0x8(%esp)
c011b923:	c0 
c011b924:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c011b92b:	00 
c011b92c:	c7 04 24 54 7d 12 c0 	movl   $0xc0127d54,(%esp)
c011b933:	e8 de 58 fe ff       	call   c0101216 <__panic>
    }
    dev->d_blocks = ide_device_size(DISK0_DEV_NO) / DISK0_BLK_NSECT;
c011b938:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c011b93f:	e8 94 66 fe ff       	call   c0101fd8 <ide_device_size>
c011b944:	c1 e8 03             	shr    $0x3,%eax
c011b947:	89 c2                	mov    %eax,%edx
c011b949:	8b 45 08             	mov    0x8(%ebp),%eax
c011b94c:	89 10                	mov    %edx,(%eax)
    dev->d_blocksize = DISK0_BLKSIZE;
c011b94e:	8b 45 08             	mov    0x8(%ebp),%eax
c011b951:	c7 40 04 00 10 00 00 	movl   $0x1000,0x4(%eax)
    dev->d_open = disk0_open;
c011b958:	8b 45 08             	mov    0x8(%ebp),%eax
c011b95b:	c7 40 08 0b b6 11 c0 	movl   $0xc011b60b,0x8(%eax)
    dev->d_close = disk0_close;
c011b962:	8b 45 08             	mov    0x8(%ebp),%eax
c011b965:	c7 40 0c 15 b6 11 c0 	movl   $0xc011b615,0xc(%eax)
    dev->d_io = disk0_io;
c011b96c:	8b 45 08             	mov    0x8(%ebp),%eax
c011b96f:	c7 40 10 29 b7 11 c0 	movl   $0xc011b729,0x10(%eax)
    dev->d_ioctl = disk0_ioctl;
c011b976:	8b 45 08             	mov    0x8(%ebp),%eax
c011b979:	c7 40 14 fc b8 11 c0 	movl   $0xc011b8fc,0x14(%eax)
    sem_init(&(disk0_sem), 1);
c011b980:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c011b987:	00 
c011b988:	c7 04 24 1c 01 17 c0 	movl   $0xc017011c,(%esp)
c011b98f:	e8 ba 70 ff ff       	call   c0112a4e <sem_init>

    static_assert(DISK0_BUFSIZE % DISK0_BLKSIZE == 0);
    if ((disk0_buffer = kmalloc(DISK0_BUFSIZE)) == NULL) {
c011b994:	c7 04 24 00 40 00 00 	movl   $0x4000,(%esp)
c011b99b:	e8 10 f1 fe ff       	call   c010aab0 <kmalloc>
c011b9a0:	a3 18 01 17 c0       	mov    %eax,0xc0170118
c011b9a5:	a1 18 01 17 c0       	mov    0xc0170118,%eax
c011b9aa:	85 c0                	test   %eax,%eax
c011b9ac:	75 1c                	jne    c011b9ca <disk0_device_init+0xc4>
        panic("disk0 alloc buffer failed.\n");
c011b9ae:	c7 44 24 08 5f 7e 12 	movl   $0xc0127e5f,0x8(%esp)
c011b9b5:	c0 
c011b9b6:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%esp)
c011b9bd:	00 
c011b9be:	c7 04 24 54 7d 12 c0 	movl   $0xc0127d54,(%esp)
c011b9c5:	e8 4c 58 fe ff       	call   c0101216 <__panic>
    }
}
c011b9ca:	c9                   	leave  
c011b9cb:	c3                   	ret    

c011b9cc <dev_init_disk0>:

void
dev_init_disk0(void) {
c011b9cc:	55                   	push   %ebp
c011b9cd:	89 e5                	mov    %esp,%ebp
c011b9cf:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c011b9d2:	e8 d1 fb ff ff       	call   c011b5a8 <dev_create_inode>
c011b9d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011b9da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011b9de:	75 1c                	jne    c011b9fc <dev_init_disk0+0x30>
        panic("disk0: dev_create_node.\n");
c011b9e0:	c7 44 24 08 7b 7e 12 	movl   $0xc0127e7b,0x8(%esp)
c011b9e7:	c0 
c011b9e8:	c7 44 24 04 87 00 00 	movl   $0x87,0x4(%esp)
c011b9ef:	00 
c011b9f0:	c7 04 24 54 7d 12 c0 	movl   $0xc0127d54,(%esp)
c011b9f7:	e8 1a 58 fe ff       	call   c0101216 <__panic>
    }
    disk0_device_init(vop_info(node, device));
c011b9fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011b9ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011ba02:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011ba06:	74 0d                	je     c011ba15 <dev_init_disk0+0x49>
c011ba08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011ba0b:	8b 40 2c             	mov    0x2c(%eax),%eax
c011ba0e:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011ba13:	74 24                	je     c011ba39 <dev_init_disk0+0x6d>
c011ba15:	c7 44 24 0c 94 7e 12 	movl   $0xc0127e94,0xc(%esp)
c011ba1c:	c0 
c011ba1d:	c7 44 24 08 fa 7d 12 	movl   $0xc0127dfa,0x8(%esp)
c011ba24:	c0 
c011ba25:	c7 44 24 04 89 00 00 	movl   $0x89,0x4(%esp)
c011ba2c:	00 
c011ba2d:	c7 04 24 54 7d 12 c0 	movl   $0xc0127d54,(%esp)
c011ba34:	e8 dd 57 fe ff       	call   c0101216 <__panic>
c011ba39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011ba3c:	89 04 24             	mov    %eax,(%esp)
c011ba3f:	e8 c2 fe ff ff       	call   c011b906 <disk0_device_init>

    int ret;
    if ((ret = vfs_add_dev("disk0", node, 1)) != 0) {
c011ba44:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011ba4b:	00 
c011ba4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011ba4f:	89 44 24 04          	mov    %eax,0x4(%esp)
c011ba53:	c7 04 24 c7 7e 12 c0 	movl   $0xc0127ec7,(%esp)
c011ba5a:	e8 d0 e5 ff ff       	call   c011a02f <vfs_add_dev>
c011ba5f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011ba62:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011ba66:	74 23                	je     c011ba8b <dev_init_disk0+0xbf>
        panic("disk0: vfs_add_dev: %e.\n", ret);
c011ba68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011ba6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011ba6f:	c7 44 24 08 cd 7e 12 	movl   $0xc0127ecd,0x8(%esp)
c011ba76:	c0 
c011ba77:	c7 44 24 04 8d 00 00 	movl   $0x8d,0x4(%esp)
c011ba7e:	00 
c011ba7f:	c7 04 24 54 7d 12 c0 	movl   $0xc0127d54,(%esp)
c011ba86:	e8 8b 57 fe ff       	call   c0101216 <__panic>
    }
}
c011ba8b:	c9                   	leave  
c011ba8c:	c3                   	ret    

c011ba8d <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c011ba8d:	55                   	push   %ebp
c011ba8e:	89 e5                	mov    %esp,%ebp
c011ba90:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c011ba93:	9c                   	pushf  
c011ba94:	58                   	pop    %eax
c011ba95:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c011ba98:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c011ba9b:	25 00 02 00 00       	and    $0x200,%eax
c011baa0:	85 c0                	test   %eax,%eax
c011baa2:	74 0c                	je     c011bab0 <__intr_save+0x23>
        intr_disable();
c011baa4:	e8 f8 69 fe ff       	call   c01024a1 <intr_disable>
        return 1;
c011baa9:	b8 01 00 00 00       	mov    $0x1,%eax
c011baae:	eb 05                	jmp    c011bab5 <__intr_save+0x28>
    }
    return 0;
c011bab0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011bab5:	c9                   	leave  
c011bab6:	c3                   	ret    

c011bab7 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c011bab7:	55                   	push   %ebp
c011bab8:	89 e5                	mov    %esp,%ebp
c011baba:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c011babd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011bac1:	74 05                	je     c011bac8 <__intr_restore+0x11>
        intr_enable();
c011bac3:	e8 d3 69 fe ff       	call   c010249b <intr_enable>
    }
}
c011bac8:	c9                   	leave  
c011bac9:	c3                   	ret    

c011baca <dev_stdin_write>:
static char stdin_buffer[STDIN_BUFSIZE];
static off_t p_rpos, p_wpos;
static wait_queue_t __wait_queue, *wait_queue = &__wait_queue;

void
dev_stdin_write(char c) {
c011baca:	55                   	push   %ebp
c011bacb:	89 e5                	mov    %esp,%ebp
c011bacd:	83 ec 28             	sub    $0x28,%esp
c011bad0:	8b 45 08             	mov    0x8(%ebp),%eax
c011bad3:	88 45 e4             	mov    %al,-0x1c(%ebp)
    bool intr_flag;
    if (c != '\0') {
c011bad6:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c011bada:	0f 84 80 00 00 00    	je     c011bb60 <dev_stdin_write+0x96>
        local_intr_save(intr_flag);
c011bae0:	e8 a8 ff ff ff       	call   c011ba8d <__intr_save>
c011bae5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        {
            stdin_buffer[p_wpos % STDIN_BUFSIZE] = c;
c011bae8:	a1 44 11 17 c0       	mov    0xc0171144,%eax
c011baed:	99                   	cltd   
c011baee:	c1 ea 14             	shr    $0x14,%edx
c011baf1:	01 d0                	add    %edx,%eax
c011baf3:	25 ff 0f 00 00       	and    $0xfff,%eax
c011baf8:	29 d0                	sub    %edx,%eax
c011bafa:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c011bafe:	88 90 40 01 17 c0    	mov    %dl,-0x3fe8fec0(%eax)
            if (p_wpos - p_rpos < STDIN_BUFSIZE) {
c011bb04:	8b 15 44 11 17 c0    	mov    0xc0171144,%edx
c011bb0a:	a1 40 11 17 c0       	mov    0xc0171140,%eax
c011bb0f:	29 c2                	sub    %eax,%edx
c011bb11:	89 d0                	mov    %edx,%eax
c011bb13:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c011bb18:	7f 0d                	jg     c011bb27 <dev_stdin_write+0x5d>
                p_wpos ++;
c011bb1a:	a1 44 11 17 c0       	mov    0xc0171144,%eax
c011bb1f:	83 c0 01             	add    $0x1,%eax
c011bb22:	a3 44 11 17 c0       	mov    %eax,0xc0171144
            }
            if (!wait_queue_empty(wait_queue)) {
c011bb27:	a1 80 af 16 c0       	mov    0xc016af80,%eax
c011bb2c:	89 04 24             	mov    %eax,(%esp)
c011bb2f:	e8 14 74 ff ff       	call   c0112f48 <wait_queue_empty>
c011bb34:	85 c0                	test   %eax,%eax
c011bb36:	75 1d                	jne    c011bb55 <dev_stdin_write+0x8b>
                wakeup_queue(wait_queue, WT_KBD, 1);
c011bb38:	a1 80 af 16 c0       	mov    0xc016af80,%eax
c011bb3d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011bb44:	00 
c011bb45:	c7 44 24 04 04 00 00 	movl   $0x80000004,0x4(%esp)
c011bb4c:	80 
c011bb4d:	89 04 24             	mov    %eax,(%esp)
c011bb50:	e8 aa 74 ff ff       	call   c0112fff <wakeup_queue>
            }
        }
        local_intr_restore(intr_flag);
c011bb55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011bb58:	89 04 24             	mov    %eax,(%esp)
c011bb5b:	e8 57 ff ff ff       	call   c011bab7 <__intr_restore>
    }
}
c011bb60:	c9                   	leave  
c011bb61:	c3                   	ret    

c011bb62 <dev_stdin_read>:

static int
dev_stdin_read(char *buf, size_t len) {
c011bb62:	55                   	push   %ebp
c011bb63:	89 e5                	mov    %esp,%ebp
c011bb65:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c011bb68:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c011bb6f:	e8 19 ff ff ff       	call   c011ba8d <__intr_save>
c011bb74:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        for (; ret < len; ret ++, p_rpos ++) {
c011bb77:	e9 bb 00 00 00       	jmp    c011bc37 <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
c011bb7c:	8b 15 40 11 17 c0    	mov    0xc0171140,%edx
c011bb82:	a1 44 11 17 c0       	mov    0xc0171144,%eax
c011bb87:	39 c2                	cmp    %eax,%edx
c011bb89:	7d 3d                	jge    c011bbc8 <dev_stdin_read+0x66>
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
c011bb8b:	8b 45 08             	mov    0x8(%ebp),%eax
c011bb8e:	8d 50 01             	lea    0x1(%eax),%edx
c011bb91:	89 55 08             	mov    %edx,0x8(%ebp)
c011bb94:	8b 15 40 11 17 c0    	mov    0xc0171140,%edx
c011bb9a:	89 d1                	mov    %edx,%ecx
c011bb9c:	c1 f9 1f             	sar    $0x1f,%ecx
c011bb9f:	c1 e9 14             	shr    $0x14,%ecx
c011bba2:	01 ca                	add    %ecx,%edx
c011bba4:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c011bbaa:	29 ca                	sub    %ecx,%edx
c011bbac:	0f b6 92 40 01 17 c0 	movzbl -0x3fe8fec0(%edx),%edx
c011bbb3:	88 10                	mov    %dl,(%eax)
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c011bbb5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011bbb9:	a1 40 11 17 c0       	mov    0xc0171140,%eax
c011bbbe:	83 c0 01             	add    $0x1,%eax
c011bbc1:	a3 40 11 17 c0       	mov    %eax,0xc0171140
c011bbc6:	eb 6f                	jmp    c011bc37 <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
            }
            else {
                wait_t __wait, *wait = &__wait;
c011bbc8:	8d 45 d8             	lea    -0x28(%ebp),%eax
c011bbcb:	89 45 ec             	mov    %eax,-0x14(%ebp)
                wait_current_set(wait_queue, wait, WT_KBD);
c011bbce:	a1 80 af 16 c0       	mov    0xc016af80,%eax
c011bbd3:	c7 44 24 08 04 00 00 	movl   $0x80000004,0x8(%esp)
c011bbda:	80 
c011bbdb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011bbde:	89 54 24 04          	mov    %edx,0x4(%esp)
c011bbe2:	89 04 24             	mov    %eax,(%esp)
c011bbe5:	e8 aa 74 ff ff       	call   c0113094 <wait_current_set>
                local_intr_restore(intr_flag);
c011bbea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011bbed:	89 04 24             	mov    %eax,(%esp)
c011bbf0:	e8 c2 fe ff ff       	call   c011bab7 <__intr_restore>

                schedule();
c011bbf5:	e8 ac c7 ff ff       	call   c01183a6 <schedule>

                local_intr_save(intr_flag);
c011bbfa:	e8 8e fe ff ff       	call   c011ba8d <__intr_save>
c011bbff:	89 45 f0             	mov    %eax,-0x10(%ebp)
                wait_current_del(wait_queue, wait);
c011bc02:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011bc05:	89 04 24             	mov    %eax,(%esp)
c011bc08:	e8 58 73 ff ff       	call   c0112f65 <wait_in_queue>
c011bc0d:	85 c0                	test   %eax,%eax
c011bc0f:	74 14                	je     c011bc25 <dev_stdin_read+0xc3>
c011bc11:	a1 80 af 16 c0       	mov    0xc016af80,%eax
c011bc16:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011bc19:	89 54 24 04          	mov    %edx,0x4(%esp)
c011bc1d:	89 04 24             	mov    %eax,(%esp)
c011bc20:	e8 3b 71 ff ff       	call   c0112d60 <wait_queue_del>
                if (wait->wakeup_flags == WT_KBD) {
c011bc25:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011bc28:	8b 40 04             	mov    0x4(%eax),%eax
c011bc2b:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c011bc30:	75 11                	jne    c011bc43 <dev_stdin_read+0xe1>
c011bc32:	e9 45 ff ff ff       	jmp    c011bb7c <dev_stdin_read+0x1a>
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c011bc37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011bc3a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c011bc3d:	0f 82 39 ff ff ff    	jb     c011bb7c <dev_stdin_read+0x1a>
                }
                break;
            }
        }
    }
    local_intr_restore(intr_flag);
c011bc43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011bc46:	89 04 24             	mov    %eax,(%esp)
c011bc49:	e8 69 fe ff ff       	call   c011bab7 <__intr_restore>
    return ret;
c011bc4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011bc51:	c9                   	leave  
c011bc52:	c3                   	ret    

c011bc53 <stdin_open>:

static int
stdin_open(struct device *dev, uint32_t open_flags) {
c011bc53:	55                   	push   %ebp
c011bc54:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_RDONLY) {
c011bc56:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011bc5a:	74 07                	je     c011bc63 <stdin_open+0x10>
        return -E_INVAL;
c011bc5c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011bc61:	eb 05                	jmp    c011bc68 <stdin_open+0x15>
    }
    return 0;
c011bc63:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011bc68:	5d                   	pop    %ebp
c011bc69:	c3                   	ret    

c011bc6a <stdin_close>:

static int
stdin_close(struct device *dev) {
c011bc6a:	55                   	push   %ebp
c011bc6b:	89 e5                	mov    %esp,%ebp
    return 0;
c011bc6d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011bc72:	5d                   	pop    %ebp
c011bc73:	c3                   	ret    

c011bc74 <stdin_io>:

static int
stdin_io(struct device *dev, struct iobuf *iob, bool write) {
c011bc74:	55                   	push   %ebp
c011bc75:	89 e5                	mov    %esp,%ebp
c011bc77:	83 ec 28             	sub    $0x28,%esp
    if (!write) {
c011bc7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011bc7e:	75 36                	jne    c011bcb6 <stdin_io+0x42>
        int ret;
        if ((ret = dev_stdin_read(iob->io_base, iob->io_resid)) > 0) {
c011bc80:	8b 45 0c             	mov    0xc(%ebp),%eax
c011bc83:	8b 50 0c             	mov    0xc(%eax),%edx
c011bc86:	8b 45 0c             	mov    0xc(%ebp),%eax
c011bc89:	8b 00                	mov    (%eax),%eax
c011bc8b:	89 54 24 04          	mov    %edx,0x4(%esp)
c011bc8f:	89 04 24             	mov    %eax,(%esp)
c011bc92:	e8 cb fe ff ff       	call   c011bb62 <dev_stdin_read>
c011bc97:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011bc9a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011bc9e:	7e 11                	jle    c011bcb1 <stdin_io+0x3d>
            iob->io_resid -= ret;
c011bca0:	8b 45 0c             	mov    0xc(%ebp),%eax
c011bca3:	8b 50 0c             	mov    0xc(%eax),%edx
c011bca6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011bca9:	29 c2                	sub    %eax,%edx
c011bcab:	8b 45 0c             	mov    0xc(%ebp),%eax
c011bcae:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        return ret;
c011bcb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011bcb4:	eb 05                	jmp    c011bcbb <stdin_io+0x47>
    }
    return -E_INVAL;
c011bcb6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c011bcbb:	c9                   	leave  
c011bcbc:	c3                   	ret    

c011bcbd <stdin_ioctl>:

static int
stdin_ioctl(struct device *dev, int op, void *data) {
c011bcbd:	55                   	push   %ebp
c011bcbe:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c011bcc0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c011bcc5:	5d                   	pop    %ebp
c011bcc6:	c3                   	ret    

c011bcc7 <stdin_device_init>:

static void
stdin_device_init(struct device *dev) {
c011bcc7:	55                   	push   %ebp
c011bcc8:	89 e5                	mov    %esp,%ebp
c011bcca:	83 ec 18             	sub    $0x18,%esp
    dev->d_blocks = 0;
c011bccd:	8b 45 08             	mov    0x8(%ebp),%eax
c011bcd0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c011bcd6:	8b 45 08             	mov    0x8(%ebp),%eax
c011bcd9:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdin_open;
c011bce0:	8b 45 08             	mov    0x8(%ebp),%eax
c011bce3:	c7 40 08 53 bc 11 c0 	movl   $0xc011bc53,0x8(%eax)
    dev->d_close = stdin_close;
c011bcea:	8b 45 08             	mov    0x8(%ebp),%eax
c011bced:	c7 40 0c 6a bc 11 c0 	movl   $0xc011bc6a,0xc(%eax)
    dev->d_io = stdin_io;
c011bcf4:	8b 45 08             	mov    0x8(%ebp),%eax
c011bcf7:	c7 40 10 74 bc 11 c0 	movl   $0xc011bc74,0x10(%eax)
    dev->d_ioctl = stdin_ioctl;
c011bcfe:	8b 45 08             	mov    0x8(%ebp),%eax
c011bd01:	c7 40 14 bd bc 11 c0 	movl   $0xc011bcbd,0x14(%eax)

    p_rpos = p_wpos = 0;
c011bd08:	c7 05 44 11 17 c0 00 	movl   $0x0,0xc0171144
c011bd0f:	00 00 00 
c011bd12:	a1 44 11 17 c0       	mov    0xc0171144,%eax
c011bd17:	a3 40 11 17 c0       	mov    %eax,0xc0171140
    wait_queue_init(wait_queue);
c011bd1c:	a1 80 af 16 c0       	mov    0xc016af80,%eax
c011bd21:	89 04 24             	mov    %eax,(%esp)
c011bd24:	e8 74 6f ff ff       	call   c0112c9d <wait_queue_init>
}
c011bd29:	c9                   	leave  
c011bd2a:	c3                   	ret    

c011bd2b <dev_init_stdin>:

void
dev_init_stdin(void) {
c011bd2b:	55                   	push   %ebp
c011bd2c:	89 e5                	mov    %esp,%ebp
c011bd2e:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c011bd31:	e8 72 f8 ff ff       	call   c011b5a8 <dev_create_inode>
c011bd36:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011bd39:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011bd3d:	75 1c                	jne    c011bd5b <dev_init_stdin+0x30>
        panic("stdin: dev_create_node.\n");
c011bd3f:	c7 44 24 08 e8 7e 12 	movl   $0xc0127ee8,0x8(%esp)
c011bd46:	c0 
c011bd47:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c011bd4e:	00 
c011bd4f:	c7 04 24 01 7f 12 c0 	movl   $0xc0127f01,(%esp)
c011bd56:	e8 bb 54 fe ff       	call   c0101216 <__panic>
    }
    stdin_device_init(vop_info(node, device));
c011bd5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011bd5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011bd61:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011bd65:	74 0d                	je     c011bd74 <dev_init_stdin+0x49>
c011bd67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011bd6a:	8b 40 2c             	mov    0x2c(%eax),%eax
c011bd6d:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011bd72:	74 24                	je     c011bd98 <dev_init_stdin+0x6d>
c011bd74:	c7 44 24 0c 1c 7f 12 	movl   $0xc0127f1c,0xc(%esp)
c011bd7b:	c0 
c011bd7c:	c7 44 24 08 4f 7f 12 	movl   $0xc0127f4f,0x8(%esp)
c011bd83:	c0 
c011bd84:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c011bd8b:	00 
c011bd8c:	c7 04 24 01 7f 12 c0 	movl   $0xc0127f01,(%esp)
c011bd93:	e8 7e 54 fe ff       	call   c0101216 <__panic>
c011bd98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011bd9b:	89 04 24             	mov    %eax,(%esp)
c011bd9e:	e8 24 ff ff ff       	call   c011bcc7 <stdin_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdin", node, 0)) != 0) {
c011bda3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011bdaa:	00 
c011bdab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011bdae:	89 44 24 04          	mov    %eax,0x4(%esp)
c011bdb2:	c7 04 24 64 7f 12 c0 	movl   $0xc0127f64,(%esp)
c011bdb9:	e8 71 e2 ff ff       	call   c011a02f <vfs_add_dev>
c011bdbe:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011bdc1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011bdc5:	74 23                	je     c011bdea <dev_init_stdin+0xbf>
        panic("stdin: vfs_add_dev: %e.\n", ret);
c011bdc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011bdca:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011bdce:	c7 44 24 08 6a 7f 12 	movl   $0xc0127f6a,0x8(%esp)
c011bdd5:	c0 
c011bdd6:	c7 44 24 04 7b 00 00 	movl   $0x7b,0x4(%esp)
c011bddd:	00 
c011bdde:	c7 04 24 01 7f 12 c0 	movl   $0xc0127f01,(%esp)
c011bde5:	e8 2c 54 fe ff       	call   c0101216 <__panic>
    }
}
c011bdea:	c9                   	leave  
c011bdeb:	c3                   	ret    

c011bdec <stdout_open>:
#include <unistd.h>
#include <error.h>
#include <assert.h>

static int
stdout_open(struct device *dev, uint32_t open_flags) {
c011bdec:	55                   	push   %ebp
c011bded:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_WRONLY) {
c011bdef:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c011bdf3:	74 07                	je     c011bdfc <stdout_open+0x10>
        return -E_INVAL;
c011bdf5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011bdfa:	eb 05                	jmp    c011be01 <stdout_open+0x15>
    }
    return 0;
c011bdfc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011be01:	5d                   	pop    %ebp
c011be02:	c3                   	ret    

c011be03 <stdout_close>:

static int
stdout_close(struct device *dev) {
c011be03:	55                   	push   %ebp
c011be04:	89 e5                	mov    %esp,%ebp
    return 0;
c011be06:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011be0b:	5d                   	pop    %ebp
c011be0c:	c3                   	ret    

c011be0d <stdout_io>:

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
c011be0d:	55                   	push   %ebp
c011be0e:	89 e5                	mov    %esp,%ebp
c011be10:	83 ec 28             	sub    $0x28,%esp
    if (write) {
c011be13:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011be17:	74 41                	je     c011be5a <stdout_io+0x4d>
        char *data = iob->io_base;
c011be19:	8b 45 0c             	mov    0xc(%ebp),%eax
c011be1c:	8b 00                	mov    (%eax),%eax
c011be1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; iob->io_resid != 0; iob->io_resid --) {
c011be21:	eb 26                	jmp    c011be49 <stdout_io+0x3c>
            cputchar(*data ++);
c011be23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011be26:	8d 50 01             	lea    0x1(%eax),%edx
c011be29:	89 55 f4             	mov    %edx,-0xc(%ebp)
c011be2c:	0f b6 00             	movzbl (%eax),%eax
c011be2f:	0f be c0             	movsbl %al,%eax
c011be32:	89 04 24             	mov    %eax,(%esp)
c011be35:	e8 df 45 fe ff       	call   c0100419 <cputchar>

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
    if (write) {
        char *data = iob->io_base;
        for (; iob->io_resid != 0; iob->io_resid --) {
c011be3a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011be3d:	8b 40 0c             	mov    0xc(%eax),%eax
c011be40:	8d 50 ff             	lea    -0x1(%eax),%edx
c011be43:	8b 45 0c             	mov    0xc(%ebp),%eax
c011be46:	89 50 0c             	mov    %edx,0xc(%eax)
c011be49:	8b 45 0c             	mov    0xc(%ebp),%eax
c011be4c:	8b 40 0c             	mov    0xc(%eax),%eax
c011be4f:	85 c0                	test   %eax,%eax
c011be51:	75 d0                	jne    c011be23 <stdout_io+0x16>
            cputchar(*data ++);
        }
        return 0;
c011be53:	b8 00 00 00 00       	mov    $0x0,%eax
c011be58:	eb 05                	jmp    c011be5f <stdout_io+0x52>
    }
    return -E_INVAL;
c011be5a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c011be5f:	c9                   	leave  
c011be60:	c3                   	ret    

c011be61 <stdout_ioctl>:

static int
stdout_ioctl(struct device *dev, int op, void *data) {
c011be61:	55                   	push   %ebp
c011be62:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c011be64:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c011be69:	5d                   	pop    %ebp
c011be6a:	c3                   	ret    

c011be6b <stdout_device_init>:

static void
stdout_device_init(struct device *dev) {
c011be6b:	55                   	push   %ebp
c011be6c:	89 e5                	mov    %esp,%ebp
    dev->d_blocks = 0;
c011be6e:	8b 45 08             	mov    0x8(%ebp),%eax
c011be71:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c011be77:	8b 45 08             	mov    0x8(%ebp),%eax
c011be7a:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdout_open;
c011be81:	8b 45 08             	mov    0x8(%ebp),%eax
c011be84:	c7 40 08 ec bd 11 c0 	movl   $0xc011bdec,0x8(%eax)
    dev->d_close = stdout_close;
c011be8b:	8b 45 08             	mov    0x8(%ebp),%eax
c011be8e:	c7 40 0c 03 be 11 c0 	movl   $0xc011be03,0xc(%eax)
    dev->d_io = stdout_io;
c011be95:	8b 45 08             	mov    0x8(%ebp),%eax
c011be98:	c7 40 10 0d be 11 c0 	movl   $0xc011be0d,0x10(%eax)
    dev->d_ioctl = stdout_ioctl;
c011be9f:	8b 45 08             	mov    0x8(%ebp),%eax
c011bea2:	c7 40 14 61 be 11 c0 	movl   $0xc011be61,0x14(%eax)
}
c011bea9:	5d                   	pop    %ebp
c011beaa:	c3                   	ret    

c011beab <dev_init_stdout>:

void
dev_init_stdout(void) {
c011beab:	55                   	push   %ebp
c011beac:	89 e5                	mov    %esp,%ebp
c011beae:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c011beb1:	e8 f2 f6 ff ff       	call   c011b5a8 <dev_create_inode>
c011beb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011beb9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011bebd:	75 1c                	jne    c011bedb <dev_init_stdout+0x30>
        panic("stdout: dev_create_node.\n");
c011bebf:	c7 44 24 08 84 7f 12 	movl   $0xc0127f84,0x8(%esp)
c011bec6:	c0 
c011bec7:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c011bece:	00 
c011becf:	c7 04 24 9e 7f 12 c0 	movl   $0xc0127f9e,(%esp)
c011bed6:	e8 3b 53 fe ff       	call   c0101216 <__panic>
    }
    stdout_device_init(vop_info(node, device));
c011bedb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011bede:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011bee1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011bee5:	74 0d                	je     c011bef4 <dev_init_stdout+0x49>
c011bee7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011beea:	8b 40 2c             	mov    0x2c(%eax),%eax
c011beed:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011bef2:	74 24                	je     c011bf18 <dev_init_stdout+0x6d>
c011bef4:	c7 44 24 0c b8 7f 12 	movl   $0xc0127fb8,0xc(%esp)
c011befb:	c0 
c011befc:	c7 44 24 08 eb 7f 12 	movl   $0xc0127feb,0x8(%esp)
c011bf03:	c0 
c011bf04:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c011bf0b:	00 
c011bf0c:	c7 04 24 9e 7f 12 c0 	movl   $0xc0127f9e,(%esp)
c011bf13:	e8 fe 52 fe ff       	call   c0101216 <__panic>
c011bf18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011bf1b:	89 04 24             	mov    %eax,(%esp)
c011bf1e:	e8 48 ff ff ff       	call   c011be6b <stdout_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdout", node, 0)) != 0) {
c011bf23:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011bf2a:	00 
c011bf2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011bf2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c011bf32:	c7 04 24 00 80 12 c0 	movl   $0xc0128000,(%esp)
c011bf39:	e8 f1 e0 ff ff       	call   c011a02f <vfs_add_dev>
c011bf3e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011bf41:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011bf45:	74 23                	je     c011bf6a <dev_init_stdout+0xbf>
        panic("stdout: vfs_add_dev: %e.\n", ret);
c011bf47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011bf4a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011bf4e:	c7 44 24 08 07 80 12 	movl   $0xc0128007,0x8(%esp)
c011bf55:	c0 
c011bf56:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c011bf5d:	00 
c011bf5e:	c7 04 24 9e 7f 12 c0 	movl   $0xc0127f9e,(%esp)
c011bf65:	e8 ac 52 fe ff       	call   c0101216 <__panic>
    }
}
c011bf6a:	c9                   	leave  
c011bf6b:	c3                   	ret    

c011bf6c <bitmap_create>:
    WORD_TYPE *map;
};

// bitmap_create - allocate a new bitmap object.
struct bitmap *
bitmap_create(uint32_t nbits) {
c011bf6c:	55                   	push   %ebp
c011bf6d:	89 e5                	mov    %esp,%ebp
c011bf6f:	56                   	push   %esi
c011bf70:	53                   	push   %ebx
c011bf71:	83 ec 30             	sub    $0x30,%esp
    static_assert(WORD_BITS != 0);
    assert(nbits != 0 && nbits + WORD_BITS > nbits);
c011bf74:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011bf78:	74 0b                	je     c011bf85 <bitmap_create+0x19>
c011bf7a:	8b 45 08             	mov    0x8(%ebp),%eax
c011bf7d:	83 c0 20             	add    $0x20,%eax
c011bf80:	3b 45 08             	cmp    0x8(%ebp),%eax
c011bf83:	77 24                	ja     c011bfa9 <bitmap_create+0x3d>
c011bf85:	c7 44 24 0c 24 80 12 	movl   $0xc0128024,0xc(%esp)
c011bf8c:	c0 
c011bf8d:	c7 44 24 08 4c 80 12 	movl   $0xc012804c,0x8(%esp)
c011bf94:	c0 
c011bf95:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c011bf9c:	00 
c011bf9d:	c7 04 24 61 80 12 c0 	movl   $0xc0128061,(%esp)
c011bfa4:	e8 6d 52 fe ff       	call   c0101216 <__panic>

    struct bitmap *bitmap;
    if ((bitmap = kmalloc(sizeof(struct bitmap))) == NULL) {
c011bfa9:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c011bfb0:	e8 fb ea fe ff       	call   c010aab0 <kmalloc>
c011bfb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011bfb8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011bfbc:	75 0a                	jne    c011bfc8 <bitmap_create+0x5c>
        return NULL;
c011bfbe:	b8 00 00 00 00       	mov    $0x0,%eax
c011bfc3:	e9 43 01 00 00       	jmp    c011c10b <bitmap_create+0x19f>
    }

    uint32_t nwords = ROUNDUP_DIV(nbits, WORD_BITS);
c011bfc8:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
c011bfcf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011bfd2:	8b 55 08             	mov    0x8(%ebp),%edx
c011bfd5:	01 d0                	add    %edx,%eax
c011bfd7:	83 e8 01             	sub    $0x1,%eax
c011bfda:	ba 00 00 00 00       	mov    $0x0,%edx
c011bfdf:	f7 75 ec             	divl   -0x14(%ebp)
c011bfe2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    WORD_TYPE *map;
    if ((map = kmalloc(sizeof(WORD_TYPE) * nwords)) == NULL) {
c011bfe5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011bfe8:	c1 e0 02             	shl    $0x2,%eax
c011bfeb:	89 04 24             	mov    %eax,(%esp)
c011bfee:	e8 bd ea fe ff       	call   c010aab0 <kmalloc>
c011bff3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011bff6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011bffa:	75 15                	jne    c011c011 <bitmap_create+0xa5>
        kfree(bitmap);
c011bffc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011bfff:	89 04 24             	mov    %eax,(%esp)
c011c002:	e8 c4 ea fe ff       	call   c010aacb <kfree>
        return NULL;
c011c007:	b8 00 00 00 00       	mov    $0x0,%eax
c011c00c:	e9 fa 00 00 00       	jmp    c011c10b <bitmap_create+0x19f>
    }

    bitmap->nbits = nbits, bitmap->nwords = nwords;
c011c011:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c014:	8b 55 08             	mov    0x8(%ebp),%edx
c011c017:	89 10                	mov    %edx,(%eax)
c011c019:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c01c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011c01f:	89 50 04             	mov    %edx,0x4(%eax)
    bitmap->map = memset(map, 0xFF, sizeof(WORD_TYPE) * nwords);
c011c022:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011c025:	c1 e0 02             	shl    $0x2,%eax
c011c028:	89 44 24 08          	mov    %eax,0x8(%esp)
c011c02c:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
c011c033:	ff 
c011c034:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011c037:	89 04 24             	mov    %eax,(%esp)
c011c03a:	e8 c0 50 00 00       	call   c01210ff <memset>
c011c03f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011c042:	89 42 08             	mov    %eax,0x8(%edx)

    /* mark any leftover bits at the end in use(0) */
    if (nbits != nwords * WORD_BITS) {
c011c045:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011c048:	c1 e0 05             	shl    $0x5,%eax
c011c04b:	3b 45 08             	cmp    0x8(%ebp),%eax
c011c04e:	0f 84 b4 00 00 00    	je     c011c108 <bitmap_create+0x19c>
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;
c011c054:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011c057:	83 e8 01             	sub    $0x1,%eax
c011c05a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011c05d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011c060:	c1 e0 05             	shl    $0x5,%eax
c011c063:	89 c2                	mov    %eax,%edx
c011c065:	8b 45 08             	mov    0x8(%ebp),%eax
c011c068:	29 d0                	sub    %edx,%eax
c011c06a:	89 45 f4             	mov    %eax,-0xc(%ebp)

        assert(nbits / WORD_BITS == ix);
c011c06d:	8b 45 08             	mov    0x8(%ebp),%eax
c011c070:	c1 e8 05             	shr    $0x5,%eax
c011c073:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c011c076:	74 24                	je     c011c09c <bitmap_create+0x130>
c011c078:	c7 44 24 0c 76 80 12 	movl   $0xc0128076,0xc(%esp)
c011c07f:	c0 
c011c080:	c7 44 24 08 4c 80 12 	movl   $0xc012804c,0x8(%esp)
c011c087:	c0 
c011c088:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c011c08f:	00 
c011c090:	c7 04 24 61 80 12 c0 	movl   $0xc0128061,(%esp)
c011c097:	e8 7a 51 fe ff       	call   c0101216 <__panic>
        assert(overbits > 0 && overbits < WORD_BITS);
c011c09c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011c0a0:	74 06                	je     c011c0a8 <bitmap_create+0x13c>
c011c0a2:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c011c0a6:	76 24                	jbe    c011c0cc <bitmap_create+0x160>
c011c0a8:	c7 44 24 0c 90 80 12 	movl   $0xc0128090,0xc(%esp)
c011c0af:	c0 
c011c0b0:	c7 44 24 08 4c 80 12 	movl   $0xc012804c,0x8(%esp)
c011c0b7:	c0 
c011c0b8:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%esp)
c011c0bf:	00 
c011c0c0:	c7 04 24 61 80 12 c0 	movl   $0xc0128061,(%esp)
c011c0c7:	e8 4a 51 fe ff       	call   c0101216 <__panic>

        for (; overbits < WORD_BITS; overbits ++) {
c011c0cc:	eb 34                	jmp    c011c102 <bitmap_create+0x196>
            bitmap->map[ix] ^= (1 << overbits);
c011c0ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c0d1:	8b 40 08             	mov    0x8(%eax),%eax
c011c0d4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011c0d7:	c1 e2 02             	shl    $0x2,%edx
c011c0da:	01 c2                	add    %eax,%edx
c011c0dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c0df:	8b 40 08             	mov    0x8(%eax),%eax
c011c0e2:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c011c0e5:	c1 e1 02             	shl    $0x2,%ecx
c011c0e8:	01 c8                	add    %ecx,%eax
c011c0ea:	8b 18                	mov    (%eax),%ebx
c011c0ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c0ef:	be 01 00 00 00       	mov    $0x1,%esi
c011c0f4:	89 c1                	mov    %eax,%ecx
c011c0f6:	d3 e6                	shl    %cl,%esi
c011c0f8:	89 f0                	mov    %esi,%eax
c011c0fa:	31 d8                	xor    %ebx,%eax
c011c0fc:	89 02                	mov    %eax,(%edx)
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;

        assert(nbits / WORD_BITS == ix);
        assert(overbits > 0 && overbits < WORD_BITS);

        for (; overbits < WORD_BITS; overbits ++) {
c011c0fe:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011c102:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c011c106:	76 c6                	jbe    c011c0ce <bitmap_create+0x162>
            bitmap->map[ix] ^= (1 << overbits);
        }
    }
    return bitmap;
c011c108:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c011c10b:	83 c4 30             	add    $0x30,%esp
c011c10e:	5b                   	pop    %ebx
c011c10f:	5e                   	pop    %esi
c011c110:	5d                   	pop    %ebp
c011c111:	c3                   	ret    

c011c112 <bitmap_alloc>:

// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
c011c112:	55                   	push   %ebp
c011c113:	89 e5                	mov    %esp,%ebp
c011c115:	83 ec 38             	sub    $0x38,%esp
    WORD_TYPE *map = bitmap->map;
c011c118:	8b 45 08             	mov    0x8(%ebp),%eax
c011c11b:	8b 40 08             	mov    0x8(%eax),%eax
c011c11e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t ix, offset, nwords = bitmap->nwords;
c011c121:	8b 45 08             	mov    0x8(%ebp),%eax
c011c124:	8b 40 04             	mov    0x4(%eax),%eax
c011c127:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (ix = 0; ix < nwords; ix ++) {
c011c12a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c011c131:	e9 bb 00 00 00       	jmp    c011c1f1 <bitmap_alloc+0xdf>
        if (map[ix] != 0) {
c011c136:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c139:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c011c140:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c143:	01 d0                	add    %edx,%eax
c011c145:	8b 00                	mov    (%eax),%eax
c011c147:	85 c0                	test   %eax,%eax
c011c149:	0f 84 9e 00 00 00    	je     c011c1ed <bitmap_alloc+0xdb>
            for (offset = 0; offset < WORD_BITS; offset ++) {
c011c14f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c011c156:	eb 6b                	jmp    c011c1c3 <bitmap_alloc+0xb1>
                WORD_TYPE mask = (1 << offset);
c011c158:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c15b:	ba 01 00 00 00       	mov    $0x1,%edx
c011c160:	89 c1                	mov    %eax,%ecx
c011c162:	d3 e2                	shl    %cl,%edx
c011c164:	89 d0                	mov    %edx,%eax
c011c166:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (map[ix] & mask) {
c011c169:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c16c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c011c173:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c176:	01 d0                	add    %edx,%eax
c011c178:	8b 00                	mov    (%eax),%eax
c011c17a:	23 45 e4             	and    -0x1c(%ebp),%eax
c011c17d:	85 c0                	test   %eax,%eax
c011c17f:	74 3e                	je     c011c1bf <bitmap_alloc+0xad>
                    map[ix] ^= mask;
c011c181:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c184:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c011c18b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c18e:	01 c2                	add    %eax,%edx
c011c190:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c193:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c011c19a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c19d:	01 c8                	add    %ecx,%eax
c011c19f:	8b 00                	mov    (%eax),%eax
c011c1a1:	33 45 e4             	xor    -0x1c(%ebp),%eax
c011c1a4:	89 02                	mov    %eax,(%edx)
                    *index_store = ix * WORD_BITS + offset;
c011c1a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c1a9:	c1 e0 05             	shl    $0x5,%eax
c011c1ac:	89 c2                	mov    %eax,%edx
c011c1ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c1b1:	01 c2                	add    %eax,%edx
c011c1b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c011c1b6:	89 10                	mov    %edx,(%eax)
                    return 0;
c011c1b8:	b8 00 00 00 00       	mov    $0x0,%eax
c011c1bd:	eb 43                	jmp    c011c202 <bitmap_alloc+0xf0>
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
        if (map[ix] != 0) {
            for (offset = 0; offset < WORD_BITS; offset ++) {
c011c1bf:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c011c1c3:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c011c1c7:	76 8f                	jbe    c011c158 <bitmap_alloc+0x46>
                    map[ix] ^= mask;
                    *index_store = ix * WORD_BITS + offset;
                    return 0;
                }
            }
            assert(0);
c011c1c9:	c7 44 24 0c b5 80 12 	movl   $0xc01280b5,0xc(%esp)
c011c1d0:	c0 
c011c1d1:	c7 44 24 08 4c 80 12 	movl   $0xc012804c,0x8(%esp)
c011c1d8:	c0 
c011c1d9:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c011c1e0:	00 
c011c1e1:	c7 04 24 61 80 12 c0 	movl   $0xc0128061,(%esp)
c011c1e8:	e8 29 50 fe ff       	call   c0101216 <__panic>
// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
c011c1ed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011c1f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c1f4:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c011c1f7:	0f 82 39 ff ff ff    	jb     c011c136 <bitmap_alloc+0x24>
                }
            }
            assert(0);
        }
    }
    return -E_NO_MEM;
c011c1fd:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c011c202:	c9                   	leave  
c011c203:	c3                   	ret    

c011c204 <bitmap_translate>:

// bitmap_translate - according index, get the related word and mask
static void
bitmap_translate(struct bitmap *bitmap, uint32_t index, WORD_TYPE **word, WORD_TYPE *mask) {
c011c204:	55                   	push   %ebp
c011c205:	89 e5                	mov    %esp,%ebp
c011c207:	83 ec 28             	sub    $0x28,%esp
    assert(index < bitmap->nbits);
c011c20a:	8b 45 08             	mov    0x8(%ebp),%eax
c011c20d:	8b 00                	mov    (%eax),%eax
c011c20f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c011c212:	77 24                	ja     c011c238 <bitmap_translate+0x34>
c011c214:	c7 44 24 0c b7 80 12 	movl   $0xc01280b7,0xc(%esp)
c011c21b:	c0 
c011c21c:	c7 44 24 08 4c 80 12 	movl   $0xc012804c,0x8(%esp)
c011c223:	c0 
c011c224:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c011c22b:	00 
c011c22c:	c7 04 24 61 80 12 c0 	movl   $0xc0128061,(%esp)
c011c233:	e8 de 4f fe ff       	call   c0101216 <__panic>
    uint32_t ix = index / WORD_BITS, offset = index % WORD_BITS;
c011c238:	8b 45 0c             	mov    0xc(%ebp),%eax
c011c23b:	c1 e8 05             	shr    $0x5,%eax
c011c23e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011c241:	8b 45 0c             	mov    0xc(%ebp),%eax
c011c244:	83 e0 1f             	and    $0x1f,%eax
c011c247:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *word = bitmap->map + ix;
c011c24a:	8b 45 08             	mov    0x8(%ebp),%eax
c011c24d:	8b 40 08             	mov    0x8(%eax),%eax
c011c250:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011c253:	c1 e2 02             	shl    $0x2,%edx
c011c256:	01 c2                	add    %eax,%edx
c011c258:	8b 45 10             	mov    0x10(%ebp),%eax
c011c25b:	89 10                	mov    %edx,(%eax)
    *mask = (1 << offset);
c011c25d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c260:	ba 01 00 00 00       	mov    $0x1,%edx
c011c265:	89 c1                	mov    %eax,%ecx
c011c267:	d3 e2                	shl    %cl,%edx
c011c269:	89 d0                	mov    %edx,%eax
c011c26b:	89 c2                	mov    %eax,%edx
c011c26d:	8b 45 14             	mov    0x14(%ebp),%eax
c011c270:	89 10                	mov    %edx,(%eax)
}
c011c272:	c9                   	leave  
c011c273:	c3                   	ret    

c011c274 <bitmap_test>:

// bitmap_test - according index, get the related value (0 OR 1) in the bitmap
bool
bitmap_test(struct bitmap *bitmap, uint32_t index) {
c011c274:	55                   	push   %ebp
c011c275:	89 e5                	mov    %esp,%ebp
c011c277:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c011c27a:	8d 45 f0             	lea    -0x10(%ebp),%eax
c011c27d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011c281:	8d 45 f4             	lea    -0xc(%ebp),%eax
c011c284:	89 44 24 08          	mov    %eax,0x8(%esp)
c011c288:	8b 45 0c             	mov    0xc(%ebp),%eax
c011c28b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011c28f:	8b 45 08             	mov    0x8(%ebp),%eax
c011c292:	89 04 24             	mov    %eax,(%esp)
c011c295:	e8 6a ff ff ff       	call   c011c204 <bitmap_translate>
    return (*word & mask);
c011c29a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c29d:	8b 10                	mov    (%eax),%edx
c011c29f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c2a2:	21 d0                	and    %edx,%eax
}
c011c2a4:	c9                   	leave  
c011c2a5:	c3                   	ret    

c011c2a6 <bitmap_free>:

// bitmap_free - according index, set related bit to 1
void
bitmap_free(struct bitmap *bitmap, uint32_t index) {
c011c2a6:	55                   	push   %ebp
c011c2a7:	89 e5                	mov    %esp,%ebp
c011c2a9:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c011c2ac:	8d 45 f0             	lea    -0x10(%ebp),%eax
c011c2af:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011c2b3:	8d 45 f4             	lea    -0xc(%ebp),%eax
c011c2b6:	89 44 24 08          	mov    %eax,0x8(%esp)
c011c2ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c011c2bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c011c2c1:	8b 45 08             	mov    0x8(%ebp),%eax
c011c2c4:	89 04 24             	mov    %eax,(%esp)
c011c2c7:	e8 38 ff ff ff       	call   c011c204 <bitmap_translate>
    assert(!(*word & mask));
c011c2cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c2cf:	8b 10                	mov    (%eax),%edx
c011c2d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c2d4:	21 d0                	and    %edx,%eax
c011c2d6:	85 c0                	test   %eax,%eax
c011c2d8:	74 24                	je     c011c2fe <bitmap_free+0x58>
c011c2da:	c7 44 24 0c cd 80 12 	movl   $0xc01280cd,0xc(%esp)
c011c2e1:	c0 
c011c2e2:	c7 44 24 08 4c 80 12 	movl   $0xc012804c,0x8(%esp)
c011c2e9:	c0 
c011c2ea:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c011c2f1:	00 
c011c2f2:	c7 04 24 61 80 12 c0 	movl   $0xc0128061,(%esp)
c011c2f9:	e8 18 4f fe ff       	call   c0101216 <__panic>
    *word |= mask;
c011c2fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c301:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011c304:	8b 0a                	mov    (%edx),%ecx
c011c306:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011c309:	09 ca                	or     %ecx,%edx
c011c30b:	89 10                	mov    %edx,(%eax)
}
c011c30d:	c9                   	leave  
c011c30e:	c3                   	ret    

c011c30f <bitmap_destroy>:

// bitmap_destroy - free memory contains bitmap
void
bitmap_destroy(struct bitmap *bitmap) {
c011c30f:	55                   	push   %ebp
c011c310:	89 e5                	mov    %esp,%ebp
c011c312:	83 ec 18             	sub    $0x18,%esp
    kfree(bitmap->map);
c011c315:	8b 45 08             	mov    0x8(%ebp),%eax
c011c318:	8b 40 08             	mov    0x8(%eax),%eax
c011c31b:	89 04 24             	mov    %eax,(%esp)
c011c31e:	e8 a8 e7 fe ff       	call   c010aacb <kfree>
    kfree(bitmap);
c011c323:	8b 45 08             	mov    0x8(%ebp),%eax
c011c326:	89 04 24             	mov    %eax,(%esp)
c011c329:	e8 9d e7 fe ff       	call   c010aacb <kfree>
}
c011c32e:	c9                   	leave  
c011c32f:	c3                   	ret    

c011c330 <bitmap_getdata>:

// bitmap_getdata - return bitmap->map, return the length of bits to len_store
void *
bitmap_getdata(struct bitmap *bitmap, size_t *len_store) {
c011c330:	55                   	push   %ebp
c011c331:	89 e5                	mov    %esp,%ebp
    if (len_store != NULL) {
c011c333:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011c337:	74 12                	je     c011c34b <bitmap_getdata+0x1b>
        *len_store = sizeof(WORD_TYPE) * bitmap->nwords;
c011c339:	8b 45 08             	mov    0x8(%ebp),%eax
c011c33c:	8b 40 04             	mov    0x4(%eax),%eax
c011c33f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c011c346:	8b 45 0c             	mov    0xc(%ebp),%eax
c011c349:	89 10                	mov    %edx,(%eax)
    }
    return bitmap->map;
c011c34b:	8b 45 08             	mov    0x8(%ebp),%eax
c011c34e:	8b 40 08             	mov    0x8(%eax),%eax
}
c011c351:	5d                   	pop    %ebp
c011c352:	c3                   	ret    

c011c353 <sfs_init>:
 *
 * CALL GRAPH:
 *   kern_init-->fs_init-->sfs_init
 */
void
sfs_init(void) {
c011c353:	55                   	push   %ebp
c011c354:	89 e5                	mov    %esp,%ebp
c011c356:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sfs_mount("disk0")) != 0) {
c011c359:	c7 04 24 dd 80 12 c0 	movl   $0xc01280dd,(%esp)
c011c360:	e8 16 09 00 00       	call   c011cc7b <sfs_mount>
c011c365:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011c368:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011c36c:	74 23                	je     c011c391 <sfs_init+0x3e>
        panic("failed: sfs: sfs_mount: %e.\n", ret);
c011c36e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c371:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011c375:	c7 44 24 08 e3 80 12 	movl   $0xc01280e3,0x8(%esp)
c011c37c:	c0 
c011c37d:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c011c384:	00 
c011c385:	c7 04 24 00 81 12 c0 	movl   $0xc0128100,(%esp)
c011c38c:	e8 85 4e fe ff       	call   c0101216 <__panic>
    }
}
c011c391:	c9                   	leave  
c011c392:	c3                   	ret    

c011c393 <sfs_sync>:

/*
 * sfs_sync - sync sfs's superblock and freemap in memroy into disk
 */
static int
sfs_sync(struct fs *fs) {
c011c393:	55                   	push   %ebp
c011c394:	89 e5                	mov    %esp,%ebp
c011c396:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c011c399:	8b 45 08             	mov    0x8(%ebp),%eax
c011c39c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011c39f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011c3a3:	74 0a                	je     c011c3af <sfs_sync+0x1c>
c011c3a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c3a8:	8b 40 6c             	mov    0x6c(%eax),%eax
c011c3ab:	85 c0                	test   %eax,%eax
c011c3ad:	74 24                	je     c011c3d3 <sfs_sync+0x40>
c011c3af:	c7 44 24 0c 14 81 12 	movl   $0xc0128114,0xc(%esp)
c011c3b6:	c0 
c011c3b7:	c7 44 24 08 3d 81 12 	movl   $0xc012813d,0x8(%esp)
c011c3be:	c0 
c011c3bf:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c011c3c6:	00 
c011c3c7:	c7 04 24 52 81 12 c0 	movl   $0xc0128152,(%esp)
c011c3ce:	e8 43 4e fe ff       	call   c0101216 <__panic>
c011c3d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c3d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    lock_sfs_fs(sfs);
c011c3d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c3dc:	89 04 24             	mov    %eax,(%esp)
c011c3df:	e8 69 41 00 00       	call   c012054d <lock_sfs_fs>
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
c011c3e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c3e7:	83 c0 60             	add    $0x60,%eax
c011c3ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011c3ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011c3f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c011c3f3:	e9 a5 00 00 00       	jmp    c011c49d <sfs_sync+0x10a>
            struct sfs_inode *sin = le2sin(le, inode_link);
c011c3f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c3fb:	83 e8 1c             	sub    $0x1c,%eax
c011c3fe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vop_fsync(info2node(sin, sfs_inode));
c011c401:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011c404:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011c407:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011c40a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011c40d:	8b 40 18             	mov    0x18(%eax),%eax
c011c410:	85 c0                	test   %eax,%eax
c011c412:	75 24                	jne    c011c438 <sfs_sync+0xa5>
c011c414:	c7 44 24 0c 68 81 12 	movl   $0xc0128168,0xc(%esp)
c011c41b:	c0 
c011c41c:	c7 44 24 08 3d 81 12 	movl   $0xc012813d,0x8(%esp)
c011c423:	c0 
c011c424:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
c011c42b:	00 
c011c42c:	c7 04 24 52 81 12 c0 	movl   $0xc0128152,(%esp)
c011c433:	e8 de 4d fe ff       	call   c0101216 <__panic>
c011c438:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c011c43c:	74 17                	je     c011c455 <sfs_sync+0xc2>
c011c43e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011c441:	8b 40 3c             	mov    0x3c(%eax),%eax
c011c444:	85 c0                	test   %eax,%eax
c011c446:	74 0d                	je     c011c455 <sfs_sync+0xc2>
c011c448:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011c44b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011c44e:	8b 40 18             	mov    0x18(%eax),%eax
c011c451:	85 c0                	test   %eax,%eax
c011c453:	75 24                	jne    c011c479 <sfs_sync+0xe6>
c011c455:	c7 44 24 0c 8c 81 12 	movl   $0xc012818c,0xc(%esp)
c011c45c:	c0 
c011c45d:	c7 44 24 08 3d 81 12 	movl   $0xc012813d,0x8(%esp)
c011c464:	c0 
c011c465:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
c011c46c:	00 
c011c46d:	c7 04 24 52 81 12 c0 	movl   $0xc0128152,(%esp)
c011c474:	e8 9d 4d fe ff       	call   c0101216 <__panic>
c011c479:	c7 44 24 04 da 81 12 	movl   $0xc01281da,0x4(%esp)
c011c480:	c0 
c011c481:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011c484:	89 04 24             	mov    %eax,(%esp)
c011c487:	e8 ac d4 ff ff       	call   c0119938 <inode_check>
c011c48c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011c48f:	8b 40 3c             	mov    0x3c(%eax),%eax
c011c492:	8b 40 18             	mov    0x18(%eax),%eax
c011c495:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011c498:	89 14 24             	mov    %edx,(%esp)
c011c49b:	ff d0                	call   *%eax
c011c49d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c4a0:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011c4a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011c4a6:	8b 40 04             	mov    0x4(%eax),%eax
sfs_sync(struct fs *fs) {
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    lock_sfs_fs(sfs);
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
        while ((le = list_next(le)) != list) {
c011c4a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011c4ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c4af:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c011c4b2:	0f 85 40 ff ff ff    	jne    c011c3f8 <sfs_sync+0x65>
            struct sfs_inode *sin = le2sin(le, inode_link);
            vop_fsync(info2node(sin, sfs_inode));
        }
    }
    unlock_sfs_fs(sfs);
c011c4b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c4bb:	89 04 24             	mov    %eax,(%esp)
c011c4be:	e8 b6 40 00 00       	call   c0120579 <unlock_sfs_fs>

    int ret;
    if (sfs->super_dirty) {
c011c4c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c4c6:	8b 40 34             	mov    0x34(%eax),%eax
c011c4c9:	85 c0                	test   %eax,%eax
c011c4cb:	74 50                	je     c011c51d <sfs_sync+0x18a>
        sfs->super_dirty = 0;
c011c4cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c4d0:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        if ((ret = sfs_sync_super(sfs)) != 0) {
c011c4d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c4da:	89 04 24             	mov    %eax,(%esp)
c011c4dd:	e8 fd 3e 00 00       	call   c01203df <sfs_sync_super>
c011c4e2:	89 45 dc             	mov    %eax,-0x24(%ebp)
c011c4e5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011c4e9:	74 0f                	je     c011c4fa <sfs_sync+0x167>
            sfs->super_dirty = 1;
c011c4eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c4ee:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c011c4f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011c4f8:	eb 28                	jmp    c011c522 <sfs_sync+0x18f>
        }
        if ((ret = sfs_sync_freemap(sfs)) != 0) {
c011c4fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c4fd:	89 04 24             	mov    %eax,(%esp)
c011c500:	e8 66 3f 00 00       	call   c012046b <sfs_sync_freemap>
c011c505:	89 45 dc             	mov    %eax,-0x24(%ebp)
c011c508:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011c50c:	74 0f                	je     c011c51d <sfs_sync+0x18a>
            sfs->super_dirty = 1;
c011c50e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c511:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c011c518:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011c51b:	eb 05                	jmp    c011c522 <sfs_sync+0x18f>
        }
    }
    return 0;
c011c51d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011c522:	c9                   	leave  
c011c523:	c3                   	ret    

c011c524 <sfs_get_root>:

/*
 * sfs_get_root - get the root directory inode  from disk (SFS_BLKN_ROOT,1)
 */
static struct inode *
sfs_get_root(struct fs *fs) {
c011c524:	55                   	push   %ebp
c011c525:	89 e5                	mov    %esp,%ebp
c011c527:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    int ret;
    if ((ret = sfs_load_inode(fsop_info(fs, sfs), &node, SFS_BLKN_ROOT)) != 0) {
c011c52a:	8b 45 08             	mov    0x8(%ebp),%eax
c011c52d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011c530:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011c534:	74 0a                	je     c011c540 <sfs_get_root+0x1c>
c011c536:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c539:	8b 40 6c             	mov    0x6c(%eax),%eax
c011c53c:	85 c0                	test   %eax,%eax
c011c53e:	74 24                	je     c011c564 <sfs_get_root+0x40>
c011c540:	c7 44 24 0c 14 81 12 	movl   $0xc0128114,0xc(%esp)
c011c547:	c0 
c011c548:	c7 44 24 08 3d 81 12 	movl   $0xc012813d,0x8(%esp)
c011c54f:	c0 
c011c550:	c7 44 24 04 36 00 00 	movl   $0x36,0x4(%esp)
c011c557:	00 
c011c558:	c7 04 24 52 81 12 c0 	movl   $0xc0128152,(%esp)
c011c55f:	e8 b2 4c fe ff       	call   c0101216 <__panic>
c011c564:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c567:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011c56e:	00 
c011c56f:	8d 55 ec             	lea    -0x14(%ebp),%edx
c011c572:	89 54 24 04          	mov    %edx,0x4(%esp)
c011c576:	89 04 24             	mov    %eax,(%esp)
c011c579:	e8 ed 0b 00 00       	call   c011d16b <sfs_load_inode>
c011c57e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011c581:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011c585:	74 23                	je     c011c5aa <sfs_get_root+0x86>
        panic("load sfs root failed: %e", ret);
c011c587:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c58a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011c58e:	c7 44 24 08 e0 81 12 	movl   $0xc01281e0,0x8(%esp)
c011c595:	c0 
c011c596:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c011c59d:	00 
c011c59e:	c7 04 24 52 81 12 c0 	movl   $0xc0128152,(%esp)
c011c5a5:	e8 6c 4c fe ff       	call   c0101216 <__panic>
    }
    return node;
c011c5aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c011c5ad:	c9                   	leave  
c011c5ae:	c3                   	ret    

c011c5af <sfs_unmount>:

/*
 * sfs_unmount - unmount sfs, and free the memorys contain sfs->freemap/sfs_buffer/hash_liskt and sfs itself.
 */
static int
sfs_unmount(struct fs *fs) {
c011c5af:	55                   	push   %ebp
c011c5b0:	89 e5                	mov    %esp,%ebp
c011c5b2:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c011c5b5:	8b 45 08             	mov    0x8(%ebp),%eax
c011c5b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011c5bb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011c5bf:	74 0a                	je     c011c5cb <sfs_unmount+0x1c>
c011c5c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c5c4:	8b 40 6c             	mov    0x6c(%eax),%eax
c011c5c7:	85 c0                	test   %eax,%eax
c011c5c9:	74 24                	je     c011c5ef <sfs_unmount+0x40>
c011c5cb:	c7 44 24 0c 14 81 12 	movl   $0xc0128114,0xc(%esp)
c011c5d2:	c0 
c011c5d3:	c7 44 24 08 3d 81 12 	movl   $0xc012813d,0x8(%esp)
c011c5da:	c0 
c011c5db:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c011c5e2:	00 
c011c5e3:	c7 04 24 52 81 12 c0 	movl   $0xc0128152,(%esp)
c011c5ea:	e8 27 4c fe ff       	call   c0101216 <__panic>
c011c5ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c5f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!list_empty(&(sfs->inode_list))) {
c011c5f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c5f8:	83 c0 60             	add    $0x60,%eax
c011c5fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c011c5fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c601:	8b 40 04             	mov    0x4(%eax),%eax
c011c604:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c011c607:	0f 94 c0             	sete   %al
c011c60a:	0f b6 c0             	movzbl %al,%eax
c011c60d:	85 c0                	test   %eax,%eax
c011c60f:	75 07                	jne    c011c618 <sfs_unmount+0x69>
        return -E_BUSY;
c011c611:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c011c616:	eb 68                	jmp    c011c680 <sfs_unmount+0xd1>
    }
    assert(!sfs->super_dirty);
c011c618:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c61b:	8b 40 34             	mov    0x34(%eax),%eax
c011c61e:	85 c0                	test   %eax,%eax
c011c620:	74 24                	je     c011c646 <sfs_unmount+0x97>
c011c622:	c7 44 24 0c f9 81 12 	movl   $0xc01281f9,0xc(%esp)
c011c629:	c0 
c011c62a:	c7 44 24 08 3d 81 12 	movl   $0xc012813d,0x8(%esp)
c011c631:	c0 
c011c632:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c011c639:	00 
c011c63a:	c7 04 24 52 81 12 c0 	movl   $0xc0128152,(%esp)
c011c641:	e8 d0 4b fe ff       	call   c0101216 <__panic>
    bitmap_destroy(sfs->freemap);
c011c646:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c649:	8b 40 30             	mov    0x30(%eax),%eax
c011c64c:	89 04 24             	mov    %eax,(%esp)
c011c64f:	e8 bb fc ff ff       	call   c011c30f <bitmap_destroy>
    kfree(sfs->sfs_buffer);
c011c654:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c657:	8b 40 38             	mov    0x38(%eax),%eax
c011c65a:	89 04 24             	mov    %eax,(%esp)
c011c65d:	e8 69 e4 fe ff       	call   c010aacb <kfree>
    kfree(sfs->hash_list);
c011c662:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c665:	8b 40 68             	mov    0x68(%eax),%eax
c011c668:	89 04 24             	mov    %eax,(%esp)
c011c66b:	e8 5b e4 fe ff       	call   c010aacb <kfree>
    kfree(sfs);
c011c670:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c673:	89 04 24             	mov    %eax,(%esp)
c011c676:	e8 50 e4 fe ff       	call   c010aacb <kfree>
    return 0;
c011c67b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011c680:	c9                   	leave  
c011c681:	c3                   	ret    

c011c682 <sfs_cleanup>:
 * sfs_cleanup - when sfs failed, then should call this function to sync sfs by calling sfs_sync
 *
 * NOTICE: nouse now.
 */
static void
sfs_cleanup(struct fs *fs) {
c011c682:	55                   	push   %ebp
c011c683:	89 e5                	mov    %esp,%ebp
c011c685:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c011c688:	8b 45 08             	mov    0x8(%ebp),%eax
c011c68b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011c68e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011c692:	74 0a                	je     c011c69e <sfs_cleanup+0x1c>
c011c694:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c697:	8b 40 6c             	mov    0x6c(%eax),%eax
c011c69a:	85 c0                	test   %eax,%eax
c011c69c:	74 24                	je     c011c6c2 <sfs_cleanup+0x40>
c011c69e:	c7 44 24 0c 14 81 12 	movl   $0xc0128114,0xc(%esp)
c011c6a5:	c0 
c011c6a6:	c7 44 24 08 3d 81 12 	movl   $0xc012813d,0x8(%esp)
c011c6ad:	c0 
c011c6ae:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c011c6b5:	00 
c011c6b6:	c7 04 24 52 81 12 c0 	movl   $0xc0128152,(%esp)
c011c6bd:	e8 54 4b fe ff       	call   c0101216 <__panic>
c011c6c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c6c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
c011c6c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011c6cb:	8b 40 04             	mov    0x4(%eax),%eax
c011c6ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011c6d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011c6d4:	8b 40 08             	mov    0x8(%eax),%eax
c011c6d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
c011c6da:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011c6dd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011c6e0:	89 d1                	mov    %edx,%ecx
c011c6e2:	29 c1                	sub    %eax,%ecx
c011c6e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011c6e7:	8d 50 0c             	lea    0xc(%eax),%edx
c011c6ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011c6ed:	89 44 24 10          	mov    %eax,0x10(%esp)
c011c6f1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011c6f4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011c6f8:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c011c6fc:	89 54 24 04          	mov    %edx,0x4(%esp)
c011c700:	c7 04 24 0c 82 12 c0 	movl   $0xc012820c,(%esp)
c011c707:	e8 e7 3c fe ff       	call   c01003f3 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c011c70c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c011c713:	eb 1d                	jmp    c011c732 <sfs_cleanup+0xb0>
        if ((ret = fsop_sync(fs)) == 0) {
c011c715:	8b 45 08             	mov    0x8(%ebp),%eax
c011c718:	8b 40 70             	mov    0x70(%eax),%eax
c011c71b:	8b 55 08             	mov    0x8(%ebp),%edx
c011c71e:	89 14 24             	mov    %edx,(%esp)
c011c721:	ff d0                	call   *%eax
c011c723:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011c726:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011c72a:	75 02                	jne    c011c72e <sfs_cleanup+0xac>
            break;
c011c72c:	eb 0a                	jmp    c011c738 <sfs_cleanup+0xb6>
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c011c72e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011c732:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c011c736:	7e dd                	jle    c011c715 <sfs_cleanup+0x93>
        if ((ret = fsop_sync(fs)) == 0) {
            break;
        }
    }
    if (ret != 0) {
c011c738:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011c73c:	74 2d                	je     c011c76b <sfs_cleanup+0xe9>
        warn("sfs: sync error: '%s': %e.\n", sfs->super.info, ret);
c011c73e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011c741:	8d 50 0c             	lea    0xc(%eax),%edx
c011c744:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c747:	89 44 24 10          	mov    %eax,0x10(%esp)
c011c74b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011c74f:	c7 44 24 08 2b 82 12 	movl   $0xc012822b,0x8(%esp)
c011c756:	c0 
c011c757:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c011c75e:	00 
c011c75f:	c7 04 24 52 81 12 c0 	movl   $0xc0128152,(%esp)
c011c766:	e8 28 4b fe ff       	call   c0101293 <__warn>
    }
}
c011c76b:	c9                   	leave  
c011c76c:	c3                   	ret    

c011c76d <sfs_init_read>:
 *
 *      (1) init iobuf
 *      (2) read dev into iobuf
 */
static int
sfs_init_read(struct device *dev, uint32_t blkno, void *blk_buffer) {
c011c76d:	55                   	push   %ebp
c011c76e:	89 e5                	mov    %esp,%ebp
c011c770:	83 ec 38             	sub    $0x38,%esp
    struct iobuf __iob, *iob = iobuf_init(&__iob, blk_buffer, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c011c773:	8b 45 0c             	mov    0xc(%ebp),%eax
c011c776:	c1 e0 0c             	shl    $0xc,%eax
c011c779:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011c77d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c011c784:	00 
c011c785:	8b 45 10             	mov    0x10(%ebp),%eax
c011c788:	89 44 24 04          	mov    %eax,0x4(%esp)
c011c78c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c011c78f:	89 04 24             	mov    %eax,(%esp)
c011c792:	e8 4d 7c ff ff       	call   c01143e4 <iobuf_init>
c011c797:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(dev, iob, 0);
c011c79a:	8b 45 08             	mov    0x8(%ebp),%eax
c011c79d:	8b 40 10             	mov    0x10(%eax),%eax
c011c7a0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011c7a7:	00 
c011c7a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011c7ab:	89 54 24 04          	mov    %edx,0x4(%esp)
c011c7af:	8b 55 08             	mov    0x8(%ebp),%edx
c011c7b2:	89 14 24             	mov    %edx,(%esp)
c011c7b5:	ff d0                	call   *%eax
}
c011c7b7:	c9                   	leave  
c011c7b8:	c3                   	ret    

c011c7b9 <sfs_init_freemap>:
 *
 *      (1) get data addr in bitmap
 *      (2) read dev into iobuf
 */
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
c011c7b9:	55                   	push   %ebp
c011c7ba:	89 e5                	mov    %esp,%ebp
c011c7bc:	83 ec 28             	sub    $0x28,%esp
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
c011c7bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
c011c7c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c011c7c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c011c7c9:	89 04 24             	mov    %eax,(%esp)
c011c7cc:	e8 5f fb ff ff       	call   c011c330 <bitmap_getdata>
c011c7d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
c011c7d4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011c7d8:	74 0f                	je     c011c7e9 <sfs_init_freemap+0x30>
c011c7da:	8b 45 14             	mov    0x14(%ebp),%eax
c011c7dd:	c1 e0 0c             	shl    $0xc,%eax
c011c7e0:	89 c2                	mov    %eax,%edx
c011c7e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011c7e5:	39 c2                	cmp    %eax,%edx
c011c7e7:	74 24                	je     c011c80d <sfs_init_freemap+0x54>
c011c7e9:	c7 44 24 0c 48 82 12 	movl   $0xc0128248,0xc(%esp)
c011c7f0:	c0 
c011c7f1:	c7 44 24 08 3d 81 12 	movl   $0xc012813d,0x8(%esp)
c011c7f8:	c0 
c011c7f9:	c7 44 24 04 83 00 00 	movl   $0x83,0x4(%esp)
c011c800:	00 
c011c801:	c7 04 24 52 81 12 c0 	movl   $0xc0128152,(%esp)
c011c808:	e8 09 4a fe ff       	call   c0101216 <__panic>
    while (nblks != 0) {
c011c80d:	eb 36                	jmp    c011c845 <sfs_init_freemap+0x8c>
        int ret;
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
c011c80f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011c812:	89 44 24 08          	mov    %eax,0x8(%esp)
c011c816:	8b 45 10             	mov    0x10(%ebp),%eax
c011c819:	89 44 24 04          	mov    %eax,0x4(%esp)
c011c81d:	8b 45 08             	mov    0x8(%ebp),%eax
c011c820:	89 04 24             	mov    %eax,(%esp)
c011c823:	e8 45 ff ff ff       	call   c011c76d <sfs_init_read>
c011c828:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011c82b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011c82f:	74 05                	je     c011c836 <sfs_init_freemap+0x7d>
            return ret;
c011c831:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011c834:	eb 1a                	jmp    c011c850 <sfs_init_freemap+0x97>
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
c011c836:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c011c83a:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c011c83e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
    while (nblks != 0) {
c011c845:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011c849:	75 c4                	jne    c011c80f <sfs_init_freemap+0x56>
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
            return ret;
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
    }
    return 0;
c011c84b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011c850:	c9                   	leave  
c011c851:	c3                   	ret    

c011c852 <sfs_do_mount>:
 *
 * @dev:        the block device contains sfs file system
 * @fs_store:   the fs struct in memroy
 */
static int
sfs_do_mount(struct device *dev, struct fs **fs_store) {
c011c852:	55                   	push   %ebp
c011c853:	89 e5                	mov    %esp,%ebp
c011c855:	83 ec 78             	sub    $0x78,%esp
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_super));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_inode));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_entry));

    if (dev->d_blocksize != SFS_BLKSIZE) {
c011c858:	8b 45 08             	mov    0x8(%ebp),%eax
c011c85b:	8b 40 04             	mov    0x4(%eax),%eax
c011c85e:	3d 00 10 00 00       	cmp    $0x1000,%eax
c011c863:	74 0a                	je     c011c86f <sfs_do_mount+0x1d>
        return -E_NA_DEV;
c011c865:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
c011c86a:	e9 0a 04 00 00       	jmp    c011cc79 <sfs_do_mount+0x427>
    }

    /* allocate fs structure */
    struct fs *fs;
    if ((fs = alloc_fs(sfs)) == NULL) {
c011c86f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c011c876:	e8 b0 d1 ff ff       	call   c0119a2b <__alloc_fs>
c011c87b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011c87e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011c882:	75 0a                	jne    c011c88e <sfs_do_mount+0x3c>
        return -E_NO_MEM;
c011c884:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c011c889:	e9 eb 03 00 00       	jmp    c011cc79 <sfs_do_mount+0x427>
    }
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c011c88e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011c891:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011c894:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011c898:	74 0a                	je     c011c8a4 <sfs_do_mount+0x52>
c011c89a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011c89d:	8b 40 6c             	mov    0x6c(%eax),%eax
c011c8a0:	85 c0                	test   %eax,%eax
c011c8a2:	74 24                	je     c011c8c8 <sfs_do_mount+0x76>
c011c8a4:	c7 44 24 0c 14 81 12 	movl   $0xc0128114,0xc(%esp)
c011c8ab:	c0 
c011c8ac:	c7 44 24 08 3d 81 12 	movl   $0xc012813d,0x8(%esp)
c011c8b3:	c0 
c011c8b4:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c011c8bb:	00 
c011c8bc:	c7 04 24 52 81 12 c0 	movl   $0xc0128152,(%esp)
c011c8c3:	e8 4e 49 fe ff       	call   c0101216 <__panic>
c011c8c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011c8cb:	89 45 e0             	mov    %eax,-0x20(%ebp)
    sfs->dev = dev;
c011c8ce:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011c8d1:	8b 55 08             	mov    0x8(%ebp),%edx
c011c8d4:	89 50 2c             	mov    %edx,0x2c(%eax)

    int ret = -E_NO_MEM;
c011c8d7:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
c011c8de:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c011c8e5:	e8 c6 e1 fe ff       	call   c010aab0 <kmalloc>
c011c8ea:	89 45 dc             	mov    %eax,-0x24(%ebp)
c011c8ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011c8f0:	8b 55 dc             	mov    -0x24(%ebp),%edx
c011c8f3:	89 50 38             	mov    %edx,0x38(%eax)
c011c8f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011c8f9:	8b 40 38             	mov    0x38(%eax),%eax
c011c8fc:	85 c0                	test   %eax,%eax
c011c8fe:	75 05                	jne    c011c905 <sfs_do_mount+0xb3>
        goto failed_cleanup_fs;
c011c900:	e9 66 03 00 00       	jmp    c011cc6b <sfs_do_mount+0x419>
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
c011c905:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011c908:	89 44 24 08          	mov    %eax,0x8(%esp)
c011c90c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011c913:	00 
c011c914:	8b 45 08             	mov    0x8(%ebp),%eax
c011c917:	89 04 24             	mov    %eax,(%esp)
c011c91a:	e8 4e fe ff ff       	call   c011c76d <sfs_init_read>
c011c91f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011c922:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011c926:	74 05                	je     c011c92d <sfs_do_mount+0xdb>
        goto failed_cleanup_sfs_buffer;
c011c928:	e9 33 03 00 00       	jmp    c011cc60 <sfs_do_mount+0x40e>
    }

    ret = -E_INVAL;
c011c92d:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct sfs_super *super = sfs_buffer;
c011c934:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011c937:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (super->magic != SFS_MAGIC) {
c011c93a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011c93d:	8b 00                	mov    (%eax),%eax
c011c93f:	3d 2a be 8d 2f       	cmp    $0x2f8dbe2a,%eax
c011c944:	74 22                	je     c011c968 <sfs_do_mount+0x116>
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
c011c946:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011c949:	8b 00                	mov    (%eax),%eax
c011c94b:	c7 44 24 08 2a be 8d 	movl   $0x2f8dbe2a,0x8(%esp)
c011c952:	2f 
c011c953:	89 44 24 04          	mov    %eax,0x4(%esp)
c011c957:	c7 04 24 74 82 12 c0 	movl   $0xc0128274,(%esp)
c011c95e:	e8 90 3a fe ff       	call   c01003f3 <cprintf>
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
c011c963:	e9 f8 02 00 00       	jmp    c011cc60 <sfs_do_mount+0x40e>
    }
    if (super->blocks > dev->d_blocks) {
c011c968:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011c96b:	8b 50 04             	mov    0x4(%eax),%edx
c011c96e:	8b 45 08             	mov    0x8(%ebp),%eax
c011c971:	8b 00                	mov    (%eax),%eax
c011c973:	39 c2                	cmp    %eax,%edx
c011c975:	76 24                	jbe    c011c99b <sfs_do_mount+0x149>
        cprintf("sfs: fs has %u blocks, device has %u blocks.\n",
c011c977:	8b 45 08             	mov    0x8(%ebp),%eax
c011c97a:	8b 10                	mov    (%eax),%edx
c011c97c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011c97f:	8b 40 04             	mov    0x4(%eax),%eax
c011c982:	89 54 24 08          	mov    %edx,0x8(%esp)
c011c986:	89 44 24 04          	mov    %eax,0x4(%esp)
c011c98a:	c7 04 24 ac 82 12 c0 	movl   $0xc01282ac,(%esp)
c011c991:	e8 5d 3a fe ff       	call   c01003f3 <cprintf>
                super->blocks, dev->d_blocks);
        goto failed_cleanup_sfs_buffer;
c011c996:	e9 c5 02 00 00       	jmp    c011cc60 <sfs_do_mount+0x40e>
    }
    super->info[SFS_MAX_INFO_LEN] = '\0';
c011c99b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011c99e:	c6 40 2b 00          	movb   $0x0,0x2b(%eax)
    sfs->super = *super;
c011c9a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011c9a5:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011c9a8:	8b 0a                	mov    (%edx),%ecx
c011c9aa:	89 08                	mov    %ecx,(%eax)
c011c9ac:	8b 4a 04             	mov    0x4(%edx),%ecx
c011c9af:	89 48 04             	mov    %ecx,0x4(%eax)
c011c9b2:	8b 4a 08             	mov    0x8(%edx),%ecx
c011c9b5:	89 48 08             	mov    %ecx,0x8(%eax)
c011c9b8:	8b 4a 0c             	mov    0xc(%edx),%ecx
c011c9bb:	89 48 0c             	mov    %ecx,0xc(%eax)
c011c9be:	8b 4a 10             	mov    0x10(%edx),%ecx
c011c9c1:	89 48 10             	mov    %ecx,0x10(%eax)
c011c9c4:	8b 4a 14             	mov    0x14(%edx),%ecx
c011c9c7:	89 48 14             	mov    %ecx,0x14(%eax)
c011c9ca:	8b 4a 18             	mov    0x18(%edx),%ecx
c011c9cd:	89 48 18             	mov    %ecx,0x18(%eax)
c011c9d0:	8b 4a 1c             	mov    0x1c(%edx),%ecx
c011c9d3:	89 48 1c             	mov    %ecx,0x1c(%eax)
c011c9d6:	8b 4a 20             	mov    0x20(%edx),%ecx
c011c9d9:	89 48 20             	mov    %ecx,0x20(%eax)
c011c9dc:	8b 4a 24             	mov    0x24(%edx),%ecx
c011c9df:	89 48 24             	mov    %ecx,0x24(%eax)
c011c9e2:	8b 52 28             	mov    0x28(%edx),%edx
c011c9e5:	89 50 28             	mov    %edx,0x28(%eax)

    ret = -E_NO_MEM;
c011c9e8:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
c011c9ef:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
c011c9f6:	e8 b5 e0 fe ff       	call   c010aab0 <kmalloc>
c011c9fb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c011c9fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011ca01:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c011ca04:	89 50 68             	mov    %edx,0x68(%eax)
c011ca07:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011ca0a:	8b 40 68             	mov    0x68(%eax),%eax
c011ca0d:	85 c0                	test   %eax,%eax
c011ca0f:	75 05                	jne    c011ca16 <sfs_do_mount+0x1c4>
        goto failed_cleanup_sfs_buffer;
c011ca11:	e9 4a 02 00 00       	jmp    c011cc60 <sfs_do_mount+0x40e>
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c011ca16:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c011ca1d:	eb 2a                	jmp    c011ca49 <sfs_do_mount+0x1f7>
        list_init(hash_list + i);
c011ca1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011ca22:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c011ca29:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011ca2c:	01 d0                	add    %edx,%eax
c011ca2e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c011ca31:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c011ca34:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c011ca37:	89 50 04             	mov    %edx,0x4(%eax)
c011ca3a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c011ca3d:	8b 50 04             	mov    0x4(%eax),%edx
c011ca40:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c011ca43:	89 10                	mov    %edx,(%eax)
    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c011ca45:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c011ca49:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c011ca50:	76 cd                	jbe    c011ca1f <sfs_do_mount+0x1cd>
        list_init(hash_list + i);
    }

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
c011ca52:	c7 45 d0 00 80 00 00 	movl   $0x8000,-0x30(%ebp)
c011ca59:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011ca5c:	8b 50 04             	mov    0x4(%eax),%edx
c011ca5f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011ca62:	01 d0                	add    %edx,%eax
c011ca64:	83 e8 01             	sub    $0x1,%eax
c011ca67:	89 45 cc             	mov    %eax,-0x34(%ebp)
c011ca6a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011ca6d:	ba 00 00 00 00       	mov    $0x0,%edx
c011ca72:	f7 75 d0             	divl   -0x30(%ebp)
c011ca75:	89 d0                	mov    %edx,%eax
c011ca77:	8b 55 cc             	mov    -0x34(%ebp),%edx
c011ca7a:	29 c2                	sub    %eax,%edx
c011ca7c:	89 d0                	mov    %edx,%eax
c011ca7e:	89 45 c8             	mov    %eax,-0x38(%ebp)
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
c011ca81:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011ca84:	89 04 24             	mov    %eax,(%esp)
c011ca87:	e8 e0 f4 ff ff       	call   c011bf6c <bitmap_create>
c011ca8c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c011ca8f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011ca92:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c011ca95:	89 50 30             	mov    %edx,0x30(%eax)
c011ca98:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011ca9b:	8b 40 30             	mov    0x30(%eax),%eax
c011ca9e:	85 c0                	test   %eax,%eax
c011caa0:	75 05                	jne    c011caa7 <sfs_do_mount+0x255>
        goto failed_cleanup_hash_list;
c011caa2:	e9 ae 01 00 00       	jmp    c011cc55 <sfs_do_mount+0x403>
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
c011caa7:	c7 45 c0 00 80 00 00 	movl   $0x8000,-0x40(%ebp)
c011caae:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011cab1:	8b 50 04             	mov    0x4(%eax),%edx
c011cab4:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011cab7:	01 d0                	add    %edx,%eax
c011cab9:	83 e8 01             	sub    $0x1,%eax
c011cabc:	ba 00 00 00 00       	mov    $0x0,%edx
c011cac1:	f7 75 c0             	divl   -0x40(%ebp)
c011cac4:	89 45 bc             	mov    %eax,-0x44(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
c011cac7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011caca:	89 44 24 10          	mov    %eax,0x10(%esp)
c011cace:	8b 45 bc             	mov    -0x44(%ebp),%eax
c011cad1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011cad5:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c011cadc:	00 
c011cadd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011cae0:	89 44 24 04          	mov    %eax,0x4(%esp)
c011cae4:	8b 45 08             	mov    0x8(%ebp),%eax
c011cae7:	89 04 24             	mov    %eax,(%esp)
c011caea:	e8 ca fc ff ff       	call   c011c7b9 <sfs_init_freemap>
c011caef:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011caf2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011caf6:	74 11                	je     c011cb09 <sfs_do_mount+0x2b7>
        goto failed_cleanup_freemap;
c011caf8:	90                   	nop
    fs->fs_cleanup = sfs_cleanup;
    *fs_store = fs;
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
c011caf9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011cafc:	89 04 24             	mov    %eax,(%esp)
c011caff:	e8 0b f8 ff ff       	call   c011c30f <bitmap_destroy>
c011cb04:	e9 4c 01 00 00       	jmp    c011cc55 <sfs_do_mount+0x403>
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
c011cb09:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011cb0c:	8b 40 04             	mov    0x4(%eax),%eax
c011cb0f:	89 45 b8             	mov    %eax,-0x48(%ebp)
c011cb12:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (i = 0; i < freemap_size_nbits; i ++) {
c011cb19:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c011cb20:	eb 1e                	jmp    c011cb40 <sfs_do_mount+0x2ee>
        if (bitmap_test(freemap, i)) {
c011cb22:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011cb25:	89 44 24 04          	mov    %eax,0x4(%esp)
c011cb29:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011cb2c:	89 04 24             	mov    %eax,(%esp)
c011cb2f:	e8 40 f7 ff ff       	call   c011c274 <bitmap_test>
c011cb34:	85 c0                	test   %eax,%eax
c011cb36:	74 04                	je     c011cb3c <sfs_do_mount+0x2ea>
            unused_blocks ++;
c011cb38:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
    for (i = 0; i < freemap_size_nbits; i ++) {
c011cb3c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c011cb40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011cb43:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c011cb46:	72 da                	jb     c011cb22 <sfs_do_mount+0x2d0>
        if (bitmap_test(freemap, i)) {
            unused_blocks ++;
        }
    }
    assert(unused_blocks == sfs->super.unused_blocks);
c011cb48:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011cb4b:	8b 40 08             	mov    0x8(%eax),%eax
c011cb4e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c011cb51:	74 24                	je     c011cb77 <sfs_do_mount+0x325>
c011cb53:	c7 44 24 0c dc 82 12 	movl   $0xc01282dc,0xc(%esp)
c011cb5a:	c0 
c011cb5b:	c7 44 24 08 3d 81 12 	movl   $0xc012813d,0x8(%esp)
c011cb62:	c0 
c011cb63:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c011cb6a:	00 
c011cb6b:	c7 04 24 52 81 12 c0 	movl   $0xc0128152,(%esp)
c011cb72:	e8 9f 46 fe ff       	call   c0101216 <__panic>

    /* and other fields */
    sfs->super_dirty = 0;
c011cb77:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011cb7a:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    sem_init(&(sfs->fs_sem), 1);
c011cb81:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011cb84:	83 c0 3c             	add    $0x3c,%eax
c011cb87:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c011cb8e:	00 
c011cb8f:	89 04 24             	mov    %eax,(%esp)
c011cb92:	e8 b7 5e ff ff       	call   c0112a4e <sem_init>
    sem_init(&(sfs->io_sem), 1);
c011cb97:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011cb9a:	83 c0 48             	add    $0x48,%eax
c011cb9d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c011cba4:	00 
c011cba5:	89 04 24             	mov    %eax,(%esp)
c011cba8:	e8 a1 5e ff ff       	call   c0112a4e <sem_init>
    sem_init(&(sfs->mutex_sem), 1);
c011cbad:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011cbb0:	83 c0 54             	add    $0x54,%eax
c011cbb3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c011cbba:	00 
c011cbbb:	89 04 24             	mov    %eax,(%esp)
c011cbbe:	e8 8b 5e ff ff       	call   c0112a4e <sem_init>
    list_init(&(sfs->inode_list));
c011cbc3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011cbc6:	83 c0 60             	add    $0x60,%eax
c011cbc9:	89 45 b0             	mov    %eax,-0x50(%ebp)
c011cbcc:	8b 45 b0             	mov    -0x50(%ebp),%eax
c011cbcf:	8b 55 b0             	mov    -0x50(%ebp),%edx
c011cbd2:	89 50 04             	mov    %edx,0x4(%eax)
c011cbd5:	8b 45 b0             	mov    -0x50(%ebp),%eax
c011cbd8:	8b 50 04             	mov    0x4(%eax),%edx
c011cbdb:	8b 45 b0             	mov    -0x50(%ebp),%eax
c011cbde:	89 10                	mov    %edx,(%eax)
    cprintf("\n8.简化文件系统 磁盘(已使用块/未使用块/总块)\n");
c011cbe0:	c7 04 24 08 83 12 c0 	movl   $0xc0128308,(%esp)
c011cbe7:	e8 07 38 fe ff       	call   c01003f3 <cprintf>
    cprintf("sfs: mount: '%s' (%d/%d/%d)\n", sfs->super.info,
c011cbec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011cbef:	8b 55 b8             	mov    -0x48(%ebp),%edx
c011cbf2:	89 d1                	mov    %edx,%ecx
c011cbf4:	29 c1                	sub    %eax,%ecx
c011cbf6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011cbf9:	8d 50 0c             	lea    0xc(%eax),%edx
c011cbfc:	8b 45 b8             	mov    -0x48(%ebp),%eax
c011cbff:	89 44 24 10          	mov    %eax,0x10(%esp)
c011cc03:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011cc06:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011cc0a:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c011cc0e:	89 54 24 04          	mov    %edx,0x4(%esp)
c011cc12:	c7 04 24 48 83 12 c0 	movl   $0xc0128348,(%esp)
c011cc19:	e8 d5 37 fe ff       	call   c01003f3 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);

    /* link addr of sync/get_root/unmount/cleanup funciton  fs's function pointers*/
    fs->fs_sync = sfs_sync;
c011cc1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011cc21:	c7 40 70 93 c3 11 c0 	movl   $0xc011c393,0x70(%eax)
    fs->fs_get_root = sfs_get_root;
c011cc28:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011cc2b:	c7 40 74 24 c5 11 c0 	movl   $0xc011c524,0x74(%eax)
    fs->fs_unmount = sfs_unmount;
c011cc32:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011cc35:	c7 40 78 af c5 11 c0 	movl   $0xc011c5af,0x78(%eax)
    fs->fs_cleanup = sfs_cleanup;
c011cc3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011cc3f:	c7 40 7c 82 c6 11 c0 	movl   $0xc011c682,0x7c(%eax)
    *fs_store = fs;
c011cc46:	8b 45 0c             	mov    0xc(%ebp),%eax
c011cc49:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011cc4c:	89 10                	mov    %edx,(%eax)
    return 0;
c011cc4e:	b8 00 00 00 00       	mov    $0x0,%eax
c011cc53:	eb 24                	jmp    c011cc79 <sfs_do_mount+0x427>

failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
c011cc55:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011cc58:	89 04 24             	mov    %eax,(%esp)
c011cc5b:	e8 6b de fe ff       	call   c010aacb <kfree>
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
c011cc60:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011cc63:	89 04 24             	mov    %eax,(%esp)
c011cc66:	e8 60 de fe ff       	call   c010aacb <kfree>
failed_cleanup_fs:
    kfree(fs);
c011cc6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011cc6e:	89 04 24             	mov    %eax,(%esp)
c011cc71:	e8 55 de fe ff       	call   c010aacb <kfree>
    return ret;
c011cc76:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011cc79:	c9                   	leave  
c011cc7a:	c3                   	ret    

c011cc7b <sfs_mount>:

int
sfs_mount(const char *devname) {
c011cc7b:	55                   	push   %ebp
c011cc7c:	89 e5                	mov    %esp,%ebp
c011cc7e:	83 ec 18             	sub    $0x18,%esp
    return vfs_mount(devname, sfs_do_mount);
c011cc81:	c7 44 24 04 52 c8 11 	movl   $0xc011c852,0x4(%esp)
c011cc88:	c0 
c011cc89:	8b 45 08             	mov    0x8(%ebp),%eax
c011cc8c:	89 04 24             	mov    %eax,(%esp)
c011cc8f:	e8 5b d4 ff ff       	call   c011a0ef <vfs_mount>
}
c011cc94:	c9                   	leave  
c011cc95:	c3                   	ret    

c011cc96 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c011cc96:	55                   	push   %ebp
c011cc97:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c011cc99:	8b 45 08             	mov    0x8(%ebp),%eax
c011cc9c:	8b 40 30             	mov    0x30(%eax),%eax
}
c011cc9f:	5d                   	pop    %ebp
c011cca0:	c3                   	ret    

c011cca1 <lock_sin>:

/*
 * lock_sin - lock the process of inode Rd/Wr
 */
static void
lock_sin(struct sfs_inode *sin) {
c011cca1:	55                   	push   %ebp
c011cca2:	89 e5                	mov    %esp,%ebp
c011cca4:	83 ec 18             	sub    $0x18,%esp
    down(&(sin->sem));
c011cca7:	8b 45 08             	mov    0x8(%ebp),%eax
c011ccaa:	83 c0 10             	add    $0x10,%eax
c011ccad:	89 04 24             	mov    %eax,(%esp)
c011ccb0:	e8 27 5f ff ff       	call   c0112bdc <down>
}
c011ccb5:	c9                   	leave  
c011ccb6:	c3                   	ret    

c011ccb7 <unlock_sin>:

/*
 * unlock_sin - unlock the process of inode Rd/Wr
 */
static void
unlock_sin(struct sfs_inode *sin) {
c011ccb7:	55                   	push   %ebp
c011ccb8:	89 e5                	mov    %esp,%ebp
c011ccba:	83 ec 18             	sub    $0x18,%esp
    up(&(sin->sem));
c011ccbd:	8b 45 08             	mov    0x8(%ebp),%eax
c011ccc0:	83 c0 10             	add    $0x10,%eax
c011ccc3:	89 04 24             	mov    %eax,(%esp)
c011ccc6:	e8 f6 5e ff ff       	call   c0112bc1 <up>
}
c011cccb:	c9                   	leave  
c011cccc:	c3                   	ret    

c011cccd <sfs_get_ops>:

/*
 * sfs_get_ops - return function addr of fs_node_dirops/sfs_node_fileops
 */
static const struct inode_ops *
sfs_get_ops(uint16_t type) {
c011cccd:	55                   	push   %ebp
c011ccce:	89 e5                	mov    %esp,%ebp
c011ccd0:	83 ec 28             	sub    $0x28,%esp
c011ccd3:	8b 45 08             	mov    0x8(%ebp),%eax
c011ccd6:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    switch (type) {
c011ccda:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c011ccde:	83 f8 01             	cmp    $0x1,%eax
c011cce1:	74 0c                	je     c011ccef <sfs_get_ops+0x22>
c011cce3:	83 f8 02             	cmp    $0x2,%eax
c011cce6:	75 0e                	jne    c011ccf6 <sfs_get_ops+0x29>
    case SFS_TYPE_DIR:
        return &sfs_node_dirops;
c011cce8:	b8 80 83 12 c0       	mov    $0xc0128380,%eax
c011cced:	eb 2b                	jmp    c011cd1a <sfs_get_ops+0x4d>
    case SFS_TYPE_FILE:
        return &sfs_node_fileops;
c011ccef:	b8 e0 83 12 c0       	mov    $0xc01283e0,%eax
c011ccf4:	eb 24                	jmp    c011cd1a <sfs_get_ops+0x4d>
    }
    panic("invalid file type %d.\n", type);
c011ccf6:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c011ccfa:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011ccfe:	c7 44 24 08 2c 84 12 	movl   $0xc012842c,0x8(%esp)
c011cd05:	c0 
c011cd06:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c011cd0d:	00 
c011cd0e:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011cd15:	e8 fc 44 fe ff       	call   c0101216 <__panic>
}
c011cd1a:	c9                   	leave  
c011cd1b:	c3                   	ret    

c011cd1c <sfs_hash_list>:

/*
 * sfs_hash_list - return inode entry in sfs->hash_list
 */
static list_entry_t *
sfs_hash_list(struct sfs_fs *sfs, uint32_t ino) {
c011cd1c:	55                   	push   %ebp
c011cd1d:	89 e5                	mov    %esp,%ebp
c011cd1f:	53                   	push   %ebx
c011cd20:	83 ec 14             	sub    $0x14,%esp
    return sfs->hash_list + sin_hashfn(ino);
c011cd23:	8b 45 08             	mov    0x8(%ebp),%eax
c011cd26:	8b 58 68             	mov    0x68(%eax),%ebx
c011cd29:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c011cd30:	00 
c011cd31:	8b 45 0c             	mov    0xc(%ebp),%eax
c011cd34:	89 04 24             	mov    %eax,(%esp)
c011cd37:	e8 69 38 00 00       	call   c01205a5 <hash32>
c011cd3c:	c1 e0 03             	shl    $0x3,%eax
c011cd3f:	01 d8                	add    %ebx,%eax
}
c011cd41:	83 c4 14             	add    $0x14,%esp
c011cd44:	5b                   	pop    %ebx
c011cd45:	5d                   	pop    %ebp
c011cd46:	c3                   	ret    

c011cd47 <sfs_set_links>:

/*
 * sfs_set_links - link inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_set_links(struct sfs_fs *sfs, struct sfs_inode *sin) {
c011cd47:	55                   	push   %ebp
c011cd48:	89 e5                	mov    %esp,%ebp
c011cd4a:	53                   	push   %ebx
c011cd4b:	83 ec 54             	sub    $0x54,%esp
    list_add(&(sfs->inode_list), &(sin->inode_link));
c011cd4e:	8b 45 0c             	mov    0xc(%ebp),%eax
c011cd51:	83 c0 1c             	add    $0x1c,%eax
c011cd54:	8b 55 08             	mov    0x8(%ebp),%edx
c011cd57:	83 c2 60             	add    $0x60,%edx
c011cd5a:	89 55 f4             	mov    %edx,-0xc(%ebp)
c011cd5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011cd60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011cd63:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011cd66:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011cd69:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c011cd6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011cd6f:	8b 40 04             	mov    0x4(%eax),%eax
c011cd72:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011cd75:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c011cd78:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011cd7b:	89 55 e0             	mov    %edx,-0x20(%ebp)
c011cd7e:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c011cd81:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011cd84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011cd87:	89 10                	mov    %edx,(%eax)
c011cd89:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011cd8c:	8b 10                	mov    (%eax),%edx
c011cd8e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011cd91:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c011cd94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011cd97:	8b 55 dc             	mov    -0x24(%ebp),%edx
c011cd9a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c011cd9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011cda0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011cda3:	89 10                	mov    %edx,(%eax)
    list_add(sfs_hash_list(sfs, sin->ino), &(sin->hash_link));
c011cda5:	8b 45 0c             	mov    0xc(%ebp),%eax
c011cda8:	8d 58 24             	lea    0x24(%eax),%ebx
c011cdab:	8b 45 0c             	mov    0xc(%ebp),%eax
c011cdae:	8b 40 04             	mov    0x4(%eax),%eax
c011cdb1:	89 44 24 04          	mov    %eax,0x4(%esp)
c011cdb5:	8b 45 08             	mov    0x8(%ebp),%eax
c011cdb8:	89 04 24             	mov    %eax,(%esp)
c011cdbb:	e8 5c ff ff ff       	call   c011cd1c <sfs_hash_list>
c011cdc0:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011cdc3:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
c011cdc6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011cdc9:	89 45 d0             	mov    %eax,-0x30(%ebp)
c011cdcc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011cdcf:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c011cdd2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011cdd5:	8b 40 04             	mov    0x4(%eax),%eax
c011cdd8:	8b 55 cc             	mov    -0x34(%ebp),%edx
c011cddb:	89 55 c8             	mov    %edx,-0x38(%ebp)
c011cdde:	8b 55 d0             	mov    -0x30(%ebp),%edx
c011cde1:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c011cde4:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c011cde7:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011cdea:	8b 55 c8             	mov    -0x38(%ebp),%edx
c011cded:	89 10                	mov    %edx,(%eax)
c011cdef:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011cdf2:	8b 10                	mov    (%eax),%edx
c011cdf4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011cdf7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c011cdfa:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011cdfd:	8b 55 c0             	mov    -0x40(%ebp),%edx
c011ce00:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c011ce03:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011ce06:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c011ce09:	89 10                	mov    %edx,(%eax)
}
c011ce0b:	83 c4 54             	add    $0x54,%esp
c011ce0e:	5b                   	pop    %ebx
c011ce0f:	5d                   	pop    %ebp
c011ce10:	c3                   	ret    

c011ce11 <sfs_remove_links>:

/*
 * sfs_remove_links - unlink inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_remove_links(struct sfs_inode *sin) {
c011ce11:	55                   	push   %ebp
c011ce12:	89 e5                	mov    %esp,%ebp
c011ce14:	83 ec 20             	sub    $0x20,%esp
    list_del(&(sin->inode_link));
c011ce17:	8b 45 08             	mov    0x8(%ebp),%eax
c011ce1a:	83 c0 1c             	add    $0x1c,%eax
c011ce1d:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c011ce20:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011ce23:	8b 40 04             	mov    0x4(%eax),%eax
c011ce26:	8b 55 fc             	mov    -0x4(%ebp),%edx
c011ce29:	8b 12                	mov    (%edx),%edx
c011ce2b:	89 55 f8             	mov    %edx,-0x8(%ebp)
c011ce2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c011ce31:	8b 45 f8             	mov    -0x8(%ebp),%eax
c011ce34:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011ce37:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c011ce3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011ce3d:	8b 55 f8             	mov    -0x8(%ebp),%edx
c011ce40:	89 10                	mov    %edx,(%eax)
    list_del(&(sin->hash_link));
c011ce42:	8b 45 08             	mov    0x8(%ebp),%eax
c011ce45:	83 c0 24             	add    $0x24,%eax
c011ce48:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c011ce4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011ce4e:	8b 40 04             	mov    0x4(%eax),%eax
c011ce51:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011ce54:	8b 12                	mov    (%edx),%edx
c011ce56:	89 55 ec             	mov    %edx,-0x14(%ebp)
c011ce59:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c011ce5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011ce5f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011ce62:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c011ce65:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011ce68:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011ce6b:	89 10                	mov    %edx,(%eax)
}
c011ce6d:	c9                   	leave  
c011ce6e:	c3                   	ret    

c011ce6f <sfs_block_inuse>:

/*
 * sfs_block_inuse - check the inode with NO. ino inuse info in bitmap
 */
static bool
sfs_block_inuse(struct sfs_fs *sfs, uint32_t ino) {
c011ce6f:	55                   	push   %ebp
c011ce70:	89 e5                	mov    %esp,%ebp
c011ce72:	83 ec 28             	sub    $0x28,%esp
    if (ino != 0 && ino < sfs->super.blocks) {
c011ce75:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011ce79:	74 2a                	je     c011cea5 <sfs_block_inuse+0x36>
c011ce7b:	8b 45 08             	mov    0x8(%ebp),%eax
c011ce7e:	8b 40 04             	mov    0x4(%eax),%eax
c011ce81:	3b 45 0c             	cmp    0xc(%ebp),%eax
c011ce84:	76 1f                	jbe    c011cea5 <sfs_block_inuse+0x36>
        return !bitmap_test(sfs->freemap, ino);
c011ce86:	8b 45 08             	mov    0x8(%ebp),%eax
c011ce89:	8b 40 30             	mov    0x30(%eax),%eax
c011ce8c:	8b 55 0c             	mov    0xc(%ebp),%edx
c011ce8f:	89 54 24 04          	mov    %edx,0x4(%esp)
c011ce93:	89 04 24             	mov    %eax,(%esp)
c011ce96:	e8 d9 f3 ff ff       	call   c011c274 <bitmap_test>
c011ce9b:	85 c0                	test   %eax,%eax
c011ce9d:	0f 94 c0             	sete   %al
c011cea0:	0f b6 c0             	movzbl %al,%eax
c011cea3:	eb 2d                	jmp    c011ced2 <sfs_block_inuse+0x63>
    }
    panic("sfs_block_inuse: called out of range (0, %u) %u.\n", sfs->super.blocks, ino);
c011cea5:	8b 45 08             	mov    0x8(%ebp),%eax
c011cea8:	8b 40 04             	mov    0x4(%eax),%eax
c011ceab:	8b 55 0c             	mov    0xc(%ebp),%edx
c011ceae:	89 54 24 10          	mov    %edx,0x10(%esp)
c011ceb2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011ceb6:	c7 44 24 08 5c 84 12 	movl   $0xc012845c,0x8(%esp)
c011cebd:	c0 
c011cebe:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c011cec5:	00 
c011cec6:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011cecd:	e8 44 43 fe ff       	call   c0101216 <__panic>
}
c011ced2:	c9                   	leave  
c011ced3:	c3                   	ret    

c011ced4 <sfs_block_alloc>:

/*
 * sfs_block_alloc -  check and get a free disk block
 */
static int
sfs_block_alloc(struct sfs_fs *sfs, uint32_t *ino_store) {
c011ced4:	55                   	push   %ebp
c011ced5:	89 e5                	mov    %esp,%ebp
c011ced7:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = bitmap_alloc(sfs->freemap, ino_store)) != 0) {
c011ceda:	8b 45 08             	mov    0x8(%ebp),%eax
c011cedd:	8b 40 30             	mov    0x30(%eax),%eax
c011cee0:	8b 55 0c             	mov    0xc(%ebp),%edx
c011cee3:	89 54 24 04          	mov    %edx,0x4(%esp)
c011cee7:	89 04 24             	mov    %eax,(%esp)
c011ceea:	e8 23 f2 ff ff       	call   c011c112 <bitmap_alloc>
c011ceef:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011cef2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011cef6:	74 08                	je     c011cf00 <sfs_block_alloc+0x2c>
        return ret;
c011cef8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011cefb:	e9 9f 00 00 00       	jmp    c011cf9f <sfs_block_alloc+0xcb>
    }
    assert(sfs->super.unused_blocks > 0);
c011cf00:	8b 45 08             	mov    0x8(%ebp),%eax
c011cf03:	8b 40 08             	mov    0x8(%eax),%eax
c011cf06:	85 c0                	test   %eax,%eax
c011cf08:	75 24                	jne    c011cf2e <sfs_block_alloc+0x5a>
c011cf0a:	c7 44 24 0c 8e 84 12 	movl   $0xc012848e,0xc(%esp)
c011cf11:	c0 
c011cf12:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011cf19:	c0 
c011cf1a:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c011cf21:	00 
c011cf22:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011cf29:	e8 e8 42 fe ff       	call   c0101216 <__panic>
    sfs->super.unused_blocks --, sfs->super_dirty = 1;
c011cf2e:	8b 45 08             	mov    0x8(%ebp),%eax
c011cf31:	8b 40 08             	mov    0x8(%eax),%eax
c011cf34:	8d 50 ff             	lea    -0x1(%eax),%edx
c011cf37:	8b 45 08             	mov    0x8(%ebp),%eax
c011cf3a:	89 50 08             	mov    %edx,0x8(%eax)
c011cf3d:	8b 45 08             	mov    0x8(%ebp),%eax
c011cf40:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
    assert(sfs_block_inuse(sfs, *ino_store));
c011cf47:	8b 45 0c             	mov    0xc(%ebp),%eax
c011cf4a:	8b 00                	mov    (%eax),%eax
c011cf4c:	89 44 24 04          	mov    %eax,0x4(%esp)
c011cf50:	8b 45 08             	mov    0x8(%ebp),%eax
c011cf53:	89 04 24             	mov    %eax,(%esp)
c011cf56:	e8 14 ff ff ff       	call   c011ce6f <sfs_block_inuse>
c011cf5b:	85 c0                	test   %eax,%eax
c011cf5d:	75 24                	jne    c011cf83 <sfs_block_alloc+0xaf>
c011cf5f:	c7 44 24 0c c0 84 12 	movl   $0xc01284c0,0xc(%esp)
c011cf66:	c0 
c011cf67:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011cf6e:	c0 
c011cf6f:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c011cf76:	00 
c011cf77:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011cf7e:	e8 93 42 fe ff       	call   c0101216 <__panic>
    return sfs_clear_block(sfs, *ino_store, 1);
c011cf83:	8b 45 0c             	mov    0xc(%ebp),%eax
c011cf86:	8b 00                	mov    (%eax),%eax
c011cf88:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011cf8f:	00 
c011cf90:	89 44 24 04          	mov    %eax,0x4(%esp)
c011cf94:	8b 45 08             	mov    0x8(%ebp),%eax
c011cf97:	89 04 24             	mov    %eax,(%esp)
c011cf9a:	e8 28 35 00 00       	call   c01204c7 <sfs_clear_block>
}
c011cf9f:	c9                   	leave  
c011cfa0:	c3                   	ret    

c011cfa1 <sfs_block_free>:

/*
 * sfs_block_free - set related bits for ino block to 1(means free) in bitmap, add sfs->super.unused_blocks, set superblock dirty *
 */
static void
sfs_block_free(struct sfs_fs *sfs, uint32_t ino) {
c011cfa1:	55                   	push   %ebp
c011cfa2:	89 e5                	mov    %esp,%ebp
c011cfa4:	83 ec 18             	sub    $0x18,%esp
    assert(sfs_block_inuse(sfs, ino));
c011cfa7:	8b 45 0c             	mov    0xc(%ebp),%eax
c011cfaa:	89 44 24 04          	mov    %eax,0x4(%esp)
c011cfae:	8b 45 08             	mov    0x8(%ebp),%eax
c011cfb1:	89 04 24             	mov    %eax,(%esp)
c011cfb4:	e8 b6 fe ff ff       	call   c011ce6f <sfs_block_inuse>
c011cfb9:	85 c0                	test   %eax,%eax
c011cfbb:	75 24                	jne    c011cfe1 <sfs_block_free+0x40>
c011cfbd:	c7 44 24 0c e1 84 12 	movl   $0xc01284e1,0xc(%esp)
c011cfc4:	c0 
c011cfc5:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011cfcc:	c0 
c011cfcd:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c011cfd4:	00 
c011cfd5:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011cfdc:	e8 35 42 fe ff       	call   c0101216 <__panic>
    bitmap_free(sfs->freemap, ino);
c011cfe1:	8b 45 08             	mov    0x8(%ebp),%eax
c011cfe4:	8b 40 30             	mov    0x30(%eax),%eax
c011cfe7:	8b 55 0c             	mov    0xc(%ebp),%edx
c011cfea:	89 54 24 04          	mov    %edx,0x4(%esp)
c011cfee:	89 04 24             	mov    %eax,(%esp)
c011cff1:	e8 b0 f2 ff ff       	call   c011c2a6 <bitmap_free>
    sfs->super.unused_blocks ++, sfs->super_dirty = 1;
c011cff6:	8b 45 08             	mov    0x8(%ebp),%eax
c011cff9:	8b 40 08             	mov    0x8(%eax),%eax
c011cffc:	8d 50 01             	lea    0x1(%eax),%edx
c011cfff:	8b 45 08             	mov    0x8(%ebp),%eax
c011d002:	89 50 08             	mov    %edx,0x8(%eax)
c011d005:	8b 45 08             	mov    0x8(%ebp),%eax
c011d008:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
}
c011d00f:	c9                   	leave  
c011d010:	c3                   	ret    

c011d011 <sfs_create_inode>:

/*
 * sfs_create_inode - alloc a inode in memroy, and init din/ino/dirty/reclian_count/sem fields in sfs_inode in inode
 */
static int
sfs_create_inode(struct sfs_fs *sfs, struct sfs_disk_inode *din, uint32_t ino, struct inode **node_store) {
c011d011:	55                   	push   %ebp
c011d012:	89 e5                	mov    %esp,%ebp
c011d014:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(sfs_inode)) != NULL) {
c011d017:	c7 04 24 35 12 00 00 	movl   $0x1235,(%esp)
c011d01e:	e8 d0 c5 ff ff       	call   c01195f3 <__alloc_inode>
c011d023:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011d026:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011d02a:	0f 84 b5 00 00 00    	je     c011d0e5 <sfs_create_inode+0xd4>
        vop_init(node, sfs_get_ops(din->type), info2fs(sfs, sfs));
c011d030:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d033:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011d037:	0f b7 c0             	movzwl %ax,%eax
c011d03a:	89 04 24             	mov    %eax,(%esp)
c011d03d:	e8 8b fc ff ff       	call   c011cccd <sfs_get_ops>
c011d042:	8b 55 08             	mov    0x8(%ebp),%edx
c011d045:	89 54 24 08          	mov    %edx,0x8(%esp)
c011d049:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d04d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d050:	89 04 24             	mov    %eax,(%esp)
c011d053:	e8 c4 c5 ff ff       	call   c011961c <inode_init>
        struct sfs_inode *sin = vop_info(node, sfs_inode);
c011d058:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d05b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011d05e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011d062:	74 0d                	je     c011d071 <sfs_create_inode+0x60>
c011d064:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011d067:	8b 40 2c             	mov    0x2c(%eax),%eax
c011d06a:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011d06f:	74 24                	je     c011d095 <sfs_create_inode+0x84>
c011d071:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011d078:	c0 
c011d079:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011d080:	c0 
c011d081:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c011d088:	00 
c011d089:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011d090:	e8 81 41 fe ff       	call   c0101216 <__panic>
c011d095:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011d098:	89 45 ec             	mov    %eax,-0x14(%ebp)
        sin->din = din, sin->ino = ino, sin->dirty = 0, sin->reclaim_count = 1;
c011d09b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d09e:	8b 55 0c             	mov    0xc(%ebp),%edx
c011d0a1:	89 10                	mov    %edx,(%eax)
c011d0a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d0a6:	8b 55 10             	mov    0x10(%ebp),%edx
c011d0a9:	89 50 04             	mov    %edx,0x4(%eax)
c011d0ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d0af:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c011d0b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d0b9:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
        sem_init(&(sin->sem), 1);
c011d0c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d0c3:	83 c0 10             	add    $0x10,%eax
c011d0c6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c011d0cd:	00 
c011d0ce:	89 04 24             	mov    %eax,(%esp)
c011d0d1:	e8 78 59 ff ff       	call   c0112a4e <sem_init>
        *node_store = node;
c011d0d6:	8b 45 14             	mov    0x14(%ebp),%eax
c011d0d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011d0dc:	89 10                	mov    %edx,(%eax)
        return 0;
c011d0de:	b8 00 00 00 00       	mov    $0x0,%eax
c011d0e3:	eb 05                	jmp    c011d0ea <sfs_create_inode+0xd9>
    }
    return -E_NO_MEM;
c011d0e5:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c011d0ea:	c9                   	leave  
c011d0eb:	c3                   	ret    

c011d0ec <lookup_sfs_nolock>:
 * lookup_sfs_nolock - according ino, find related inode
 *
 * NOTICE: le2sin, info2node MACRO
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
c011d0ec:	55                   	push   %ebp
c011d0ed:	89 e5                	mov    %esp,%ebp
c011d0ef:	83 ec 38             	sub    $0x38,%esp
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
c011d0f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d0f5:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d0f9:	8b 45 08             	mov    0x8(%ebp),%eax
c011d0fc:	89 04 24             	mov    %eax,(%esp)
c011d0ff:	e8 18 fc ff ff       	call   c011cd1c <sfs_hash_list>
c011d104:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011d107:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011d10a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c011d10d:	eb 3e                	jmp    c011d14d <lookup_sfs_nolock+0x61>
        struct sfs_inode *sin = le2sin(le, hash_link);
c011d10f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d112:	83 e8 24             	sub    $0x24,%eax
c011d115:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (sin->ino == ino) {
c011d118:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d11b:	8b 40 04             	mov    0x4(%eax),%eax
c011d11e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c011d121:	75 2a                	jne    c011d14d <lookup_sfs_nolock+0x61>
            node = info2node(sin, sfs_inode);
c011d123:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d126:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (vop_ref_inc(node) == 1) {
c011d129:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011d12c:	89 04 24             	mov    %eax,(%esp)
c011d12f:	e8 9a c5 ff ff       	call   c01196ce <inode_ref_inc>
c011d134:	83 f8 01             	cmp    $0x1,%eax
c011d137:	75 0f                	jne    c011d148 <lookup_sfs_nolock+0x5c>
                sin->reclaim_count ++;
c011d139:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d13c:	8b 40 0c             	mov    0xc(%eax),%eax
c011d13f:	8d 50 01             	lea    0x1(%eax),%edx
c011d142:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d145:	89 50 0c             	mov    %edx,0xc(%eax)
            }
            return node;
c011d148:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011d14b:	eb 1c                	jmp    c011d169 <lookup_sfs_nolock+0x7d>
c011d14d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d150:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c011d153:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011d156:	8b 40 04             	mov    0x4(%eax),%eax
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
    while ((le = list_next(le)) != list) {
c011d159:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011d15c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d15f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011d162:	75 ab                	jne    c011d10f <lookup_sfs_nolock+0x23>
                sin->reclaim_count ++;
            }
            return node;
        }
    }
    return NULL;
c011d164:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011d169:	c9                   	leave  
c011d16a:	c3                   	ret    

c011d16b <sfs_load_inode>:
/*
 * sfs_load_inode - If the inode isn't existed, load inode related ino disk block data into a new created inode.
 *                  If the inode is in memory alreadily, then do nothing
 */
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
c011d16b:	55                   	push   %ebp
c011d16c:	89 e5                	mov    %esp,%ebp
c011d16e:	83 ec 38             	sub    $0x38,%esp
    lock_sfs_fs(sfs);
c011d171:	8b 45 08             	mov    0x8(%ebp),%eax
c011d174:	89 04 24             	mov    %eax,(%esp)
c011d177:	e8 d1 33 00 00       	call   c012054d <lock_sfs_fs>
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
c011d17c:	8b 45 10             	mov    0x10(%ebp),%eax
c011d17f:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d183:	8b 45 08             	mov    0x8(%ebp),%eax
c011d186:	89 04 24             	mov    %eax,(%esp)
c011d189:	e8 5e ff ff ff       	call   c011d0ec <lookup_sfs_nolock>
c011d18e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011d191:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011d194:	85 c0                	test   %eax,%eax
c011d196:	74 05                	je     c011d19d <sfs_load_inode+0x32>
        goto out_unlock;
c011d198:	e9 3c 01 00 00       	jmp    c011d2d9 <sfs_load_inode+0x16e>
    }

    int ret = -E_NO_MEM;
c011d19d:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
c011d1a4:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c011d1ab:	e8 00 d9 fe ff       	call   c010aab0 <kmalloc>
c011d1b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011d1b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011d1b7:	75 05                	jne    c011d1be <sfs_load_inode+0x53>
        goto failed_unlock;
c011d1b9:	e9 40 01 00 00       	jmp    c011d2fe <sfs_load_inode+0x193>
    }

    assert(sfs_block_inuse(sfs, ino));
c011d1be:	8b 45 10             	mov    0x10(%ebp),%eax
c011d1c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d1c5:	8b 45 08             	mov    0x8(%ebp),%eax
c011d1c8:	89 04 24             	mov    %eax,(%esp)
c011d1cb:	e8 9f fc ff ff       	call   c011ce6f <sfs_block_inuse>
c011d1d0:	85 c0                	test   %eax,%eax
c011d1d2:	75 24                	jne    c011d1f8 <sfs_load_inode+0x8d>
c011d1d4:	c7 44 24 0c e1 84 12 	movl   $0xc01284e1,0xc(%esp)
c011d1db:	c0 
c011d1dc:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011d1e3:	c0 
c011d1e4:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
c011d1eb:	00 
c011d1ec:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011d1f3:	e8 1e 40 fe ff       	call   c0101216 <__panic>
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
c011d1f8:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011d1ff:	00 
c011d200:	8b 45 10             	mov    0x10(%ebp),%eax
c011d203:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011d207:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c011d20e:	00 
c011d20f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011d212:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d216:	8b 45 08             	mov    0x8(%ebp),%eax
c011d219:	89 04 24             	mov    %eax,(%esp)
c011d21c:	e8 1d 30 00 00       	call   c012023e <sfs_rbuf>
c011d221:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011d224:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011d228:	74 05                	je     c011d22f <sfs_load_inode+0xc4>
        goto failed_cleanup_din;
c011d22a:	e9 c4 00 00 00       	jmp    c011d2f3 <sfs_load_inode+0x188>
    }

    assert(din->nlinks != 0);
c011d22f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011d232:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c011d236:	66 85 c0             	test   %ax,%ax
c011d239:	75 24                	jne    c011d25f <sfs_load_inode+0xf4>
c011d23b:	c7 44 24 0c 32 85 12 	movl   $0xc0128532,0xc(%esp)
c011d242:	c0 
c011d243:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011d24a:	c0 
c011d24b:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c011d252:	00 
c011d253:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011d25a:	e8 b7 3f fe ff       	call   c0101216 <__panic>
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
c011d25f:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011d262:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011d266:	8b 45 10             	mov    0x10(%ebp),%eax
c011d269:	89 44 24 08          	mov    %eax,0x8(%esp)
c011d26d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011d270:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d274:	8b 45 08             	mov    0x8(%ebp),%eax
c011d277:	89 04 24             	mov    %eax,(%esp)
c011d27a:	e8 92 fd ff ff       	call   c011d011 <sfs_create_inode>
c011d27f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011d282:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011d286:	74 02                	je     c011d28a <sfs_load_inode+0x11f>
        goto failed_cleanup_din;
c011d288:	eb 69                	jmp    c011d2f3 <sfs_load_inode+0x188>
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));
c011d28a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011d28d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011d290:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011d294:	74 0d                	je     c011d2a3 <sfs_load_inode+0x138>
c011d296:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d299:	8b 40 2c             	mov    0x2c(%eax),%eax
c011d29c:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011d2a1:	74 24                	je     c011d2c7 <sfs_load_inode+0x15c>
c011d2a3:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011d2aa:	c0 
c011d2ab:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011d2b2:	c0 
c011d2b3:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c011d2ba:	00 
c011d2bb:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011d2c2:	e8 4f 3f fe ff       	call   c0101216 <__panic>
c011d2c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d2ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d2ce:	8b 45 08             	mov    0x8(%ebp),%eax
c011d2d1:	89 04 24             	mov    %eax,(%esp)
c011d2d4:	e8 6e fa ff ff       	call   c011cd47 <sfs_set_links>

out_unlock:
    unlock_sfs_fs(sfs);
c011d2d9:	8b 45 08             	mov    0x8(%ebp),%eax
c011d2dc:	89 04 24             	mov    %eax,(%esp)
c011d2df:	e8 95 32 00 00       	call   c0120579 <unlock_sfs_fs>
    *node_store = node;
c011d2e4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011d2e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d2ea:	89 10                	mov    %edx,(%eax)
    return 0;
c011d2ec:	b8 00 00 00 00       	mov    $0x0,%eax
c011d2f1:	eb 19                	jmp    c011d30c <sfs_load_inode+0x1a1>

failed_cleanup_din:
    kfree(din);
c011d2f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011d2f6:	89 04 24             	mov    %eax,(%esp)
c011d2f9:	e8 cd d7 fe ff       	call   c010aacb <kfree>
failed_unlock:
    unlock_sfs_fs(sfs);
c011d2fe:	8b 45 08             	mov    0x8(%ebp),%eax
c011d301:	89 04 24             	mov    %eax,(%esp)
c011d304:	e8 70 32 00 00       	call   c0120579 <unlock_sfs_fs>
    return ret;
c011d309:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011d30c:	c9                   	leave  
c011d30d:	c3                   	ret    

c011d30e <sfs_bmap_get_sub_nolock>:
 * @index:    the index of block in indrect block
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_sub_nolock(struct sfs_fs *sfs, uint32_t *entp, uint32_t index, bool create, uint32_t *ino_store) {
c011d30e:	55                   	push   %ebp
c011d30f:	89 e5                	mov    %esp,%ebp
c011d311:	83 ec 38             	sub    $0x38,%esp
    assert(index < SFS_BLK_NENTRY);
c011d314:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c011d31b:	76 24                	jbe    c011d341 <sfs_bmap_get_sub_nolock+0x33>
c011d31d:	c7 44 24 0c 43 85 12 	movl   $0xc0128543,0xc(%esp)
c011d324:	c0 
c011d325:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011d32c:	c0 
c011d32d:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c011d334:	00 
c011d335:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011d33c:	e8 d5 3e fe ff       	call   c0101216 <__panic>
    int ret;
    uint32_t ent, ino = 0;
c011d341:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);  // the offset of entry in entry block
c011d348:	8b 45 10             	mov    0x10(%ebp),%eax
c011d34b:	c1 e0 02             	shl    $0x2,%eax
c011d34e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	// if entry block is existd, read the content of entry block into  sfs->sfs_buffer
    if ((ent = *entp) != 0) {
c011d351:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d354:	8b 00                	mov    (%eax),%eax
c011d356:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011d359:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d35c:	85 c0                	test   %eax,%eax
c011d35e:	74 50                	je     c011d3b0 <sfs_bmap_get_sub_nolock+0xa2>
        if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c011d360:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d363:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011d366:	89 54 24 10          	mov    %edx,0x10(%esp)
c011d36a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011d36e:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c011d375:	00 
c011d376:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011d379:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d37d:	8b 45 08             	mov    0x8(%ebp),%eax
c011d380:	89 04 24             	mov    %eax,(%esp)
c011d383:	e8 b6 2e 00 00       	call   c012023e <sfs_rbuf>
c011d388:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011d38b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011d38f:	74 08                	je     c011d399 <sfs_bmap_get_sub_nolock+0x8b>
            return ret;
c011d391:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d394:	e9 eb 00 00 00       	jmp    c011d484 <sfs_bmap_get_sub_nolock+0x176>
        }
        if (ino != 0 || !create) {
c011d399:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011d39c:	85 c0                	test   %eax,%eax
c011d39e:	0f 85 9c 00 00 00    	jne    c011d440 <sfs_bmap_get_sub_nolock+0x132>
c011d3a4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011d3a8:	0f 84 92 00 00 00    	je     c011d440 <sfs_bmap_get_sub_nolock+0x132>
c011d3ae:	eb 2e                	jmp    c011d3de <sfs_bmap_get_sub_nolock+0xd0>
            goto out;
        }
    }
    else {
        if (!create) {
c011d3b0:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011d3b4:	75 05                	jne    c011d3bb <sfs_bmap_get_sub_nolock+0xad>
            goto out;
c011d3b6:	e9 85 00 00 00       	jmp    c011d440 <sfs_bmap_get_sub_nolock+0x132>
        }
		//if entry block isn't existd, allocated a entry block (for indrect block)
        if ((ret = sfs_block_alloc(sfs, &ent)) != 0) {
c011d3bb:	8d 45 ec             	lea    -0x14(%ebp),%eax
c011d3be:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d3c2:	8b 45 08             	mov    0x8(%ebp),%eax
c011d3c5:	89 04 24             	mov    %eax,(%esp)
c011d3c8:	e8 07 fb ff ff       	call   c011ced4 <sfs_block_alloc>
c011d3cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011d3d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011d3d4:	74 08                	je     c011d3de <sfs_bmap_get_sub_nolock+0xd0>
            return ret;
c011d3d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d3d9:	e9 a6 00 00 00       	jmp    c011d484 <sfs_bmap_get_sub_nolock+0x176>
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c011d3de:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011d3e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d3e5:	8b 45 08             	mov    0x8(%ebp),%eax
c011d3e8:	89 04 24             	mov    %eax,(%esp)
c011d3eb:	e8 e4 fa ff ff       	call   c011ced4 <sfs_block_alloc>
c011d3f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011d3f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011d3f7:	74 02                	je     c011d3fb <sfs_bmap_get_sub_nolock+0xed>
        goto failed_cleanup;
c011d3f9:	eb 68                	jmp    c011d463 <sfs_bmap_get_sub_nolock+0x155>
    }
    if ((ret = sfs_wbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c011d3fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d3fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011d401:	89 54 24 10          	mov    %edx,0x10(%esp)
c011d405:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011d409:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c011d410:	00 
c011d411:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011d414:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d418:	8b 45 08             	mov    0x8(%ebp),%eax
c011d41b:	89 04 24             	mov    %eax,(%esp)
c011d41e:	e8 d4 2e 00 00       	call   c01202f7 <sfs_wbuf>
c011d423:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011d426:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011d42a:	74 14                	je     c011d440 <sfs_bmap_get_sub_nolock+0x132>
        sfs_block_free(sfs, ino);
c011d42c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011d42f:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d433:	8b 45 08             	mov    0x8(%ebp),%eax
c011d436:	89 04 24             	mov    %eax,(%esp)
c011d439:	e8 63 fb ff ff       	call   c011cfa1 <sfs_block_free>
        goto failed_cleanup;
c011d43e:	eb 23                	jmp    c011d463 <sfs_bmap_get_sub_nolock+0x155>
    }

out:
    if (ent != *entp) {
c011d440:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d443:	8b 10                	mov    (%eax),%edx
c011d445:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d448:	39 c2                	cmp    %eax,%edx
c011d44a:	74 08                	je     c011d454 <sfs_bmap_get_sub_nolock+0x146>
        *entp = ent;
c011d44c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011d44f:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d452:	89 10                	mov    %edx,(%eax)
    }
    *ino_store = ino;
c011d454:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011d457:	8b 45 18             	mov    0x18(%ebp),%eax
c011d45a:	89 10                	mov    %edx,(%eax)
    return 0;
c011d45c:	b8 00 00 00 00       	mov    $0x0,%eax
c011d461:	eb 21                	jmp    c011d484 <sfs_bmap_get_sub_nolock+0x176>

failed_cleanup:
    if (ent != *entp) {
c011d463:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d466:	8b 10                	mov    (%eax),%edx
c011d468:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d46b:	39 c2                	cmp    %eax,%edx
c011d46d:	74 12                	je     c011d481 <sfs_bmap_get_sub_nolock+0x173>
        sfs_block_free(sfs, ent);
c011d46f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d472:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d476:	8b 45 08             	mov    0x8(%ebp),%eax
c011d479:	89 04 24             	mov    %eax,(%esp)
c011d47c:	e8 20 fb ff ff       	call   c011cfa1 <sfs_block_free>
    }
    return ret;
c011d481:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011d484:	c9                   	leave  
c011d485:	c3                   	ret    

c011d486 <sfs_bmap_get_nolock>:
 * @index:    the index of block in inode
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, bool create, uint32_t *ino_store) {
c011d486:	55                   	push   %ebp
c011d487:	89 e5                	mov    %esp,%ebp
c011d489:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c011d48c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d48f:	8b 00                	mov    (%eax),%eax
c011d491:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
	// the index of disk block is in the fist SFS_NDIRECT  direct blocks
    if (index < SFS_NDIRECT) {
c011d494:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c011d498:	77 5e                	ja     c011d4f8 <sfs_bmap_get_nolock+0x72>
        if ((ino = din->direct[index]) == 0 && create) {
c011d49a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d49d:	8b 55 10             	mov    0x10(%ebp),%edx
c011d4a0:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c011d4a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011d4a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011d4aa:	85 c0                	test   %eax,%eax
c011d4ac:	75 45                	jne    c011d4f3 <sfs_bmap_get_nolock+0x6d>
c011d4ae:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011d4b2:	74 3f                	je     c011d4f3 <sfs_bmap_get_nolock+0x6d>
            if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c011d4b4:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011d4b7:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d4bb:	8b 45 08             	mov    0x8(%ebp),%eax
c011d4be:	89 04 24             	mov    %eax,(%esp)
c011d4c1:	e8 0e fa ff ff       	call   c011ced4 <sfs_block_alloc>
c011d4c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011d4c9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011d4cd:	74 08                	je     c011d4d7 <sfs_bmap_get_nolock+0x51>
                return ret;
c011d4cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011d4d2:	e9 2f 01 00 00       	jmp    c011d606 <sfs_bmap_get_nolock+0x180>
            }
            din->direct[index] = ino;
c011d4d7:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c011d4da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d4dd:	8b 55 10             	mov    0x10(%ebp),%edx
c011d4e0:	89 4c 90 0c          	mov    %ecx,0xc(%eax,%edx,4)
            sin->dirty = 1;
c011d4e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d4e7:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c011d4ee:	e9 c5 00 00 00       	jmp    c011d5b8 <sfs_bmap_get_nolock+0x132>
c011d4f3:	e9 c0 00 00 00       	jmp    c011d5b8 <sfs_bmap_get_nolock+0x132>
    }
    // the index of disk block is in the indirect blocks.
    index -= SFS_NDIRECT;
c011d4f8:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c011d4fc:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c011d503:	0f 87 93 00 00 00    	ja     c011d59c <sfs_bmap_get_nolock+0x116>
        ent = din->indirect;
c011d509:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d50c:	8b 40 3c             	mov    0x3c(%eax),%eax
c011d50f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((ret = sfs_bmap_get_sub_nolock(sfs, &ent, index, create, &ino)) != 0) {
c011d512:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011d515:	89 44 24 10          	mov    %eax,0x10(%esp)
c011d519:	8b 45 14             	mov    0x14(%ebp),%eax
c011d51c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011d520:	8b 45 10             	mov    0x10(%ebp),%eax
c011d523:	89 44 24 08          	mov    %eax,0x8(%esp)
c011d527:	8d 45 ec             	lea    -0x14(%ebp),%eax
c011d52a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d52e:	8b 45 08             	mov    0x8(%ebp),%eax
c011d531:	89 04 24             	mov    %eax,(%esp)
c011d534:	e8 d5 fd ff ff       	call   c011d30e <sfs_bmap_get_sub_nolock>
c011d539:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011d53c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011d540:	74 08                	je     c011d54a <sfs_bmap_get_nolock+0xc4>
            return ret;
c011d542:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011d545:	e9 bc 00 00 00       	jmp    c011d606 <sfs_bmap_get_nolock+0x180>
        }
        if (ent != din->indirect) {
c011d54a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d54d:	8b 50 3c             	mov    0x3c(%eax),%edx
c011d550:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d553:	39 c2                	cmp    %eax,%edx
c011d555:	74 43                	je     c011d59a <sfs_bmap_get_nolock+0x114>
            assert(din->indirect == 0);
c011d557:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d55a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011d55d:	85 c0                	test   %eax,%eax
c011d55f:	74 24                	je     c011d585 <sfs_bmap_get_nolock+0xff>
c011d561:	c7 44 24 0c 5a 85 12 	movl   $0xc012855a,0xc(%esp)
c011d568:	c0 
c011d569:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011d570:	c0 
c011d571:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c011d578:	00 
c011d579:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011d580:	e8 91 3c fe ff       	call   c0101216 <__panic>
            din->indirect = ent;
c011d585:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011d588:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d58b:	89 50 3c             	mov    %edx,0x3c(%eax)
            sin->dirty = 1;
c011d58e:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d591:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c011d598:	eb 1e                	jmp    c011d5b8 <sfs_bmap_get_nolock+0x132>
c011d59a:	eb 1c                	jmp    c011d5b8 <sfs_bmap_get_nolock+0x132>
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
c011d59c:	c7 44 24 08 70 85 12 	movl   $0xc0128570,0x8(%esp)
c011d5a3:	c0 
c011d5a4:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c011d5ab:	00 
c011d5ac:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011d5b3:	e8 5e 3c fe ff       	call   c0101216 <__panic>
	}
out:
    assert(ino == 0 || sfs_block_inuse(sfs, ino));
c011d5b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011d5bb:	85 c0                	test   %eax,%eax
c011d5bd:	74 3a                	je     c011d5f9 <sfs_bmap_get_nolock+0x173>
c011d5bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011d5c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d5c6:	8b 45 08             	mov    0x8(%ebp),%eax
c011d5c9:	89 04 24             	mov    %eax,(%esp)
c011d5cc:	e8 9e f8 ff ff       	call   c011ce6f <sfs_block_inuse>
c011d5d1:	85 c0                	test   %eax,%eax
c011d5d3:	75 24                	jne    c011d5f9 <sfs_bmap_get_nolock+0x173>
c011d5d5:	c7 44 24 0c 9c 85 12 	movl   $0xc012859c,0xc(%esp)
c011d5dc:	c0 
c011d5dd:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011d5e4:	c0 
c011d5e5:	c7 44 24 04 21 01 00 	movl   $0x121,0x4(%esp)
c011d5ec:	00 
c011d5ed:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011d5f4:	e8 1d 3c fe ff       	call   c0101216 <__panic>
    *ino_store = ino;
c011d5f9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011d5fc:	8b 45 18             	mov    0x18(%ebp),%eax
c011d5ff:	89 10                	mov    %edx,(%eax)
    return 0;
c011d601:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011d606:	c9                   	leave  
c011d607:	c3                   	ret    

c011d608 <sfs_bmap_free_sub_nolock>:

/*
 * sfs_bmap_free_sub_nolock - set the entry item to 0 (free) in the indirect block
 */
static int
sfs_bmap_free_sub_nolock(struct sfs_fs *sfs, uint32_t ent, uint32_t index) {
c011d608:	55                   	push   %ebp
c011d609:	89 e5                	mov    %esp,%ebp
c011d60b:	83 ec 38             	sub    $0x38,%esp
    assert(sfs_block_inuse(sfs, ent) && index < SFS_BLK_NENTRY);
c011d60e:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d611:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d615:	8b 45 08             	mov    0x8(%ebp),%eax
c011d618:	89 04 24             	mov    %eax,(%esp)
c011d61b:	e8 4f f8 ff ff       	call   c011ce6f <sfs_block_inuse>
c011d620:	85 c0                	test   %eax,%eax
c011d622:	74 09                	je     c011d62d <sfs_bmap_free_sub_nolock+0x25>
c011d624:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c011d62b:	76 24                	jbe    c011d651 <sfs_bmap_free_sub_nolock+0x49>
c011d62d:	c7 44 24 0c c4 85 12 	movl   $0xc01285c4,0xc(%esp)
c011d634:	c0 
c011d635:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011d63c:	c0 
c011d63d:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
c011d644:	00 
c011d645:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011d64c:	e8 c5 3b fe ff       	call   c0101216 <__panic>
    int ret;
    uint32_t ino, zero = 0;
c011d651:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);
c011d658:	8b 45 10             	mov    0x10(%ebp),%eax
c011d65b:	c1 e0 02             	shl    $0x2,%eax
c011d65e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c011d661:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d664:	89 44 24 10          	mov    %eax,0x10(%esp)
c011d668:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d66b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011d66f:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c011d676:	00 
c011d677:	8d 45 ec             	lea    -0x14(%ebp),%eax
c011d67a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d67e:	8b 45 08             	mov    0x8(%ebp),%eax
c011d681:	89 04 24             	mov    %eax,(%esp)
c011d684:	e8 b5 2b 00 00       	call   c012023e <sfs_rbuf>
c011d689:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011d68c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011d690:	74 05                	je     c011d697 <sfs_bmap_free_sub_nolock+0x8f>
        return ret;
c011d692:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011d695:	eb 54                	jmp    c011d6eb <sfs_bmap_free_sub_nolock+0xe3>
    }
    if (ino != 0) {
c011d697:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d69a:	85 c0                	test   %eax,%eax
c011d69c:	74 48                	je     c011d6e6 <sfs_bmap_free_sub_nolock+0xde>
        if ((ret = sfs_wbuf(sfs, &zero, sizeof(uint32_t), ent, offset)) != 0) {
c011d69e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d6a1:	89 44 24 10          	mov    %eax,0x10(%esp)
c011d6a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d6a8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011d6ac:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c011d6b3:	00 
c011d6b4:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011d6b7:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d6bb:	8b 45 08             	mov    0x8(%ebp),%eax
c011d6be:	89 04 24             	mov    %eax,(%esp)
c011d6c1:	e8 31 2c 00 00       	call   c01202f7 <sfs_wbuf>
c011d6c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011d6c9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011d6cd:	74 05                	je     c011d6d4 <sfs_bmap_free_sub_nolock+0xcc>
            return ret;
c011d6cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011d6d2:	eb 17                	jmp    c011d6eb <sfs_bmap_free_sub_nolock+0xe3>
        }
        sfs_block_free(sfs, ino);
c011d6d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d6d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d6db:	8b 45 08             	mov    0x8(%ebp),%eax
c011d6de:	89 04 24             	mov    %eax,(%esp)
c011d6e1:	e8 bb f8 ff ff       	call   c011cfa1 <sfs_block_free>
    }
    return 0;
c011d6e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011d6eb:	c9                   	leave  
c011d6ec:	c3                   	ret    

c011d6ed <sfs_bmap_free_nolock>:

/*
 * sfs_bmap_free_nolock - free a block with logical index in inode and reset the inode's fields
 */
static int
sfs_bmap_free_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index) {
c011d6ed:	55                   	push   %ebp
c011d6ee:	89 e5                	mov    %esp,%ebp
c011d6f0:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c011d6f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d6f6:	8b 00                	mov    (%eax),%eax
c011d6f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
    if (index < SFS_NDIRECT) {
c011d6fb:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c011d6ff:	77 44                	ja     c011d745 <sfs_bmap_free_nolock+0x58>
        if ((ino = din->direct[index]) != 0) {
c011d701:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d704:	8b 55 10             	mov    0x10(%ebp),%edx
c011d707:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c011d70b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011d70e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011d712:	74 2a                	je     c011d73e <sfs_bmap_free_nolock+0x51>
			// free the block
            sfs_block_free(sfs, ino);
c011d714:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011d717:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d71b:	8b 45 08             	mov    0x8(%ebp),%eax
c011d71e:	89 04 24             	mov    %eax,(%esp)
c011d721:	e8 7b f8 ff ff       	call   c011cfa1 <sfs_block_free>
            din->direct[index] = 0;
c011d726:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d729:	8b 55 10             	mov    0x10(%ebp),%edx
c011d72c:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c011d733:	00 
            sin->dirty = 1;
c011d734:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d737:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        return 0;
c011d73e:	b8 00 00 00 00       	mov    $0x0,%eax
c011d743:	eb 4f                	jmp    c011d794 <sfs_bmap_free_nolock+0xa7>
    }

    index -= SFS_NDIRECT;
c011d745:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c011d749:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c011d750:	77 3d                	ja     c011d78f <sfs_bmap_free_nolock+0xa2>
        if ((ent = din->indirect) != 0) {
c011d752:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d755:	8b 40 3c             	mov    0x3c(%eax),%eax
c011d758:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011d75b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011d75f:	74 27                	je     c011d788 <sfs_bmap_free_nolock+0x9b>
			// set the entry item to 0 in the indirect block
            if ((ret = sfs_bmap_free_sub_nolock(sfs, ent, index)) != 0) {
c011d761:	8b 45 10             	mov    0x10(%ebp),%eax
c011d764:	89 44 24 08          	mov    %eax,0x8(%esp)
c011d768:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d76b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d76f:	8b 45 08             	mov    0x8(%ebp),%eax
c011d772:	89 04 24             	mov    %eax,(%esp)
c011d775:	e8 8e fe ff ff       	call   c011d608 <sfs_bmap_free_sub_nolock>
c011d77a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011d77d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011d781:	74 05                	je     c011d788 <sfs_bmap_free_nolock+0x9b>
                return ret;
c011d783:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011d786:	eb 0c                	jmp    c011d794 <sfs_bmap_free_nolock+0xa7>
            }
        }
        return 0;
c011d788:	b8 00 00 00 00       	mov    $0x0,%eax
c011d78d:	eb 05                	jmp    c011d794 <sfs_bmap_free_nolock+0xa7>
    }
    return 0;
c011d78f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011d794:	c9                   	leave  
c011d795:	c3                   	ret    

c011d796 <sfs_bmap_load_nolock>:
 * @sin:      sfs inode in memory
 * @index:    the logical index of disk block in inode
 * @ino_store:the NO. of disk block
 */
static int
sfs_bmap_load_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, uint32_t *ino_store) {
c011d796:	55                   	push   %ebp
c011d797:	89 e5                	mov    %esp,%ebp
c011d799:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c011d79c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d79f:	8b 00                	mov    (%eax),%eax
c011d7a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(index <= din->blocks);
c011d7a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d7a7:	8b 40 08             	mov    0x8(%eax),%eax
c011d7aa:	3b 45 10             	cmp    0x10(%ebp),%eax
c011d7ad:	73 24                	jae    c011d7d3 <sfs_bmap_load_nolock+0x3d>
c011d7af:	c7 44 24 0c f8 85 12 	movl   $0xc01285f8,0xc(%esp)
c011d7b6:	c0 
c011d7b7:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011d7be:	c0 
c011d7bf:	c7 44 24 04 64 01 00 	movl   $0x164,0x4(%esp)
c011d7c6:	00 
c011d7c7:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011d7ce:	e8 43 3a fe ff       	call   c0101216 <__panic>
    int ret;
    uint32_t ino;
    bool create = (index == din->blocks);
c011d7d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d7d6:	8b 40 08             	mov    0x8(%eax),%eax
c011d7d9:	3b 45 10             	cmp    0x10(%ebp),%eax
c011d7dc:	0f 94 c0             	sete   %al
c011d7df:	0f b6 c0             	movzbl %al,%eax
c011d7e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = sfs_bmap_get_nolock(sfs, sin, index, create, &ino)) != 0) {
c011d7e5:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011d7e8:	89 44 24 10          	mov    %eax,0x10(%esp)
c011d7ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011d7ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011d7f3:	8b 45 10             	mov    0x10(%ebp),%eax
c011d7f6:	89 44 24 08          	mov    %eax,0x8(%esp)
c011d7fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d7fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d801:	8b 45 08             	mov    0x8(%ebp),%eax
c011d804:	89 04 24             	mov    %eax,(%esp)
c011d807:	e8 7a fc ff ff       	call   c011d486 <sfs_bmap_get_nolock>
c011d80c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011d80f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011d813:	74 05                	je     c011d81a <sfs_bmap_load_nolock+0x84>
        return ret;
c011d815:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011d818:	eb 62                	jmp    c011d87c <sfs_bmap_load_nolock+0xe6>
    }
    assert(sfs_block_inuse(sfs, ino));
c011d81a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011d81d:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d821:	8b 45 08             	mov    0x8(%ebp),%eax
c011d824:	89 04 24             	mov    %eax,(%esp)
c011d827:	e8 43 f6 ff ff       	call   c011ce6f <sfs_block_inuse>
c011d82c:	85 c0                	test   %eax,%eax
c011d82e:	75 24                	jne    c011d854 <sfs_bmap_load_nolock+0xbe>
c011d830:	c7 44 24 0c e1 84 12 	movl   $0xc01284e1,0xc(%esp)
c011d837:	c0 
c011d838:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011d83f:	c0 
c011d840:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c011d847:	00 
c011d848:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011d84f:	e8 c2 39 fe ff       	call   c0101216 <__panic>
    if (create) {
c011d854:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011d858:	74 0f                	je     c011d869 <sfs_bmap_load_nolock+0xd3>
        din->blocks ++;
c011d85a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d85d:	8b 40 08             	mov    0x8(%eax),%eax
c011d860:	8d 50 01             	lea    0x1(%eax),%edx
c011d863:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d866:	89 50 08             	mov    %edx,0x8(%eax)
    }
    if (ino_store != NULL) {
c011d869:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011d86d:	74 08                	je     c011d877 <sfs_bmap_load_nolock+0xe1>
        *ino_store = ino;
c011d86f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011d872:	8b 45 14             	mov    0x14(%ebp),%eax
c011d875:	89 10                	mov    %edx,(%eax)
    }
    return 0;
c011d877:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011d87c:	c9                   	leave  
c011d87d:	c3                   	ret    

c011d87e <sfs_bmap_truncate_nolock>:

/*
 * sfs_bmap_truncate_nolock - free the disk block at the end of file
 */
static int
sfs_bmap_truncate_nolock(struct sfs_fs *sfs, struct sfs_inode *sin) {
c011d87e:	55                   	push   %ebp
c011d87f:	89 e5                	mov    %esp,%ebp
c011d881:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c011d884:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d887:	8b 00                	mov    (%eax),%eax
c011d889:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(din->blocks != 0);
c011d88c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d88f:	8b 40 08             	mov    0x8(%eax),%eax
c011d892:	85 c0                	test   %eax,%eax
c011d894:	75 24                	jne    c011d8ba <sfs_bmap_truncate_nolock+0x3c>
c011d896:	c7 44 24 0c 0d 86 12 	movl   $0xc012860d,0xc(%esp)
c011d89d:	c0 
c011d89e:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011d8a5:	c0 
c011d8a6:	c7 44 24 04 7b 01 00 	movl   $0x17b,0x4(%esp)
c011d8ad:	00 
c011d8ae:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011d8b5:	e8 5c 39 fe ff       	call   c0101216 <__panic>
    int ret;
    if ((ret = sfs_bmap_free_nolock(sfs, sin, din->blocks - 1)) != 0) {
c011d8ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d8bd:	8b 40 08             	mov    0x8(%eax),%eax
c011d8c0:	83 e8 01             	sub    $0x1,%eax
c011d8c3:	89 44 24 08          	mov    %eax,0x8(%esp)
c011d8c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d8ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d8ce:	8b 45 08             	mov    0x8(%ebp),%eax
c011d8d1:	89 04 24             	mov    %eax,(%esp)
c011d8d4:	e8 14 fe ff ff       	call   c011d6ed <sfs_bmap_free_nolock>
c011d8d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011d8dc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011d8e0:	74 05                	je     c011d8e7 <sfs_bmap_truncate_nolock+0x69>
        return ret;
c011d8e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011d8e5:	eb 1e                	jmp    c011d905 <sfs_bmap_truncate_nolock+0x87>
    }
    din->blocks --;
c011d8e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d8ea:	8b 40 08             	mov    0x8(%eax),%eax
c011d8ed:	8d 50 ff             	lea    -0x1(%eax),%edx
c011d8f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d8f3:	89 50 08             	mov    %edx,0x8(%eax)
    sin->dirty = 1;
c011d8f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d8f9:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    return 0;
c011d900:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011d905:	c9                   	leave  
c011d906:	c3                   	ret    

c011d907 <sfs_dirent_read_nolock>:
 * @sin:      sfs inode in memory
 * @slot:     the index of file entry
 * @entry:    file entry
 */
static int
sfs_dirent_read_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c011d907:	55                   	push   %ebp
c011d908:	89 e5                	mov    %esp,%ebp
c011d90a:	83 ec 38             	sub    $0x38,%esp
    assert(sin->din->type == SFS_TYPE_DIR && (slot >= 0 && slot < sin->din->blocks));
c011d90d:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d910:	8b 00                	mov    (%eax),%eax
c011d912:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011d916:	66 83 f8 02          	cmp    $0x2,%ax
c011d91a:	75 15                	jne    c011d931 <sfs_dirent_read_nolock+0x2a>
c011d91c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011d920:	78 0f                	js     c011d931 <sfs_dirent_read_nolock+0x2a>
c011d922:	8b 55 10             	mov    0x10(%ebp),%edx
c011d925:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d928:	8b 00                	mov    (%eax),%eax
c011d92a:	8b 40 08             	mov    0x8(%eax),%eax
c011d92d:	39 c2                	cmp    %eax,%edx
c011d92f:	72 24                	jb     c011d955 <sfs_dirent_read_nolock+0x4e>
c011d931:	c7 44 24 0c 20 86 12 	movl   $0xc0128620,0xc(%esp)
c011d938:	c0 
c011d939:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011d940:	c0 
c011d941:	c7 44 24 04 8e 01 00 	movl   $0x18e,0x4(%esp)
c011d948:	00 
c011d949:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011d950:	e8 c1 38 fe ff       	call   c0101216 <__panic>
    int ret;
    uint32_t ino;   //the index of disk block which contains this file entry
	// according to the DIR's inode and the slot of file entry, find the index of disk block which contains this file entry
    if ((ret = sfs_bmap_load_nolock(sfs, sin, slot, &ino)) != 0) {
c011d955:	8b 45 10             	mov    0x10(%ebp),%eax
c011d958:	8d 55 f0             	lea    -0x10(%ebp),%edx
c011d95b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011d95f:	89 44 24 08          	mov    %eax,0x8(%esp)
c011d963:	8b 45 0c             	mov    0xc(%ebp),%eax
c011d966:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d96a:	8b 45 08             	mov    0x8(%ebp),%eax
c011d96d:	89 04 24             	mov    %eax,(%esp)
c011d970:	e8 21 fe ff ff       	call   c011d796 <sfs_bmap_load_nolock>
c011d975:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011d978:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011d97c:	74 08                	je     c011d986 <sfs_dirent_read_nolock+0x7f>
        return ret;
c011d97e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d981:	e9 80 00 00 00       	jmp    c011da06 <sfs_dirent_read_nolock+0xff>
    }
    assert(sfs_block_inuse(sfs, ino));
c011d986:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011d989:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d98d:	8b 45 08             	mov    0x8(%ebp),%eax
c011d990:	89 04 24             	mov    %eax,(%esp)
c011d993:	e8 d7 f4 ff ff       	call   c011ce6f <sfs_block_inuse>
c011d998:	85 c0                	test   %eax,%eax
c011d99a:	75 24                	jne    c011d9c0 <sfs_dirent_read_nolock+0xb9>
c011d99c:	c7 44 24 0c e1 84 12 	movl   $0xc01284e1,0xc(%esp)
c011d9a3:	c0 
c011d9a4:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011d9ab:	c0 
c011d9ac:	c7 44 24 04 95 01 00 	movl   $0x195,0x4(%esp)
c011d9b3:	00 
c011d9b4:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011d9bb:	e8 56 38 fe ff       	call   c0101216 <__panic>
	// read the content of file entry in the disk block 
    if ((ret = sfs_rbuf(sfs, entry, sizeof(struct sfs_disk_entry), ino, 0)) != 0) {
c011d9c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011d9c3:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011d9ca:	00 
c011d9cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011d9cf:	c7 44 24 08 04 01 00 	movl   $0x104,0x8(%esp)
c011d9d6:	00 
c011d9d7:	8b 45 14             	mov    0x14(%ebp),%eax
c011d9da:	89 44 24 04          	mov    %eax,0x4(%esp)
c011d9de:	8b 45 08             	mov    0x8(%ebp),%eax
c011d9e1:	89 04 24             	mov    %eax,(%esp)
c011d9e4:	e8 55 28 00 00       	call   c012023e <sfs_rbuf>
c011d9e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011d9ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011d9f0:	74 05                	je     c011d9f7 <sfs_dirent_read_nolock+0xf0>
        return ret;
c011d9f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011d9f5:	eb 0f                	jmp    c011da06 <sfs_dirent_read_nolock+0xff>
    }
    entry->name[SFS_MAX_FNAME_LEN] = '\0';
c011d9f7:	8b 45 14             	mov    0x14(%ebp),%eax
c011d9fa:	c6 80 03 01 00 00 00 	movb   $0x0,0x103(%eax)
    return 0;
c011da01:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011da06:	c9                   	leave  
c011da07:	c3                   	ret    

c011da08 <sfs_dirent_search_nolock>:
 * @ino_store:  NO. of disk of this file (with the filename)'s inode
 * @slot:       logical index of file entry (NOTICE: each file entry ocupied one  disk block)
 * @empty_slot: the empty logical index of file entry.
 */
static int
sfs_dirent_search_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, uint32_t *ino_store, int *slot, int *empty_slot) {
c011da08:	55                   	push   %ebp
c011da09:	89 e5                	mov    %esp,%ebp
c011da0b:	83 ec 28             	sub    $0x28,%esp
	//cprintf("\nin sfs_dirent_search() !!!\n");
	//cprintf("sin->ino = %u\n\n", sin->ino);
    assert(strlen(name) <= SFS_MAX_FNAME_LEN);
c011da0e:	8b 45 10             	mov    0x10(%ebp),%eax
c011da11:	89 04 24             	mov    %eax,(%esp)
c011da14:	e8 90 33 00 00       	call   c0120da9 <strlen>
c011da19:	3d ff 00 00 00       	cmp    $0xff,%eax
c011da1e:	76 24                	jbe    c011da44 <sfs_dirent_search_nolock+0x3c>
c011da20:	c7 44 24 0c 6c 86 12 	movl   $0xc012866c,0xc(%esp)
c011da27:	c0 
c011da28:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011da2f:	c0 
c011da30:	c7 44 24 04 bc 01 00 	movl   $0x1bc,0x4(%esp)
c011da37:	00 
c011da38:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011da3f:	e8 d2 37 fe ff       	call   c0101216 <__panic>
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c011da44:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c011da4b:	e8 60 d0 fe ff       	call   c010aab0 <kmalloc>
c011da50:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011da53:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011da57:	75 0a                	jne    c011da63 <sfs_dirent_search_nolock+0x5b>
        return -E_NO_MEM;
c011da59:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c011da5e:	e9 cb 00 00 00       	jmp    c011db2e <sfs_dirent_search_nolock+0x126>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;  //对于目录，blocks即nslots为目录中文件索引的个数
c011da63:	8b 45 0c             	mov    0xc(%ebp),%eax
c011da66:	8b 00                	mov    (%eax),%eax
c011da68:	8b 40 08             	mov    0x8(%eax),%eax
c011da6b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    set_pvalue(empty_slot, nslots);
c011da6e:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c011da72:	74 08                	je     c011da7c <sfs_dirent_search_nolock+0x74>
c011da74:	8b 45 1c             	mov    0x1c(%ebp),%eax
c011da77:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011da7a:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < nslots; i ++) {
c011da7c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c011da83:	e9 85 00 00 00       	jmp    c011db0d <sfs_dirent_search_nolock+0x105>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c011da88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011da8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011da8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011da92:	89 44 24 08          	mov    %eax,0x8(%esp)
c011da96:	8b 45 0c             	mov    0xc(%ebp),%eax
c011da99:	89 44 24 04          	mov    %eax,0x4(%esp)
c011da9d:	8b 45 08             	mov    0x8(%ebp),%eax
c011daa0:	89 04 24             	mov    %eax,(%esp)
c011daa3:	e8 5f fe ff ff       	call   c011d907 <sfs_dirent_read_nolock>
c011daa8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011daab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011daaf:	74 02                	je     c011dab3 <sfs_dirent_search_nolock+0xab>
            goto out;
c011dab1:	eb 6d                	jmp    c011db20 <sfs_dirent_search_nolock+0x118>
        }
        if (entry->ino == 0) {
c011dab3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011dab6:	8b 00                	mov    (%eax),%eax
c011dab8:	85 c0                	test   %eax,%eax
c011daba:	75 12                	jne    c011dace <sfs_dirent_search_nolock+0xc6>
            set_pvalue(empty_slot, i);
c011dabc:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c011dac0:	74 0a                	je     c011dacc <sfs_dirent_search_nolock+0xc4>
c011dac2:	8b 45 1c             	mov    0x1c(%ebp),%eax
c011dac5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011dac8:	89 10                	mov    %edx,(%eax)
            continue ;
c011daca:	eb 3d                	jmp    c011db09 <sfs_dirent_search_nolock+0x101>
c011dacc:	eb 3b                	jmp    c011db09 <sfs_dirent_search_nolock+0x101>
        }
        if (strcmp(name, entry->name) == 0) {
c011dace:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011dad1:	83 c0 04             	add    $0x4,%eax
c011dad4:	89 44 24 04          	mov    %eax,0x4(%esp)
c011dad8:	8b 45 10             	mov    0x10(%ebp),%eax
c011dadb:	89 04 24             	mov    %eax,(%esp)
c011dade:	e8 be 33 00 00       	call   c0120ea1 <strcmp>
c011dae3:	85 c0                	test   %eax,%eax
c011dae5:	75 22                	jne    c011db09 <sfs_dirent_search_nolock+0x101>
            set_pvalue(slot, i);
c011dae7:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c011daeb:	74 08                	je     c011daf5 <sfs_dirent_search_nolock+0xed>
c011daed:	8b 45 18             	mov    0x18(%ebp),%eax
c011daf0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011daf3:	89 10                	mov    %edx,(%eax)
            set_pvalue(ino_store, entry->ino);
c011daf5:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011daf9:	74 0c                	je     c011db07 <sfs_dirent_search_nolock+0xff>
c011dafb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011dafe:	8b 10                	mov    (%eax),%edx
c011db00:	8b 45 14             	mov    0x14(%ebp),%eax
c011db03:	89 10                	mov    %edx,(%eax)
            goto out;
c011db05:	eb 19                	jmp    c011db20 <sfs_dirent_search_nolock+0x118>
c011db07:	eb 17                	jmp    c011db20 <sfs_dirent_search_nolock+0x118>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;  //对于目录，blocks即nslots为目录中文件索引的个数
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
c011db09:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c011db0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011db10:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c011db13:	0f 8c 6f ff ff ff    	jl     c011da88 <sfs_dirent_search_nolock+0x80>
            set_pvalue(ino_store, entry->ino);
            goto out;
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
c011db19:	c7 45 f4 f0 ff ff ff 	movl   $0xfffffff0,-0xc(%ebp)
out:
    kfree(entry);
c011db20:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011db23:	89 04 24             	mov    %eax,(%esp)
c011db26:	e8 a0 cf fe ff       	call   c010aacb <kfree>
    return ret;
c011db2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011db2e:	c9                   	leave  
c011db2f:	c3                   	ret    

c011db30 <sfs_dirent_findino_nolock>:
/*
 * sfs_dirent_findino_nolock - read all file entries in DIR's inode and find a entry->ino == ino
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
c011db30:	55                   	push   %ebp
c011db31:	89 e5                	mov    %esp,%ebp
c011db33:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c011db36:	8b 45 0c             	mov    0xc(%ebp),%eax
c011db39:	8b 00                	mov    (%eax),%eax
c011db3b:	8b 40 08             	mov    0x8(%eax),%eax
c011db3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c011db41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c011db48:	eb 43                	jmp    c011db8d <sfs_dirent_findino_nolock+0x5d>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c011db4a:	8b 45 14             	mov    0x14(%ebp),%eax
c011db4d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011db51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011db54:	89 44 24 08          	mov    %eax,0x8(%esp)
c011db58:	8b 45 0c             	mov    0xc(%ebp),%eax
c011db5b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011db5f:	8b 45 08             	mov    0x8(%ebp),%eax
c011db62:	89 04 24             	mov    %eax,(%esp)
c011db65:	e8 9d fd ff ff       	call   c011d907 <sfs_dirent_read_nolock>
c011db6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011db6d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011db71:	74 05                	je     c011db78 <sfs_dirent_findino_nolock+0x48>
            return ret;
c011db73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011db76:	eb 22                	jmp    c011db9a <sfs_dirent_findino_nolock+0x6a>
        }
        if (entry->ino == ino) {
c011db78:	8b 45 14             	mov    0x14(%ebp),%eax
c011db7b:	8b 00                	mov    (%eax),%eax
c011db7d:	3b 45 10             	cmp    0x10(%ebp),%eax
c011db80:	75 07                	jne    c011db89 <sfs_dirent_findino_nolock+0x59>
            return 0;
c011db82:	b8 00 00 00 00       	mov    $0x0,%eax
c011db87:	eb 11                	jmp    c011db9a <sfs_dirent_findino_nolock+0x6a>
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c011db89:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011db8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011db90:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011db93:	7c b5                	jl     c011db4a <sfs_dirent_findino_nolock+0x1a>
        }
        if (entry->ino == ino) {
            return 0;
        }
    }
    return -E_NOENT;
c011db95:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c011db9a:	c9                   	leave  
c011db9b:	c3                   	ret    

c011db9c <sfs_lookup_once>:
 * @name:       the file name in DIR
 * @node_store: the inode corresponding the file name in DIR
 * @slot:       the logical index of file entry
 */
static int
sfs_lookup_once(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, struct inode **node_store, int *slot) {
c011db9c:	55                   	push   %ebp
c011db9d:	89 e5                	mov    %esp,%ebp
c011db9f:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t ino;
    lock_sin(sin);
c011dba2:	8b 45 0c             	mov    0xc(%ebp),%eax
c011dba5:	89 04 24             	mov    %eax,(%esp)
c011dba8:	e8 f4 f0 ff ff       	call   c011cca1 <lock_sin>
    {   // find the NO. of disk block and logical index of file entry
        ret = sfs_dirent_search_nolock(sfs, sin, name, &ino, slot, NULL);
c011dbad:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c011dbb4:	00 
c011dbb5:	8b 45 18             	mov    0x18(%ebp),%eax
c011dbb8:	89 44 24 10          	mov    %eax,0x10(%esp)
c011dbbc:	8d 45 f0             	lea    -0x10(%ebp),%eax
c011dbbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011dbc3:	8b 45 10             	mov    0x10(%ebp),%eax
c011dbc6:	89 44 24 08          	mov    %eax,0x8(%esp)
c011dbca:	8b 45 0c             	mov    0xc(%ebp),%eax
c011dbcd:	89 44 24 04          	mov    %eax,0x4(%esp)
c011dbd1:	8b 45 08             	mov    0x8(%ebp),%eax
c011dbd4:	89 04 24             	mov    %eax,(%esp)
c011dbd7:	e8 2c fe ff ff       	call   c011da08 <sfs_dirent_search_nolock>
c011dbdc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sin(sin);
c011dbdf:	8b 45 0c             	mov    0xc(%ebp),%eax
c011dbe2:	89 04 24             	mov    %eax,(%esp)
c011dbe5:	e8 cd f0 ff ff       	call   c011ccb7 <unlock_sin>
    if (ret == 0) {
c011dbea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011dbee:	75 1c                	jne    c011dc0c <sfs_lookup_once+0x70>
		// load the content of inode with the the NO. of disk block
        ret = sfs_load_inode(sfs, node_store, ino);
c011dbf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011dbf3:	89 44 24 08          	mov    %eax,0x8(%esp)
c011dbf7:	8b 45 14             	mov    0x14(%ebp),%eax
c011dbfa:	89 44 24 04          	mov    %eax,0x4(%esp)
c011dbfe:	8b 45 08             	mov    0x8(%ebp),%eax
c011dc01:	89 04 24             	mov    %eax,(%esp)
c011dc04:	e8 62 f5 ff ff       	call   c011d16b <sfs_load_inode>
c011dc09:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    return ret;
c011dc0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011dc0f:	c9                   	leave  
c011dc10:	c3                   	ret    

c011dc11 <sfs_opendir>:

// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
c011dc11:	55                   	push   %ebp
c011dc12:	89 e5                	mov    %esp,%ebp
    switch (open_flags & O_ACCMODE) {
c011dc14:	8b 45 0c             	mov    0xc(%ebp),%eax
c011dc17:	83 e0 03             	and    $0x3,%eax
c011dc1a:	85 c0                	test   %eax,%eax
c011dc1c:	74 07                	je     c011dc25 <sfs_opendir+0x14>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
c011dc1e:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c011dc23:	eb 17                	jmp    c011dc3c <sfs_opendir+0x2b>
// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c011dc25:	90                   	nop
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
    }
    if (open_flags & O_APPEND) {
c011dc26:	8b 45 0c             	mov    0xc(%ebp),%eax
c011dc29:	83 e0 20             	and    $0x20,%eax
c011dc2c:	85 c0                	test   %eax,%eax
c011dc2e:	74 07                	je     c011dc37 <sfs_opendir+0x26>
        return -E_ISDIR;
c011dc30:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c011dc35:	eb 05                	jmp    c011dc3c <sfs_opendir+0x2b>
    }
    return 0;
c011dc37:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011dc3c:	5d                   	pop    %ebp
c011dc3d:	c3                   	ret    

c011dc3e <sfs_openfile>:

// sfs_openfile - open file (no use)
static int
sfs_openfile(struct inode *node, uint32_t open_flags) {
c011dc3e:	55                   	push   %ebp
c011dc3f:	89 e5                	mov    %esp,%ebp
    return 0;
c011dc41:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011dc46:	5d                   	pop    %ebp
c011dc47:	c3                   	ret    

c011dc48 <sfs_close>:

// sfs_close - close file
static int
sfs_close(struct inode *node) {
c011dc48:	55                   	push   %ebp
c011dc49:	89 e5                	mov    %esp,%ebp
c011dc4b:	83 ec 28             	sub    $0x28,%esp
    return vop_fsync(node);
c011dc4e:	8b 45 08             	mov    0x8(%ebp),%eax
c011dc51:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011dc54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011dc57:	8b 40 3c             	mov    0x3c(%eax),%eax
c011dc5a:	8b 40 18             	mov    0x18(%eax),%eax
c011dc5d:	85 c0                	test   %eax,%eax
c011dc5f:	75 24                	jne    c011dc85 <sfs_close+0x3d>
c011dc61:	c7 44 24 0c 90 86 12 	movl   $0xc0128690,0xc(%esp)
c011dc68:	c0 
c011dc69:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011dc70:	c0 
c011dc71:	c7 44 24 04 1e 02 00 	movl   $0x21e,0x4(%esp)
c011dc78:	00 
c011dc79:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011dc80:	e8 91 35 fe ff       	call   c0101216 <__panic>
c011dc85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011dc89:	74 17                	je     c011dca2 <sfs_close+0x5a>
c011dc8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011dc8e:	8b 40 3c             	mov    0x3c(%eax),%eax
c011dc91:	85 c0                	test   %eax,%eax
c011dc93:	74 0d                	je     c011dca2 <sfs_close+0x5a>
c011dc95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011dc98:	8b 40 3c             	mov    0x3c(%eax),%eax
c011dc9b:	8b 40 18             	mov    0x18(%eax),%eax
c011dc9e:	85 c0                	test   %eax,%eax
c011dca0:	75 24                	jne    c011dcc6 <sfs_close+0x7e>
c011dca2:	c7 44 24 0c b4 86 12 	movl   $0xc01286b4,0xc(%esp)
c011dca9:	c0 
c011dcaa:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011dcb1:	c0 
c011dcb2:	c7 44 24 04 1e 02 00 	movl   $0x21e,0x4(%esp)
c011dcb9:	00 
c011dcba:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011dcc1:	e8 50 35 fe ff       	call   c0101216 <__panic>
c011dcc6:	c7 44 24 04 02 87 12 	movl   $0xc0128702,0x4(%esp)
c011dccd:	c0 
c011dcce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011dcd1:	89 04 24             	mov    %eax,(%esp)
c011dcd4:	e8 5f bc ff ff       	call   c0119938 <inode_check>
c011dcd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011dcdc:	8b 40 3c             	mov    0x3c(%eax),%eax
c011dcdf:	8b 40 18             	mov    0x18(%eax),%eax
c011dce2:	8b 55 08             	mov    0x8(%ebp),%edx
c011dce5:	89 14 24             	mov    %edx,(%esp)
c011dce8:	ff d0                	call   *%eax
}
c011dcea:	c9                   	leave  
c011dceb:	c3                   	ret    

c011dcec <sfs_io_nolock>:
 * @offset:   the offset of file
 * @alenp:    the length need to read (is a pointer). and will RETURN the really Rd/Wr length
 * @write:    BOOL, 0 read, 1 write
 */
static int
sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) {
c011dcec:	55                   	push   %ebp
c011dced:	89 e5                	mov    %esp,%ebp
c011dcef:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_inode *din = sin->din;
c011dcf2:	8b 45 0c             	mov    0xc(%ebp),%eax
c011dcf5:	8b 00                	mov    (%eax),%eax
c011dcf7:	89 45 d8             	mov    %eax,-0x28(%ebp)
    assert(din->type != SFS_TYPE_DIR);
c011dcfa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011dcfd:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011dd01:	66 83 f8 02          	cmp    $0x2,%ax
c011dd05:	75 24                	jne    c011dd2b <sfs_io_nolock+0x3f>
c011dd07:	c7 44 24 0c 08 87 12 	movl   $0xc0128708,0xc(%esp)
c011dd0e:	c0 
c011dd0f:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011dd16:	c0 
c011dd17:	c7 44 24 04 2d 02 00 	movl   $0x22d,0x4(%esp)
c011dd1e:	00 
c011dd1f:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011dd26:	e8 eb 34 fe ff       	call   c0101216 <__panic>
    off_t endpos = offset + *alenp, blkoff;
c011dd2b:	8b 45 18             	mov    0x18(%ebp),%eax
c011dd2e:	8b 10                	mov    (%eax),%edx
c011dd30:	8b 45 14             	mov    0x14(%ebp),%eax
c011dd33:	01 d0                	add    %edx,%eax
c011dd35:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *alenp = 0;
c011dd38:	8b 45 18             	mov    0x18(%ebp),%eax
c011dd3b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// calculate the Rd/Wr end position
    if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) {
c011dd41:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011dd45:	78 12                	js     c011dd59 <sfs_io_nolock+0x6d>
c011dd47:	8b 45 14             	mov    0x14(%ebp),%eax
c011dd4a:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c011dd4f:	77 08                	ja     c011dd59 <sfs_io_nolock+0x6d>
c011dd51:	8b 45 14             	mov    0x14(%ebp),%eax
c011dd54:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c011dd57:	7e 0a                	jle    c011dd63 <sfs_io_nolock+0x77>
        return -E_INVAL;
c011dd59:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011dd5e:	e9 a0 02 00 00       	jmp    c011e003 <sfs_io_nolock+0x317>
    }
    if (offset == endpos) {
c011dd63:	8b 45 14             	mov    0x14(%ebp),%eax
c011dd66:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c011dd69:	75 0a                	jne    c011dd75 <sfs_io_nolock+0x89>
        return 0;
c011dd6b:	b8 00 00 00 00       	mov    $0x0,%eax
c011dd70:	e9 8e 02 00 00       	jmp    c011e003 <sfs_io_nolock+0x317>
    }
    if (endpos > SFS_MAX_FILE_SIZE) {
c011dd75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011dd78:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c011dd7d:	76 07                	jbe    c011dd86 <sfs_io_nolock+0x9a>
        endpos = SFS_MAX_FILE_SIZE;
c011dd7f:	c7 45 f4 00 00 00 08 	movl   $0x8000000,-0xc(%ebp)
    }
    if (!write) {
c011dd86:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c011dd8a:	75 2a                	jne    c011ddb6 <sfs_io_nolock+0xca>
        if (offset >= din->size) {
c011dd8c:	8b 55 14             	mov    0x14(%ebp),%edx
c011dd8f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011dd92:	8b 00                	mov    (%eax),%eax
c011dd94:	39 c2                	cmp    %eax,%edx
c011dd96:	72 0a                	jb     c011dda2 <sfs_io_nolock+0xb6>
            return 0;
c011dd98:	b8 00 00 00 00       	mov    $0x0,%eax
c011dd9d:	e9 61 02 00 00       	jmp    c011e003 <sfs_io_nolock+0x317>
        }
        if (endpos > din->size) {
c011dda2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011dda5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011dda8:	8b 00                	mov    (%eax),%eax
c011ddaa:	39 c2                	cmp    %eax,%edx
c011ddac:	76 08                	jbe    c011ddb6 <sfs_io_nolock+0xca>
            endpos = din->size;
c011ddae:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011ddb1:	8b 00                	mov    (%eax),%eax
c011ddb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }

    int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset);
    int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks);
    if (write) {
c011ddb6:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c011ddba:	74 10                	je     c011ddcc <sfs_io_nolock+0xe0>
        sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock;
c011ddbc:	c7 45 f0 f7 02 12 c0 	movl   $0xc01202f7,-0x10(%ebp)
c011ddc3:	c7 45 ec 0e 02 12 c0 	movl   $0xc012020e,-0x14(%ebp)
c011ddca:	eb 0e                	jmp    c011ddda <sfs_io_nolock+0xee>
    }
    else {
        sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock;
c011ddcc:	c7 45 f0 3e 02 12 c0 	movl   $0xc012023e,-0x10(%ebp)
c011ddd3:	c7 45 ec de 01 12 c0 	movl   $0xc01201de,-0x14(%ebp)
    }

    int ret = 0;
c011ddda:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    size_t size, alen = 0;
c011dde1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    uint32_t ino;
    uint32_t blkno = offset / SFS_BLKSIZE;          // The NO. of Rd/Wr begin block
c011dde8:	8b 45 14             	mov    0x14(%ebp),%eax
c011ddeb:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c011ddf1:	85 c0                	test   %eax,%eax
c011ddf3:	0f 48 c2             	cmovs  %edx,%eax
c011ddf6:	c1 f8 0c             	sar    $0xc,%eax
c011ddf9:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t nblks = endpos / SFS_BLKSIZE - blkno;  // The size of Rd/Wr blocks
c011ddfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011ddff:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c011de05:	85 c0                	test   %eax,%eax
c011de07:	0f 48 c2             	cmovs  %edx,%eax
c011de0a:	c1 f8 0c             	sar    $0xc,%eax
c011de0d:	2b 45 e0             	sub    -0x20(%ebp),%eax
c011de10:	89 45 dc             	mov    %eax,-0x24(%ebp)
	 * (2) Rd/Wr aligned blocks 
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op
     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
    if ((blkoff = offset % SFS_BLKSIZE) != 0) {
c011de13:	8b 45 14             	mov    0x14(%ebp),%eax
c011de16:	99                   	cltd   
c011de17:	c1 ea 14             	shr    $0x14,%edx
c011de1a:	01 d0                	add    %edx,%eax
c011de1c:	25 ff 0f 00 00       	and    $0xfff,%eax
c011de21:	29 d0                	sub    %edx,%eax
c011de23:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c011de26:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c011de2a:	0f 84 9f 00 00 00    	je     c011decf <sfs_io_nolock+0x1e3>
        size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset);
c011de30:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011de34:	74 0a                	je     c011de40 <sfs_io_nolock+0x154>
c011de36:	b8 00 10 00 00       	mov    $0x1000,%eax
c011de3b:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c011de3e:	eb 0a                	jmp    c011de4a <sfs_io_nolock+0x15e>
c011de40:	8b 45 14             	mov    0x14(%ebp),%eax
c011de43:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011de46:	29 c2                	sub    %eax,%edx
c011de48:	89 d0                	mov    %edx,%eax
c011de4a:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c011de4d:	8d 45 cc             	lea    -0x34(%ebp),%eax
c011de50:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011de54:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011de57:	89 44 24 08          	mov    %eax,0x8(%esp)
c011de5b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011de5e:	89 44 24 04          	mov    %eax,0x4(%esp)
c011de62:	8b 45 08             	mov    0x8(%ebp),%eax
c011de65:	89 04 24             	mov    %eax,(%esp)
c011de68:	e8 29 f9 ff ff       	call   c011d796 <sfs_bmap_load_nolock>
c011de6d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011de70:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011de74:	74 05                	je     c011de7b <sfs_io_nolock+0x18f>
            goto out;
c011de76:	e9 51 01 00 00       	jmp    c011dfcc <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) {
c011de7b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011de7e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c011de81:	89 54 24 10          	mov    %edx,0x10(%esp)
c011de85:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011de89:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011de8c:	89 44 24 08          	mov    %eax,0x8(%esp)
c011de90:	8b 45 10             	mov    0x10(%ebp),%eax
c011de93:	89 44 24 04          	mov    %eax,0x4(%esp)
c011de97:	8b 45 08             	mov    0x8(%ebp),%eax
c011de9a:	89 04 24             	mov    %eax,(%esp)
c011de9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011dea0:	ff d0                	call   *%eax
c011dea2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011dea5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011dea9:	74 05                	je     c011deb0 <sfs_io_nolock+0x1c4>
            goto out;
c011deab:	e9 1c 01 00 00       	jmp    c011dfcc <sfs_io_nolock+0x2e0>
        }
        alen += size;
c011deb0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011deb3:	01 45 e4             	add    %eax,-0x1c(%ebp)
        if (nblks == 0) {
c011deb6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011deba:	75 05                	jne    c011dec1 <sfs_io_nolock+0x1d5>
            goto out;
c011debc:	e9 0b 01 00 00       	jmp    c011dfcc <sfs_io_nolock+0x2e0>
        }
        buf += size, blkno ++, nblks --;
c011dec1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011dec4:	01 45 10             	add    %eax,0x10(%ebp)
c011dec7:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c011decb:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
    }

    size = SFS_BLKSIZE;
c011decf:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
    while (nblks != 0) {
c011ded6:	eb 71                	jmp    c011df49 <sfs_io_nolock+0x25d>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c011ded8:	8d 45 cc             	lea    -0x34(%ebp),%eax
c011dedb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011dedf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011dee2:	89 44 24 08          	mov    %eax,0x8(%esp)
c011dee6:	8b 45 0c             	mov    0xc(%ebp),%eax
c011dee9:	89 44 24 04          	mov    %eax,0x4(%esp)
c011deed:	8b 45 08             	mov    0x8(%ebp),%eax
c011def0:	89 04 24             	mov    %eax,(%esp)
c011def3:	e8 9e f8 ff ff       	call   c011d796 <sfs_bmap_load_nolock>
c011def8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011defb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011deff:	74 05                	je     c011df06 <sfs_io_nolock+0x21a>
            goto out;
c011df01:	e9 c6 00 00 00       	jmp    c011dfcc <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) {
c011df06:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011df09:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011df10:	00 
c011df11:	89 44 24 08          	mov    %eax,0x8(%esp)
c011df15:	8b 45 10             	mov    0x10(%ebp),%eax
c011df18:	89 44 24 04          	mov    %eax,0x4(%esp)
c011df1c:	8b 45 08             	mov    0x8(%ebp),%eax
c011df1f:	89 04 24             	mov    %eax,(%esp)
c011df22:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011df25:	ff d0                	call   *%eax
c011df27:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011df2a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011df2e:	74 05                	je     c011df35 <sfs_io_nolock+0x249>
            goto out;
c011df30:	e9 97 00 00 00       	jmp    c011dfcc <sfs_io_nolock+0x2e0>
        }
        alen += size, buf += size, blkno ++, nblks --;
c011df35:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011df38:	01 45 e4             	add    %eax,-0x1c(%ebp)
c011df3b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011df3e:	01 45 10             	add    %eax,0x10(%ebp)
c011df41:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c011df45:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
        }
        buf += size, blkno ++, nblks --;
    }

    size = SFS_BLKSIZE;
    while (nblks != 0) {
c011df49:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011df4d:	75 89                	jne    c011ded8 <sfs_io_nolock+0x1ec>
            goto out;
        }
        alen += size, buf += size, blkno ++, nblks --;
    }

    if ((size = endpos % SFS_BLKSIZE) != 0) {
c011df4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011df52:	99                   	cltd   
c011df53:	c1 ea 14             	shr    $0x14,%edx
c011df56:	01 d0                	add    %edx,%eax
c011df58:	25 ff 0f 00 00       	and    $0xfff,%eax
c011df5d:	29 d0                	sub    %edx,%eax
c011df5f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c011df62:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c011df66:	74 64                	je     c011dfcc <sfs_io_nolock+0x2e0>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c011df68:	8d 45 cc             	lea    -0x34(%ebp),%eax
c011df6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011df6f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011df72:	89 44 24 08          	mov    %eax,0x8(%esp)
c011df76:	8b 45 0c             	mov    0xc(%ebp),%eax
c011df79:	89 44 24 04          	mov    %eax,0x4(%esp)
c011df7d:	8b 45 08             	mov    0x8(%ebp),%eax
c011df80:	89 04 24             	mov    %eax,(%esp)
c011df83:	e8 0e f8 ff ff       	call   c011d796 <sfs_bmap_load_nolock>
c011df88:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011df8b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011df8f:	74 02                	je     c011df93 <sfs_io_nolock+0x2a7>
            goto out;
c011df91:	eb 39                	jmp    c011dfcc <sfs_io_nolock+0x2e0>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, 0)) != 0) {
c011df93:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011df96:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011df9d:	00 
c011df9e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011dfa2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011dfa5:	89 44 24 08          	mov    %eax,0x8(%esp)
c011dfa9:	8b 45 10             	mov    0x10(%ebp),%eax
c011dfac:	89 44 24 04          	mov    %eax,0x4(%esp)
c011dfb0:	8b 45 08             	mov    0x8(%ebp),%eax
c011dfb3:	89 04 24             	mov    %eax,(%esp)
c011dfb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011dfb9:	ff d0                	call   *%eax
c011dfbb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011dfbe:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011dfc2:	74 02                	je     c011dfc6 <sfs_io_nolock+0x2da>
            goto out;
c011dfc4:	eb 06                	jmp    c011dfcc <sfs_io_nolock+0x2e0>
        }
        alen += size;
c011dfc6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011dfc9:	01 45 e4             	add    %eax,-0x1c(%ebp)
    }
out:
    *alenp = alen;
c011dfcc:	8b 45 18             	mov    0x18(%ebp),%eax
c011dfcf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011dfd2:	89 10                	mov    %edx,(%eax)
    if (offset + alen > sin->din->size) {
c011dfd4:	8b 55 14             	mov    0x14(%ebp),%edx
c011dfd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011dfda:	01 c2                	add    %eax,%edx
c011dfdc:	8b 45 0c             	mov    0xc(%ebp),%eax
c011dfdf:	8b 00                	mov    (%eax),%eax
c011dfe1:	8b 00                	mov    (%eax),%eax
c011dfe3:	39 c2                	cmp    %eax,%edx
c011dfe5:	76 19                	jbe    c011e000 <sfs_io_nolock+0x314>
        sin->din->size = offset + alen;
c011dfe7:	8b 45 0c             	mov    0xc(%ebp),%eax
c011dfea:	8b 00                	mov    (%eax),%eax
c011dfec:	8b 4d 14             	mov    0x14(%ebp),%ecx
c011dfef:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011dff2:	01 ca                	add    %ecx,%edx
c011dff4:	89 10                	mov    %edx,(%eax)
        sin->dirty = 1;
c011dff6:	8b 45 0c             	mov    0xc(%ebp),%eax
c011dff9:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    }
    return ret;
c011e000:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c011e003:	c9                   	leave  
c011e004:	c3                   	ret    

c011e005 <sfs_io>:
/*
 * sfs_io - Rd/Wr file. the wrapper of sfs_io_nolock
            with lock protect
 */
static inline int
sfs_io(struct inode *node, struct iobuf *iob, bool write) {
c011e005:	55                   	push   %ebp
c011e006:	89 e5                	mov    %esp,%ebp
c011e008:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011e00b:	8b 45 08             	mov    0x8(%ebp),%eax
c011e00e:	8b 40 38             	mov    0x38(%eax),%eax
c011e011:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011e014:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011e018:	74 0a                	je     c011e024 <sfs_io+0x1f>
c011e01a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011e01d:	8b 40 6c             	mov    0x6c(%eax),%eax
c011e020:	85 c0                	test   %eax,%eax
c011e022:	74 24                	je     c011e048 <sfs_io+0x43>
c011e024:	c7 44 24 0c 24 87 12 	movl   $0xc0128724,0xc(%esp)
c011e02b:	c0 
c011e02c:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e033:	c0 
c011e034:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
c011e03b:	00 
c011e03c:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e043:	e8 ce 31 fe ff       	call   c0101216 <__panic>
c011e048:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011e04b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011e04e:	8b 45 08             	mov    0x8(%ebp),%eax
c011e051:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011e054:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011e058:	74 0d                	je     c011e067 <sfs_io+0x62>
c011e05a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011e05d:	8b 40 2c             	mov    0x2c(%eax),%eax
c011e060:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011e065:	74 24                	je     c011e08b <sfs_io+0x86>
c011e067:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011e06e:	c0 
c011e06f:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e076:	c0 
c011e077:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c011e07e:	00 
c011e07f:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e086:	e8 8b 31 fe ff       	call   c0101216 <__panic>
c011e08b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011e08e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int ret;
    lock_sin(sin);
c011e091:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011e094:	89 04 24             	mov    %eax,(%esp)
c011e097:	e8 05 ec ff ff       	call   c011cca1 <lock_sin>
    {
        size_t alen = iob->io_resid;
c011e09c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e09f:	8b 40 0c             	mov    0xc(%eax),%eax
c011e0a2:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ret = sfs_io_nolock(sfs, sin, iob->io_base, iob->io_offset, &alen, write);
c011e0a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e0a8:	8b 50 04             	mov    0x4(%eax),%edx
c011e0ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e0ae:	8b 00                	mov    (%eax),%eax
c011e0b0:	8b 4d 10             	mov    0x10(%ebp),%ecx
c011e0b3:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c011e0b7:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c011e0ba:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c011e0be:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011e0c2:	89 44 24 08          	mov    %eax,0x8(%esp)
c011e0c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011e0c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c011e0cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011e0d0:	89 04 24             	mov    %eax,(%esp)
c011e0d3:	e8 14 fc ff ff       	call   c011dcec <sfs_io_nolock>
c011e0d8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (alen != 0) {
c011e0db:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011e0de:	85 c0                	test   %eax,%eax
c011e0e0:	74 12                	je     c011e0f4 <sfs_io+0xef>
            iobuf_skip(iob, alen);
c011e0e2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011e0e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c011e0e9:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e0ec:	89 04 24             	mov    %eax,(%esp)
c011e0ef:	e8 33 64 ff ff       	call   c0114527 <iobuf_skip>
        }
    }
    unlock_sin(sin);
c011e0f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011e0f7:	89 04 24             	mov    %eax,(%esp)
c011e0fa:	e8 b8 eb ff ff       	call   c011ccb7 <unlock_sin>
    return ret;
c011e0ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c011e102:	c9                   	leave  
c011e103:	c3                   	ret    

c011e104 <sfs_read>:

// sfs_read - read file
static int
sfs_read(struct inode *node, struct iobuf *iob) {
c011e104:	55                   	push   %ebp
c011e105:	89 e5                	mov    %esp,%ebp
c011e107:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 0);
c011e10a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011e111:	00 
c011e112:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e115:	89 44 24 04          	mov    %eax,0x4(%esp)
c011e119:	8b 45 08             	mov    0x8(%ebp),%eax
c011e11c:	89 04 24             	mov    %eax,(%esp)
c011e11f:	e8 e1 fe ff ff       	call   c011e005 <sfs_io>
}
c011e124:	c9                   	leave  
c011e125:	c3                   	ret    

c011e126 <sfs_write>:

// sfs_write - write file
static int
sfs_write(struct inode *node, struct iobuf *iob) {
c011e126:	55                   	push   %ebp
c011e127:	89 e5                	mov    %esp,%ebp
c011e129:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 1);
c011e12c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011e133:	00 
c011e134:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e137:	89 44 24 04          	mov    %eax,0x4(%esp)
c011e13b:	8b 45 08             	mov    0x8(%ebp),%eax
c011e13e:	89 04 24             	mov    %eax,(%esp)
c011e141:	e8 bf fe ff ff       	call   c011e005 <sfs_io>
}
c011e146:	c9                   	leave  
c011e147:	c3                   	ret    

c011e148 <sfs_fstat>:

/*
 * sfs_fstat - Return nlinks/block/size, etc. info about a file. The pointer is a pointer to struct stat;
 */
static int
sfs_fstat(struct inode *node, struct stat *stat) {
c011e148:	55                   	push   %ebp
c011e149:	89 e5                	mov    %esp,%ebp
c011e14b:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c011e14e:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c011e155:	00 
c011e156:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011e15d:	00 
c011e15e:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e161:	89 04 24             	mov    %eax,(%esp)
c011e164:	e8 96 2f 00 00       	call   c01210ff <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c011e169:	8b 45 08             	mov    0x8(%ebp),%eax
c011e16c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011e16f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011e172:	8b 40 3c             	mov    0x3c(%eax),%eax
c011e175:	8b 40 2c             	mov    0x2c(%eax),%eax
c011e178:	85 c0                	test   %eax,%eax
c011e17a:	75 24                	jne    c011e1a0 <sfs_fstat+0x58>
c011e17c:	c7 44 24 0c 50 87 12 	movl   $0xc0128750,0xc(%esp)
c011e183:	c0 
c011e184:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e18b:	c0 
c011e18c:	c7 44 24 04 b0 02 00 	movl   $0x2b0,0x4(%esp)
c011e193:	00 
c011e194:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e19b:	e8 76 30 fe ff       	call   c0101216 <__panic>
c011e1a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011e1a4:	74 17                	je     c011e1bd <sfs_fstat+0x75>
c011e1a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011e1a9:	8b 40 3c             	mov    0x3c(%eax),%eax
c011e1ac:	85 c0                	test   %eax,%eax
c011e1ae:	74 0d                	je     c011e1bd <sfs_fstat+0x75>
c011e1b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011e1b3:	8b 40 3c             	mov    0x3c(%eax),%eax
c011e1b6:	8b 40 2c             	mov    0x2c(%eax),%eax
c011e1b9:	85 c0                	test   %eax,%eax
c011e1bb:	75 24                	jne    c011e1e1 <sfs_fstat+0x99>
c011e1bd:	c7 44 24 0c 74 87 12 	movl   $0xc0128774,0xc(%esp)
c011e1c4:	c0 
c011e1c5:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e1cc:	c0 
c011e1cd:	c7 44 24 04 b0 02 00 	movl   $0x2b0,0x4(%esp)
c011e1d4:	00 
c011e1d5:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e1dc:	e8 35 30 fe ff       	call   c0101216 <__panic>
c011e1e1:	c7 44 24 04 c4 87 12 	movl   $0xc01287c4,0x4(%esp)
c011e1e8:	c0 
c011e1e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011e1ec:	89 04 24             	mov    %eax,(%esp)
c011e1ef:	e8 44 b7 ff ff       	call   c0119938 <inode_check>
c011e1f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011e1f7:	8b 40 3c             	mov    0x3c(%eax),%eax
c011e1fa:	8b 40 2c             	mov    0x2c(%eax),%eax
c011e1fd:	8b 55 0c             	mov    0xc(%ebp),%edx
c011e200:	89 54 24 04          	mov    %edx,0x4(%esp)
c011e204:	8b 55 08             	mov    0x8(%ebp),%edx
c011e207:	89 14 24             	mov    %edx,(%esp)
c011e20a:	ff d0                	call   *%eax
c011e20c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011e20f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011e213:	74 05                	je     c011e21a <sfs_fstat+0xd2>
        return ret;
c011e215:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011e218:	eb 71                	jmp    c011e28b <sfs_fstat+0x143>
    }
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c011e21a:	8b 45 08             	mov    0x8(%ebp),%eax
c011e21d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011e220:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011e224:	74 0d                	je     c011e233 <sfs_fstat+0xeb>
c011e226:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011e229:	8b 40 2c             	mov    0x2c(%eax),%eax
c011e22c:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011e231:	74 24                	je     c011e257 <sfs_fstat+0x10f>
c011e233:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011e23a:	c0 
c011e23b:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e242:	c0 
c011e243:	c7 44 24 04 b3 02 00 	movl   $0x2b3,0x4(%esp)
c011e24a:	00 
c011e24b:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e252:	e8 bf 2f fe ff       	call   c0101216 <__panic>
c011e257:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011e25a:	8b 00                	mov    (%eax),%eax
c011e25c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = din->nlinks;
c011e25f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011e262:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c011e266:	0f b7 d0             	movzwl %ax,%edx
c011e269:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e26c:	89 50 04             	mov    %edx,0x4(%eax)
    stat->st_blocks = din->blocks;
c011e26f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011e272:	8b 50 08             	mov    0x8(%eax),%edx
c011e275:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e278:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = din->size;
c011e27b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011e27e:	8b 10                	mov    (%eax),%edx
c011e280:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e283:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c011e286:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011e28b:	c9                   	leave  
c011e28c:	c3                   	ret    

c011e28d <sfs_fsync>:

/*
 * sfs_fsync - Force any dirty inode info associated with this file to stable storage.
 */
static int
sfs_fsync(struct inode *node) {
c011e28d:	55                   	push   %ebp
c011e28e:	89 e5                	mov    %esp,%ebp
c011e290:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011e293:	8b 45 08             	mov    0x8(%ebp),%eax
c011e296:	8b 40 38             	mov    0x38(%eax),%eax
c011e299:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011e29c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011e2a0:	74 0a                	je     c011e2ac <sfs_fsync+0x1f>
c011e2a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011e2a5:	8b 40 6c             	mov    0x6c(%eax),%eax
c011e2a8:	85 c0                	test   %eax,%eax
c011e2aa:	74 24                	je     c011e2d0 <sfs_fsync+0x43>
c011e2ac:	c7 44 24 0c 24 87 12 	movl   $0xc0128724,0xc(%esp)
c011e2b3:	c0 
c011e2b4:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e2bb:	c0 
c011e2bc:	c7 44 24 04 bf 02 00 	movl   $0x2bf,0x4(%esp)
c011e2c3:	00 
c011e2c4:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e2cb:	e8 46 2f fe ff       	call   c0101216 <__panic>
c011e2d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011e2d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011e2d6:	8b 45 08             	mov    0x8(%ebp),%eax
c011e2d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011e2dc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011e2e0:	74 0d                	je     c011e2ef <sfs_fsync+0x62>
c011e2e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011e2e5:	8b 40 2c             	mov    0x2c(%eax),%eax
c011e2e8:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011e2ed:	74 24                	je     c011e313 <sfs_fsync+0x86>
c011e2ef:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011e2f6:	c0 
c011e2f7:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e2fe:	c0 
c011e2ff:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
c011e306:	00 
c011e307:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e30e:	e8 03 2f fe ff       	call   c0101216 <__panic>
c011e313:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011e316:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int ret = 0;
c011e319:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (sin->dirty) {
c011e320:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e323:	8b 40 08             	mov    0x8(%eax),%eax
c011e326:	85 c0                	test   %eax,%eax
c011e328:	74 6b                	je     c011e395 <sfs_fsync+0x108>
        lock_sin(sin);
c011e32a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e32d:	89 04 24             	mov    %eax,(%esp)
c011e330:	e8 6c e9 ff ff       	call   c011cca1 <lock_sin>
        {
            if (sin->dirty) {
c011e335:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e338:	8b 40 08             	mov    0x8(%eax),%eax
c011e33b:	85 c0                	test   %eax,%eax
c011e33d:	74 4b                	je     c011e38a <sfs_fsync+0xfd>
                sin->dirty = 0;
c011e33f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e342:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                if ((ret = sfs_wbuf(sfs, sin->din, sizeof(struct sfs_disk_inode), sin->ino, 0)) != 0) {
c011e349:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e34c:	8b 50 04             	mov    0x4(%eax),%edx
c011e34f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e352:	8b 00                	mov    (%eax),%eax
c011e354:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011e35b:	00 
c011e35c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011e360:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c011e367:	00 
c011e368:	89 44 24 04          	mov    %eax,0x4(%esp)
c011e36c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011e36f:	89 04 24             	mov    %eax,(%esp)
c011e372:	e8 80 1f 00 00       	call   c01202f7 <sfs_wbuf>
c011e377:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011e37a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011e37e:	74 0a                	je     c011e38a <sfs_fsync+0xfd>
                    sin->dirty = 1;
c011e380:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e383:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
                }
            }
        }
        unlock_sin(sin);
c011e38a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e38d:	89 04 24             	mov    %eax,(%esp)
c011e390:	e8 22 e9 ff ff       	call   c011ccb7 <unlock_sin>
    }
    return ret;
c011e395:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011e398:	c9                   	leave  
c011e399:	c3                   	ret    

c011e39a <sfs_namefile>:
/*
 *sfs_namefile -Compute pathname relative to filesystem root of the file and copy to the specified io buffer.
 *  
 */
static int
sfs_namefile(struct inode *node, struct iobuf *iob) {
c011e39a:	55                   	push   %ebp
c011e39b:	89 e5                	mov    %esp,%ebp
c011e39d:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_entry *entry;
    if (iob->io_resid <= 2 || (entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c011e3a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e3a3:	8b 40 0c             	mov    0xc(%eax),%eax
c011e3a6:	83 f8 02             	cmp    $0x2,%eax
c011e3a9:	76 15                	jbe    c011e3c0 <sfs_namefile+0x26>
c011e3ab:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c011e3b2:	e8 f9 c6 fe ff       	call   c010aab0 <kmalloc>
c011e3b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011e3ba:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011e3be:	75 0a                	jne    c011e3ca <sfs_namefile+0x30>
        return -E_NO_MEM;
c011e3c0:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c011e3c5:	e9 bd 02 00 00       	jmp    c011e687 <sfs_namefile+0x2ed>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011e3ca:	8b 45 08             	mov    0x8(%ebp),%eax
c011e3cd:	8b 40 38             	mov    0x38(%eax),%eax
c011e3d0:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011e3d3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c011e3d7:	74 0a                	je     c011e3e3 <sfs_namefile+0x49>
c011e3d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011e3dc:	8b 40 6c             	mov    0x6c(%eax),%eax
c011e3df:	85 c0                	test   %eax,%eax
c011e3e1:	74 24                	je     c011e407 <sfs_namefile+0x6d>
c011e3e3:	c7 44 24 0c 24 87 12 	movl   $0xc0128724,0xc(%esp)
c011e3ea:	c0 
c011e3eb:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e3f2:	c0 
c011e3f3:	c7 44 24 04 dc 02 00 	movl   $0x2dc,0x4(%esp)
c011e3fa:	00 
c011e3fb:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e402:	e8 0f 2e fe ff       	call   c0101216 <__panic>
c011e407:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011e40a:	89 45 dc             	mov    %eax,-0x24(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011e40d:	8b 45 08             	mov    0x8(%ebp),%eax
c011e410:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011e413:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c011e417:	74 0d                	je     c011e426 <sfs_namefile+0x8c>
c011e419:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011e41c:	8b 40 2c             	mov    0x2c(%eax),%eax
c011e41f:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011e424:	74 24                	je     c011e44a <sfs_namefile+0xb0>
c011e426:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011e42d:	c0 
c011e42e:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e435:	c0 
c011e436:	c7 44 24 04 dd 02 00 	movl   $0x2dd,0x4(%esp)
c011e43d:	00 
c011e43e:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e445:	e8 cc 2d fe ff       	call   c0101216 <__panic>
c011e44a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011e44d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int ret;
    char *ptr = iob->io_base + iob->io_resid;
c011e450:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e453:	8b 10                	mov    (%eax),%edx
c011e455:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e458:	8b 40 0c             	mov    0xc(%eax),%eax
c011e45b:	01 d0                	add    %edx,%eax
c011e45d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t alen, resid = iob->io_resid - 2;
c011e460:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e463:	8b 40 0c             	mov    0xc(%eax),%eax
c011e466:	83 e8 02             	sub    $0x2,%eax
c011e469:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vop_ref_inc(node);
c011e46c:	8b 45 08             	mov    0x8(%ebp),%eax
c011e46f:	89 04 24             	mov    %eax,(%esp)
c011e472:	e8 57 b2 ff ff       	call   c01196ce <inode_ref_inc>
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
c011e477:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011e47e:	00 
c011e47f:	8d 45 c8             	lea    -0x38(%ebp),%eax
c011e482:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011e486:	c7 44 24 08 cc 87 12 	movl   $0xc01287cc,0x8(%esp)
c011e48d:	c0 
c011e48e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011e491:	89 44 24 04          	mov    %eax,0x4(%esp)
c011e495:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011e498:	89 04 24             	mov    %eax,(%esp)
c011e49b:	e8 fc f6 ff ff       	call   c011db9c <sfs_lookup_once>
c011e4a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011e4a3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011e4a7:	74 05                	je     c011e4ae <sfs_namefile+0x114>
            goto failed;
c011e4a9:	e9 c0 01 00 00       	jmp    c011e66e <sfs_namefile+0x2d4>
        }

        uint32_t ino = sin->ino;
c011e4ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011e4b1:	8b 40 04             	mov    0x4(%eax),%eax
c011e4b4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        vop_ref_dec(node);
c011e4b7:	8b 45 08             	mov    0x8(%ebp),%eax
c011e4ba:	89 04 24             	mov    %eax,(%esp)
c011e4bd:	e8 26 b2 ff ff       	call   c01196e8 <inode_ref_dec>
        if (node == parent) {
c011e4c2:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011e4c5:	39 45 08             	cmp    %eax,0x8(%ebp)
c011e4c8:	75 76                	jne    c011e540 <sfs_namefile+0x1a6>
            vop_ref_dec(node);
c011e4ca:	8b 45 08             	mov    0x8(%ebp),%eax
c011e4cd:	89 04 24             	mov    %eax,(%esp)
c011e4d0:	e8 13 b2 ff ff       	call   c01196e8 <inode_ref_dec>
        }
        resid -= alen, ptr -= alen;
        memcpy(ptr, entry->name, alen - 1);
        ptr[alen - 1] = '/';
    }
    alen = iob->io_resid - resid - 2;
c011e4d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e4d8:	8b 40 0c             	mov    0xc(%eax),%eax
c011e4db:	2b 45 e8             	sub    -0x18(%ebp),%eax
c011e4de:	83 e8 02             	sub    $0x2,%eax
c011e4e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
    ptr = memmove(iob->io_base + 1, ptr, alen);
c011e4e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e4e7:	8b 00                	mov    (%eax),%eax
c011e4e9:	8d 50 01             	lea    0x1(%eax),%edx
c011e4ec:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011e4ef:	89 44 24 08          	mov    %eax,0x8(%esp)
c011e4f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011e4f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c011e4fa:	89 14 24             	mov    %edx,(%esp)
c011e4fd:	e8 3c 2c 00 00       	call   c012113e <memmove>
c011e502:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptr[-1] = '/', ptr[alen] = '\0';
c011e505:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011e508:	83 e8 01             	sub    $0x1,%eax
c011e50b:	c6 00 2f             	movb   $0x2f,(%eax)
c011e50e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011e511:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011e514:	01 d0                	add    %edx,%eax
c011e516:	c6 00 00             	movb   $0x0,(%eax)
    iobuf_skip(iob, alen);
c011e519:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011e51c:	89 44 24 04          	mov    %eax,0x4(%esp)
c011e520:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e523:	89 04 24             	mov    %eax,(%esp)
c011e526:	e8 fc 5f ff ff       	call   c0114527 <iobuf_skip>
    kfree(entry);
c011e52b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e52e:	89 04 24             	mov    %eax,(%esp)
c011e531:	e8 95 c5 fe ff       	call   c010aacb <kfree>
    return 0;
c011e536:	b8 00 00 00 00       	mov    $0x0,%eax
c011e53b:	e9 47 01 00 00       	jmp    c011e687 <sfs_namefile+0x2ed>
        if (node == parent) {
            vop_ref_dec(node);
            break;
        }

        node = parent, sin = vop_info(node, sfs_inode);
c011e540:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011e543:	89 45 08             	mov    %eax,0x8(%ebp)
c011e546:	8b 45 08             	mov    0x8(%ebp),%eax
c011e549:	89 45 cc             	mov    %eax,-0x34(%ebp)
c011e54c:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c011e550:	74 0d                	je     c011e55f <sfs_namefile+0x1c5>
c011e552:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011e555:	8b 40 2c             	mov    0x2c(%eax),%eax
c011e558:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011e55d:	74 24                	je     c011e583 <sfs_namefile+0x1e9>
c011e55f:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011e566:	c0 
c011e567:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e56e:	c0 
c011e56f:	c7 44 24 04 f0 02 00 	movl   $0x2f0,0x4(%esp)
c011e576:	00 
c011e577:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e57e:	e8 93 2c fe ff       	call   c0101216 <__panic>
c011e583:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011e586:	89 45 f4             	mov    %eax,-0xc(%ebp)
        assert(ino != sin->ino && sin->din->type == SFS_TYPE_DIR);
c011e589:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011e58c:	8b 40 04             	mov    0x4(%eax),%eax
c011e58f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011e592:	74 0f                	je     c011e5a3 <sfs_namefile+0x209>
c011e594:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011e597:	8b 00                	mov    (%eax),%eax
c011e599:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011e59d:	66 83 f8 02          	cmp    $0x2,%ax
c011e5a1:	74 24                	je     c011e5c7 <sfs_namefile+0x22d>
c011e5a3:	c7 44 24 0c d0 87 12 	movl   $0xc01287d0,0xc(%esp)
c011e5aa:	c0 
c011e5ab:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e5b2:	c0 
c011e5b3:	c7 44 24 04 f1 02 00 	movl   $0x2f1,0x4(%esp)
c011e5ba:	00 
c011e5bb:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e5c2:	e8 4f 2c fe ff       	call   c0101216 <__panic>

        lock_sin(sin);
c011e5c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011e5ca:	89 04 24             	mov    %eax,(%esp)
c011e5cd:	e8 cf e6 ff ff       	call   c011cca1 <lock_sin>
        {
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
c011e5d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e5d5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011e5d9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011e5dc:	89 44 24 08          	mov    %eax,0x8(%esp)
c011e5e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011e5e3:	89 44 24 04          	mov    %eax,0x4(%esp)
c011e5e7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011e5ea:	89 04 24             	mov    %eax,(%esp)
c011e5ed:	e8 3e f5 ff ff       	call   c011db30 <sfs_dirent_findino_nolock>
c011e5f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        unlock_sin(sin);
c011e5f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011e5f8:	89 04 24             	mov    %eax,(%esp)
c011e5fb:	e8 b7 e6 ff ff       	call   c011ccb7 <unlock_sin>

        if (ret != 0) {
c011e600:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011e604:	74 03                	je     c011e609 <sfs_namefile+0x26f>
            goto failed;
c011e606:	90                   	nop
c011e607:	eb 65                	jmp    c011e66e <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
c011e609:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e60c:	83 c0 04             	add    $0x4,%eax
c011e60f:	89 04 24             	mov    %eax,(%esp)
c011e612:	e8 92 27 00 00       	call   c0120da9 <strlen>
c011e617:	83 c0 01             	add    $0x1,%eax
c011e61a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c011e61d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011e620:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c011e623:	76 09                	jbe    c011e62e <sfs_namefile+0x294>
    iobuf_skip(iob, alen);
    kfree(entry);
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c011e625:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c011e62c:	eb 40                	jmp    c011e66e <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
            goto failed_nomem;
        }
        resid -= alen, ptr -= alen;
c011e62e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011e631:	29 45 e8             	sub    %eax,-0x18(%ebp)
c011e634:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011e637:	f7 d8                	neg    %eax
c011e639:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(ptr, entry->name, alen - 1);
c011e63c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011e63f:	8d 50 ff             	lea    -0x1(%eax),%edx
c011e642:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e645:	83 c0 04             	add    $0x4,%eax
c011e648:	89 54 24 08          	mov    %edx,0x8(%esp)
c011e64c:	89 44 24 04          	mov    %eax,0x4(%esp)
c011e650:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011e653:	89 04 24             	mov    %eax,(%esp)
c011e656:	e8 86 2b 00 00       	call   c01211e1 <memcpy>
        ptr[alen - 1] = '/';
c011e65b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011e65e:	8d 50 ff             	lea    -0x1(%eax),%edx
c011e661:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011e664:	01 d0                	add    %edx,%eax
c011e666:	c6 00 2f             	movb   $0x2f,(%eax)
    }
c011e669:	e9 09 fe ff ff       	jmp    c011e477 <sfs_namefile+0xdd>
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
failed:
    vop_ref_dec(node);
c011e66e:	8b 45 08             	mov    0x8(%ebp),%eax
c011e671:	89 04 24             	mov    %eax,(%esp)
c011e674:	e8 6f b0 ff ff       	call   c01196e8 <inode_ref_dec>
    kfree(entry);
c011e679:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e67c:	89 04 24             	mov    %eax,(%esp)
c011e67f:	e8 47 c4 fe ff       	call   c010aacb <kfree>
    return ret;
c011e684:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c011e687:	c9                   	leave  
c011e688:	c3                   	ret    

c011e689 <sfs_getdirentry_sub_nolock>:

/*
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c011e689:	55                   	push   %ebp
c011e68a:	89 e5                	mov    %esp,%ebp
c011e68c:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c011e68f:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e692:	8b 00                	mov    (%eax),%eax
c011e694:	8b 40 08             	mov    0x8(%eax),%eax
c011e697:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c011e69a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c011e6a1:	eb 4c                	jmp    c011e6ef <sfs_getdirentry_sub_nolock+0x66>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c011e6a3:	8b 45 14             	mov    0x14(%ebp),%eax
c011e6a6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011e6aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011e6ad:	89 44 24 08          	mov    %eax,0x8(%esp)
c011e6b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e6b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c011e6b8:	8b 45 08             	mov    0x8(%ebp),%eax
c011e6bb:	89 04 24             	mov    %eax,(%esp)
c011e6be:	e8 44 f2 ff ff       	call   c011d907 <sfs_dirent_read_nolock>
c011e6c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011e6c6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011e6ca:	74 05                	je     c011e6d1 <sfs_getdirentry_sub_nolock+0x48>
            return ret;
c011e6cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011e6cf:	eb 2b                	jmp    c011e6fc <sfs_getdirentry_sub_nolock+0x73>
        }
        if (entry->ino != 0) {
c011e6d1:	8b 45 14             	mov    0x14(%ebp),%eax
c011e6d4:	8b 00                	mov    (%eax),%eax
c011e6d6:	85 c0                	test   %eax,%eax
c011e6d8:	74 11                	je     c011e6eb <sfs_getdirentry_sub_nolock+0x62>
            if (slot == 0) {
c011e6da:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011e6de:	75 07                	jne    c011e6e7 <sfs_getdirentry_sub_nolock+0x5e>
                return 0;
c011e6e0:	b8 00 00 00 00       	mov    $0x0,%eax
c011e6e5:	eb 15                	jmp    c011e6fc <sfs_getdirentry_sub_nolock+0x73>
            }
            slot --;
c011e6e7:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c011e6eb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011e6ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011e6f2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011e6f5:	7c ac                	jl     c011e6a3 <sfs_getdirentry_sub_nolock+0x1a>
                return 0;
            }
            slot --;
        }
    }
    return -E_NOENT;
c011e6f7:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c011e6fc:	c9                   	leave  
c011e6fd:	c3                   	ret    

c011e6fe <sfs_getdirentry>:
/*
 * sfs_getdirentry - according to the iob->io_offset, calculate the dir entry's slot in disk block,
                     get dir entry content from the disk 
 */
static int
sfs_getdirentry(struct inode *node, struct iobuf *iob) {
c011e6fe:	55                   	push   %ebp
c011e6ff:	89 e5                	mov    %esp,%ebp
c011e701:	83 ec 48             	sub    $0x48,%esp
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c011e704:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c011e70b:	e8 a0 c3 fe ff       	call   c010aab0 <kmalloc>
c011e710:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011e713:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011e717:	75 0a                	jne    c011e723 <sfs_getdirentry+0x25>
        return -E_NO_MEM;
c011e719:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c011e71e:	e9 6b 01 00 00       	jmp    c011e88e <sfs_getdirentry+0x190>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011e723:	8b 45 08             	mov    0x8(%ebp),%eax
c011e726:	8b 40 38             	mov    0x38(%eax),%eax
c011e729:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011e72c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011e730:	74 0a                	je     c011e73c <sfs_getdirentry+0x3e>
c011e732:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011e735:	8b 40 6c             	mov    0x6c(%eax),%eax
c011e738:	85 c0                	test   %eax,%eax
c011e73a:	74 24                	je     c011e760 <sfs_getdirentry+0x62>
c011e73c:	c7 44 24 0c 24 87 12 	movl   $0xc0128724,0xc(%esp)
c011e743:	c0 
c011e744:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e74b:	c0 
c011e74c:	c7 44 24 04 32 03 00 	movl   $0x332,0x4(%esp)
c011e753:	00 
c011e754:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e75b:	e8 b6 2a fe ff       	call   c0101216 <__panic>
c011e760:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011e763:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011e766:	8b 45 08             	mov    0x8(%ebp),%eax
c011e769:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011e76c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011e770:	74 0d                	je     c011e77f <sfs_getdirentry+0x81>
c011e772:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e775:	8b 40 2c             	mov    0x2c(%eax),%eax
c011e778:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011e77d:	74 24                	je     c011e7a3 <sfs_getdirentry+0xa5>
c011e77f:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011e786:	c0 
c011e787:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e78e:	c0 
c011e78f:	c7 44 24 04 33 03 00 	movl   $0x333,0x4(%esp)
c011e796:	00 
c011e797:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e79e:	e8 73 2a fe ff       	call   c0101216 <__panic>
c011e7a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e7a6:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int ret, slot;
    off_t offset = iob->io_offset;
c011e7a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e7ac:	8b 40 04             	mov    0x4(%eax),%eax
c011e7af:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (offset < 0 || offset % sfs_dentry_size != 0) {
c011e7b2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011e7b6:	78 0a                	js     c011e7c2 <sfs_getdirentry+0xc4>
c011e7b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011e7bb:	0f b6 c0             	movzbl %al,%eax
c011e7be:	85 c0                	test   %eax,%eax
c011e7c0:	74 15                	je     c011e7d7 <sfs_getdirentry+0xd9>
        kfree(entry);
c011e7c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011e7c5:	89 04 24             	mov    %eax,(%esp)
c011e7c8:	e8 fe c2 fe ff       	call   c010aacb <kfree>
        return -E_INVAL;
c011e7cd:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011e7d2:	e9 b7 00 00 00       	jmp    c011e88e <sfs_getdirentry+0x190>
    }
    if ((slot = offset / sfs_dentry_size) > sin->din->blocks) {
c011e7d7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011e7da:	c1 e8 08             	shr    $0x8,%eax
c011e7dd:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011e7e0:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011e7e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011e7e6:	8b 00                	mov    (%eax),%eax
c011e7e8:	8b 40 08             	mov    0x8(%eax),%eax
c011e7eb:	39 c2                	cmp    %eax,%edx
c011e7ed:	76 15                	jbe    c011e804 <sfs_getdirentry+0x106>
        kfree(entry);
c011e7ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011e7f2:	89 04 24             	mov    %eax,(%esp)
c011e7f5:	e8 d1 c2 fe ff       	call   c010aacb <kfree>
        return -E_NOENT;
c011e7fa:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c011e7ff:	e9 8a 00 00 00       	jmp    c011e88e <sfs_getdirentry+0x190>
    }
    lock_sin(sin);
c011e804:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011e807:	89 04 24             	mov    %eax,(%esp)
c011e80a:	e8 92 e4 ff ff       	call   c011cca1 <lock_sin>
    if ((ret = sfs_getdirentry_sub_nolock(sfs, sin, slot, entry)) != 0) {
c011e80f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011e812:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011e816:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011e819:	89 44 24 08          	mov    %eax,0x8(%esp)
c011e81d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011e820:	89 44 24 04          	mov    %eax,0x4(%esp)
c011e824:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011e827:	89 04 24             	mov    %eax,(%esp)
c011e82a:	e8 5a fe ff ff       	call   c011e689 <sfs_getdirentry_sub_nolock>
c011e82f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011e832:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011e836:	74 0d                	je     c011e845 <sfs_getdirentry+0x147>
        unlock_sin(sin);
c011e838:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011e83b:	89 04 24             	mov    %eax,(%esp)
c011e83e:	e8 74 e4 ff ff       	call   c011ccb7 <unlock_sin>
        goto out;
c011e843:	eb 3b                	jmp    c011e880 <sfs_getdirentry+0x182>
    }
    unlock_sin(sin);
c011e845:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011e848:	89 04 24             	mov    %eax,(%esp)
c011e84b:	e8 67 e4 ff ff       	call   c011ccb7 <unlock_sin>
    ret = iobuf_move(iob, entry->name, sfs_dentry_size, 1, NULL);
c011e850:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011e853:	83 c0 04             	add    $0x4,%eax
c011e856:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011e85d:	00 
c011e85e:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011e865:	00 
c011e866:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c011e86d:	00 
c011e86e:	89 44 24 04          	mov    %eax,0x4(%esp)
c011e872:	8b 45 0c             	mov    0xc(%ebp),%eax
c011e875:	89 04 24             	mov    %eax,(%esp)
c011e878:	e8 95 5b ff ff       	call   c0114412 <iobuf_move>
c011e87d:	89 45 f4             	mov    %eax,-0xc(%ebp)
out:
    kfree(entry);
c011e880:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011e883:	89 04 24             	mov    %eax,(%esp)
c011e886:	e8 40 c2 fe ff       	call   c010aacb <kfree>
    return ret;
c011e88b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011e88e:	c9                   	leave  
c011e88f:	c3                   	ret    

c011e890 <sfs_reclaim>:

/*
 * sfs_reclaim - Free all resources inode occupied . Called when inode is no longer in use. 
 */
static int
sfs_reclaim(struct inode *node) {
c011e890:	55                   	push   %ebp
c011e891:	89 e5                	mov    %esp,%ebp
c011e893:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011e896:	8b 45 08             	mov    0x8(%ebp),%eax
c011e899:	8b 40 38             	mov    0x38(%eax),%eax
c011e89c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011e89f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011e8a3:	74 0a                	je     c011e8af <sfs_reclaim+0x1f>
c011e8a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011e8a8:	8b 40 6c             	mov    0x6c(%eax),%eax
c011e8ab:	85 c0                	test   %eax,%eax
c011e8ad:	74 24                	je     c011e8d3 <sfs_reclaim+0x43>
c011e8af:	c7 44 24 0c 24 87 12 	movl   $0xc0128724,0xc(%esp)
c011e8b6:	c0 
c011e8b7:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e8be:	c0 
c011e8bf:	c7 44 24 04 50 03 00 	movl   $0x350,0x4(%esp)
c011e8c6:	00 
c011e8c7:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e8ce:	e8 43 29 fe ff       	call   c0101216 <__panic>
c011e8d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011e8d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011e8d9:	8b 45 08             	mov    0x8(%ebp),%eax
c011e8dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011e8df:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011e8e3:	74 0d                	je     c011e8f2 <sfs_reclaim+0x62>
c011e8e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011e8e8:	8b 40 2c             	mov    0x2c(%eax),%eax
c011e8eb:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011e8f0:	74 24                	je     c011e916 <sfs_reclaim+0x86>
c011e8f2:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011e8f9:	c0 
c011e8fa:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e901:	c0 
c011e902:	c7 44 24 04 51 03 00 	movl   $0x351,0x4(%esp)
c011e909:	00 
c011e90a:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e911:	e8 00 29 fe ff       	call   c0101216 <__panic>
c011e916:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011e919:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int  ret = -E_BUSY;
c011e91c:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
    uint32_t ent;
    lock_sfs_fs(sfs);
c011e923:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011e926:	89 04 24             	mov    %eax,(%esp)
c011e929:	e8 1f 1c 00 00       	call   c012054d <lock_sfs_fs>
    assert(sin->reclaim_count > 0);
c011e92e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e931:	8b 40 0c             	mov    0xc(%eax),%eax
c011e934:	85 c0                	test   %eax,%eax
c011e936:	7f 24                	jg     c011e95c <sfs_reclaim+0xcc>
c011e938:	c7 44 24 0c 02 88 12 	movl   $0xc0128802,0xc(%esp)
c011e93f:	c0 
c011e940:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e947:	c0 
c011e948:	c7 44 24 04 56 03 00 	movl   $0x356,0x4(%esp)
c011e94f:	00 
c011e950:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e957:	e8 ba 28 fe ff       	call   c0101216 <__panic>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
c011e95c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e95f:	8b 40 0c             	mov    0xc(%eax),%eax
c011e962:	8d 50 ff             	lea    -0x1(%eax),%edx
c011e965:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e968:	89 50 0c             	mov    %edx,0xc(%eax)
c011e96b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e96e:	8b 40 0c             	mov    0xc(%eax),%eax
c011e971:	85 c0                	test   %eax,%eax
c011e973:	0f 85 07 02 00 00    	jne    c011eb80 <sfs_reclaim+0x2f0>
c011e979:	8b 45 08             	mov    0x8(%ebp),%eax
c011e97c:	89 04 24             	mov    %eax,(%esp)
c011e97f:	e8 12 e3 ff ff       	call   c011cc96 <inode_ref_count>
c011e984:	85 c0                	test   %eax,%eax
c011e986:	0f 85 f4 01 00 00    	jne    c011eb80 <sfs_reclaim+0x2f0>
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
c011e98c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011e98f:	8b 00                	mov    (%eax),%eax
c011e991:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c011e995:	66 85 c0             	test   %ax,%ax
c011e998:	0f 85 b2 00 00 00    	jne    c011ea50 <sfs_reclaim+0x1c0>
        if ((ret = vop_truncate(node, 0)) != 0) {
c011e99e:	8b 45 08             	mov    0x8(%ebp),%eax
c011e9a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011e9a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011e9a7:	8b 40 3c             	mov    0x3c(%eax),%eax
c011e9aa:	8b 40 34             	mov    0x34(%eax),%eax
c011e9ad:	85 c0                	test   %eax,%eax
c011e9af:	75 24                	jne    c011e9d5 <sfs_reclaim+0x145>
c011e9b1:	c7 44 24 0c 1c 88 12 	movl   $0xc012881c,0xc(%esp)
c011e9b8:	c0 
c011e9b9:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011e9c0:	c0 
c011e9c1:	c7 44 24 04 5b 03 00 	movl   $0x35b,0x4(%esp)
c011e9c8:	00 
c011e9c9:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011e9d0:	e8 41 28 fe ff       	call   c0101216 <__panic>
c011e9d5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c011e9d9:	74 17                	je     c011e9f2 <sfs_reclaim+0x162>
c011e9db:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011e9de:	8b 40 3c             	mov    0x3c(%eax),%eax
c011e9e1:	85 c0                	test   %eax,%eax
c011e9e3:	74 0d                	je     c011e9f2 <sfs_reclaim+0x162>
c011e9e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011e9e8:	8b 40 3c             	mov    0x3c(%eax),%eax
c011e9eb:	8b 40 34             	mov    0x34(%eax),%eax
c011e9ee:	85 c0                	test   %eax,%eax
c011e9f0:	75 24                	jne    c011ea16 <sfs_reclaim+0x186>
c011e9f2:	c7 44 24 0c 44 88 12 	movl   $0xc0128844,0xc(%esp)
c011e9f9:	c0 
c011e9fa:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011ea01:	c0 
c011ea02:	c7 44 24 04 5b 03 00 	movl   $0x35b,0x4(%esp)
c011ea09:	00 
c011ea0a:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011ea11:	e8 00 28 fe ff       	call   c0101216 <__panic>
c011ea16:	c7 44 24 04 95 88 12 	movl   $0xc0128895,0x4(%esp)
c011ea1d:	c0 
c011ea1e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011ea21:	89 04 24             	mov    %eax,(%esp)
c011ea24:	e8 0f af ff ff       	call   c0119938 <inode_check>
c011ea29:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011ea2c:	8b 40 3c             	mov    0x3c(%eax),%eax
c011ea2f:	8b 40 34             	mov    0x34(%eax),%eax
c011ea32:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011ea39:	00 
c011ea3a:	8b 55 08             	mov    0x8(%ebp),%edx
c011ea3d:	89 14 24             	mov    %edx,(%esp)
c011ea40:	ff d0                	call   *%eax
c011ea42:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011ea45:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011ea49:	74 05                	je     c011ea50 <sfs_reclaim+0x1c0>
            goto failed_unlock;
c011ea4b:	e9 30 01 00 00       	jmp    c011eb80 <sfs_reclaim+0x2f0>
        }
    }
    if (sin->dirty) {
c011ea50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011ea53:	8b 40 08             	mov    0x8(%eax),%eax
c011ea56:	85 c0                	test   %eax,%eax
c011ea58:	0f 84 a7 00 00 00    	je     c011eb05 <sfs_reclaim+0x275>
        if ((ret = vop_fsync(node)) != 0) {
c011ea5e:	8b 45 08             	mov    0x8(%ebp),%eax
c011ea61:	89 45 dc             	mov    %eax,-0x24(%ebp)
c011ea64:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011ea67:	8b 40 3c             	mov    0x3c(%eax),%eax
c011ea6a:	8b 40 18             	mov    0x18(%eax),%eax
c011ea6d:	85 c0                	test   %eax,%eax
c011ea6f:	75 24                	jne    c011ea95 <sfs_reclaim+0x205>
c011ea71:	c7 44 24 0c 90 86 12 	movl   $0xc0128690,0xc(%esp)
c011ea78:	c0 
c011ea79:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011ea80:	c0 
c011ea81:	c7 44 24 04 60 03 00 	movl   $0x360,0x4(%esp)
c011ea88:	00 
c011ea89:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011ea90:	e8 81 27 fe ff       	call   c0101216 <__panic>
c011ea95:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011ea99:	74 17                	je     c011eab2 <sfs_reclaim+0x222>
c011ea9b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011ea9e:	8b 40 3c             	mov    0x3c(%eax),%eax
c011eaa1:	85 c0                	test   %eax,%eax
c011eaa3:	74 0d                	je     c011eab2 <sfs_reclaim+0x222>
c011eaa5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011eaa8:	8b 40 3c             	mov    0x3c(%eax),%eax
c011eaab:	8b 40 18             	mov    0x18(%eax),%eax
c011eaae:	85 c0                	test   %eax,%eax
c011eab0:	75 24                	jne    c011ead6 <sfs_reclaim+0x246>
c011eab2:	c7 44 24 0c b4 86 12 	movl   $0xc01286b4,0xc(%esp)
c011eab9:	c0 
c011eaba:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011eac1:	c0 
c011eac2:	c7 44 24 04 60 03 00 	movl   $0x360,0x4(%esp)
c011eac9:	00 
c011eaca:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011ead1:	e8 40 27 fe ff       	call   c0101216 <__panic>
c011ead6:	c7 44 24 04 02 87 12 	movl   $0xc0128702,0x4(%esp)
c011eadd:	c0 
c011eade:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011eae1:	89 04 24             	mov    %eax,(%esp)
c011eae4:	e8 4f ae ff ff       	call   c0119938 <inode_check>
c011eae9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011eaec:	8b 40 3c             	mov    0x3c(%eax),%eax
c011eaef:	8b 40 18             	mov    0x18(%eax),%eax
c011eaf2:	8b 55 08             	mov    0x8(%ebp),%edx
c011eaf5:	89 14 24             	mov    %edx,(%esp)
c011eaf8:	ff d0                	call   *%eax
c011eafa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011eafd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011eb01:	74 02                	je     c011eb05 <sfs_reclaim+0x275>
            goto failed_unlock;
c011eb03:	eb 7b                	jmp    c011eb80 <sfs_reclaim+0x2f0>
        }
    }
    sfs_remove_links(sin);
c011eb05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011eb08:	89 04 24             	mov    %eax,(%esp)
c011eb0b:	e8 01 e3 ff ff       	call   c011ce11 <sfs_remove_links>
    unlock_sfs_fs(sfs);
c011eb10:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011eb13:	89 04 24             	mov    %eax,(%esp)
c011eb16:	e8 5e 1a 00 00       	call   c0120579 <unlock_sfs_fs>

    if (sin->din->nlinks == 0) {
c011eb1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011eb1e:	8b 00                	mov    (%eax),%eax
c011eb20:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c011eb24:	66 85 c0             	test   %ax,%ax
c011eb27:	75 38                	jne    c011eb61 <sfs_reclaim+0x2d1>
        sfs_block_free(sfs, sin->ino);
c011eb29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011eb2c:	8b 40 04             	mov    0x4(%eax),%eax
c011eb2f:	89 44 24 04          	mov    %eax,0x4(%esp)
c011eb33:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011eb36:	89 04 24             	mov    %eax,(%esp)
c011eb39:	e8 63 e4 ff ff       	call   c011cfa1 <sfs_block_free>
        if ((ent = sin->din->indirect) != 0) {
c011eb3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011eb41:	8b 00                	mov    (%eax),%eax
c011eb43:	8b 40 3c             	mov    0x3c(%eax),%eax
c011eb46:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011eb49:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c011eb4d:	74 12                	je     c011eb61 <sfs_reclaim+0x2d1>
            sfs_block_free(sfs, ent);
c011eb4f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011eb52:	89 44 24 04          	mov    %eax,0x4(%esp)
c011eb56:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011eb59:	89 04 24             	mov    %eax,(%esp)
c011eb5c:	e8 40 e4 ff ff       	call   c011cfa1 <sfs_block_free>
        }
    }
    kfree(sin->din);
c011eb61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011eb64:	8b 00                	mov    (%eax),%eax
c011eb66:	89 04 24             	mov    %eax,(%esp)
c011eb69:	e8 5d bf fe ff       	call   c010aacb <kfree>
    vop_kill(node);
c011eb6e:	8b 45 08             	mov    0x8(%ebp),%eax
c011eb71:	89 04 24             	mov    %eax,(%esp)
c011eb74:	e8 dc aa ff ff       	call   c0119655 <inode_kill>
    return 0;
c011eb79:	b8 00 00 00 00       	mov    $0x0,%eax
c011eb7e:	eb 0e                	jmp    c011eb8e <sfs_reclaim+0x2fe>

failed_unlock:
    unlock_sfs_fs(sfs);
c011eb80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011eb83:	89 04 24             	mov    %eax,(%esp)
c011eb86:	e8 ee 19 00 00       	call   c0120579 <unlock_sfs_fs>
    return ret;
c011eb8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011eb8e:	c9                   	leave  
c011eb8f:	c3                   	ret    

c011eb90 <sfs_gettype>:

/*
 * sfs_gettype - Return type of file. The values for file types are in sfs.h.
 */
static int
sfs_gettype(struct inode *node, uint32_t *type_store) {
c011eb90:	55                   	push   %ebp
c011eb91:	89 e5                	mov    %esp,%ebp
c011eb93:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c011eb96:	8b 45 08             	mov    0x8(%ebp),%eax
c011eb99:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011eb9c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011eba0:	74 0d                	je     c011ebaf <sfs_gettype+0x1f>
c011eba2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011eba5:	8b 40 2c             	mov    0x2c(%eax),%eax
c011eba8:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011ebad:	74 24                	je     c011ebd3 <sfs_gettype+0x43>
c011ebaf:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011ebb6:	c0 
c011ebb7:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011ebbe:	c0 
c011ebbf:	c7 44 24 04 7b 03 00 	movl   $0x37b,0x4(%esp)
c011ebc6:	00 
c011ebc7:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011ebce:	e8 43 26 fe ff       	call   c0101216 <__panic>
c011ebd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011ebd6:	8b 00                	mov    (%eax),%eax
c011ebd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    switch (din->type) {
c011ebdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011ebde:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011ebe2:	0f b7 c0             	movzwl %ax,%eax
c011ebe5:	83 f8 02             	cmp    $0x2,%eax
c011ebe8:	74 0c                	je     c011ebf6 <sfs_gettype+0x66>
c011ebea:	83 f8 03             	cmp    $0x3,%eax
c011ebed:	74 27                	je     c011ec16 <sfs_gettype+0x86>
c011ebef:	83 f8 01             	cmp    $0x1,%eax
c011ebf2:	74 12                	je     c011ec06 <sfs_gettype+0x76>
c011ebf4:	eb 30                	jmp    c011ec26 <sfs_gettype+0x96>
    case SFS_TYPE_DIR:
        *type_store = S_IFDIR;
c011ebf6:	8b 45 0c             	mov    0xc(%ebp),%eax
c011ebf9:	c7 00 00 20 00 00    	movl   $0x2000,(%eax)
        return 0;
c011ebff:	b8 00 00 00 00       	mov    $0x0,%eax
c011ec04:	eb 4a                	jmp    c011ec50 <sfs_gettype+0xc0>
    case SFS_TYPE_FILE:
        *type_store = S_IFREG;
c011ec06:	8b 45 0c             	mov    0xc(%ebp),%eax
c011ec09:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
        return 0;
c011ec0f:	b8 00 00 00 00       	mov    $0x0,%eax
c011ec14:	eb 3a                	jmp    c011ec50 <sfs_gettype+0xc0>
    case SFS_TYPE_LINK:
        *type_store = S_IFLNK;
c011ec16:	8b 45 0c             	mov    0xc(%ebp),%eax
c011ec19:	c7 00 00 30 00 00    	movl   $0x3000,(%eax)
        return 0;
c011ec1f:	b8 00 00 00 00       	mov    $0x0,%eax
c011ec24:	eb 2a                	jmp    c011ec50 <sfs_gettype+0xc0>
    }
    panic("invalid file type %d.\n", din->type);
c011ec26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011ec29:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011ec2d:	0f b7 c0             	movzwl %ax,%eax
c011ec30:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011ec34:	c7 44 24 08 2c 84 12 	movl   $0xc012842c,0x8(%esp)
c011ec3b:	c0 
c011ec3c:	c7 44 24 04 87 03 00 	movl   $0x387,0x4(%esp)
c011ec43:	00 
c011ec44:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011ec4b:	e8 c6 25 fe ff       	call   c0101216 <__panic>
}
c011ec50:	c9                   	leave  
c011ec51:	c3                   	ret    

c011ec52 <sfs_tryseek>:

/* 
 * sfs_tryseek - Check if seeking to the specified position within the file is legal.
 */
static int
sfs_tryseek(struct inode *node, off_t pos) {
c011ec52:	55                   	push   %ebp
c011ec53:	89 e5                	mov    %esp,%ebp
c011ec55:	83 ec 28             	sub    $0x28,%esp
    if (pos < 0 || pos >= SFS_MAX_FILE_SIZE) {
c011ec58:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011ec5c:	78 0a                	js     c011ec68 <sfs_tryseek+0x16>
c011ec5e:	8b 45 0c             	mov    0xc(%ebp),%eax
c011ec61:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c011ec66:	76 0a                	jbe    c011ec72 <sfs_tryseek+0x20>
        return -E_INVAL;
c011ec68:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011ec6d:	e9 ff 00 00 00       	jmp    c011ed71 <sfs_tryseek+0x11f>
    }
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011ec72:	8b 45 08             	mov    0x8(%ebp),%eax
c011ec75:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011ec78:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011ec7c:	74 0d                	je     c011ec8b <sfs_tryseek+0x39>
c011ec7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011ec81:	8b 40 2c             	mov    0x2c(%eax),%eax
c011ec84:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011ec89:	74 24                	je     c011ecaf <sfs_tryseek+0x5d>
c011ec8b:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011ec92:	c0 
c011ec93:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011ec9a:	c0 
c011ec9b:	c7 44 24 04 92 03 00 	movl   $0x392,0x4(%esp)
c011eca2:	00 
c011eca3:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011ecaa:	e8 67 25 fe ff       	call   c0101216 <__panic>
c011ecaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011ecb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pos > sin->din->size) {
c011ecb5:	8b 55 0c             	mov    0xc(%ebp),%edx
c011ecb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011ecbb:	8b 00                	mov    (%eax),%eax
c011ecbd:	8b 00                	mov    (%eax),%eax
c011ecbf:	39 c2                	cmp    %eax,%edx
c011ecc1:	0f 86 a5 00 00 00    	jbe    c011ed6c <sfs_tryseek+0x11a>
        return vop_truncate(node, pos);
c011ecc7:	8b 45 08             	mov    0x8(%ebp),%eax
c011ecca:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011eccd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011ecd0:	8b 40 3c             	mov    0x3c(%eax),%eax
c011ecd3:	8b 40 34             	mov    0x34(%eax),%eax
c011ecd6:	85 c0                	test   %eax,%eax
c011ecd8:	75 24                	jne    c011ecfe <sfs_tryseek+0xac>
c011ecda:	c7 44 24 0c 1c 88 12 	movl   $0xc012881c,0xc(%esp)
c011ece1:	c0 
c011ece2:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011ece9:	c0 
c011ecea:	c7 44 24 04 94 03 00 	movl   $0x394,0x4(%esp)
c011ecf1:	00 
c011ecf2:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011ecf9:	e8 18 25 fe ff       	call   c0101216 <__panic>
c011ecfe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011ed02:	74 17                	je     c011ed1b <sfs_tryseek+0xc9>
c011ed04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011ed07:	8b 40 3c             	mov    0x3c(%eax),%eax
c011ed0a:	85 c0                	test   %eax,%eax
c011ed0c:	74 0d                	je     c011ed1b <sfs_tryseek+0xc9>
c011ed0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011ed11:	8b 40 3c             	mov    0x3c(%eax),%eax
c011ed14:	8b 40 34             	mov    0x34(%eax),%eax
c011ed17:	85 c0                	test   %eax,%eax
c011ed19:	75 24                	jne    c011ed3f <sfs_tryseek+0xed>
c011ed1b:	c7 44 24 0c 44 88 12 	movl   $0xc0128844,0xc(%esp)
c011ed22:	c0 
c011ed23:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011ed2a:	c0 
c011ed2b:	c7 44 24 04 94 03 00 	movl   $0x394,0x4(%esp)
c011ed32:	00 
c011ed33:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011ed3a:	e8 d7 24 fe ff       	call   c0101216 <__panic>
c011ed3f:	c7 44 24 04 95 88 12 	movl   $0xc0128895,0x4(%esp)
c011ed46:	c0 
c011ed47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011ed4a:	89 04 24             	mov    %eax,(%esp)
c011ed4d:	e8 e6 ab ff ff       	call   c0119938 <inode_check>
c011ed52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011ed55:	8b 40 3c             	mov    0x3c(%eax),%eax
c011ed58:	8b 40 34             	mov    0x34(%eax),%eax
c011ed5b:	8b 55 0c             	mov    0xc(%ebp),%edx
c011ed5e:	89 54 24 04          	mov    %edx,0x4(%esp)
c011ed62:	8b 55 08             	mov    0x8(%ebp),%edx
c011ed65:	89 14 24             	mov    %edx,(%esp)
c011ed68:	ff d0                	call   *%eax
c011ed6a:	eb 05                	jmp    c011ed71 <sfs_tryseek+0x11f>
    }
    return 0;
c011ed6c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011ed71:	c9                   	leave  
c011ed72:	c3                   	ret    

c011ed73 <sfs_truncfile>:

/*
 * sfs_truncfile : reszie the file with new length
 */
static int
sfs_truncfile(struct inode *node, off_t len) {
c011ed73:	55                   	push   %ebp
c011ed74:	89 e5                	mov    %esp,%ebp
c011ed76:	83 ec 48             	sub    $0x48,%esp
    if (len < 0 || len > SFS_MAX_FILE_SIZE) {
c011ed79:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011ed7d:	78 0a                	js     c011ed89 <sfs_truncfile+0x16>
c011ed7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c011ed82:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c011ed87:	76 0a                	jbe    c011ed93 <sfs_truncfile+0x20>
        return -E_INVAL;
c011ed89:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011ed8e:	e9 d4 01 00 00       	jmp    c011ef67 <sfs_truncfile+0x1f4>
    }
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011ed93:	8b 45 08             	mov    0x8(%ebp),%eax
c011ed96:	8b 40 38             	mov    0x38(%eax),%eax
c011ed99:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011ed9c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011eda0:	74 0a                	je     c011edac <sfs_truncfile+0x39>
c011eda2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011eda5:	8b 40 6c             	mov    0x6c(%eax),%eax
c011eda8:	85 c0                	test   %eax,%eax
c011edaa:	74 24                	je     c011edd0 <sfs_truncfile+0x5d>
c011edac:	c7 44 24 0c 24 87 12 	movl   $0xc0128724,0xc(%esp)
c011edb3:	c0 
c011edb4:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011edbb:	c0 
c011edbc:	c7 44 24 04 a1 03 00 	movl   $0x3a1,0x4(%esp)
c011edc3:	00 
c011edc4:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011edcb:	e8 46 24 fe ff       	call   c0101216 <__panic>
c011edd0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011edd3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011edd6:	8b 45 08             	mov    0x8(%ebp),%eax
c011edd9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011eddc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011ede0:	74 0d                	je     c011edef <sfs_truncfile+0x7c>
c011ede2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011ede5:	8b 40 2c             	mov    0x2c(%eax),%eax
c011ede8:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011eded:	74 24                	je     c011ee13 <sfs_truncfile+0xa0>
c011edef:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011edf6:	c0 
c011edf7:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011edfe:	c0 
c011edff:	c7 44 24 04 a2 03 00 	movl   $0x3a2,0x4(%esp)
c011ee06:	00 
c011ee07:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011ee0e:	e8 03 24 fe ff       	call   c0101216 <__panic>
c011ee13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011ee16:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct sfs_disk_inode *din = sin->din;
c011ee19:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011ee1c:	8b 00                	mov    (%eax),%eax
c011ee1e:	89 45 dc             	mov    %eax,-0x24(%ebp)

    int ret = 0;
c011ee21:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//new number of disk blocks of file
    uint32_t nblks, tblks = ROUNDUP_DIV(len, SFS_BLKSIZE);
c011ee28:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
c011ee2f:	8b 55 0c             	mov    0xc(%ebp),%edx
c011ee32:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011ee35:	01 d0                	add    %edx,%eax
c011ee37:	83 e8 01             	sub    $0x1,%eax
c011ee3a:	ba 00 00 00 00       	mov    $0x0,%edx
c011ee3f:	f7 75 d8             	divl   -0x28(%ebp)
c011ee42:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (din->size == len) {
c011ee45:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011ee48:	8b 10                	mov    (%eax),%edx
c011ee4a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011ee4d:	39 c2                	cmp    %eax,%edx
c011ee4f:	75 39                	jne    c011ee8a <sfs_truncfile+0x117>
        assert(tblks == din->blocks);
c011ee51:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011ee54:	8b 40 08             	mov    0x8(%eax),%eax
c011ee57:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011ee5a:	74 24                	je     c011ee80 <sfs_truncfile+0x10d>
c011ee5c:	c7 44 24 0c 9e 88 12 	movl   $0xc012889e,0xc(%esp)
c011ee63:	c0 
c011ee64:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011ee6b:	c0 
c011ee6c:	c7 44 24 04 a9 03 00 	movl   $0x3a9,0x4(%esp)
c011ee73:	00 
c011ee74:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011ee7b:	e8 96 23 fe ff       	call   c0101216 <__panic>
        return 0;
c011ee80:	b8 00 00 00 00       	mov    $0x0,%eax
c011ee85:	e9 dd 00 00 00       	jmp    c011ef67 <sfs_truncfile+0x1f4>
    }

    lock_sin(sin);
c011ee8a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011ee8d:	89 04 24             	mov    %eax,(%esp)
c011ee90:	e8 0c de ff ff       	call   c011cca1 <lock_sin>
	// old number of disk blocks of file
    nblks = din->blocks;
c011ee95:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011ee98:	8b 40 08             	mov    0x8(%eax),%eax
c011ee9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (nblks < tblks) {
c011ee9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011eea1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011eea4:	73 3f                	jae    c011eee5 <sfs_truncfile+0x172>
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c011eea6:	eb 33                	jmp    c011eedb <sfs_truncfile+0x168>
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
c011eea8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c011eeaf:	00 
c011eeb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011eeb3:	89 44 24 08          	mov    %eax,0x8(%esp)
c011eeb7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011eeba:	89 44 24 04          	mov    %eax,0x4(%esp)
c011eebe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011eec1:	89 04 24             	mov    %eax,(%esp)
c011eec4:	e8 cd e8 ff ff       	call   c011d796 <sfs_bmap_load_nolock>
c011eec9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011eecc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011eed0:	74 05                	je     c011eed7 <sfs_truncfile+0x164>
                goto out_unlock;
c011eed2:	e9 82 00 00 00       	jmp    c011ef59 <sfs_truncfile+0x1e6>
            }
            nblks ++;
c011eed7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    lock_sin(sin);
	// old number of disk blocks of file
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c011eedb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011eede:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011eee1:	75 c5                	jne    c011eea8 <sfs_truncfile+0x135>
c011eee3:	eb 33                	jmp    c011ef18 <sfs_truncfile+0x1a5>
                goto out_unlock;
            }
            nblks ++;
        }
    }
    else if (tblks < nblks) {
c011eee5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011eee8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011eeeb:	73 2b                	jae    c011ef18 <sfs_truncfile+0x1a5>
		// try to reduce the file size 
        while (tblks != nblks) {
c011eeed:	eb 21                	jmp    c011ef10 <sfs_truncfile+0x19d>
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
c011eeef:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011eef2:	89 44 24 04          	mov    %eax,0x4(%esp)
c011eef6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011eef9:	89 04 24             	mov    %eax,(%esp)
c011eefc:	e8 7d e9 ff ff       	call   c011d87e <sfs_bmap_truncate_nolock>
c011ef01:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011ef04:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011ef08:	74 02                	je     c011ef0c <sfs_truncfile+0x199>
                goto out_unlock;
c011ef0a:	eb 4d                	jmp    c011ef59 <sfs_truncfile+0x1e6>
            }
            nblks --;
c011ef0c:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            nblks ++;
        }
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
c011ef10:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011ef13:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011ef16:	75 d7                	jne    c011eeef <sfs_truncfile+0x17c>
                goto out_unlock;
            }
            nblks --;
        }
    }
    assert(din->blocks == tblks);
c011ef18:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011ef1b:	8b 40 08             	mov    0x8(%eax),%eax
c011ef1e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011ef21:	74 24                	je     c011ef47 <sfs_truncfile+0x1d4>
c011ef23:	c7 44 24 0c b3 88 12 	movl   $0xc01288b3,0xc(%esp)
c011ef2a:	c0 
c011ef2b:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011ef32:	c0 
c011ef33:	c7 44 24 04 c2 03 00 	movl   $0x3c2,0x4(%esp)
c011ef3a:	00 
c011ef3b:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011ef42:	e8 cf 22 fe ff       	call   c0101216 <__panic>
    din->size = len;
c011ef47:	8b 55 0c             	mov    0xc(%ebp),%edx
c011ef4a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011ef4d:	89 10                	mov    %edx,(%eax)
    sin->dirty = 1;
c011ef4f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011ef52:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

out_unlock:
    unlock_sin(sin);
c011ef59:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011ef5c:	89 04 24             	mov    %eax,(%esp)
c011ef5f:	e8 53 dd ff ff       	call   c011ccb7 <unlock_sin>
    return ret;
c011ef64:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011ef67:	c9                   	leave  
c011ef68:	c3                   	ret    

c011ef69 <sfs_create>:
 * @name:       file name
 * @excl:       whether the file named NAME is existed
 * @node_store: created file's inode in memory
 */
static int
sfs_create(struct inode *node, const char *name, bool excl, struct inode **node_store) {
c011ef69:	55                   	push   %ebp
c011ef6a:	89 e5                	mov    %esp,%ebp
c011ef6c:	83 ec 58             	sub    $0x58,%esp
*/

	//cprintf("sfs_create()-----start-----\n");

    int ret;
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011ef6f:	8b 45 08             	mov    0x8(%ebp),%eax
c011ef72:	8b 40 38             	mov    0x38(%eax),%eax
c011ef75:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011ef78:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011ef7c:	74 0a                	je     c011ef88 <sfs_create+0x1f>
c011ef7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011ef81:	8b 40 6c             	mov    0x6c(%eax),%eax
c011ef84:	85 c0                	test   %eax,%eax
c011ef86:	74 24                	je     c011efac <sfs_create+0x43>
c011ef88:	c7 44 24 0c 24 87 12 	movl   $0xc0128724,0xc(%esp)
c011ef8f:	c0 
c011ef90:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011ef97:	c0 
c011ef98:	c7 44 24 04 e3 03 00 	movl   $0x3e3,0x4(%esp)
c011ef9f:	00 
c011efa0:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011efa7:	e8 6a 22 fe ff       	call   c0101216 <__panic>
c011efac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011efaf:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vop_ref_inc(node);
c011efb2:	8b 45 08             	mov    0x8(%ebp),%eax
c011efb5:	89 04 24             	mov    %eax,(%esp)
c011efb8:	e8 11 a7 ff ff       	call   c01196ce <inode_ref_inc>
    struct sfs_inode *sin = vop_info(node, sfs_inode);  //目录的sfs_inode节点
c011efbd:	8b 45 08             	mov    0x8(%ebp),%eax
c011efc0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011efc3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011efc7:	74 0d                	je     c011efd6 <sfs_create+0x6d>
c011efc9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011efcc:	8b 40 2c             	mov    0x2c(%eax),%eax
c011efcf:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011efd4:	74 24                	je     c011effa <sfs_create+0x91>
c011efd6:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011efdd:	c0 
c011efde:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011efe5:	c0 
c011efe6:	c7 44 24 04 e5 03 00 	movl   $0x3e5,0x4(%esp)
c011efed:	00 
c011efee:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011eff5:	e8 1c 22 fe ff       	call   c0101216 <__panic>
c011effa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011effd:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if(sin->din->type != SFS_TYPE_DIR) {
c011f000:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f003:	8b 00                	mov    (%eax),%eax
c011f005:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011f009:	66 83 f8 02          	cmp    $0x2,%ax
c011f00d:	74 15                	je     c011f024 <sfs_create+0xbb>
        vop_ref_dec(node);
c011f00f:	8b 45 08             	mov    0x8(%ebp),%eax
c011f012:	89 04 24             	mov    %eax,(%esp)
c011f015:	e8 ce a6 ff ff       	call   c01196e8 <inode_ref_dec>
        return -E_NOTDIR;
c011f01a:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c011f01f:	e9 bf 02 00 00       	jmp    c011f2e3 <sfs_create+0x37a>
    }

    //sfs_bmap_get_nolock - according sfs_inode and index of block, find the NO. of disk block
    //使用该函数，为下一个索引点分配一个块
    int newBIndex = sin->din->blocks;   //新建索引块的位置
c011f024:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f027:	8b 00                	mov    (%eax),%eax
c011f029:	8b 40 08             	mov    0x8(%eax),%eax
c011f02c:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("next Block : %d\n", newBIndex);
    uint32_t indexAddr;  //为索引块分配的块地址
    sfs_bmap_get_nolock(sfs, sin, newBIndex, 1, &indexAddr);
c011f02f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011f032:	8d 55 cc             	lea    -0x34(%ebp),%edx
c011f035:	89 54 24 10          	mov    %edx,0x10(%esp)
c011f039:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011f040:	00 
c011f041:	89 44 24 08          	mov    %eax,0x8(%esp)
c011f045:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f048:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f04c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f04f:	89 04 24             	mov    %eax,(%esp)
c011f052:	e8 2f e4 ff ff       	call   c011d486 <sfs_bmap_get_nolock>
	//cprintf("indexAddr = %u\n", indexAddr);

    //直接调用sfs_block_alloc()函数为文件索引块分配地址
    uint32_t fileNodeAddr;
    sfs_block_alloc(sfs, &fileNodeAddr);    //此时indexAddr和fileNodeAddr块都没有内容
c011f057:	8d 45 c8             	lea    -0x38(%ebp),%eax
c011f05a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f05e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f061:	89 04 24             	mov    %eax,(%esp)
c011f064:	e8 6b de ff ff       	call   c011ced4 <sfs_block_alloc>
	//cprintf("fileNodeAddr = %u\n", fileNodeAddr);


    //初始化目录索引
    struct sfs_disk_entry *indexEntry = (struct sfs_disk_entry*) kmalloc(sizeof(struct sfs_disk_entry));
c011f069:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c011f070:	e8 3b ba fe ff       	call   c010aab0 <kmalloc>
c011f075:	89 45 d8             	mov    %eax,-0x28(%ebp)
    indexEntry->ino = fileNodeAddr;
c011f078:	8b 55 c8             	mov    -0x38(%ebp),%edx
c011f07b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011f07e:	89 10                	mov    %edx,(%eax)
	
	int i;
    for(i = 0; i < SFS_MAX_FNAME_LEN + 1 && name[i] != '\0'; i++) {
c011f080:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c011f087:	eb 1a                	jmp    c011f0a3 <sfs_create+0x13a>
        indexEntry->name[i] = name[i];
c011f089:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011f08c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011f08f:	01 d0                	add    %edx,%eax
c011f091:	0f b6 00             	movzbl (%eax),%eax
c011f094:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c011f097:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011f09a:	01 ca                	add    %ecx,%edx
c011f09c:	88 42 04             	mov    %al,0x4(%edx)
    //初始化目录索引
    struct sfs_disk_entry *indexEntry = (struct sfs_disk_entry*) kmalloc(sizeof(struct sfs_disk_entry));
    indexEntry->ino = fileNodeAddr;
	
	int i;
    for(i = 0; i < SFS_MAX_FNAME_LEN + 1 && name[i] != '\0'; i++) {
c011f09f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c011f0a3:	81 7d f0 ff 00 00 00 	cmpl   $0xff,-0x10(%ebp)
c011f0aa:	7f 0f                	jg     c011f0bb <sfs_create+0x152>
c011f0ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011f0af:	8b 45 0c             	mov    0xc(%ebp),%eax
c011f0b2:	01 d0                	add    %edx,%eax
c011f0b4:	0f b6 00             	movzbl (%eax),%eax
c011f0b7:	84 c0                	test   %al,%al
c011f0b9:	75 ce                	jne    c011f089 <sfs_create+0x120>
        indexEntry->name[i] = name[i];
    }
	indexEntry->name[i] = '\0';	
c011f0bb:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011f0be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011f0c1:	01 d0                	add    %edx,%eax
c011f0c3:	c6 40 04 00          	movb   $0x0,0x4(%eax)

    //初始化文件索引块数据
    struct sfs_disk_inode *newBlkInode = (struct sfs_disk_inode*) kmalloc(sizeof(struct sfs_disk_inode));
c011f0c7:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c011f0ce:	e8 dd b9 fe ff       	call   c010aab0 <kmalloc>
c011f0d3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    newBlkInode->size = 0;
c011f0d6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011f0d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    newBlkInode->type = SFS_TYPE_FILE;
c011f0df:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011f0e2:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)
    newBlkInode->nlinks = 1;
c011f0e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011f0eb:	66 c7 40 06 01 00    	movw   $0x1,0x6(%eax)
    newBlkInode->blocks = 0;
c011f0f1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011f0f4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    for(i = 0; i < SFS_NDIRECT; i++) {
c011f0fb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c011f102:	eb 12                	jmp    c011f116 <sfs_create+0x1ad>
        newBlkInode->direct[i] = 0;
c011f104:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011f107:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011f10a:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c011f111:	00 
    struct sfs_disk_inode *newBlkInode = (struct sfs_disk_inode*) kmalloc(sizeof(struct sfs_disk_inode));
    newBlkInode->size = 0;
    newBlkInode->type = SFS_TYPE_FILE;
    newBlkInode->nlinks = 1;
    newBlkInode->blocks = 0;
    for(i = 0; i < SFS_NDIRECT; i++) {
c011f112:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c011f116:	83 7d f0 0b          	cmpl   $0xb,-0x10(%ebp)
c011f11a:	7e e8                	jle    c011f104 <sfs_create+0x19b>
        newBlkInode->direct[i] = 0;
    }
    newBlkInode->indirect = 0;
c011f11c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011f11f:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)

    //准备将数据写入硬盘
    //先写入目录索引块
    ret = sfs_wblock(sfs, indexEntry, indexAddr, 1);
c011f126:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011f129:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011f130:	00 
c011f131:	89 44 24 08          	mov    %eax,0x8(%esp)
c011f135:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011f138:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f13c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f13f:	89 04 24             	mov    %eax,(%esp)
c011f142:	e8 c7 10 00 00       	call   c012020e <sfs_wblock>
c011f147:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(ret == 0);
c011f14a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011f14e:	74 24                	je     c011f174 <sfs_create+0x20b>
c011f150:	c7 44 24 0c c8 88 12 	movl   $0xc01288c8,0xc(%esp)
c011f157:	c0 
c011f158:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011f15f:	c0 
c011f160:	c7 44 24 04 11 04 00 	movl   $0x411,0x4(%esp)
c011f167:	00 
c011f168:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011f16f:	e8 a2 20 fe ff       	call   c0101216 <__panic>
    //再写入文件索引块
    ret = sfs_wblock(sfs, newBlkInode, fileNodeAddr, 1);
c011f174:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011f177:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011f17e:	00 
c011f17f:	89 44 24 08          	mov    %eax,0x8(%esp)
c011f183:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011f186:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f18a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f18d:	89 04 24             	mov    %eax,(%esp)
c011f190:	e8 79 10 00 00       	call   c012020e <sfs_wblock>
c011f195:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(ret == 0);
c011f198:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011f19c:	74 24                	je     c011f1c2 <sfs_create+0x259>
c011f19e:	c7 44 24 0c c8 88 12 	movl   $0xc01288c8,0xc(%esp)
c011f1a5:	c0 
c011f1a6:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011f1ad:	c0 
c011f1ae:	c7 44 24 04 14 04 00 	movl   $0x414,0x4(%esp)
c011f1b5:	00 
c011f1b6:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011f1bd:	e8 54 20 fe ff       	call   c0101216 <__panic>

    sfs_load_inode(sfs, node_store, fileNodeAddr);
c011f1c2:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011f1c5:	89 44 24 08          	mov    %eax,0x8(%esp)
c011f1c9:	8b 45 14             	mov    0x14(%ebp),%eax
c011f1cc:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f1d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f1d3:	89 04 24             	mov    %eax,(%esp)
c011f1d6:	e8 90 df ff ff       	call   c011d16b <sfs_load_inode>

	sin->din->blocks++;
c011f1db:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f1de:	8b 00                	mov    (%eax),%eax
c011f1e0:	8b 50 08             	mov    0x8(%eax),%edx
c011f1e3:	83 c2 01             	add    $0x1,%edx
c011f1e6:	89 50 08             	mov    %edx,0x8(%eax)
	sin->dirty = 1;
c011f1e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f1ec:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

	
	lock_sfs_fs(sfs);
c011f1f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f1f6:	89 04 24             	mov    %eax,(%esp)
c011f1f9:	e8 4f 13 00 00       	call   c012054d <lock_sfs_fs>
	vop_fsync(info2node(sin, sfs_inode));
c011f1fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f201:	89 45 d0             	mov    %eax,-0x30(%ebp)
c011f204:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011f207:	8b 40 3c             	mov    0x3c(%eax),%eax
c011f20a:	8b 40 18             	mov    0x18(%eax),%eax
c011f20d:	85 c0                	test   %eax,%eax
c011f20f:	75 24                	jne    c011f235 <sfs_create+0x2cc>
c011f211:	c7 44 24 0c 90 86 12 	movl   $0xc0128690,0xc(%esp)
c011f218:	c0 
c011f219:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011f220:	c0 
c011f221:	c7 44 24 04 1d 04 00 	movl   $0x41d,0x4(%esp)
c011f228:	00 
c011f229:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011f230:	e8 e1 1f fe ff       	call   c0101216 <__panic>
c011f235:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c011f239:	74 17                	je     c011f252 <sfs_create+0x2e9>
c011f23b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011f23e:	8b 40 3c             	mov    0x3c(%eax),%eax
c011f241:	85 c0                	test   %eax,%eax
c011f243:	74 0d                	je     c011f252 <sfs_create+0x2e9>
c011f245:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011f248:	8b 40 3c             	mov    0x3c(%eax),%eax
c011f24b:	8b 40 18             	mov    0x18(%eax),%eax
c011f24e:	85 c0                	test   %eax,%eax
c011f250:	75 24                	jne    c011f276 <sfs_create+0x30d>
c011f252:	c7 44 24 0c b4 86 12 	movl   $0xc01286b4,0xc(%esp)
c011f259:	c0 
c011f25a:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011f261:	c0 
c011f262:	c7 44 24 04 1d 04 00 	movl   $0x41d,0x4(%esp)
c011f269:	00 
c011f26a:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011f271:	e8 a0 1f fe ff       	call   c0101216 <__panic>
c011f276:	c7 44 24 04 02 87 12 	movl   $0xc0128702,0x4(%esp)
c011f27d:	c0 
c011f27e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011f281:	89 04 24             	mov    %eax,(%esp)
c011f284:	e8 af a6 ff ff       	call   c0119938 <inode_check>
c011f289:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011f28c:	8b 40 3c             	mov    0x3c(%eax),%eax
c011f28f:	8b 40 18             	mov    0x18(%eax),%eax
c011f292:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011f295:	89 14 24             	mov    %edx,(%esp)
c011f298:	ff d0                	call   *%eax
	unlock_sfs_fs(sfs);
c011f29a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f29d:	89 04 24             	mov    %eax,(%esp)
c011f2a0:	e8 d4 12 00 00       	call   c0120579 <unlock_sfs_fs>
	if(sfs->super_dirty) {
c011f2a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f2a8:	8b 40 34             	mov    0x34(%eax),%eax
c011f2ab:	85 c0                	test   %eax,%eax
c011f2ad:	74 26                	je     c011f2d5 <sfs_create+0x36c>
		sfs->super_dirty = 0;
c011f2af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f2b2:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
		ret = sfs_sync_super(sfs);
c011f2b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f2bc:	89 04 24             	mov    %eax,(%esp)
c011f2bf:	e8 1b 11 00 00       	call   c01203df <sfs_sync_super>
c011f2c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		ret = sfs_sync_freemap(sfs);
c011f2c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f2ca:	89 04 24             	mov    %eax,(%esp)
c011f2cd:	e8 99 11 00 00       	call   c012046b <sfs_sync_freemap>
c011f2d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	vop_ref_dec(node);
c011f2d5:	8b 45 08             	mov    0x8(%ebp),%eax
c011f2d8:	89 04 24             	mov    %eax,(%esp)
c011f2db:	e8 08 a4 ff ff       	call   c01196e8 <inode_ref_dec>

	//cprintf("sfs_create()-----end-------\n");
    return ret;
c011f2e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011f2e3:	c9                   	leave  
c011f2e4:	c3                   	ret    

c011f2e5 <sfs_lookup>:
 * sfs_lookup - Parse path relative to the passed directory
 *              DIR, and hand back the inode for the file it
 *              refers to.
 */
static int
sfs_lookup(struct inode *node, char *path, struct inode **node_store) {
c011f2e5:	55                   	push   %ebp
c011f2e6:	89 e5                	mov    %esp,%ebp
c011f2e8:	83 ec 48             	sub    $0x48,%esp
    //node是目录的inode
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011f2eb:	8b 45 08             	mov    0x8(%ebp),%eax
c011f2ee:	8b 40 38             	mov    0x38(%eax),%eax
c011f2f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011f2f4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011f2f8:	74 0a                	je     c011f304 <sfs_lookup+0x1f>
c011f2fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011f2fd:	8b 40 6c             	mov    0x6c(%eax),%eax
c011f300:	85 c0                	test   %eax,%eax
c011f302:	74 24                	je     c011f328 <sfs_lookup+0x43>
c011f304:	c7 44 24 0c 24 87 12 	movl   $0xc0128724,0xc(%esp)
c011f30b:	c0 
c011f30c:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011f313:	c0 
c011f314:	c7 44 24 04 33 04 00 	movl   $0x433,0x4(%esp)
c011f31b:	00 
c011f31c:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011f323:	e8 ee 1e fe ff       	call   c0101216 <__panic>
c011f328:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011f32b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(*path != '\0' && *path != '/');
c011f32e:	8b 45 0c             	mov    0xc(%ebp),%eax
c011f331:	0f b6 00             	movzbl (%eax),%eax
c011f334:	84 c0                	test   %al,%al
c011f336:	74 0a                	je     c011f342 <sfs_lookup+0x5d>
c011f338:	8b 45 0c             	mov    0xc(%ebp),%eax
c011f33b:	0f b6 00             	movzbl (%eax),%eax
c011f33e:	3c 2f                	cmp    $0x2f,%al
c011f340:	75 24                	jne    c011f366 <sfs_lookup+0x81>
c011f342:	c7 44 24 0c d1 88 12 	movl   $0xc01288d1,0xc(%esp)
c011f349:	c0 
c011f34a:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011f351:	c0 
c011f352:	c7 44 24 04 34 04 00 	movl   $0x434,0x4(%esp)
c011f359:	00 
c011f35a:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011f361:	e8 b0 1e fe ff       	call   c0101216 <__panic>
    vop_ref_inc(node);
c011f366:	8b 45 08             	mov    0x8(%ebp),%eax
c011f369:	89 04 24             	mov    %eax,(%esp)
c011f36c:	e8 5d a3 ff ff       	call   c01196ce <inode_ref_inc>
    struct sfs_inode *sin = vop_info(node, sfs_inode);  //目录的sfs_inode节点
c011f371:	8b 45 08             	mov    0x8(%ebp),%eax
c011f374:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011f377:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011f37b:	74 0d                	je     c011f38a <sfs_lookup+0xa5>
c011f37d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011f380:	8b 40 2c             	mov    0x2c(%eax),%eax
c011f383:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011f388:	74 24                	je     c011f3ae <sfs_lookup+0xc9>
c011f38a:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011f391:	c0 
c011f392:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011f399:	c0 
c011f39a:	c7 44 24 04 36 04 00 	movl   $0x436,0x4(%esp)
c011f3a1:	00 
c011f3a2:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011f3a9:	e8 68 1e fe ff       	call   c0101216 <__panic>
c011f3ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011f3b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sin->din->type != SFS_TYPE_DIR) {
c011f3b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f3b7:	8b 00                	mov    (%eax),%eax
c011f3b9:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011f3bd:	66 83 f8 02          	cmp    $0x2,%ax
c011f3c1:	74 12                	je     c011f3d5 <sfs_lookup+0xf0>
        vop_ref_dec(node);
c011f3c3:	8b 45 08             	mov    0x8(%ebp),%eax
c011f3c6:	89 04 24             	mov    %eax,(%esp)
c011f3c9:	e8 1a a3 ff ff       	call   c01196e8 <inode_ref_dec>
        return -E_NOTDIR;
c011f3ce:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c011f3d3:	eb 4e                	jmp    c011f423 <sfs_lookup+0x13e>
    }
    struct inode *subnode;
    int ret = sfs_lookup_once(sfs, sin, path, &subnode, NULL);
c011f3d5:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011f3dc:	00 
c011f3dd:	8d 45 e0             	lea    -0x20(%ebp),%eax
c011f3e0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011f3e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c011f3e7:	89 44 24 08          	mov    %eax,0x8(%esp)
c011f3eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f3ee:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f3f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011f3f5:	89 04 24             	mov    %eax,(%esp)
c011f3f8:	e8 9f e7 ff ff       	call   c011db9c <sfs_lookup_once>
c011f3fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    vop_ref_dec(node);
c011f400:	8b 45 08             	mov    0x8(%ebp),%eax
c011f403:	89 04 24             	mov    %eax,(%esp)
c011f406:	e8 dd a2 ff ff       	call   c01196e8 <inode_ref_dec>
    if (ret != 0) {
c011f40b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011f40f:	74 05                	je     c011f416 <sfs_lookup+0x131>
        return ret;
c011f411:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011f414:	eb 0d                	jmp    c011f423 <sfs_lookup+0x13e>
    }
    *node_store = subnode;
c011f416:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011f419:	8b 45 10             	mov    0x10(%ebp),%eax
c011f41c:	89 10                	mov    %edx,(%eax)

    return 0;
c011f41e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011f423:	c9                   	leave  
c011f424:	c3                   	ret    

c011f425 <sfs_dir_entry_replace>:
 *  @sin:   parent dir sfs inode
 *  @src_slot:  cource slot
 *  @des_slot:  destination slot
 */
static int 
sfs_dir_entry_replace(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t src_slot, uint32_t des_slot) {
c011f425:	55                   	push   %ebp
c011f426:	89 e5                	mov    %esp,%ebp
c011f428:	83 ec 48             	sub    $0x48,%esp
    int ret;
    uint32_t src, zero = 0;
c011f42b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    uint32_t ent = sin->din->indirect;
c011f432:	8b 45 0c             	mov    0xc(%ebp),%eax
c011f435:	8b 00                	mov    (%eax),%eax
c011f437:	8b 40 3c             	mov    0x3c(%eax),%eax
c011f43a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    //step 1 : get source address
    //smaller than 12, get from direct
    if(src_slot < 12) {
c011f43d:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c011f441:	77 21                	ja     c011f464 <sfs_dir_entry_replace+0x3f>
        src = sin->din->direct[src_slot];
c011f443:	8b 45 0c             	mov    0xc(%ebp),%eax
c011f446:	8b 00                	mov    (%eax),%eax
c011f448:	8b 55 10             	mov    0x10(%ebp),%edx
c011f44b:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c011f44f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        //clear
        sin->din->direct[src_slot] = 0;
c011f452:	8b 45 0c             	mov    0xc(%ebp),%eax
c011f455:	8b 00                	mov    (%eax),%eax
c011f457:	8b 55 10             	mov    0x10(%ebp),%edx
c011f45a:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c011f461:	00 
c011f462:	eb 7c                	jmp    c011f4e0 <sfs_dir_entry_replace+0xbb>
    }
    else { //read indirect
        src_slot -= 12;
c011f464:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
        off_t offset = src_slot * sizeof(uint32_t);
c011f468:	8b 45 10             	mov    0x10(%ebp),%eax
c011f46b:	c1 e0 02             	shl    $0x2,%eax
c011f46e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if((ret = sfs_rbuf(sfs, &src, sizeof(uint32_t), ent, offset)) != 0) {
c011f471:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011f474:	89 44 24 10          	mov    %eax,0x10(%esp)
c011f478:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011f47b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011f47f:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c011f486:	00 
c011f487:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c011f48a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f48e:	8b 45 08             	mov    0x8(%ebp),%eax
c011f491:	89 04 24             	mov    %eax,(%esp)
c011f494:	e8 a5 0d 00 00       	call   c012023e <sfs_rbuf>
c011f499:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011f49c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011f4a0:	74 08                	je     c011f4aa <sfs_dir_entry_replace+0x85>
            return ret;
c011f4a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011f4a5:	e9 95 00 00 00       	jmp    c011f53f <sfs_dir_entry_replace+0x11a>
        }
        if((ret = sfs_wbuf(sfs, &zero, sizeof(uint32_t), ent, offset)) != 0) {
c011f4aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011f4ad:	89 44 24 10          	mov    %eax,0x10(%esp)
c011f4b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011f4b4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011f4b8:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c011f4bf:	00 
c011f4c0:	8d 45 e0             	lea    -0x20(%ebp),%eax
c011f4c3:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f4c7:	8b 45 08             	mov    0x8(%ebp),%eax
c011f4ca:	89 04 24             	mov    %eax,(%esp)
c011f4cd:	e8 25 0e 00 00       	call   c01202f7 <sfs_wbuf>
c011f4d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011f4d5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011f4d9:	74 05                	je     c011f4e0 <sfs_dir_entry_replace+0xbb>
            return ret;
c011f4db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011f4de:	eb 5f                	jmp    c011f53f <sfs_dir_entry_replace+0x11a>
        }
    }

    //setp 2 : write
    //small than 12, write direct
    if(des_slot < 12) {
c011f4e0:	83 7d 14 0b          	cmpl   $0xb,0x14(%ebp)
c011f4e4:	77 11                	ja     c011f4f7 <sfs_dir_entry_replace+0xd2>
        sin->din->direct[des_slot] = src;
c011f4e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c011f4e9:	8b 00                	mov    (%eax),%eax
c011f4eb:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c011f4ee:	8b 55 14             	mov    0x14(%ebp),%edx
c011f4f1:	89 4c 90 0c          	mov    %ecx,0xc(%eax,%edx,4)
c011f4f5:	eb 43                	jmp    c011f53a <sfs_dir_entry_replace+0x115>
    }
    else {
        des_slot -= 12;
c011f4f7:	83 6d 14 0c          	subl   $0xc,0x14(%ebp)
        off_t offset = des_slot * sizeof(uint32_t);
c011f4fb:	8b 45 14             	mov    0x14(%ebp),%eax
c011f4fe:	c1 e0 02             	shl    $0x2,%eax
c011f501:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if((ret = sfs_wbuf(sfs, &src, sizeof(uint32_t), ent, offset)) != 0) {
c011f504:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f507:	89 44 24 10          	mov    %eax,0x10(%esp)
c011f50b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011f50e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011f512:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c011f519:	00 
c011f51a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c011f51d:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f521:	8b 45 08             	mov    0x8(%ebp),%eax
c011f524:	89 04 24             	mov    %eax,(%esp)
c011f527:	e8 cb 0d 00 00       	call   c01202f7 <sfs_wbuf>
c011f52c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011f52f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011f533:	74 05                	je     c011f53a <sfs_dir_entry_replace+0x115>
            return ret;
c011f535:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011f538:	eb 05                	jmp    c011f53f <sfs_dir_entry_replace+0x11a>
        }
    }

    return 0;
c011f53a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011f53f:	c9                   	leave  
c011f540:	c3                   	ret    

c011f541 <sfs_delete>:
* @node:		dir inode
* @name:		file/directory's name
* @type:		file:1, directory:2
*/
static int
sfs_delete(struct inode *node, const char *name, uint32_t type) {
c011f541:	55                   	push   %ebp
c011f542:	89 e5                	mov    %esp,%ebp
c011f544:	83 ec 78             	sub    $0x78,%esp
	int ret;
	vop_ref_inc(node);
c011f547:	8b 45 08             	mov    0x8(%ebp),%eax
c011f54a:	89 04 24             	mov    %eax,(%esp)
c011f54d:	e8 7c a1 ff ff       	call   c01196ce <inode_ref_inc>
	struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);	//sfs file system
c011f552:	8b 45 08             	mov    0x8(%ebp),%eax
c011f555:	8b 40 38             	mov    0x38(%eax),%eax
c011f558:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011f55b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011f55f:	74 0a                	je     c011f56b <sfs_delete+0x2a>
c011f561:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011f564:	8b 40 6c             	mov    0x6c(%eax),%eax
c011f567:	85 c0                	test   %eax,%eax
c011f569:	74 24                	je     c011f58f <sfs_delete+0x4e>
c011f56b:	c7 44 24 0c 24 87 12 	movl   $0xc0128724,0xc(%esp)
c011f572:	c0 
c011f573:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011f57a:	c0 
c011f57b:	c7 44 24 04 7f 04 00 	movl   $0x47f,0x4(%esp)
c011f582:	00 
c011f583:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011f58a:	e8 87 1c fe ff       	call   c0101216 <__panic>
c011f58f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011f592:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct sfs_inode *sin = vop_info(node, sfs_inode);	//dir's sfs_inode
c011f595:	8b 45 08             	mov    0x8(%ebp),%eax
c011f598:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011f59b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011f59f:	74 0d                	je     c011f5ae <sfs_delete+0x6d>
c011f5a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011f5a4:	8b 40 2c             	mov    0x2c(%eax),%eax
c011f5a7:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011f5ac:	74 24                	je     c011f5d2 <sfs_delete+0x91>
c011f5ae:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011f5b5:	c0 
c011f5b6:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011f5bd:	c0 
c011f5be:	c7 44 24 04 80 04 00 	movl   $0x480,0x4(%esp)
c011f5c5:	00 
c011f5c6:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011f5cd:	e8 44 1c fe ff       	call   c0101216 <__panic>
c011f5d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011f5d5:	89 45 e0             	mov    %eax,-0x20(%ebp)
	
	//delete file
	if(type == 1) {
c011f5d8:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
c011f5dc:	0f 85 c8 02 00 00    	jne    c011f8aa <sfs_delete+0x369>
		if(sin->din->type != SFS_TYPE_DIR) {
c011f5e2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f5e5:	8b 00                	mov    (%eax),%eax
c011f5e7:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011f5eb:	66 83 f8 02          	cmp    $0x2,%ax
c011f5ef:	74 15                	je     c011f606 <sfs_delete+0xc5>
			vop_ref_dec(node);
c011f5f1:	8b 45 08             	mov    0x8(%ebp),%eax
c011f5f4:	89 04 24             	mov    %eax,(%esp)
c011f5f7:	e8 ec a0 ff ff       	call   c01196e8 <inode_ref_dec>
			return -E_NOTDIR;
c011f5fc:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c011f601:	e9 f7 04 00 00       	jmp    c011fafd <sfs_delete+0x5bc>
		}
		uint32_t file_slot;			//file's slot in dir
		struct inode *file_node;	//file's inode waiting to delete
		ret = sfs_lookup_once(sfs, sin, name, &file_node, &file_slot);
c011f606:	8d 45 c4             	lea    -0x3c(%ebp),%eax
c011f609:	89 44 24 10          	mov    %eax,0x10(%esp)
c011f60d:	8d 45 c0             	lea    -0x40(%ebp),%eax
c011f610:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011f614:	8b 45 0c             	mov    0xc(%ebp),%eax
c011f617:	89 44 24 08          	mov    %eax,0x8(%esp)
c011f61b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f61e:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f622:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f625:	89 04 24             	mov    %eax,(%esp)
c011f628:	e8 6f e5 ff ff       	call   c011db9c <sfs_lookup_once>
c011f62d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		cprintf("file_slot = %u\n", file_slot);
c011f630:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011f633:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f637:	c7 04 24 ef 88 12 c0 	movl   $0xc01288ef,(%esp)
c011f63e:	e8 b0 0d fe ff       	call   c01003f3 <cprintf>
		cprintf("sin->din->blocks = %u\n", sin->din->blocks);
c011f643:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f646:	8b 00                	mov    (%eax),%eax
c011f648:	8b 40 08             	mov    0x8(%eax),%eax
c011f64b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f64f:	c7 04 24 ff 88 12 c0 	movl   $0xc01288ff,(%esp)
c011f656:	e8 98 0d fe ff       	call   c01003f3 <cprintf>
		if(ret != 0) {
c011f65b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011f65f:	74 14                	je     c011f675 <sfs_delete+0x134>
			cprintf("no such file!\n");
c011f661:	c7 04 24 16 89 12 c0 	movl   $0xc0128916,(%esp)
c011f668:	e8 86 0d fe ff       	call   c01003f3 <cprintf>
			return ret;
c011f66d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011f670:	e9 88 04 00 00       	jmp    c011fafd <sfs_delete+0x5bc>
		}
		struct sfs_inode *sin_file = vop_info(file_node, sfs_inode);
c011f675:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011f678:	89 45 dc             	mov    %eax,-0x24(%ebp)
c011f67b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011f67f:	74 0d                	je     c011f68e <sfs_delete+0x14d>
c011f681:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011f684:	8b 40 2c             	mov    0x2c(%eax),%eax
c011f687:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011f68c:	74 24                	je     c011f6b2 <sfs_delete+0x171>
c011f68e:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011f695:	c0 
c011f696:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011f69d:	c0 
c011f69e:	c7 44 24 04 91 04 00 	movl   $0x491,0x4(%esp)
c011f6a5:	00 
c011f6a6:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011f6ad:	e8 64 1b fe ff       	call   c0101216 <__panic>
c011f6b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011f6b5:	89 45 d8             	mov    %eax,-0x28(%ebp)

		//delete blocks which file uses
		int block_to_del = sin_file->din->blocks;
c011f6b8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011f6bb:	8b 00                	mov    (%eax),%eax
c011f6bd:	8b 40 08             	mov    0x8(%eax),%eax
c011f6c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		while(block_to_del > 0) {
c011f6c3:	eb 2c                	jmp    c011f6f1 <sfs_delete+0x1b0>
			lock_sin(sin_file);
c011f6c5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011f6c8:	89 04 24             	mov    %eax,(%esp)
c011f6cb:	e8 d1 d5 ff ff       	call   c011cca1 <lock_sin>
			{
				sfs_bmap_truncate_nolock(sfs, sin);
c011f6d0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f6d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f6d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f6da:	89 04 24             	mov    %eax,(%esp)
c011f6dd:	e8 9c e1 ff ff       	call   c011d87e <sfs_bmap_truncate_nolock>
			}
			unlock_sin(sin_file);
c011f6e2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011f6e5:	89 04 24             	mov    %eax,(%esp)
c011f6e8:	e8 ca d5 ff ff       	call   c011ccb7 <unlock_sin>
			block_to_del--;
c011f6ed:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
		}
		struct sfs_inode *sin_file = vop_info(file_node, sfs_inode);

		//delete blocks which file uses
		int block_to_del = sin_file->din->blocks;
		while(block_to_del > 0) {
c011f6f1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011f6f5:	7f ce                	jg     c011f6c5 <sfs_delete+0x184>
			block_to_del--;
		}	//file's index inode not deleted
		
		//get file's inode block's addr(ino)
		uint32_t ino_file_index;
		lock_sin(sin);
c011f6f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f6fa:	89 04 24             	mov    %eax,(%esp)
c011f6fd:	e8 9f d5 ff ff       	call   c011cca1 <lock_sin>
		{
			sfs_dirent_search_nolock(sfs, sin, name, &ino_file_index, NULL, NULL);
c011f702:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c011f709:	00 
c011f70a:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011f711:	00 
c011f712:	8d 45 bc             	lea    -0x44(%ebp),%eax
c011f715:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011f719:	8b 45 0c             	mov    0xc(%ebp),%eax
c011f71c:	89 44 24 08          	mov    %eax,0x8(%esp)
c011f720:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f723:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f727:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f72a:	89 04 24             	mov    %eax,(%esp)
c011f72d:	e8 d6 e2 ff ff       	call   c011da08 <sfs_dirent_search_nolock>
		}
		unlock_sin(sin);
c011f732:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f735:	89 04 24             	mov    %eax,(%esp)
c011f738:	e8 7a d5 ff ff       	call   c011ccb7 <unlock_sin>
		//delete file's inode block accroding to ino
		sfs_block_free(sfs, ino_file_index);
c011f73d:	8b 45 bc             	mov    -0x44(%ebp),%eax
c011f740:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f744:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f747:	89 04 24             	mov    %eax,(%esp)
c011f74a:	e8 52 d8 ff ff       	call   c011cfa1 <sfs_block_free>

		//delete file's inode block in dir, also delete msg in dir
		lock_sin(sin);
c011f74f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f752:	89 04 24             	mov    %eax,(%esp)
c011f755:	e8 47 d5 ff ff       	call   c011cca1 <lock_sin>
		{
			sfs_bmap_free_nolock(sfs, sin, file_slot);
c011f75a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011f75d:	89 44 24 08          	mov    %eax,0x8(%esp)
c011f761:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f764:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f768:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f76b:	89 04 24             	mov    %eax,(%esp)
c011f76e:	e8 7a df ff ff       	call   c011d6ed <sfs_bmap_free_nolock>
		}
		unlock_sin(sin);
c011f773:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f776:	89 04 24             	mov    %eax,(%esp)
c011f779:	e8 39 d5 ff ff       	call   c011ccb7 <unlock_sin>
		sfs_dir_entry_replace(sfs, sin, sin->din->blocks - 1, file_slot);
c011f77e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011f781:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011f784:	8b 12                	mov    (%edx),%edx
c011f786:	8b 52 08             	mov    0x8(%edx),%edx
c011f789:	83 ea 01             	sub    $0x1,%edx
c011f78c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011f790:	89 54 24 08          	mov    %edx,0x8(%esp)
c011f794:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f797:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f79b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f79e:	89 04 24             	mov    %eax,(%esp)
c011f7a1:	e8 7f fc ff ff       	call   c011f425 <sfs_dir_entry_replace>
		sin->din->blocks--;
c011f7a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f7a9:	8b 00                	mov    (%eax),%eax
c011f7ab:	8b 50 08             	mov    0x8(%eax),%edx
c011f7ae:	83 ea 01             	sub    $0x1,%edx
c011f7b1:	89 50 08             	mov    %edx,0x8(%eax)
		sin->dirty = 1;
c011f7b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f7b7:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

		//flush msg into disk
		lock_sfs_fs(sfs);
c011f7be:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f7c1:	89 04 24             	mov    %eax,(%esp)
c011f7c4:	e8 84 0d 00 00       	call   c012054d <lock_sfs_fs>
		{
			vop_fsync(info2node(sin, sfs_inode));
c011f7c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f7cc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c011f7cf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011f7d2:	8b 40 3c             	mov    0x3c(%eax),%eax
c011f7d5:	8b 40 18             	mov    0x18(%eax),%eax
c011f7d8:	85 c0                	test   %eax,%eax
c011f7da:	75 24                	jne    c011f800 <sfs_delete+0x2bf>
c011f7dc:	c7 44 24 0c 90 86 12 	movl   $0xc0128690,0xc(%esp)
c011f7e3:	c0 
c011f7e4:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011f7eb:	c0 
c011f7ec:	c7 44 24 04 b5 04 00 	movl   $0x4b5,0x4(%esp)
c011f7f3:	00 
c011f7f4:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011f7fb:	e8 16 1a fe ff       	call   c0101216 <__panic>
c011f800:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c011f804:	74 17                	je     c011f81d <sfs_delete+0x2dc>
c011f806:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011f809:	8b 40 3c             	mov    0x3c(%eax),%eax
c011f80c:	85 c0                	test   %eax,%eax
c011f80e:	74 0d                	je     c011f81d <sfs_delete+0x2dc>
c011f810:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011f813:	8b 40 3c             	mov    0x3c(%eax),%eax
c011f816:	8b 40 18             	mov    0x18(%eax),%eax
c011f819:	85 c0                	test   %eax,%eax
c011f81b:	75 24                	jne    c011f841 <sfs_delete+0x300>
c011f81d:	c7 44 24 0c b4 86 12 	movl   $0xc01286b4,0xc(%esp)
c011f824:	c0 
c011f825:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011f82c:	c0 
c011f82d:	c7 44 24 04 b5 04 00 	movl   $0x4b5,0x4(%esp)
c011f834:	00 
c011f835:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011f83c:	e8 d5 19 fe ff       	call   c0101216 <__panic>
c011f841:	c7 44 24 04 02 87 12 	movl   $0xc0128702,0x4(%esp)
c011f848:	c0 
c011f849:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011f84c:	89 04 24             	mov    %eax,(%esp)
c011f84f:	e8 e4 a0 ff ff       	call   c0119938 <inode_check>
c011f854:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011f857:	8b 40 3c             	mov    0x3c(%eax),%eax
c011f85a:	8b 40 18             	mov    0x18(%eax),%eax
c011f85d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011f860:	89 14 24             	mov    %edx,(%esp)
c011f863:	ff d0                	call   *%eax
		}
		unlock_sfs_fs(sfs);
c011f865:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f868:	89 04 24             	mov    %eax,(%esp)
c011f86b:	e8 09 0d 00 00       	call   c0120579 <unlock_sfs_fs>
		//flush super block and bitmap
		if(sfs->super_dirty) {
c011f870:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f873:	8b 40 34             	mov    0x34(%eax),%eax
c011f876:	85 c0                	test   %eax,%eax
c011f878:	74 2b                	je     c011f8a5 <sfs_delete+0x364>
			sfs->super_dirty = 0;
c011f87a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f87d:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
			ret = sfs_sync_super(sfs);
c011f884:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f887:	89 04 24             	mov    %eax,(%esp)
c011f88a:	e8 50 0b 00 00       	call   c01203df <sfs_sync_super>
c011f88f:	89 45 f4             	mov    %eax,-0xc(%ebp)
			ret = sfs_sync_freemap(sfs);
c011f892:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f895:	89 04 24             	mov    %eax,(%esp)
c011f898:	e8 ce 0b 00 00       	call   c012046b <sfs_sync_freemap>
c011f89d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011f8a0:	e9 4a 02 00 00       	jmp    c011faef <sfs_delete+0x5ae>
c011f8a5:	e9 45 02 00 00       	jmp    c011faef <sfs_delete+0x5ae>
		}
	}
	else if(type == 2) {
c011f8aa:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
c011f8ae:	0f 85 3b 02 00 00    	jne    c011faef <sfs_delete+0x5ae>
		uint32_t dir_slot;
		struct inode *dir_node;
		ret = sfs_lookup_once(sfs, sin, name, &dir_node, &dir_slot);
c011f8b4:	8d 45 b8             	lea    -0x48(%ebp),%eax
c011f8b7:	89 44 24 10          	mov    %eax,0x10(%esp)
c011f8bb:	8d 45 b4             	lea    -0x4c(%ebp),%eax
c011f8be:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011f8c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c011f8c5:	89 44 24 08          	mov    %eax,0x8(%esp)
c011f8c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f8cc:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f8d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f8d3:	89 04 24             	mov    %eax,(%esp)
c011f8d6:	e8 c1 e2 ff ff       	call   c011db9c <sfs_lookup_once>
c011f8db:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(ret != 0) {
c011f8de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011f8e2:	74 08                	je     c011f8ec <sfs_delete+0x3ab>
			return ret;
c011f8e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011f8e7:	e9 11 02 00 00       	jmp    c011fafd <sfs_delete+0x5bc>
		}
		struct sfs_inode *sin_dir = vop_info(dir_node, sfs_inode);
c011f8ec:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c011f8ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
c011f8f2:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c011f8f6:	74 0d                	je     c011f905 <sfs_delete+0x3c4>
c011f8f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011f8fb:	8b 40 2c             	mov    0x2c(%eax),%eax
c011f8fe:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011f903:	74 24                	je     c011f929 <sfs_delete+0x3e8>
c011f905:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011f90c:	c0 
c011f90d:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011f914:	c0 
c011f915:	c7 44 24 04 c6 04 00 	movl   $0x4c6,0x4(%esp)
c011f91c:	00 
c011f91d:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011f924:	e8 ed 18 fe ff       	call   c0101216 <__panic>
c011f929:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011f92c:	89 45 cc             	mov    %eax,-0x34(%ebp)

		sfs_block_free(sfs, sin_dir->din->indirect);
c011f92f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011f932:	8b 00                	mov    (%eax),%eax
c011f934:	8b 40 3c             	mov    0x3c(%eax),%eax
c011f937:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f93b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f93e:	89 04 24             	mov    %eax,(%esp)
c011f941:	e8 5b d6 ff ff       	call   c011cfa1 <sfs_block_free>

		uint32_t ino_dir_index;
		lock_sin(sin);
c011f946:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f949:	89 04 24             	mov    %eax,(%esp)
c011f94c:	e8 50 d3 ff ff       	call   c011cca1 <lock_sin>
		{
			sfs_dirent_search_nolock(sfs, sin, name, &ino_dir_index, NULL, NULL);
c011f951:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c011f958:	00 
c011f959:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011f960:	00 
c011f961:	8d 45 b0             	lea    -0x50(%ebp),%eax
c011f964:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011f968:	8b 45 0c             	mov    0xc(%ebp),%eax
c011f96b:	89 44 24 08          	mov    %eax,0x8(%esp)
c011f96f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f972:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f976:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f979:	89 04 24             	mov    %eax,(%esp)
c011f97c:	e8 87 e0 ff ff       	call   c011da08 <sfs_dirent_search_nolock>
		}
		unlock_sin(sin);
c011f981:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f984:	89 04 24             	mov    %eax,(%esp)
c011f987:	e8 2b d3 ff ff       	call   c011ccb7 <unlock_sin>
		sfs_block_free(sfs, ino_dir_index);
c011f98c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c011f98f:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f993:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f996:	89 04 24             	mov    %eax,(%esp)
c011f999:	e8 03 d6 ff ff       	call   c011cfa1 <sfs_block_free>

		lock_sin(sin);
c011f99e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f9a1:	89 04 24             	mov    %eax,(%esp)
c011f9a4:	e8 f8 d2 ff ff       	call   c011cca1 <lock_sin>
		{
			sfs_bmap_free_nolock(sfs, sin, dir_slot);
c011f9a9:	8b 45 b8             	mov    -0x48(%ebp),%eax
c011f9ac:	89 44 24 08          	mov    %eax,0x8(%esp)
c011f9b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f9b3:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f9b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f9ba:	89 04 24             	mov    %eax,(%esp)
c011f9bd:	e8 2b dd ff ff       	call   c011d6ed <sfs_bmap_free_nolock>
		}
		unlock_sin(sin);
c011f9c2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f9c5:	89 04 24             	mov    %eax,(%esp)
c011f9c8:	e8 ea d2 ff ff       	call   c011ccb7 <unlock_sin>
		sfs_dir_entry_replace(sfs, sin, sin->din->blocks - 1, dir_slot);
c011f9cd:	8b 45 b8             	mov    -0x48(%ebp),%eax
c011f9d0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011f9d3:	8b 12                	mov    (%edx),%edx
c011f9d5:	8b 52 08             	mov    0x8(%edx),%edx
c011f9d8:	83 ea 01             	sub    $0x1,%edx
c011f9db:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011f9df:	89 54 24 08          	mov    %edx,0x8(%esp)
c011f9e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f9e6:	89 44 24 04          	mov    %eax,0x4(%esp)
c011f9ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011f9ed:	89 04 24             	mov    %eax,(%esp)
c011f9f0:	e8 30 fa ff ff       	call   c011f425 <sfs_dir_entry_replace>
		sin->din->blocks--;
c011f9f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011f9f8:	8b 00                	mov    (%eax),%eax
c011f9fa:	8b 50 08             	mov    0x8(%eax),%edx
c011f9fd:	83 ea 01             	sub    $0x1,%edx
c011fa00:	89 50 08             	mov    %edx,0x8(%eax)
		sin->dirty = 1;
c011fa03:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011fa06:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

		lock_sfs_fs(sfs);
c011fa0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fa10:	89 04 24             	mov    %eax,(%esp)
c011fa13:	e8 35 0b 00 00       	call   c012054d <lock_sfs_fs>
		{
			vop_fsync(info2node(sin, sfs_inode));
c011fa18:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011fa1b:	89 45 c8             	mov    %eax,-0x38(%ebp)
c011fa1e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011fa21:	8b 40 3c             	mov    0x3c(%eax),%eax
c011fa24:	8b 40 18             	mov    0x18(%eax),%eax
c011fa27:	85 c0                	test   %eax,%eax
c011fa29:	75 24                	jne    c011fa4f <sfs_delete+0x50e>
c011fa2b:	c7 44 24 0c 90 86 12 	movl   $0xc0128690,0xc(%esp)
c011fa32:	c0 
c011fa33:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011fa3a:	c0 
c011fa3b:	c7 44 24 04 dd 04 00 	movl   $0x4dd,0x4(%esp)
c011fa42:	00 
c011fa43:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011fa4a:	e8 c7 17 fe ff       	call   c0101216 <__panic>
c011fa4f:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c011fa53:	74 17                	je     c011fa6c <sfs_delete+0x52b>
c011fa55:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011fa58:	8b 40 3c             	mov    0x3c(%eax),%eax
c011fa5b:	85 c0                	test   %eax,%eax
c011fa5d:	74 0d                	je     c011fa6c <sfs_delete+0x52b>
c011fa5f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011fa62:	8b 40 3c             	mov    0x3c(%eax),%eax
c011fa65:	8b 40 18             	mov    0x18(%eax),%eax
c011fa68:	85 c0                	test   %eax,%eax
c011fa6a:	75 24                	jne    c011fa90 <sfs_delete+0x54f>
c011fa6c:	c7 44 24 0c b4 86 12 	movl   $0xc01286b4,0xc(%esp)
c011fa73:	c0 
c011fa74:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011fa7b:	c0 
c011fa7c:	c7 44 24 04 dd 04 00 	movl   $0x4dd,0x4(%esp)
c011fa83:	00 
c011fa84:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011fa8b:	e8 86 17 fe ff       	call   c0101216 <__panic>
c011fa90:	c7 44 24 04 02 87 12 	movl   $0xc0128702,0x4(%esp)
c011fa97:	c0 
c011fa98:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011fa9b:	89 04 24             	mov    %eax,(%esp)
c011fa9e:	e8 95 9e ff ff       	call   c0119938 <inode_check>
c011faa3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011faa6:	8b 40 3c             	mov    0x3c(%eax),%eax
c011faa9:	8b 40 18             	mov    0x18(%eax),%eax
c011faac:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011faaf:	89 14 24             	mov    %edx,(%esp)
c011fab2:	ff d0                	call   *%eax
		}
		unlock_sfs_fs(sfs);
c011fab4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fab7:	89 04 24             	mov    %eax,(%esp)
c011faba:	e8 ba 0a 00 00       	call   c0120579 <unlock_sfs_fs>

		if(sfs->super_dirty) {
c011fabf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fac2:	8b 40 34             	mov    0x34(%eax),%eax
c011fac5:	85 c0                	test   %eax,%eax
c011fac7:	74 26                	je     c011faef <sfs_delete+0x5ae>
			sfs->super_dirty = 0;
c011fac9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011facc:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
			ret = sfs_sync_super(sfs);
c011fad3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fad6:	89 04 24             	mov    %eax,(%esp)
c011fad9:	e8 01 09 00 00       	call   c01203df <sfs_sync_super>
c011fade:	89 45 f4             	mov    %eax,-0xc(%ebp)
			ret = sfs_sync_freemap(sfs);
c011fae1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fae4:	89 04 24             	mov    %eax,(%esp)
c011fae7:	e8 7f 09 00 00       	call   c012046b <sfs_sync_freemap>
c011faec:	89 45 f4             	mov    %eax,-0xc(%ebp)
		}
	}

	vop_ref_dec(node);
c011faef:	8b 45 08             	mov    0x8(%ebp),%eax
c011faf2:	89 04 24             	mov    %eax,(%esp)
c011faf5:	e8 ee 9b ff ff       	call   c01196e8 <inode_ref_dec>
	return ret;
c011fafa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011fafd:	c9                   	leave  
c011fafe:	c3                   	ret    

c011faff <sfs_mkdir>:


static int
sfs_mkdir(struct inode *node, const char *name) {
c011faff:	55                   	push   %ebp
c011fb00:	89 e5                	mov    %esp,%ebp
c011fb02:	83 ec 68             	sub    $0x68,%esp
	int ret;
	struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011fb05:	8b 45 08             	mov    0x8(%ebp),%eax
c011fb08:	8b 40 38             	mov    0x38(%eax),%eax
c011fb0b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011fb0e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011fb12:	74 0a                	je     c011fb1e <sfs_mkdir+0x1f>
c011fb14:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011fb17:	8b 40 6c             	mov    0x6c(%eax),%eax
c011fb1a:	85 c0                	test   %eax,%eax
c011fb1c:	74 24                	je     c011fb42 <sfs_mkdir+0x43>
c011fb1e:	c7 44 24 0c 24 87 12 	movl   $0xc0128724,0xc(%esp)
c011fb25:	c0 
c011fb26:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011fb2d:	c0 
c011fb2e:	c7 44 24 04 f0 04 00 	movl   $0x4f0,0x4(%esp)
c011fb35:	00 
c011fb36:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011fb3d:	e8 d4 16 fe ff       	call   c0101216 <__panic>
c011fb42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011fb45:	89 45 e8             	mov    %eax,-0x18(%ebp)
	vop_ref_inc(node);
c011fb48:	8b 45 08             	mov    0x8(%ebp),%eax
c011fb4b:	89 04 24             	mov    %eax,(%esp)
c011fb4e:	e8 7b 9b ff ff       	call   c01196ce <inode_ref_inc>
	struct sfs_inode *sin = vop_info(node, sfs_inode);
c011fb53:	8b 45 08             	mov    0x8(%ebp),%eax
c011fb56:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011fb59:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011fb5d:	74 0d                	je     c011fb6c <sfs_mkdir+0x6d>
c011fb5f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011fb62:	8b 40 2c             	mov    0x2c(%eax),%eax
c011fb65:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011fb6a:	74 24                	je     c011fb90 <sfs_mkdir+0x91>
c011fb6c:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011fb73:	c0 
c011fb74:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011fb7b:	c0 
c011fb7c:	c7 44 24 04 f2 04 00 	movl   $0x4f2,0x4(%esp)
c011fb83:	00 
c011fb84:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011fb8b:	e8 86 16 fe ff       	call   c0101216 <__panic>
c011fb90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011fb93:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if(sin->din->type != SFS_TYPE_DIR) {
c011fb96:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011fb99:	8b 00                	mov    (%eax),%eax
c011fb9b:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011fb9f:	66 83 f8 02          	cmp    $0x2,%ax
c011fba3:	74 15                	je     c011fbba <sfs_mkdir+0xbb>
		vop_ref_dec(node);
c011fba5:	8b 45 08             	mov    0x8(%ebp),%eax
c011fba8:	89 04 24             	mov    %eax,(%esp)
c011fbab:	e8 38 9b ff ff       	call   c01196e8 <inode_ref_dec>
		return -E_NOTDIR;
c011fbb0:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c011fbb5:	e9 63 02 00 00       	jmp    c011fe1d <sfs_mkdir+0x31e>
	}

	//cprintf("sin->din->size = %d\n", sin->din->size);
	//cprintf("sin->ino = %u\n", sin->ino);
	
	int newBIndex = sin->din->blocks;
c011fbba:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011fbbd:	8b 00                	mov    (%eax),%eax
c011fbbf:	8b 40 08             	mov    0x8(%eax),%eax
c011fbc2:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32_t indexAddr;
	sfs_bmap_get_nolock(sfs, sin, newBIndex, 1, &indexAddr);
c011fbc5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011fbc8:	8d 55 cc             	lea    -0x34(%ebp),%edx
c011fbcb:	89 54 24 10          	mov    %edx,0x10(%esp)
c011fbcf:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011fbd6:	00 
c011fbd7:	89 44 24 08          	mov    %eax,0x8(%esp)
c011fbdb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011fbde:	89 44 24 04          	mov    %eax,0x4(%esp)
c011fbe2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fbe5:	89 04 24             	mov    %eax,(%esp)
c011fbe8:	e8 99 d8 ff ff       	call   c011d486 <sfs_bmap_get_nolock>
	//cprintf("indexAddr = %u\n", indexAddr);
	
	uint32_t newDirNodeAddr;
	sfs_block_alloc(sfs, &newDirNodeAddr);
c011fbed:	8d 45 c8             	lea    -0x38(%ebp),%eax
c011fbf0:	89 44 24 04          	mov    %eax,0x4(%esp)
c011fbf4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fbf7:	89 04 24             	mov    %eax,(%esp)
c011fbfa:	e8 d5 d2 ff ff       	call   c011ced4 <sfs_block_alloc>
	//cprintf("newDirNodeAddr = %u\n", newDirNodeAddr);

	uint32_t newDirIndirectAddr;
	sfs_block_alloc(sfs, &newDirIndirectAddr);
c011fbff:	8d 45 c4             	lea    -0x3c(%ebp),%eax
c011fc02:	89 44 24 04          	mov    %eax,0x4(%esp)
c011fc06:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fc09:	89 04 24             	mov    %eax,(%esp)
c011fc0c:	e8 c3 d2 ff ff       	call   c011ced4 <sfs_block_alloc>

	struct sfs_disk_inode *newBlkInode = (struct sfs_disk_inode*) kmalloc(sizeof(struct sfs_disk_inode));
c011fc11:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c011fc18:	e8 93 ae fe ff       	call   c010aab0 <kmalloc>
c011fc1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
	newBlkInode->size = 4096;
c011fc20:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011fc23:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
	newBlkInode->type = SFS_TYPE_DIR;
c011fc29:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011fc2c:	66 c7 40 04 02 00    	movw   $0x2,0x4(%eax)
	newBlkInode->nlinks = 1;
c011fc32:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011fc35:	66 c7 40 06 01 00    	movw   $0x1,0x6(%eax)
	newBlkInode->blocks = 0;
c011fc3b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011fc3e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	int i;
	for(i = 0; i < SFS_NDIRECT; i++) {
c011fc45:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c011fc4c:	eb 12                	jmp    c011fc60 <sfs_mkdir+0x161>
		newBlkInode->direct[i] = 0;
c011fc4e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011fc51:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011fc54:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c011fc5b:	00 
	newBlkInode->size = 4096;
	newBlkInode->type = SFS_TYPE_DIR;
	newBlkInode->nlinks = 1;
	newBlkInode->blocks = 0;
	int i;
	for(i = 0; i < SFS_NDIRECT; i++) {
c011fc5c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c011fc60:	83 7d f0 0b          	cmpl   $0xb,-0x10(%ebp)
c011fc64:	7e e8                	jle    c011fc4e <sfs_mkdir+0x14f>
		newBlkInode->direct[i] = 0;
	}
	newBlkInode->indirect = newDirIndirectAddr;
c011fc66:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c011fc69:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011fc6c:	89 50 3c             	mov    %edx,0x3c(%eax)

	struct sfs_disk_entry *indexEntry = (struct sfs_disk_entry*) kmalloc(sizeof(struct sfs_disk_entry));
c011fc6f:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c011fc76:	e8 35 ae fe ff       	call   c010aab0 <kmalloc>
c011fc7b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	indexEntry->ino = newDirNodeAddr;
c011fc7e:	8b 55 c8             	mov    -0x38(%ebp),%edx
c011fc81:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011fc84:	89 10                	mov    %edx,(%eax)

	for(i = 0; i < SFS_MAX_FNAME_LEN + 1 && name[i] != '\0'; i++) {
c011fc86:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c011fc8d:	eb 1a                	jmp    c011fca9 <sfs_mkdir+0x1aa>
		indexEntry->name[i] = name[i];
c011fc8f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011fc92:	8b 45 0c             	mov    0xc(%ebp),%eax
c011fc95:	01 d0                	add    %edx,%eax
c011fc97:	0f b6 00             	movzbl (%eax),%eax
c011fc9a:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c011fc9d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011fca0:	01 ca                	add    %ecx,%edx
c011fca2:	88 42 04             	mov    %al,0x4(%edx)
	newBlkInode->indirect = newDirIndirectAddr;

	struct sfs_disk_entry *indexEntry = (struct sfs_disk_entry*) kmalloc(sizeof(struct sfs_disk_entry));
	indexEntry->ino = newDirNodeAddr;

	for(i = 0; i < SFS_MAX_FNAME_LEN + 1 && name[i] != '\0'; i++) {
c011fca5:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c011fca9:	81 7d f0 ff 00 00 00 	cmpl   $0xff,-0x10(%ebp)
c011fcb0:	7f 0f                	jg     c011fcc1 <sfs_mkdir+0x1c2>
c011fcb2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011fcb5:	8b 45 0c             	mov    0xc(%ebp),%eax
c011fcb8:	01 d0                	add    %edx,%eax
c011fcba:	0f b6 00             	movzbl (%eax),%eax
c011fcbd:	84 c0                	test   %al,%al
c011fcbf:	75 ce                	jne    c011fc8f <sfs_mkdir+0x190>
		indexEntry->name[i] = name[i];
	}
	indexEntry->name[i] = '\0';
c011fcc1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c011fcc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011fcc7:	01 d0                	add    %edx,%eax
c011fcc9:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	//cprintf("new dir name : %s\n", indexEntry->name);

	sin->din->blocks++;
c011fccd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011fcd0:	8b 00                	mov    (%eax),%eax
c011fcd2:	8b 50 08             	mov    0x8(%eax),%edx
c011fcd5:	83 c2 01             	add    $0x1,%edx
c011fcd8:	89 50 08             	mov    %edx,0x8(%eax)
	sin->dirty = 1;
c011fcdb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011fcde:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

	ret = sfs_wblock(sfs, indexEntry, indexAddr, 1);
c011fce5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011fce8:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011fcef:	00 
c011fcf0:	89 44 24 08          	mov    %eax,0x8(%esp)
c011fcf4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011fcf7:	89 44 24 04          	mov    %eax,0x4(%esp)
c011fcfb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fcfe:	89 04 24             	mov    %eax,(%esp)
c011fd01:	e8 08 05 00 00       	call   c012020e <sfs_wblock>
c011fd06:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ret = sfs_wblock(sfs, newBlkInode, newDirNodeAddr, 1);
c011fd09:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011fd0c:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011fd13:	00 
c011fd14:	89 44 24 08          	mov    %eax,0x8(%esp)
c011fd18:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011fd1b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011fd1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fd22:	89 04 24             	mov    %eax,(%esp)
c011fd25:	e8 e4 04 00 00       	call   c012020e <sfs_wblock>
c011fd2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	lock_sfs_fs(sfs);
c011fd2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fd30:	89 04 24             	mov    %eax,(%esp)
c011fd33:	e8 15 08 00 00       	call   c012054d <lock_sfs_fs>
	vop_fsync(info2node(sin, sfs_inode));
c011fd38:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011fd3b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c011fd3e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011fd41:	8b 40 3c             	mov    0x3c(%eax),%eax
c011fd44:	8b 40 18             	mov    0x18(%eax),%eax
c011fd47:	85 c0                	test   %eax,%eax
c011fd49:	75 24                	jne    c011fd6f <sfs_mkdir+0x270>
c011fd4b:	c7 44 24 0c 90 86 12 	movl   $0xc0128690,0xc(%esp)
c011fd52:	c0 
c011fd53:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011fd5a:	c0 
c011fd5b:	c7 44 24 04 22 05 00 	movl   $0x522,0x4(%esp)
c011fd62:	00 
c011fd63:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011fd6a:	e8 a7 14 fe ff       	call   c0101216 <__panic>
c011fd6f:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c011fd73:	74 17                	je     c011fd8c <sfs_mkdir+0x28d>
c011fd75:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011fd78:	8b 40 3c             	mov    0x3c(%eax),%eax
c011fd7b:	85 c0                	test   %eax,%eax
c011fd7d:	74 0d                	je     c011fd8c <sfs_mkdir+0x28d>
c011fd7f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011fd82:	8b 40 3c             	mov    0x3c(%eax),%eax
c011fd85:	8b 40 18             	mov    0x18(%eax),%eax
c011fd88:	85 c0                	test   %eax,%eax
c011fd8a:	75 24                	jne    c011fdb0 <sfs_mkdir+0x2b1>
c011fd8c:	c7 44 24 0c b4 86 12 	movl   $0xc01286b4,0xc(%esp)
c011fd93:	c0 
c011fd94:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011fd9b:	c0 
c011fd9c:	c7 44 24 04 22 05 00 	movl   $0x522,0x4(%esp)
c011fda3:	00 
c011fda4:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011fdab:	e8 66 14 fe ff       	call   c0101216 <__panic>
c011fdb0:	c7 44 24 04 02 87 12 	movl   $0xc0128702,0x4(%esp)
c011fdb7:	c0 
c011fdb8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011fdbb:	89 04 24             	mov    %eax,(%esp)
c011fdbe:	e8 75 9b ff ff       	call   c0119938 <inode_check>
c011fdc3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011fdc6:	8b 40 3c             	mov    0x3c(%eax),%eax
c011fdc9:	8b 40 18             	mov    0x18(%eax),%eax
c011fdcc:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011fdcf:	89 14 24             	mov    %edx,(%esp)
c011fdd2:	ff d0                	call   *%eax
	unlock_sfs_fs(sfs);
c011fdd4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fdd7:	89 04 24             	mov    %eax,(%esp)
c011fdda:	e8 9a 07 00 00       	call   c0120579 <unlock_sfs_fs>
	if(sfs->super_dirty) {
c011fddf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fde2:	8b 40 34             	mov    0x34(%eax),%eax
c011fde5:	85 c0                	test   %eax,%eax
c011fde7:	74 26                	je     c011fe0f <sfs_mkdir+0x310>
		sfs->super_dirty = 0;
c011fde9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fdec:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
		ret = sfs_sync_super(sfs);
c011fdf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fdf6:	89 04 24             	mov    %eax,(%esp)
c011fdf9:	e8 e1 05 00 00       	call   c01203df <sfs_sync_super>
c011fdfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
		ret = sfs_sync_freemap(sfs);
c011fe01:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fe04:	89 04 24             	mov    %eax,(%esp)
c011fe07:	e8 5f 06 00 00       	call   c012046b <sfs_sync_freemap>
c011fe0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	vop_ref_dec(node);
c011fe0f:	8b 45 08             	mov    0x8(%ebp),%eax
c011fe12:	89 04 24             	mov    %eax,(%esp)
c011fe15:	e8 ce 98 ff ff       	call   c01196e8 <inode_ref_dec>

	return ret;
c011fe1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011fe1d:	c9                   	leave  
c011fe1e:	c3                   	ret    

c011fe1f <sfs_rename>:

static int
sfs_rename(struct inode *node, const char *old_name, const char *new_name) {
c011fe1f:	55                   	push   %ebp
c011fe20:	89 e5                	mov    %esp,%ebp
c011fe22:	83 ec 68             	sub    $0x68,%esp
	int ret;
	//step 1 : get sfs
	struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011fe25:	8b 45 08             	mov    0x8(%ebp),%eax
c011fe28:	8b 40 38             	mov    0x38(%eax),%eax
c011fe2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011fe2e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011fe32:	74 0a                	je     c011fe3e <sfs_rename+0x1f>
c011fe34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011fe37:	8b 40 6c             	mov    0x6c(%eax),%eax
c011fe3a:	85 c0                	test   %eax,%eax
c011fe3c:	74 24                	je     c011fe62 <sfs_rename+0x43>
c011fe3e:	c7 44 24 0c 24 87 12 	movl   $0xc0128724,0xc(%esp)
c011fe45:	c0 
c011fe46:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011fe4d:	c0 
c011fe4e:	c7 44 24 04 33 05 00 	movl   $0x533,0x4(%esp)
c011fe55:	00 
c011fe56:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011fe5d:	e8 b4 13 fe ff       	call   c0101216 <__panic>
c011fe62:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011fe65:	89 45 ec             	mov    %eax,-0x14(%ebp)
	vop_ref_inc(node);
c011fe68:	8b 45 08             	mov    0x8(%ebp),%eax
c011fe6b:	89 04 24             	mov    %eax,(%esp)
c011fe6e:	e8 5b 98 ff ff       	call   c01196ce <inode_ref_inc>
	//step 2 : get par dir sfs_inode
	struct sfs_inode *sin = vop_info(node, sfs_inode);
c011fe73:	8b 45 08             	mov    0x8(%ebp),%eax
c011fe76:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011fe79:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011fe7d:	74 0d                	je     c011fe8c <sfs_rename+0x6d>
c011fe7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011fe82:	8b 40 2c             	mov    0x2c(%eax),%eax
c011fe85:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011fe8a:	74 24                	je     c011feb0 <sfs_rename+0x91>
c011fe8c:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011fe93:	c0 
c011fe94:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011fe9b:	c0 
c011fe9c:	c7 44 24 04 36 05 00 	movl   $0x536,0x4(%esp)
c011fea3:	00 
c011fea4:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011feab:	e8 66 13 fe ff       	call   c0101216 <__panic>
c011feb0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011feb3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if(sin->din->type != SFS_TYPE_DIR) {
c011feb6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011feb9:	8b 00                	mov    (%eax),%eax
c011febb:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011febf:	66 83 f8 02          	cmp    $0x2,%ax
c011fec3:	74 15                	je     c011feda <sfs_rename+0xbb>
       vop_ref_dec(node);
c011fec5:	8b 45 08             	mov    0x8(%ebp),%eax
c011fec8:	89 04 24             	mov    %eax,(%esp)
c011fecb:	e8 18 98 ff ff       	call   c01196e8 <inode_ref_dec>
       return -E_NOTDIR;
c011fed0:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c011fed5:	e9 04 02 00 00       	jmp    c01200de <sfs_rename+0x2bf>
	//step 3 : get entry
	uint32_t ino_entry_index;
	//cprintf("ino_entry_index = %u\n", ino_entry_index);
    uint32_t rename_slot;
	struct inode *rename_node;
	ret = sfs_lookup_once(sfs, sin, old_name, &rename_node, &rename_slot);
c011feda:	8d 45 c8             	lea    -0x38(%ebp),%eax
c011fedd:	89 44 24 10          	mov    %eax,0x10(%esp)
c011fee1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
c011fee4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011fee8:	8b 45 0c             	mov    0xc(%ebp),%eax
c011feeb:	89 44 24 08          	mov    %eax,0x8(%esp)
c011feef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011fef2:	89 44 24 04          	mov    %eax,0x4(%esp)
c011fef6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011fef9:	89 04 24             	mov    %eax,(%esp)
c011fefc:	e8 9b dc ff ff       	call   c011db9c <sfs_lookup_once>
c011ff01:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if(ret != 0) {
c011ff04:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c011ff08:	74 08                	je     c011ff12 <sfs_rename+0xf3>
        return ret;
c011ff0a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011ff0d:	e9 cc 01 00 00       	jmp    c01200de <sfs_rename+0x2bf>
    }
    struct sfs_inode *rename_sin = vop_info(rename_node, sfs_inode);
c011ff12:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c011ff15:	89 45 dc             	mov    %eax,-0x24(%ebp)
c011ff18:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011ff1c:	74 0d                	je     c011ff2b <sfs_rename+0x10c>
c011ff1e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011ff21:	8b 40 2c             	mov    0x2c(%eax),%eax
c011ff24:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011ff29:	74 24                	je     c011ff4f <sfs_rename+0x130>
c011ff2b:	c7 44 24 0c fc 84 12 	movl   $0xc01284fc,0xc(%esp)
c011ff32:	c0 
c011ff33:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c011ff3a:	c0 
c011ff3b:	c7 44 24 04 45 05 00 	movl   $0x545,0x4(%esp)
c011ff42:	00 
c011ff43:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c011ff4a:	e8 c7 12 fe ff       	call   c0101216 <__panic>
c011ff4f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011ff52:	89 45 d8             	mov    %eax,-0x28(%ebp)
	sfs_bmap_load_nolock(sfs, sin, rename_slot, &ino_entry_index);
c011ff55:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011ff58:	8d 55 cc             	lea    -0x34(%ebp),%edx
c011ff5b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011ff5f:	89 44 24 08          	mov    %eax,0x8(%esp)
c011ff63:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011ff66:	89 44 24 04          	mov    %eax,0x4(%esp)
c011ff6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011ff6d:	89 04 24             	mov    %eax,(%esp)
c011ff70:	e8 21 d8 ff ff       	call   c011d796 <sfs_bmap_load_nolock>
	//cprintf("step 3 success\n");

	//step 4 : change name
	struct sfs_disk_entry *rename_entry = (struct sfs_disk_entry*) kmalloc(sizeof(struct sfs_disk_entry));
c011ff75:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c011ff7c:	e8 2f ab fe ff       	call   c010aab0 <kmalloc>
c011ff81:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	int i;
    for(i = 0; i < 255 && new_name[i] != '\0'; i++) {
c011ff84:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c011ff8b:	eb 1a                	jmp    c011ffa7 <sfs_rename+0x188>
        rename_entry->name[i] = new_name[i];
c011ff8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011ff90:	8b 45 10             	mov    0x10(%ebp),%eax
c011ff93:	01 d0                	add    %edx,%eax
c011ff95:	0f b6 00             	movzbl (%eax),%eax
c011ff98:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c011ff9b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011ff9e:	01 ca                	add    %ecx,%edx
c011ffa0:	88 42 04             	mov    %al,0x4(%edx)
	//cprintf("step 3 success\n");

	//step 4 : change name
	struct sfs_disk_entry *rename_entry = (struct sfs_disk_entry*) kmalloc(sizeof(struct sfs_disk_entry));
	int i;
    for(i = 0; i < 255 && new_name[i] != '\0'; i++) {
c011ffa3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011ffa7:	81 7d f4 fe 00 00 00 	cmpl   $0xfe,-0xc(%ebp)
c011ffae:	7f 0f                	jg     c011ffbf <sfs_rename+0x1a0>
c011ffb0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011ffb3:	8b 45 10             	mov    0x10(%ebp),%eax
c011ffb6:	01 d0                	add    %edx,%eax
c011ffb8:	0f b6 00             	movzbl (%eax),%eax
c011ffbb:	84 c0                	test   %al,%al
c011ffbd:	75 ce                	jne    c011ff8d <sfs_rename+0x16e>
        rename_entry->name[i] = new_name[i];
    }
    rename_entry->name[i] = '\0';
c011ffbf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c011ffc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011ffc5:	01 d0                	add    %edx,%eax
c011ffc7:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	rename_entry->ino = rename_sin->ino;
c011ffcb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011ffce:	8b 50 04             	mov    0x4(%eax),%edx
c011ffd1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011ffd4:	89 10                	mov    %edx,(%eax)
	//cprintf("rename_entry->ino = %u\n", rename_entry->ino);
	//cprintf("rename_slot = %u\n", rename_slot);
	//cprintf("step 4 success\n");

	//step 5 : write into disk
	sfs_clear_block(sfs, ino_entry_index, 1);
c011ffd6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011ffd9:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011ffe0:	00 
c011ffe1:	89 44 24 04          	mov    %eax,0x4(%esp)
c011ffe5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011ffe8:	89 04 24             	mov    %eax,(%esp)
c011ffeb:	e8 d7 04 00 00       	call   c01204c7 <sfs_clear_block>
	ret = sfs_wblock(sfs, rename_entry, ino_entry_index, 1);
c011fff0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011fff3:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011fffa:	00 
c011fffb:	89 44 24 08          	mov    %eax,0x8(%esp)
c011ffff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0120002:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120006:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0120009:	89 04 24             	mov    %eax,(%esp)
c012000c:	e8 fd 01 00 00       	call   c012020e <sfs_wblock>
c0120011:	89 45 e0             	mov    %eax,-0x20(%ebp)
	sin->dirty = 1;
c0120014:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0120017:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
	lock_sfs_fs(sfs);
c012001e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0120021:	89 04 24             	mov    %eax,(%esp)
c0120024:	e8 24 05 00 00       	call   c012054d <lock_sfs_fs>
	vop_fsync(info2node(sin, sfs_inode));
c0120029:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c012002c:	89 45 d0             	mov    %eax,-0x30(%ebp)
c012002f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0120032:	8b 40 3c             	mov    0x3c(%eax),%eax
c0120035:	8b 40 18             	mov    0x18(%eax),%eax
c0120038:	85 c0                	test   %eax,%eax
c012003a:	75 24                	jne    c0120060 <sfs_rename+0x241>
c012003c:	c7 44 24 0c 90 86 12 	movl   $0xc0128690,0xc(%esp)
c0120043:	c0 
c0120044:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c012004b:	c0 
c012004c:	c7 44 24 04 5b 05 00 	movl   $0x55b,0x4(%esp)
c0120053:	00 
c0120054:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c012005b:	e8 b6 11 fe ff       	call   c0101216 <__panic>
c0120060:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0120064:	74 17                	je     c012007d <sfs_rename+0x25e>
c0120066:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0120069:	8b 40 3c             	mov    0x3c(%eax),%eax
c012006c:	85 c0                	test   %eax,%eax
c012006e:	74 0d                	je     c012007d <sfs_rename+0x25e>
c0120070:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0120073:	8b 40 3c             	mov    0x3c(%eax),%eax
c0120076:	8b 40 18             	mov    0x18(%eax),%eax
c0120079:	85 c0                	test   %eax,%eax
c012007b:	75 24                	jne    c01200a1 <sfs_rename+0x282>
c012007d:	c7 44 24 0c b4 86 12 	movl   $0xc01286b4,0xc(%esp)
c0120084:	c0 
c0120085:	c7 44 24 08 ab 84 12 	movl   $0xc01284ab,0x8(%esp)
c012008c:	c0 
c012008d:	c7 44 24 04 5b 05 00 	movl   $0x55b,0x4(%esp)
c0120094:	00 
c0120095:	c7 04 24 43 84 12 c0 	movl   $0xc0128443,(%esp)
c012009c:	e8 75 11 fe ff       	call   c0101216 <__panic>
c01200a1:	c7 44 24 04 02 87 12 	movl   $0xc0128702,0x4(%esp)
c01200a8:	c0 
c01200a9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01200ac:	89 04 24             	mov    %eax,(%esp)
c01200af:	e8 84 98 ff ff       	call   c0119938 <inode_check>
c01200b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01200b7:	8b 40 3c             	mov    0x3c(%eax),%eax
c01200ba:	8b 40 18             	mov    0x18(%eax),%eax
c01200bd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01200c0:	89 14 24             	mov    %edx,(%esp)
c01200c3:	ff d0                	call   *%eax
	unlock_sfs_fs(sfs);
c01200c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01200c8:	89 04 24             	mov    %eax,(%esp)
c01200cb:	e8 a9 04 00 00       	call   c0120579 <unlock_sfs_fs>
	//cprintf("step 5 success\n");

	vop_ref_dec(node);
c01200d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01200d3:	89 04 24             	mov    %eax,(%esp)
c01200d6:	e8 0d 96 ff ff       	call   c01196e8 <inode_ref_dec>
	return ret;
c01200db:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c01200de:	c9                   	leave  
c01200df:	c3                   	ret    

c01200e0 <sfs_rwblock_nolock>:
 * @blkno: the NO. of disk block
 * @write: BOOL: Read or Write
 * @check: BOOL: if check (blono < sfs super.blocks)
 */
static int
sfs_rwblock_nolock(struct sfs_fs *sfs, void *buf, uint32_t blkno, bool write, bool check) {
c01200e0:	55                   	push   %ebp
c01200e1:	89 e5                	mov    %esp,%ebp
c01200e3:	83 ec 38             	sub    $0x38,%esp
    assert((blkno != 0 || !check) && blkno < sfs->super.blocks);
c01200e6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01200ea:	75 06                	jne    c01200f2 <sfs_rwblock_nolock+0x12>
c01200ec:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01200f0:	75 0b                	jne    c01200fd <sfs_rwblock_nolock+0x1d>
c01200f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01200f5:	8b 40 04             	mov    0x4(%eax),%eax
c01200f8:	3b 45 10             	cmp    0x10(%ebp),%eax
c01200fb:	77 24                	ja     c0120121 <sfs_rwblock_nolock+0x41>
c01200fd:	c7 44 24 0c 28 89 12 	movl   $0xc0128928,0xc(%esp)
c0120104:	c0 
c0120105:	c7 44 24 08 5c 89 12 	movl   $0xc012895c,0x8(%esp)
c012010c:	c0 
c012010d:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0120114:	00 
c0120115:	c7 04 24 71 89 12 c0 	movl   $0xc0128971,(%esp)
c012011c:	e8 f5 10 fe ff       	call   c0101216 <__panic>
    struct iobuf __iob, *iob = iobuf_init(&__iob, buf, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0120121:	8b 45 10             	mov    0x10(%ebp),%eax
c0120124:	c1 e0 0c             	shl    $0xc,%eax
c0120127:	89 44 24 0c          	mov    %eax,0xc(%esp)
c012012b:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0120132:	00 
c0120133:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120136:	89 44 24 04          	mov    %eax,0x4(%esp)
c012013a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c012013d:	89 04 24             	mov    %eax,(%esp)
c0120140:	e8 9f 42 ff ff       	call   c01143e4 <iobuf_init>
c0120145:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(sfs->dev, iob, write);
c0120148:	8b 45 08             	mov    0x8(%ebp),%eax
c012014b:	8b 40 2c             	mov    0x2c(%eax),%eax
c012014e:	8b 40 10             	mov    0x10(%eax),%eax
c0120151:	8b 55 08             	mov    0x8(%ebp),%edx
c0120154:	8b 52 2c             	mov    0x2c(%edx),%edx
c0120157:	8b 4d 14             	mov    0x14(%ebp),%ecx
c012015a:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c012015e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0120161:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0120165:	89 14 24             	mov    %edx,(%esp)
c0120168:	ff d0                	call   *%eax
}
c012016a:	c9                   	leave  
c012016b:	c3                   	ret    

c012016c <sfs_rwblock>:
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 * @write: BOOL: Read - 0 or Write - 1
 */
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
c012016c:	55                   	push   %ebp
c012016d:	89 e5                	mov    %esp,%ebp
c012016f:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c0120172:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_sfs_io(sfs);
c0120179:	8b 45 08             	mov    0x8(%ebp),%eax
c012017c:	89 04 24             	mov    %eax,(%esp)
c012017f:	e8 df 03 00 00       	call   c0120563 <lock_sfs_io>
    {
        while (nblks != 0) {
c0120184:	eb 42                	jmp    c01201c8 <sfs_rwblock+0x5c>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
c0120186:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c012018d:	00 
c012018e:	8b 45 18             	mov    0x18(%ebp),%eax
c0120191:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0120195:	8b 45 10             	mov    0x10(%ebp),%eax
c0120198:	89 44 24 08          	mov    %eax,0x8(%esp)
c012019c:	8b 45 0c             	mov    0xc(%ebp),%eax
c012019f:	89 44 24 04          	mov    %eax,0x4(%esp)
c01201a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01201a6:	89 04 24             	mov    %eax,(%esp)
c01201a9:	e8 32 ff ff ff       	call   c01200e0 <sfs_rwblock_nolock>
c01201ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01201b1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01201b5:	74 02                	je     c01201b9 <sfs_rwblock+0x4d>
                break;
c01201b7:	eb 15                	jmp    c01201ce <sfs_rwblock+0x62>
            }
            blkno ++, nblks --;
c01201b9:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c01201bd:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
            buf += SFS_BLKSIZE;
c01201c1:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
    int ret = 0;
    lock_sfs_io(sfs);
    {
        while (nblks != 0) {
c01201c8:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01201cc:	75 b8                	jne    c0120186 <sfs_rwblock+0x1a>
            }
            blkno ++, nblks --;
            buf += SFS_BLKSIZE;
        }
    }
    unlock_sfs_io(sfs);
c01201ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01201d1:	89 04 24             	mov    %eax,(%esp)
c01201d4:	e8 b6 03 00 00       	call   c012058f <unlock_sfs_io>
    return ret;
c01201d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01201dc:	c9                   	leave  
c01201dd:	c3                   	ret    

c01201de <sfs_rblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_rblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c01201de:	55                   	push   %ebp
c01201df:	89 e5                	mov    %esp,%ebp
c01201e1:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 0);
c01201e4:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01201eb:	00 
c01201ec:	8b 45 14             	mov    0x14(%ebp),%eax
c01201ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01201f3:	8b 45 10             	mov    0x10(%ebp),%eax
c01201f6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01201fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01201fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120201:	8b 45 08             	mov    0x8(%ebp),%eax
c0120204:	89 04 24             	mov    %eax,(%esp)
c0120207:	e8 60 ff ff ff       	call   c012016c <sfs_rwblock>
}
c012020c:	c9                   	leave  
c012020d:	c3                   	ret    

c012020e <sfs_wblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_wblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c012020e:	55                   	push   %ebp
c012020f:	89 e5                	mov    %esp,%ebp
c0120211:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 1);
c0120214:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c012021b:	00 
c012021c:	8b 45 14             	mov    0x14(%ebp),%eax
c012021f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0120223:	8b 45 10             	mov    0x10(%ebp),%eax
c0120226:	89 44 24 08          	mov    %eax,0x8(%esp)
c012022a:	8b 45 0c             	mov    0xc(%ebp),%eax
c012022d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120231:	8b 45 08             	mov    0x8(%ebp),%eax
c0120234:	89 04 24             	mov    %eax,(%esp)
c0120237:	e8 30 ff ff ff       	call   c012016c <sfs_rwblock>
}
c012023c:	c9                   	leave  
c012023d:	c3                   	ret    

c012023e <sfs_rbuf>:
 * @len:    the length need to Rd
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_rbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c012023e:	55                   	push   %ebp
c012023f:	89 e5                	mov    %esp,%ebp
c0120241:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c0120244:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0120248:	78 18                	js     c0120262 <sfs_rbuf+0x24>
c012024a:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c0120251:	7f 0f                	jg     c0120262 <sfs_rbuf+0x24>
c0120253:	8b 55 18             	mov    0x18(%ebp),%edx
c0120256:	8b 45 10             	mov    0x10(%ebp),%eax
c0120259:	01 d0                	add    %edx,%eax
c012025b:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0120260:	76 24                	jbe    c0120286 <sfs_rbuf+0x48>
c0120262:	c7 44 24 0c 88 89 12 	movl   $0xc0128988,0xc(%esp)
c0120269:	c0 
c012026a:	c7 44 24 08 5c 89 12 	movl   $0xc012895c,0x8(%esp)
c0120271:	c0 
c0120272:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c0120279:	00 
c012027a:	c7 04 24 71 89 12 c0 	movl   $0xc0128971,(%esp)
c0120281:	e8 90 0f fe ff       	call   c0101216 <__panic>
    int ret;
    lock_sfs_io(sfs);
c0120286:	8b 45 08             	mov    0x8(%ebp),%eax
c0120289:	89 04 24             	mov    %eax,(%esp)
c012028c:	e8 d2 02 00 00       	call   c0120563 <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c0120291:	8b 45 08             	mov    0x8(%ebp),%eax
c0120294:	8b 40 38             	mov    0x38(%eax),%eax
c0120297:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c012029e:	00 
c012029f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01202a6:	00 
c01202a7:	8b 55 14             	mov    0x14(%ebp),%edx
c01202aa:	89 54 24 08          	mov    %edx,0x8(%esp)
c01202ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c01202b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01202b5:	89 04 24             	mov    %eax,(%esp)
c01202b8:	e8 23 fe ff ff       	call   c01200e0 <sfs_rwblock_nolock>
c01202bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01202c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01202c4:	75 21                	jne    c01202e7 <sfs_rbuf+0xa9>
            memcpy(buf, sfs->sfs_buffer + offset, len);
c01202c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01202c9:	8b 50 38             	mov    0x38(%eax),%edx
c01202cc:	8b 45 18             	mov    0x18(%ebp),%eax
c01202cf:	01 c2                	add    %eax,%edx
c01202d1:	8b 45 10             	mov    0x10(%ebp),%eax
c01202d4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01202d8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01202dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01202df:	89 04 24             	mov    %eax,(%esp)
c01202e2:	e8 fa 0e 00 00       	call   c01211e1 <memcpy>
        }
    }
    unlock_sfs_io(sfs);
c01202e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01202ea:	89 04 24             	mov    %eax,(%esp)
c01202ed:	e8 9d 02 00 00       	call   c012058f <unlock_sfs_io>
    return ret;
c01202f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01202f5:	c9                   	leave  
c01202f6:	c3                   	ret    

c01202f7 <sfs_wbuf>:
 * @len:    the length need to Wr
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_wbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c01202f7:	55                   	push   %ebp
c01202f8:	89 e5                	mov    %esp,%ebp
c01202fa:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c01202fd:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0120301:	78 18                	js     c012031b <sfs_wbuf+0x24>
c0120303:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c012030a:	7f 0f                	jg     c012031b <sfs_wbuf+0x24>
c012030c:	8b 55 18             	mov    0x18(%ebp),%edx
c012030f:	8b 45 10             	mov    0x10(%ebp),%eax
c0120312:	01 d0                	add    %edx,%eax
c0120314:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0120319:	76 24                	jbe    c012033f <sfs_wbuf+0x48>
c012031b:	c7 44 24 0c 88 89 12 	movl   $0xc0128988,0xc(%esp)
c0120322:	c0 
c0120323:	c7 44 24 08 5c 89 12 	movl   $0xc012895c,0x8(%esp)
c012032a:	c0 
c012032b:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0120332:	00 
c0120333:	c7 04 24 71 89 12 c0 	movl   $0xc0128971,(%esp)
c012033a:	e8 d7 0e fe ff       	call   c0101216 <__panic>
    int ret;
    lock_sfs_io(sfs);
c012033f:	8b 45 08             	mov    0x8(%ebp),%eax
c0120342:	89 04 24             	mov    %eax,(%esp)
c0120345:	e8 19 02 00 00       	call   c0120563 <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c012034a:	8b 45 08             	mov    0x8(%ebp),%eax
c012034d:	8b 40 38             	mov    0x38(%eax),%eax
c0120350:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0120357:	00 
c0120358:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c012035f:	00 
c0120360:	8b 55 14             	mov    0x14(%ebp),%edx
c0120363:	89 54 24 08          	mov    %edx,0x8(%esp)
c0120367:	89 44 24 04          	mov    %eax,0x4(%esp)
c012036b:	8b 45 08             	mov    0x8(%ebp),%eax
c012036e:	89 04 24             	mov    %eax,(%esp)
c0120371:	e8 6a fd ff ff       	call   c01200e0 <sfs_rwblock_nolock>
c0120376:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0120379:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c012037d:	75 50                	jne    c01203cf <sfs_wbuf+0xd8>
            memcpy(sfs->sfs_buffer + offset, buf, len);
c012037f:	8b 45 08             	mov    0x8(%ebp),%eax
c0120382:	8b 50 38             	mov    0x38(%eax),%edx
c0120385:	8b 45 18             	mov    0x18(%ebp),%eax
c0120388:	01 c2                	add    %eax,%edx
c012038a:	8b 45 10             	mov    0x10(%ebp),%eax
c012038d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0120391:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120394:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120398:	89 14 24             	mov    %edx,(%esp)
c012039b:	e8 41 0e 00 00       	call   c01211e1 <memcpy>
            ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1);
c01203a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01203a3:	8b 40 38             	mov    0x38(%eax),%eax
c01203a6:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01203ad:	00 
c01203ae:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01203b5:	00 
c01203b6:	8b 55 14             	mov    0x14(%ebp),%edx
c01203b9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01203bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01203c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01203c4:	89 04 24             	mov    %eax,(%esp)
c01203c7:	e8 14 fd ff ff       	call   c01200e0 <sfs_rwblock_nolock>
c01203cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_sfs_io(sfs);
c01203cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01203d2:	89 04 24             	mov    %eax,(%esp)
c01203d5:	e8 b5 01 00 00       	call   c012058f <unlock_sfs_io>
    return ret;
c01203da:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01203dd:	c9                   	leave  
c01203de:	c3                   	ret    

c01203df <sfs_sync_super>:

/*
 * sfs_sync_super - write sfs->super (in memory) into disk (SFS_BLKN_SUPER, 1) with lock protect.
 */
int
sfs_sync_super(struct sfs_fs *sfs) {
c01203df:	55                   	push   %ebp
c01203e0:	89 e5                	mov    %esp,%ebp
c01203e2:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c01203e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01203e8:	89 04 24             	mov    %eax,(%esp)
c01203eb:	e8 73 01 00 00       	call   c0120563 <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c01203f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01203f3:	8b 40 38             	mov    0x38(%eax),%eax
c01203f6:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01203fd:	00 
c01203fe:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0120405:	00 
c0120406:	89 04 24             	mov    %eax,(%esp)
c0120409:	e8 f1 0c 00 00       	call   c01210ff <memset>
        memcpy(sfs->sfs_buffer, &(sfs->super), sizeof(sfs->super));
c012040e:	8b 55 08             	mov    0x8(%ebp),%edx
c0120411:	8b 45 08             	mov    0x8(%ebp),%eax
c0120414:	8b 40 38             	mov    0x38(%eax),%eax
c0120417:	c7 44 24 08 2c 00 00 	movl   $0x2c,0x8(%esp)
c012041e:	00 
c012041f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0120423:	89 04 24             	mov    %eax,(%esp)
c0120426:	e8 b6 0d 00 00       	call   c01211e1 <memcpy>
        ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, SFS_BLKN_SUPER, 1, 0);
c012042b:	8b 45 08             	mov    0x8(%ebp),%eax
c012042e:	8b 40 38             	mov    0x38(%eax),%eax
c0120431:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0120438:	00 
c0120439:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0120440:	00 
c0120441:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0120448:	00 
c0120449:	89 44 24 04          	mov    %eax,0x4(%esp)
c012044d:	8b 45 08             	mov    0x8(%ebp),%eax
c0120450:	89 04 24             	mov    %eax,(%esp)
c0120453:	e8 88 fc ff ff       	call   c01200e0 <sfs_rwblock_nolock>
c0120458:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sfs_io(sfs);
c012045b:	8b 45 08             	mov    0x8(%ebp),%eax
c012045e:	89 04 24             	mov    %eax,(%esp)
c0120461:	e8 29 01 00 00       	call   c012058f <unlock_sfs_io>
    return ret;
c0120466:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0120469:	c9                   	leave  
c012046a:	c3                   	ret    

c012046b <sfs_sync_freemap>:

/*
 * sfs_sync_freemap - write sfs bitmap into disk (SFS_BLKN_FREEMAP, nblks)  without lock protect.
 */
int
sfs_sync_freemap(struct sfs_fs *sfs) {
c012046b:	55                   	push   %ebp
c012046c:	89 e5                	mov    %esp,%ebp
c012046e:	83 ec 28             	sub    $0x28,%esp
    uint32_t nblks = sfs_freemap_blocks(&(sfs->super));
c0120471:	c7 45 f4 00 80 00 00 	movl   $0x8000,-0xc(%ebp)
c0120478:	8b 45 08             	mov    0x8(%ebp),%eax
c012047b:	8b 50 04             	mov    0x4(%eax),%edx
c012047e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0120481:	01 d0                	add    %edx,%eax
c0120483:	83 e8 01             	sub    $0x1,%eax
c0120486:	ba 00 00 00 00       	mov    $0x0,%edx
c012048b:	f7 75 f4             	divl   -0xc(%ebp)
c012048e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sfs_wblock(sfs, bitmap_getdata(sfs->freemap, NULL), SFS_BLKN_FREEMAP, nblks);
c0120491:	8b 45 08             	mov    0x8(%ebp),%eax
c0120494:	8b 40 30             	mov    0x30(%eax),%eax
c0120497:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c012049e:	00 
c012049f:	89 04 24             	mov    %eax,(%esp)
c01204a2:	e8 89 be ff ff       	call   c011c330 <bitmap_getdata>
c01204a7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01204aa:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01204ae:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c01204b5:	00 
c01204b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01204ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01204bd:	89 04 24             	mov    %eax,(%esp)
c01204c0:	e8 49 fd ff ff       	call   c012020e <sfs_wblock>
}
c01204c5:	c9                   	leave  
c01204c6:	c3                   	ret    

c01204c7 <sfs_clear_block>:
 * @sfs:   sfs_fs which will be process
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
c01204c7:	55                   	push   %ebp
c01204c8:	89 e5                	mov    %esp,%ebp
c01204ca:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c01204cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01204d0:	89 04 24             	mov    %eax,(%esp)
c01204d3:	e8 8b 00 00 00       	call   c0120563 <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c01204d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01204db:	8b 40 38             	mov    0x38(%eax),%eax
c01204de:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01204e5:	00 
c01204e6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01204ed:	00 
c01204ee:	89 04 24             	mov    %eax,(%esp)
c01204f1:	e8 09 0c 00 00       	call   c01210ff <memset>
        while (nblks != 0) {
c01204f6:	eb 3f                	jmp    c0120537 <sfs_clear_block+0x70>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
c01204f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01204fb:	8b 40 38             	mov    0x38(%eax),%eax
c01204fe:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0120505:	00 
c0120506:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c012050d:	00 
c012050e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0120511:	89 54 24 08          	mov    %edx,0x8(%esp)
c0120515:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120519:	8b 45 08             	mov    0x8(%ebp),%eax
c012051c:	89 04 24             	mov    %eax,(%esp)
c012051f:	e8 bc fb ff ff       	call   c01200e0 <sfs_rwblock_nolock>
c0120524:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0120527:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c012052b:	74 02                	je     c012052f <sfs_clear_block+0x68>
                break;
c012052d:	eb 0e                	jmp    c012053d <sfs_clear_block+0x76>
            }
            blkno ++, nblks --;
c012052f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c0120533:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
    int ret;
    lock_sfs_io(sfs);
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
        while (nblks != 0) {
c0120537:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c012053b:	75 bb                	jne    c01204f8 <sfs_clear_block+0x31>
                break;
            }
            blkno ++, nblks --;
        }
    }
    unlock_sfs_io(sfs);
c012053d:	8b 45 08             	mov    0x8(%ebp),%eax
c0120540:	89 04 24             	mov    %eax,(%esp)
c0120543:	e8 47 00 00 00       	call   c012058f <unlock_sfs_io>
    return ret;
c0120548:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c012054b:	c9                   	leave  
c012054c:	c3                   	ret    

c012054d <lock_sfs_fs>:
 * lock_sfs_fs - lock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
lock_sfs_fs(struct sfs_fs *sfs) {
c012054d:	55                   	push   %ebp
c012054e:	89 e5                	mov    %esp,%ebp
c0120550:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->fs_sem));
c0120553:	8b 45 08             	mov    0x8(%ebp),%eax
c0120556:	83 c0 3c             	add    $0x3c,%eax
c0120559:	89 04 24             	mov    %eax,(%esp)
c012055c:	e8 7b 26 ff ff       	call   c0112bdc <down>
}
c0120561:	c9                   	leave  
c0120562:	c3                   	ret    

c0120563 <lock_sfs_io>:
 * lock_sfs_io - lock the process of SFS File Rd/Wr Disk Block
 *
 * called by: sfs_rwblock, sfs_clear_block, sfs_sync_super
 */
void
lock_sfs_io(struct sfs_fs *sfs) {
c0120563:	55                   	push   %ebp
c0120564:	89 e5                	mov    %esp,%ebp
c0120566:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->io_sem));
c0120569:	8b 45 08             	mov    0x8(%ebp),%eax
c012056c:	83 c0 48             	add    $0x48,%eax
c012056f:	89 04 24             	mov    %eax,(%esp)
c0120572:	e8 65 26 ff ff       	call   c0112bdc <down>
}
c0120577:	c9                   	leave  
c0120578:	c3                   	ret    

c0120579 <unlock_sfs_fs>:
 * unlock_sfs_fs - unlock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
unlock_sfs_fs(struct sfs_fs *sfs) {
c0120579:	55                   	push   %ebp
c012057a:	89 e5                	mov    %esp,%ebp
c012057c:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->fs_sem));
c012057f:	8b 45 08             	mov    0x8(%ebp),%eax
c0120582:	83 c0 3c             	add    $0x3c,%eax
c0120585:	89 04 24             	mov    %eax,(%esp)
c0120588:	e8 34 26 ff ff       	call   c0112bc1 <up>
}
c012058d:	c9                   	leave  
c012058e:	c3                   	ret    

c012058f <unlock_sfs_io>:
 * unlock_sfs_io - unlock the process of sfs Rd/Wr Disk Block
 *
 * called by: sfs_rwblock sfs_clear_block sfs_sync_super
 */
void
unlock_sfs_io(struct sfs_fs *sfs) {
c012058f:	55                   	push   %ebp
c0120590:	89 e5                	mov    %esp,%ebp
c0120592:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->io_sem));
c0120595:	8b 45 08             	mov    0x8(%ebp),%eax
c0120598:	83 c0 48             	add    $0x48,%eax
c012059b:	89 04 24             	mov    %eax,(%esp)
c012059e:	e8 1e 26 ff ff       	call   c0112bc1 <up>
}
c01205a3:	c9                   	leave  
c01205a4:	c3                   	ret    

c01205a5 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c01205a5:	55                   	push   %ebp
c01205a6:	89 e5                	mov    %esp,%ebp
c01205a8:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c01205ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01205ae:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c01205b4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c01205b7:	b8 20 00 00 00       	mov    $0x20,%eax
c01205bc:	2b 45 0c             	sub    0xc(%ebp),%eax
c01205bf:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01205c2:	89 c1                	mov    %eax,%ecx
c01205c4:	d3 ea                	shr    %cl,%edx
c01205c6:	89 d0                	mov    %edx,%eax
}
c01205c8:	c9                   	leave  
c01205c9:	c3                   	ret    

c01205ca <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*, int), int fd, void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c01205ca:	55                   	push   %ebp
c01205cb:	89 e5                	mov    %esp,%ebp
c01205cd:	83 ec 58             	sub    $0x58,%esp
c01205d0:	8b 45 14             	mov    0x14(%ebp),%eax
c01205d3:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01205d6:	8b 45 18             	mov    0x18(%ebp),%eax
c01205d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c01205dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01205df:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01205e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01205e5:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c01205e8:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01205eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01205ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01205f1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01205f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01205f7:	89 55 f0             	mov    %edx,-0x10(%ebp)
c01205fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01205fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0120600:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0120604:	74 1c                	je     c0120622 <printnum+0x58>
c0120606:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0120609:	ba 00 00 00 00       	mov    $0x0,%edx
c012060e:	f7 75 e4             	divl   -0x1c(%ebp)
c0120611:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0120614:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0120617:	ba 00 00 00 00       	mov    $0x0,%edx
c012061c:	f7 75 e4             	divl   -0x1c(%ebp)
c012061f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0120622:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0120625:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0120628:	f7 75 e4             	divl   -0x1c(%ebp)
c012062b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c012062e:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0120631:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0120634:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0120637:	89 45 e8             	mov    %eax,-0x18(%ebp)
c012063a:	89 55 ec             	mov    %edx,-0x14(%ebp)
c012063d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0120640:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c0120643:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0120646:	ba 00 00 00 00       	mov    $0x0,%edx
c012064b:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c012064e:	77 64                	ja     c01206b4 <printnum+0xea>
c0120650:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0120653:	72 05                	jb     c012065a <printnum+0x90>
c0120655:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0120658:	77 5a                	ja     c01206b4 <printnum+0xea>
        printnum(putch, fd, putdat, result, base, width - 1, padc);
c012065a:	8b 45 20             	mov    0x20(%ebp),%eax
c012065d:	8d 50 ff             	lea    -0x1(%eax),%edx
c0120660:	8b 45 24             	mov    0x24(%ebp),%eax
c0120663:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0120667:	89 54 24 18          	mov    %edx,0x18(%esp)
c012066b:	8b 45 1c             	mov    0x1c(%ebp),%eax
c012066e:	89 44 24 14          	mov    %eax,0x14(%esp)
c0120672:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0120675:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0120678:	89 44 24 0c          	mov    %eax,0xc(%esp)
c012067c:	89 54 24 10          	mov    %edx,0x10(%esp)
c0120680:	8b 45 10             	mov    0x10(%ebp),%eax
c0120683:	89 44 24 08          	mov    %eax,0x8(%esp)
c0120687:	8b 45 0c             	mov    0xc(%ebp),%eax
c012068a:	89 44 24 04          	mov    %eax,0x4(%esp)
c012068e:	8b 45 08             	mov    0x8(%ebp),%eax
c0120691:	89 04 24             	mov    %eax,(%esp)
c0120694:	e8 31 ff ff ff       	call   c01205ca <printnum>
c0120699:	eb 23                	jmp    c01206be <printnum+0xf4>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat, fd);
c012069b:	8b 45 0c             	mov    0xc(%ebp),%eax
c012069e:	89 44 24 08          	mov    %eax,0x8(%esp)
c01206a2:	8b 45 10             	mov    0x10(%ebp),%eax
c01206a5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01206a9:	8b 45 24             	mov    0x24(%ebp),%eax
c01206ac:	89 04 24             	mov    %eax,(%esp)
c01206af:	8b 45 08             	mov    0x8(%ebp),%eax
c01206b2:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, fd, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c01206b4:	83 6d 20 01          	subl   $0x1,0x20(%ebp)
c01206b8:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c01206bc:	7f dd                	jg     c012069b <printnum+0xd1>
            putch(padc, putdat, fd);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat, fd);
c01206be:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01206c1:	05 e4 8b 12 c0       	add    $0xc0128be4,%eax
c01206c6:	0f b6 00             	movzbl (%eax),%eax
c01206c9:	0f be c0             	movsbl %al,%eax
c01206cc:	8b 55 0c             	mov    0xc(%ebp),%edx
c01206cf:	89 54 24 08          	mov    %edx,0x8(%esp)
c01206d3:	8b 55 10             	mov    0x10(%ebp),%edx
c01206d6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01206da:	89 04 24             	mov    %eax,(%esp)
c01206dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01206e0:	ff d0                	call   *%eax
}
c01206e2:	c9                   	leave  
c01206e3:	c3                   	ret    

c01206e4 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c01206e4:	55                   	push   %ebp
c01206e5:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c01206e7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c01206eb:	7e 14                	jle    c0120701 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c01206ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01206f0:	8b 00                	mov    (%eax),%eax
c01206f2:	8d 48 08             	lea    0x8(%eax),%ecx
c01206f5:	8b 55 08             	mov    0x8(%ebp),%edx
c01206f8:	89 0a                	mov    %ecx,(%edx)
c01206fa:	8b 50 04             	mov    0x4(%eax),%edx
c01206fd:	8b 00                	mov    (%eax),%eax
c01206ff:	eb 30                	jmp    c0120731 <getuint+0x4d>
    }
    else if (lflag) {
c0120701:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0120705:	74 16                	je     c012071d <getuint+0x39>
        return va_arg(*ap, unsigned long);
c0120707:	8b 45 08             	mov    0x8(%ebp),%eax
c012070a:	8b 00                	mov    (%eax),%eax
c012070c:	8d 48 04             	lea    0x4(%eax),%ecx
c012070f:	8b 55 08             	mov    0x8(%ebp),%edx
c0120712:	89 0a                	mov    %ecx,(%edx)
c0120714:	8b 00                	mov    (%eax),%eax
c0120716:	ba 00 00 00 00       	mov    $0x0,%edx
c012071b:	eb 14                	jmp    c0120731 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c012071d:	8b 45 08             	mov    0x8(%ebp),%eax
c0120720:	8b 00                	mov    (%eax),%eax
c0120722:	8d 48 04             	lea    0x4(%eax),%ecx
c0120725:	8b 55 08             	mov    0x8(%ebp),%edx
c0120728:	89 0a                	mov    %ecx,(%edx)
c012072a:	8b 00                	mov    (%eax),%eax
c012072c:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c0120731:	5d                   	pop    %ebp
c0120732:	c3                   	ret    

c0120733 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c0120733:	55                   	push   %ebp
c0120734:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0120736:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c012073a:	7e 14                	jle    c0120750 <getint+0x1d>
        return va_arg(*ap, long long);
c012073c:	8b 45 08             	mov    0x8(%ebp),%eax
c012073f:	8b 00                	mov    (%eax),%eax
c0120741:	8d 48 08             	lea    0x8(%eax),%ecx
c0120744:	8b 55 08             	mov    0x8(%ebp),%edx
c0120747:	89 0a                	mov    %ecx,(%edx)
c0120749:	8b 50 04             	mov    0x4(%eax),%edx
c012074c:	8b 00                	mov    (%eax),%eax
c012074e:	eb 28                	jmp    c0120778 <getint+0x45>
    }
    else if (lflag) {
c0120750:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0120754:	74 12                	je     c0120768 <getint+0x35>
        return va_arg(*ap, long);
c0120756:	8b 45 08             	mov    0x8(%ebp),%eax
c0120759:	8b 00                	mov    (%eax),%eax
c012075b:	8d 48 04             	lea    0x4(%eax),%ecx
c012075e:	8b 55 08             	mov    0x8(%ebp),%edx
c0120761:	89 0a                	mov    %ecx,(%edx)
c0120763:	8b 00                	mov    (%eax),%eax
c0120765:	99                   	cltd   
c0120766:	eb 10                	jmp    c0120778 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c0120768:	8b 45 08             	mov    0x8(%ebp),%eax
c012076b:	8b 00                	mov    (%eax),%eax
c012076d:	8d 48 04             	lea    0x4(%eax),%ecx
c0120770:	8b 55 08             	mov    0x8(%ebp),%edx
c0120773:	89 0a                	mov    %ecx,(%edx)
c0120775:	8b 00                	mov    (%eax),%eax
c0120777:	99                   	cltd   
    }
}
c0120778:	5d                   	pop    %ebp
c0120779:	c3                   	ret    

c012077a <printfmt>:
 * @fd:         file descriptor
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, ...) {
c012077a:	55                   	push   %ebp
c012077b:	89 e5                	mov    %esp,%ebp
c012077d:	83 ec 38             	sub    $0x38,%esp
    va_list ap;

    va_start(ap, fmt);
c0120780:	8d 45 18             	lea    0x18(%ebp),%eax
c0120783:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, fd, putdat, fmt, ap);
c0120786:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0120789:	89 44 24 10          	mov    %eax,0x10(%esp)
c012078d:	8b 45 14             	mov    0x14(%ebp),%eax
c0120790:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0120794:	8b 45 10             	mov    0x10(%ebp),%eax
c0120797:	89 44 24 08          	mov    %eax,0x8(%esp)
c012079b:	8b 45 0c             	mov    0xc(%ebp),%eax
c012079e:	89 44 24 04          	mov    %eax,0x4(%esp)
c01207a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01207a5:	89 04 24             	mov    %eax,(%esp)
c01207a8:	e8 02 00 00 00       	call   c01207af <vprintfmt>
    va_end(ap);
}
c01207ad:	c9                   	leave  
c01207ae:	c3                   	ret    

c01207af <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, va_list ap) {
c01207af:	55                   	push   %ebp
c01207b0:	89 e5                	mov    %esp,%ebp
c01207b2:	56                   	push   %esi
c01207b3:	53                   	push   %ebx
c01207b4:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c01207b7:	eb 1f                	jmp    c01207d8 <vprintfmt+0x29>
            if (ch == '\0') {
c01207b9:	85 db                	test   %ebx,%ebx
c01207bb:	75 05                	jne    c01207c2 <vprintfmt+0x13>
                return;
c01207bd:	e9 33 04 00 00       	jmp    c0120bf5 <vprintfmt+0x446>
            }
            putch(ch, putdat, fd);
c01207c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01207c5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01207c9:	8b 45 10             	mov    0x10(%ebp),%eax
c01207cc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01207d0:	89 1c 24             	mov    %ebx,(%esp)
c01207d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01207d6:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c01207d8:	8b 45 14             	mov    0x14(%ebp),%eax
c01207db:	8d 50 01             	lea    0x1(%eax),%edx
c01207de:	89 55 14             	mov    %edx,0x14(%ebp)
c01207e1:	0f b6 00             	movzbl (%eax),%eax
c01207e4:	0f b6 d8             	movzbl %al,%ebx
c01207e7:	83 fb 25             	cmp    $0x25,%ebx
c01207ea:	75 cd                	jne    c01207b9 <vprintfmt+0xa>
            }
            putch(ch, putdat, fd);
        }

        // Process a %-escape sequence
        char padc = ' ';
c01207ec:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c01207f0:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c01207f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01207fa:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c01207fd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0120804:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0120807:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c012080a:	8b 45 14             	mov    0x14(%ebp),%eax
c012080d:	8d 50 01             	lea    0x1(%eax),%edx
c0120810:	89 55 14             	mov    %edx,0x14(%ebp)
c0120813:	0f b6 00             	movzbl (%eax),%eax
c0120816:	0f b6 d8             	movzbl %al,%ebx
c0120819:	8d 43 dd             	lea    -0x23(%ebx),%eax
c012081c:	83 f8 55             	cmp    $0x55,%eax
c012081f:	0f 87 98 03 00 00    	ja     c0120bbd <vprintfmt+0x40e>
c0120825:	8b 04 85 08 8c 12 c0 	mov    -0x3fed73f8(,%eax,4),%eax
c012082c:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c012082e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c0120832:	eb d6                	jmp    c012080a <vprintfmt+0x5b>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c0120834:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c0120838:	eb d0                	jmp    c012080a <vprintfmt+0x5b>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c012083a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c0120841:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0120844:	89 d0                	mov    %edx,%eax
c0120846:	c1 e0 02             	shl    $0x2,%eax
c0120849:	01 d0                	add    %edx,%eax
c012084b:	01 c0                	add    %eax,%eax
c012084d:	01 d8                	add    %ebx,%eax
c012084f:	83 e8 30             	sub    $0x30,%eax
c0120852:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c0120855:	8b 45 14             	mov    0x14(%ebp),%eax
c0120858:	0f b6 00             	movzbl (%eax),%eax
c012085b:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c012085e:	83 fb 2f             	cmp    $0x2f,%ebx
c0120861:	7e 0b                	jle    c012086e <vprintfmt+0xbf>
c0120863:	83 fb 39             	cmp    $0x39,%ebx
c0120866:	7f 06                	jg     c012086e <vprintfmt+0xbf>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0120868:	83 45 14 01          	addl   $0x1,0x14(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c012086c:	eb d3                	jmp    c0120841 <vprintfmt+0x92>
            goto process_precision;
c012086e:	eb 33                	jmp    c01208a3 <vprintfmt+0xf4>

        case '*':
            precision = va_arg(ap, int);
c0120870:	8b 45 18             	mov    0x18(%ebp),%eax
c0120873:	8d 50 04             	lea    0x4(%eax),%edx
c0120876:	89 55 18             	mov    %edx,0x18(%ebp)
c0120879:	8b 00                	mov    (%eax),%eax
c012087b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c012087e:	eb 23                	jmp    c01208a3 <vprintfmt+0xf4>

        case '.':
            if (width < 0)
c0120880:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0120884:	79 0c                	jns    c0120892 <vprintfmt+0xe3>
                width = 0;
c0120886:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c012088d:	e9 78 ff ff ff       	jmp    c012080a <vprintfmt+0x5b>
c0120892:	e9 73 ff ff ff       	jmp    c012080a <vprintfmt+0x5b>

        case '#':
            altflag = 1;
c0120897:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c012089e:	e9 67 ff ff ff       	jmp    c012080a <vprintfmt+0x5b>

        process_precision:
            if (width < 0)
c01208a3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01208a7:	79 12                	jns    c01208bb <vprintfmt+0x10c>
                width = precision, precision = -1;
c01208a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01208ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01208af:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c01208b6:	e9 4f ff ff ff       	jmp    c012080a <vprintfmt+0x5b>
c01208bb:	e9 4a ff ff ff       	jmp    c012080a <vprintfmt+0x5b>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c01208c0:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c01208c4:	e9 41 ff ff ff       	jmp    c012080a <vprintfmt+0x5b>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat, fd);
c01208c9:	8b 45 18             	mov    0x18(%ebp),%eax
c01208cc:	8d 50 04             	lea    0x4(%eax),%edx
c01208cf:	89 55 18             	mov    %edx,0x18(%ebp)
c01208d2:	8b 00                	mov    (%eax),%eax
c01208d4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01208d7:	89 54 24 08          	mov    %edx,0x8(%esp)
c01208db:	8b 55 10             	mov    0x10(%ebp),%edx
c01208de:	89 54 24 04          	mov    %edx,0x4(%esp)
c01208e2:	89 04 24             	mov    %eax,(%esp)
c01208e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01208e8:	ff d0                	call   *%eax
            break;
c01208ea:	e9 00 03 00 00       	jmp    c0120bef <vprintfmt+0x440>

        // error message
        case 'e':
            err = va_arg(ap, int);
c01208ef:	8b 45 18             	mov    0x18(%ebp),%eax
c01208f2:	8d 50 04             	lea    0x4(%eax),%edx
c01208f5:	89 55 18             	mov    %edx,0x18(%ebp)
c01208f8:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c01208fa:	85 db                	test   %ebx,%ebx
c01208fc:	79 02                	jns    c0120900 <vprintfmt+0x151>
                err = -err;
c01208fe:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c0120900:	83 fb 18             	cmp    $0x18,%ebx
c0120903:	7f 0b                	jg     c0120910 <vprintfmt+0x161>
c0120905:	8b 34 9d 80 8b 12 c0 	mov    -0x3fed7480(,%ebx,4),%esi
c012090c:	85 f6                	test   %esi,%esi
c012090e:	75 2a                	jne    c012093a <vprintfmt+0x18b>
                printfmt(putch, fd, putdat, "error %d", err);
c0120910:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c0120914:	c7 44 24 0c f5 8b 12 	movl   $0xc0128bf5,0xc(%esp)
c012091b:	c0 
c012091c:	8b 45 10             	mov    0x10(%ebp),%eax
c012091f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0120923:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120926:	89 44 24 04          	mov    %eax,0x4(%esp)
c012092a:	8b 45 08             	mov    0x8(%ebp),%eax
c012092d:	89 04 24             	mov    %eax,(%esp)
c0120930:	e8 45 fe ff ff       	call   c012077a <printfmt>
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
            }
            break;
c0120935:	e9 b5 02 00 00       	jmp    c0120bef <vprintfmt+0x440>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, fd, putdat, "error %d", err);
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
c012093a:	89 74 24 10          	mov    %esi,0x10(%esp)
c012093e:	c7 44 24 0c fe 8b 12 	movl   $0xc0128bfe,0xc(%esp)
c0120945:	c0 
c0120946:	8b 45 10             	mov    0x10(%ebp),%eax
c0120949:	89 44 24 08          	mov    %eax,0x8(%esp)
c012094d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120950:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120954:	8b 45 08             	mov    0x8(%ebp),%eax
c0120957:	89 04 24             	mov    %eax,(%esp)
c012095a:	e8 1b fe ff ff       	call   c012077a <printfmt>
            }
            break;
c012095f:	e9 8b 02 00 00       	jmp    c0120bef <vprintfmt+0x440>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c0120964:	8b 45 18             	mov    0x18(%ebp),%eax
c0120967:	8d 50 04             	lea    0x4(%eax),%edx
c012096a:	89 55 18             	mov    %edx,0x18(%ebp)
c012096d:	8b 30                	mov    (%eax),%esi
c012096f:	85 f6                	test   %esi,%esi
c0120971:	75 05                	jne    c0120978 <vprintfmt+0x1c9>
                p = "(null)";
c0120973:	be 01 8c 12 c0       	mov    $0xc0128c01,%esi
            }
            if (width > 0 && padc != '-') {
c0120978:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c012097c:	7e 45                	jle    c01209c3 <vprintfmt+0x214>
c012097e:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c0120982:	74 3f                	je     c01209c3 <vprintfmt+0x214>
                for (width -= strnlen(p, precision); width > 0; width --) {
c0120984:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c0120987:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c012098a:	89 44 24 04          	mov    %eax,0x4(%esp)
c012098e:	89 34 24             	mov    %esi,(%esp)
c0120991:	e8 3b 04 00 00       	call   c0120dd1 <strnlen>
c0120996:	29 c3                	sub    %eax,%ebx
c0120998:	89 d8                	mov    %ebx,%eax
c012099a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c012099d:	eb 1e                	jmp    c01209bd <vprintfmt+0x20e>
                    putch(padc, putdat, fd);
c012099f:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c01209a3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01209a6:	89 54 24 08          	mov    %edx,0x8(%esp)
c01209aa:	8b 55 10             	mov    0x10(%ebp),%edx
c01209ad:	89 54 24 04          	mov    %edx,0x4(%esp)
c01209b1:	89 04 24             	mov    %eax,(%esp)
c01209b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01209b7:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c01209b9:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c01209bd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01209c1:	7f dc                	jg     c012099f <vprintfmt+0x1f0>
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c01209c3:	eb 46                	jmp    c0120a0b <vprintfmt+0x25c>
                if (altflag && (ch < ' ' || ch > '~')) {
c01209c5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01209c9:	74 26                	je     c01209f1 <vprintfmt+0x242>
c01209cb:	83 fb 1f             	cmp    $0x1f,%ebx
c01209ce:	7e 05                	jle    c01209d5 <vprintfmt+0x226>
c01209d0:	83 fb 7e             	cmp    $0x7e,%ebx
c01209d3:	7e 1c                	jle    c01209f1 <vprintfmt+0x242>
                    putch('?', putdat, fd);
c01209d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01209d8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01209dc:	8b 45 10             	mov    0x10(%ebp),%eax
c01209df:	89 44 24 04          	mov    %eax,0x4(%esp)
c01209e3:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c01209ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01209ed:	ff d0                	call   *%eax
c01209ef:	eb 16                	jmp    c0120a07 <vprintfmt+0x258>
                }
                else {
                    putch(ch, putdat, fd);
c01209f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01209f4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01209f8:	8b 45 10             	mov    0x10(%ebp),%eax
c01209fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01209ff:	89 1c 24             	mov    %ebx,(%esp)
c0120a02:	8b 45 08             	mov    0x8(%ebp),%eax
c0120a05:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0120a07:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0120a0b:	89 f0                	mov    %esi,%eax
c0120a0d:	8d 70 01             	lea    0x1(%eax),%esi
c0120a10:	0f b6 00             	movzbl (%eax),%eax
c0120a13:	0f be d8             	movsbl %al,%ebx
c0120a16:	85 db                	test   %ebx,%ebx
c0120a18:	74 10                	je     c0120a2a <vprintfmt+0x27b>
c0120a1a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0120a1e:	78 a5                	js     c01209c5 <vprintfmt+0x216>
c0120a20:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c0120a24:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0120a28:	79 9b                	jns    c01209c5 <vprintfmt+0x216>
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0120a2a:	eb 1e                	jmp    c0120a4a <vprintfmt+0x29b>
                putch(' ', putdat, fd);
c0120a2c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120a2f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0120a33:	8b 45 10             	mov    0x10(%ebp),%eax
c0120a36:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120a3a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0120a41:	8b 45 08             	mov    0x8(%ebp),%eax
c0120a44:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0120a46:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0120a4a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0120a4e:	7f dc                	jg     c0120a2c <vprintfmt+0x27d>
                putch(' ', putdat, fd);
            }
            break;
c0120a50:	e9 9a 01 00 00       	jmp    c0120bef <vprintfmt+0x440>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c0120a55:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0120a58:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120a5c:	8d 45 18             	lea    0x18(%ebp),%eax
c0120a5f:	89 04 24             	mov    %eax,(%esp)
c0120a62:	e8 cc fc ff ff       	call   c0120733 <getint>
c0120a67:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0120a6a:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c0120a6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0120a70:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0120a73:	85 d2                	test   %edx,%edx
c0120a75:	79 2d                	jns    c0120aa4 <vprintfmt+0x2f5>
                putch('-', putdat, fd);
c0120a77:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120a7a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0120a7e:	8b 45 10             	mov    0x10(%ebp),%eax
c0120a81:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120a85:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c0120a8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0120a8f:	ff d0                	call   *%eax
                num = -(long long)num;
c0120a91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0120a94:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0120a97:	f7 d8                	neg    %eax
c0120a99:	83 d2 00             	adc    $0x0,%edx
c0120a9c:	f7 da                	neg    %edx
c0120a9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0120aa1:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c0120aa4:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0120aab:	e9 b6 00 00 00       	jmp    c0120b66 <vprintfmt+0x3b7>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c0120ab0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0120ab3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120ab7:	8d 45 18             	lea    0x18(%ebp),%eax
c0120aba:	89 04 24             	mov    %eax,(%esp)
c0120abd:	e8 22 fc ff ff       	call   c01206e4 <getuint>
c0120ac2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0120ac5:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c0120ac8:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0120acf:	e9 92 00 00 00       	jmp    c0120b66 <vprintfmt+0x3b7>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c0120ad4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0120ad7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120adb:	8d 45 18             	lea    0x18(%ebp),%eax
c0120ade:	89 04 24             	mov    %eax,(%esp)
c0120ae1:	e8 fe fb ff ff       	call   c01206e4 <getuint>
c0120ae6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0120ae9:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c0120aec:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c0120af3:	eb 71                	jmp    c0120b66 <vprintfmt+0x3b7>

        // pointer
        case 'p':
            putch('0', putdat, fd);
c0120af5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120af8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0120afc:	8b 45 10             	mov    0x10(%ebp),%eax
c0120aff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120b03:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c0120b0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0120b0d:	ff d0                	call   *%eax
            putch('x', putdat, fd);
c0120b0f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120b12:	89 44 24 08          	mov    %eax,0x8(%esp)
c0120b16:	8b 45 10             	mov    0x10(%ebp),%eax
c0120b19:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120b1d:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c0120b24:	8b 45 08             	mov    0x8(%ebp),%eax
c0120b27:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c0120b29:	8b 45 18             	mov    0x18(%ebp),%eax
c0120b2c:	8d 50 04             	lea    0x4(%eax),%edx
c0120b2f:	89 55 18             	mov    %edx,0x18(%ebp)
c0120b32:	8b 00                	mov    (%eax),%eax
c0120b34:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0120b37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c0120b3e:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c0120b45:	eb 1f                	jmp    c0120b66 <vprintfmt+0x3b7>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c0120b47:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0120b4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120b4e:	8d 45 18             	lea    0x18(%ebp),%eax
c0120b51:	89 04 24             	mov    %eax,(%esp)
c0120b54:	e8 8b fb ff ff       	call   c01206e4 <getuint>
c0120b59:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0120b5c:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c0120b5f:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, fd, putdat, num, base, width, padc);
c0120b66:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c0120b6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0120b6d:	89 54 24 1c          	mov    %edx,0x1c(%esp)
c0120b71:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0120b74:	89 54 24 18          	mov    %edx,0x18(%esp)
c0120b78:	89 44 24 14          	mov    %eax,0x14(%esp)
c0120b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0120b7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0120b82:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0120b86:	89 54 24 10          	mov    %edx,0x10(%esp)
c0120b8a:	8b 45 10             	mov    0x10(%ebp),%eax
c0120b8d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0120b91:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120b94:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120b98:	8b 45 08             	mov    0x8(%ebp),%eax
c0120b9b:	89 04 24             	mov    %eax,(%esp)
c0120b9e:	e8 27 fa ff ff       	call   c01205ca <printnum>
            break;
c0120ba3:	eb 4a                	jmp    c0120bef <vprintfmt+0x440>

        // escaped '%' character
        case '%':
            putch(ch, putdat, fd);
c0120ba5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120ba8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0120bac:	8b 45 10             	mov    0x10(%ebp),%eax
c0120baf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120bb3:	89 1c 24             	mov    %ebx,(%esp)
c0120bb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0120bb9:	ff d0                	call   *%eax
            break;
c0120bbb:	eb 32                	jmp    c0120bef <vprintfmt+0x440>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat, fd);
c0120bbd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120bc0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0120bc4:	8b 45 10             	mov    0x10(%ebp),%eax
c0120bc7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120bcb:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c0120bd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0120bd5:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c0120bd7:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0120bdb:	eb 04                	jmp    c0120be1 <vprintfmt+0x432>
c0120bdd:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0120be1:	8b 45 14             	mov    0x14(%ebp),%eax
c0120be4:	83 e8 01             	sub    $0x1,%eax
c0120be7:	0f b6 00             	movzbl (%eax),%eax
c0120bea:	3c 25                	cmp    $0x25,%al
c0120bec:	75 ef                	jne    c0120bdd <vprintfmt+0x42e>
                /* do nothing */;
            break;
c0120bee:	90                   	nop
        }
    }
c0120bef:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0120bf0:	e9 e3 fb ff ff       	jmp    c01207d8 <vprintfmt+0x29>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c0120bf5:	83 c4 40             	add    $0x40,%esp
c0120bf8:	5b                   	pop    %ebx
c0120bf9:	5e                   	pop    %esi
c0120bfa:	5d                   	pop    %ebp
c0120bfb:	c3                   	ret    

c0120bfc <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c0120bfc:	55                   	push   %ebp
c0120bfd:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c0120bff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120c02:	8b 40 08             	mov    0x8(%eax),%eax
c0120c05:	8d 50 01             	lea    0x1(%eax),%edx
c0120c08:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120c0b:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c0120c0e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120c11:	8b 10                	mov    (%eax),%edx
c0120c13:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120c16:	8b 40 04             	mov    0x4(%eax),%eax
c0120c19:	39 c2                	cmp    %eax,%edx
c0120c1b:	73 12                	jae    c0120c2f <sprintputch+0x33>
        *b->buf ++ = ch;
c0120c1d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120c20:	8b 00                	mov    (%eax),%eax
c0120c22:	8d 48 01             	lea    0x1(%eax),%ecx
c0120c25:	8b 55 0c             	mov    0xc(%ebp),%edx
c0120c28:	89 0a                	mov    %ecx,(%edx)
c0120c2a:	8b 55 08             	mov    0x8(%ebp),%edx
c0120c2d:	88 10                	mov    %dl,(%eax)
    }
}
c0120c2f:	5d                   	pop    %ebp
c0120c30:	c3                   	ret    

c0120c31 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c0120c31:	55                   	push   %ebp
c0120c32:	89 e5                	mov    %esp,%ebp
c0120c34:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0120c37:	8d 45 14             	lea    0x14(%ebp),%eax
c0120c3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c0120c3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0120c40:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0120c44:	8b 45 10             	mov    0x10(%ebp),%eax
c0120c47:	89 44 24 08          	mov    %eax,0x8(%esp)
c0120c4b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120c4e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120c52:	8b 45 08             	mov    0x8(%ebp),%eax
c0120c55:	89 04 24             	mov    %eax,(%esp)
c0120c58:	e8 08 00 00 00       	call   c0120c65 <vsnprintf>
c0120c5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0120c60:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0120c63:	c9                   	leave  
c0120c64:	c3                   	ret    

c0120c65 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c0120c65:	55                   	push   %ebp
c0120c66:	89 e5                	mov    %esp,%ebp
c0120c68:	83 ec 38             	sub    $0x38,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c0120c6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0120c6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0120c71:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120c74:	8d 50 ff             	lea    -0x1(%eax),%edx
c0120c77:	8b 45 08             	mov    0x8(%ebp),%eax
c0120c7a:	01 d0                	add    %edx,%eax
c0120c7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0120c7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c0120c86:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0120c8a:	74 0a                	je     c0120c96 <vsnprintf+0x31>
c0120c8c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0120c8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0120c92:	39 c2                	cmp    %eax,%edx
c0120c94:	76 07                	jbe    c0120c9d <vsnprintf+0x38>
        return -E_INVAL;
c0120c96:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0120c9b:	eb 32                	jmp    c0120ccf <vsnprintf+0x6a>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, NO_FD, &b, fmt, ap);
c0120c9d:	8b 45 14             	mov    0x14(%ebp),%eax
c0120ca0:	89 44 24 10          	mov    %eax,0x10(%esp)
c0120ca4:	8b 45 10             	mov    0x10(%ebp),%eax
c0120ca7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0120cab:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0120cae:	89 44 24 08          	mov    %eax,0x8(%esp)
c0120cb2:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c0120cb9:	ff 
c0120cba:	c7 04 24 fc 0b 12 c0 	movl   $0xc0120bfc,(%esp)
c0120cc1:	e8 e9 fa ff ff       	call   c01207af <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c0120cc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0120cc9:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c0120ccc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0120ccf:	c9                   	leave  
c0120cd0:	c3                   	ret    

c0120cd1 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c0120cd1:	55                   	push   %ebp
c0120cd2:	89 e5                	mov    %esp,%ebp
c0120cd4:	57                   	push   %edi
c0120cd5:	56                   	push   %esi
c0120cd6:	53                   	push   %ebx
c0120cd7:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c0120cda:	a1 88 af 16 c0       	mov    0xc016af88,%eax
c0120cdf:	8b 15 8c af 16 c0    	mov    0xc016af8c,%edx
c0120ce5:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c0120ceb:	6b f0 05             	imul   $0x5,%eax,%esi
c0120cee:	01 f7                	add    %esi,%edi
c0120cf0:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c0120cf5:	f7 e6                	mul    %esi
c0120cf7:	8d 34 17             	lea    (%edi,%edx,1),%esi
c0120cfa:	89 f2                	mov    %esi,%edx
c0120cfc:	83 c0 0b             	add    $0xb,%eax
c0120cff:	83 d2 00             	adc    $0x0,%edx
c0120d02:	89 c7                	mov    %eax,%edi
c0120d04:	83 e7 ff             	and    $0xffffffff,%edi
c0120d07:	89 f9                	mov    %edi,%ecx
c0120d09:	0f b7 da             	movzwl %dx,%ebx
c0120d0c:	89 0d 88 af 16 c0    	mov    %ecx,0xc016af88
c0120d12:	89 1d 8c af 16 c0    	mov    %ebx,0xc016af8c
    unsigned long long result = (next >> 12);
c0120d18:	a1 88 af 16 c0       	mov    0xc016af88,%eax
c0120d1d:	8b 15 8c af 16 c0    	mov    0xc016af8c,%edx
c0120d23:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0120d27:	c1 ea 0c             	shr    $0xc,%edx
c0120d2a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0120d2d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c0120d30:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c0120d37:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0120d3a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0120d3d:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0120d40:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0120d43:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0120d46:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0120d49:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0120d4d:	74 1c                	je     c0120d6b <rand+0x9a>
c0120d4f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0120d52:	ba 00 00 00 00       	mov    $0x0,%edx
c0120d57:	f7 75 dc             	divl   -0x24(%ebp)
c0120d5a:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0120d5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0120d60:	ba 00 00 00 00       	mov    $0x0,%edx
c0120d65:	f7 75 dc             	divl   -0x24(%ebp)
c0120d68:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0120d6b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0120d6e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0120d71:	f7 75 dc             	divl   -0x24(%ebp)
c0120d74:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0120d77:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0120d7a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0120d7d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0120d80:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0120d83:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0120d86:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c0120d89:	83 c4 24             	add    $0x24,%esp
c0120d8c:	5b                   	pop    %ebx
c0120d8d:	5e                   	pop    %esi
c0120d8e:	5f                   	pop    %edi
c0120d8f:	5d                   	pop    %ebp
c0120d90:	c3                   	ret    

c0120d91 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c0120d91:	55                   	push   %ebp
c0120d92:	89 e5                	mov    %esp,%ebp
    next = seed;
c0120d94:	8b 45 08             	mov    0x8(%ebp),%eax
c0120d97:	ba 00 00 00 00       	mov    $0x0,%edx
c0120d9c:	a3 88 af 16 c0       	mov    %eax,0xc016af88
c0120da1:	89 15 8c af 16 c0    	mov    %edx,0xc016af8c
}
c0120da7:	5d                   	pop    %ebp
c0120da8:	c3                   	ret    

c0120da9 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c0120da9:	55                   	push   %ebp
c0120daa:	89 e5                	mov    %esp,%ebp
c0120dac:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c0120daf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c0120db6:	eb 04                	jmp    c0120dbc <strlen+0x13>
        cnt ++;
c0120db8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c0120dbc:	8b 45 08             	mov    0x8(%ebp),%eax
c0120dbf:	8d 50 01             	lea    0x1(%eax),%edx
c0120dc2:	89 55 08             	mov    %edx,0x8(%ebp)
c0120dc5:	0f b6 00             	movzbl (%eax),%eax
c0120dc8:	84 c0                	test   %al,%al
c0120dca:	75 ec                	jne    c0120db8 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c0120dcc:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0120dcf:	c9                   	leave  
c0120dd0:	c3                   	ret    

c0120dd1 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c0120dd1:	55                   	push   %ebp
c0120dd2:	89 e5                	mov    %esp,%ebp
c0120dd4:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c0120dd7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c0120dde:	eb 04                	jmp    c0120de4 <strnlen+0x13>
        cnt ++;
c0120de0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c0120de4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0120de7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0120dea:	73 10                	jae    c0120dfc <strnlen+0x2b>
c0120dec:	8b 45 08             	mov    0x8(%ebp),%eax
c0120def:	8d 50 01             	lea    0x1(%eax),%edx
c0120df2:	89 55 08             	mov    %edx,0x8(%ebp)
c0120df5:	0f b6 00             	movzbl (%eax),%eax
c0120df8:	84 c0                	test   %al,%al
c0120dfa:	75 e4                	jne    c0120de0 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c0120dfc:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0120dff:	c9                   	leave  
c0120e00:	c3                   	ret    

c0120e01 <strcat>:
 * @dst:    pointer to the @dst array, which should be large enough to contain the concatenated
 *          resulting string.
 * @src:    string to be appended, this should not overlap @dst
 * */
char *
strcat(char *dst, const char *src) {
c0120e01:	55                   	push   %ebp
c0120e02:	89 e5                	mov    %esp,%ebp
c0120e04:	83 ec 18             	sub    $0x18,%esp
    return strcpy(dst + strlen(dst), src);
c0120e07:	8b 45 08             	mov    0x8(%ebp),%eax
c0120e0a:	89 04 24             	mov    %eax,(%esp)
c0120e0d:	e8 97 ff ff ff       	call   c0120da9 <strlen>
c0120e12:	8b 55 08             	mov    0x8(%ebp),%edx
c0120e15:	01 c2                	add    %eax,%edx
c0120e17:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120e1a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0120e1e:	89 14 24             	mov    %edx,(%esp)
c0120e21:	e8 02 00 00 00       	call   c0120e28 <strcpy>
}
c0120e26:	c9                   	leave  
c0120e27:	c3                   	ret    

c0120e28 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c0120e28:	55                   	push   %ebp
c0120e29:	89 e5                	mov    %esp,%ebp
c0120e2b:	57                   	push   %edi
c0120e2c:	56                   	push   %esi
c0120e2d:	83 ec 20             	sub    $0x20,%esp
c0120e30:	8b 45 08             	mov    0x8(%ebp),%eax
c0120e33:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0120e36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120e39:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c0120e3c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0120e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0120e42:	89 d1                	mov    %edx,%ecx
c0120e44:	89 c2                	mov    %eax,%edx
c0120e46:	89 ce                	mov    %ecx,%esi
c0120e48:	89 d7                	mov    %edx,%edi
c0120e4a:	ac                   	lods   %ds:(%esi),%al
c0120e4b:	aa                   	stos   %al,%es:(%edi)
c0120e4c:	84 c0                	test   %al,%al
c0120e4e:	75 fa                	jne    c0120e4a <strcpy+0x22>
c0120e50:	89 fa                	mov    %edi,%edx
c0120e52:	89 f1                	mov    %esi,%ecx
c0120e54:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0120e57:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0120e5a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c0120e5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c0120e60:	83 c4 20             	add    $0x20,%esp
c0120e63:	5e                   	pop    %esi
c0120e64:	5f                   	pop    %edi
c0120e65:	5d                   	pop    %ebp
c0120e66:	c3                   	ret    

c0120e67 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c0120e67:	55                   	push   %ebp
c0120e68:	89 e5                	mov    %esp,%ebp
c0120e6a:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c0120e6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0120e70:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c0120e73:	eb 21                	jmp    c0120e96 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c0120e75:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120e78:	0f b6 10             	movzbl (%eax),%edx
c0120e7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0120e7e:	88 10                	mov    %dl,(%eax)
c0120e80:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0120e83:	0f b6 00             	movzbl (%eax),%eax
c0120e86:	84 c0                	test   %al,%al
c0120e88:	74 04                	je     c0120e8e <strncpy+0x27>
            src ++;
c0120e8a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c0120e8e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0120e92:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c0120e96:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0120e9a:	75 d9                	jne    c0120e75 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c0120e9c:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0120e9f:	c9                   	leave  
c0120ea0:	c3                   	ret    

c0120ea1 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c0120ea1:	55                   	push   %ebp
c0120ea2:	89 e5                	mov    %esp,%ebp
c0120ea4:	57                   	push   %edi
c0120ea5:	56                   	push   %esi
c0120ea6:	83 ec 20             	sub    $0x20,%esp
c0120ea9:	8b 45 08             	mov    0x8(%ebp),%eax
c0120eac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0120eaf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120eb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c0120eb5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0120eb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0120ebb:	89 d1                	mov    %edx,%ecx
c0120ebd:	89 c2                	mov    %eax,%edx
c0120ebf:	89 ce                	mov    %ecx,%esi
c0120ec1:	89 d7                	mov    %edx,%edi
c0120ec3:	ac                   	lods   %ds:(%esi),%al
c0120ec4:	ae                   	scas   %es:(%edi),%al
c0120ec5:	75 08                	jne    c0120ecf <strcmp+0x2e>
c0120ec7:	84 c0                	test   %al,%al
c0120ec9:	75 f8                	jne    c0120ec3 <strcmp+0x22>
c0120ecb:	31 c0                	xor    %eax,%eax
c0120ecd:	eb 04                	jmp    c0120ed3 <strcmp+0x32>
c0120ecf:	19 c0                	sbb    %eax,%eax
c0120ed1:	0c 01                	or     $0x1,%al
c0120ed3:	89 fa                	mov    %edi,%edx
c0120ed5:	89 f1                	mov    %esi,%ecx
c0120ed7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0120eda:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0120edd:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c0120ee0:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c0120ee3:	83 c4 20             	add    $0x20,%esp
c0120ee6:	5e                   	pop    %esi
c0120ee7:	5f                   	pop    %edi
c0120ee8:	5d                   	pop    %ebp
c0120ee9:	c3                   	ret    

c0120eea <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c0120eea:	55                   	push   %ebp
c0120eeb:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0120eed:	eb 0c                	jmp    c0120efb <strncmp+0x11>
        n --, s1 ++, s2 ++;
c0120eef:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c0120ef3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0120ef7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0120efb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0120eff:	74 1a                	je     c0120f1b <strncmp+0x31>
c0120f01:	8b 45 08             	mov    0x8(%ebp),%eax
c0120f04:	0f b6 00             	movzbl (%eax),%eax
c0120f07:	84 c0                	test   %al,%al
c0120f09:	74 10                	je     c0120f1b <strncmp+0x31>
c0120f0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0120f0e:	0f b6 10             	movzbl (%eax),%edx
c0120f11:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120f14:	0f b6 00             	movzbl (%eax),%eax
c0120f17:	38 c2                	cmp    %al,%dl
c0120f19:	74 d4                	je     c0120eef <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c0120f1b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0120f1f:	74 18                	je     c0120f39 <strncmp+0x4f>
c0120f21:	8b 45 08             	mov    0x8(%ebp),%eax
c0120f24:	0f b6 00             	movzbl (%eax),%eax
c0120f27:	0f b6 d0             	movzbl %al,%edx
c0120f2a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120f2d:	0f b6 00             	movzbl (%eax),%eax
c0120f30:	0f b6 c0             	movzbl %al,%eax
c0120f33:	29 c2                	sub    %eax,%edx
c0120f35:	89 d0                	mov    %edx,%eax
c0120f37:	eb 05                	jmp    c0120f3e <strncmp+0x54>
c0120f39:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0120f3e:	5d                   	pop    %ebp
c0120f3f:	c3                   	ret    

c0120f40 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c0120f40:	55                   	push   %ebp
c0120f41:	89 e5                	mov    %esp,%ebp
c0120f43:	83 ec 04             	sub    $0x4,%esp
c0120f46:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120f49:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c0120f4c:	eb 14                	jmp    c0120f62 <strchr+0x22>
        if (*s == c) {
c0120f4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0120f51:	0f b6 00             	movzbl (%eax),%eax
c0120f54:	3a 45 fc             	cmp    -0x4(%ebp),%al
c0120f57:	75 05                	jne    c0120f5e <strchr+0x1e>
            return (char *)s;
c0120f59:	8b 45 08             	mov    0x8(%ebp),%eax
c0120f5c:	eb 13                	jmp    c0120f71 <strchr+0x31>
        }
        s ++;
c0120f5e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c0120f62:	8b 45 08             	mov    0x8(%ebp),%eax
c0120f65:	0f b6 00             	movzbl (%eax),%eax
c0120f68:	84 c0                	test   %al,%al
c0120f6a:	75 e2                	jne    c0120f4e <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c0120f6c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0120f71:	c9                   	leave  
c0120f72:	c3                   	ret    

c0120f73 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c0120f73:	55                   	push   %ebp
c0120f74:	89 e5                	mov    %esp,%ebp
c0120f76:	83 ec 04             	sub    $0x4,%esp
c0120f79:	8b 45 0c             	mov    0xc(%ebp),%eax
c0120f7c:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c0120f7f:	eb 11                	jmp    c0120f92 <strfind+0x1f>
        if (*s == c) {
c0120f81:	8b 45 08             	mov    0x8(%ebp),%eax
c0120f84:	0f b6 00             	movzbl (%eax),%eax
c0120f87:	3a 45 fc             	cmp    -0x4(%ebp),%al
c0120f8a:	75 02                	jne    c0120f8e <strfind+0x1b>
            break;
c0120f8c:	eb 0e                	jmp    c0120f9c <strfind+0x29>
        }
        s ++;
c0120f8e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c0120f92:	8b 45 08             	mov    0x8(%ebp),%eax
c0120f95:	0f b6 00             	movzbl (%eax),%eax
c0120f98:	84 c0                	test   %al,%al
c0120f9a:	75 e5                	jne    c0120f81 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c0120f9c:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0120f9f:	c9                   	leave  
c0120fa0:	c3                   	ret    

c0120fa1 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c0120fa1:	55                   	push   %ebp
c0120fa2:	89 e5                	mov    %esp,%ebp
c0120fa4:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c0120fa7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c0120fae:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c0120fb5:	eb 04                	jmp    c0120fbb <strtol+0x1a>
        s ++;
c0120fb7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c0120fbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0120fbe:	0f b6 00             	movzbl (%eax),%eax
c0120fc1:	3c 20                	cmp    $0x20,%al
c0120fc3:	74 f2                	je     c0120fb7 <strtol+0x16>
c0120fc5:	8b 45 08             	mov    0x8(%ebp),%eax
c0120fc8:	0f b6 00             	movzbl (%eax),%eax
c0120fcb:	3c 09                	cmp    $0x9,%al
c0120fcd:	74 e8                	je     c0120fb7 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c0120fcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0120fd2:	0f b6 00             	movzbl (%eax),%eax
c0120fd5:	3c 2b                	cmp    $0x2b,%al
c0120fd7:	75 06                	jne    c0120fdf <strtol+0x3e>
        s ++;
c0120fd9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0120fdd:	eb 15                	jmp    c0120ff4 <strtol+0x53>
    }
    else if (*s == '-') {
c0120fdf:	8b 45 08             	mov    0x8(%ebp),%eax
c0120fe2:	0f b6 00             	movzbl (%eax),%eax
c0120fe5:	3c 2d                	cmp    $0x2d,%al
c0120fe7:	75 0b                	jne    c0120ff4 <strtol+0x53>
        s ++, neg = 1;
c0120fe9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0120fed:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c0120ff4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0120ff8:	74 06                	je     c0121000 <strtol+0x5f>
c0120ffa:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c0120ffe:	75 24                	jne    c0121024 <strtol+0x83>
c0121000:	8b 45 08             	mov    0x8(%ebp),%eax
c0121003:	0f b6 00             	movzbl (%eax),%eax
c0121006:	3c 30                	cmp    $0x30,%al
c0121008:	75 1a                	jne    c0121024 <strtol+0x83>
c012100a:	8b 45 08             	mov    0x8(%ebp),%eax
c012100d:	83 c0 01             	add    $0x1,%eax
c0121010:	0f b6 00             	movzbl (%eax),%eax
c0121013:	3c 78                	cmp    $0x78,%al
c0121015:	75 0d                	jne    c0121024 <strtol+0x83>
        s += 2, base = 16;
c0121017:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c012101b:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c0121022:	eb 2a                	jmp    c012104e <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c0121024:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0121028:	75 17                	jne    c0121041 <strtol+0xa0>
c012102a:	8b 45 08             	mov    0x8(%ebp),%eax
c012102d:	0f b6 00             	movzbl (%eax),%eax
c0121030:	3c 30                	cmp    $0x30,%al
c0121032:	75 0d                	jne    c0121041 <strtol+0xa0>
        s ++, base = 8;
c0121034:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0121038:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c012103f:	eb 0d                	jmp    c012104e <strtol+0xad>
    }
    else if (base == 0) {
c0121041:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0121045:	75 07                	jne    c012104e <strtol+0xad>
        base = 10;
c0121047:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c012104e:	8b 45 08             	mov    0x8(%ebp),%eax
c0121051:	0f b6 00             	movzbl (%eax),%eax
c0121054:	3c 2f                	cmp    $0x2f,%al
c0121056:	7e 1b                	jle    c0121073 <strtol+0xd2>
c0121058:	8b 45 08             	mov    0x8(%ebp),%eax
c012105b:	0f b6 00             	movzbl (%eax),%eax
c012105e:	3c 39                	cmp    $0x39,%al
c0121060:	7f 11                	jg     c0121073 <strtol+0xd2>
            dig = *s - '0';
c0121062:	8b 45 08             	mov    0x8(%ebp),%eax
c0121065:	0f b6 00             	movzbl (%eax),%eax
c0121068:	0f be c0             	movsbl %al,%eax
c012106b:	83 e8 30             	sub    $0x30,%eax
c012106e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0121071:	eb 48                	jmp    c01210bb <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c0121073:	8b 45 08             	mov    0x8(%ebp),%eax
c0121076:	0f b6 00             	movzbl (%eax),%eax
c0121079:	3c 60                	cmp    $0x60,%al
c012107b:	7e 1b                	jle    c0121098 <strtol+0xf7>
c012107d:	8b 45 08             	mov    0x8(%ebp),%eax
c0121080:	0f b6 00             	movzbl (%eax),%eax
c0121083:	3c 7a                	cmp    $0x7a,%al
c0121085:	7f 11                	jg     c0121098 <strtol+0xf7>
            dig = *s - 'a' + 10;
c0121087:	8b 45 08             	mov    0x8(%ebp),%eax
c012108a:	0f b6 00             	movzbl (%eax),%eax
c012108d:	0f be c0             	movsbl %al,%eax
c0121090:	83 e8 57             	sub    $0x57,%eax
c0121093:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0121096:	eb 23                	jmp    c01210bb <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c0121098:	8b 45 08             	mov    0x8(%ebp),%eax
c012109b:	0f b6 00             	movzbl (%eax),%eax
c012109e:	3c 40                	cmp    $0x40,%al
c01210a0:	7e 3d                	jle    c01210df <strtol+0x13e>
c01210a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01210a5:	0f b6 00             	movzbl (%eax),%eax
c01210a8:	3c 5a                	cmp    $0x5a,%al
c01210aa:	7f 33                	jg     c01210df <strtol+0x13e>
            dig = *s - 'A' + 10;
c01210ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01210af:	0f b6 00             	movzbl (%eax),%eax
c01210b2:	0f be c0             	movsbl %al,%eax
c01210b5:	83 e8 37             	sub    $0x37,%eax
c01210b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c01210bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01210be:	3b 45 10             	cmp    0x10(%ebp),%eax
c01210c1:	7c 02                	jl     c01210c5 <strtol+0x124>
            break;
c01210c3:	eb 1a                	jmp    c01210df <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c01210c5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01210c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01210cc:	0f af 45 10          	imul   0x10(%ebp),%eax
c01210d0:	89 c2                	mov    %eax,%edx
c01210d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01210d5:	01 d0                	add    %edx,%eax
c01210d7:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c01210da:	e9 6f ff ff ff       	jmp    c012104e <strtol+0xad>

    if (endptr) {
c01210df:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01210e3:	74 08                	je     c01210ed <strtol+0x14c>
        *endptr = (char *) s;
c01210e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01210e8:	8b 55 08             	mov    0x8(%ebp),%edx
c01210eb:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c01210ed:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01210f1:	74 07                	je     c01210fa <strtol+0x159>
c01210f3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01210f6:	f7 d8                	neg    %eax
c01210f8:	eb 03                	jmp    c01210fd <strtol+0x15c>
c01210fa:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c01210fd:	c9                   	leave  
c01210fe:	c3                   	ret    

c01210ff <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c01210ff:	55                   	push   %ebp
c0121100:	89 e5                	mov    %esp,%ebp
c0121102:	57                   	push   %edi
c0121103:	83 ec 24             	sub    $0x24,%esp
c0121106:	8b 45 0c             	mov    0xc(%ebp),%eax
c0121109:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c012110c:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c0121110:	8b 55 08             	mov    0x8(%ebp),%edx
c0121113:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0121116:	88 45 f7             	mov    %al,-0x9(%ebp)
c0121119:	8b 45 10             	mov    0x10(%ebp),%eax
c012111c:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c012111f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0121122:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0121126:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0121129:	89 d7                	mov    %edx,%edi
c012112b:	f3 aa                	rep stos %al,%es:(%edi)
c012112d:	89 fa                	mov    %edi,%edx
c012112f:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0121132:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c0121135:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c0121138:	83 c4 24             	add    $0x24,%esp
c012113b:	5f                   	pop    %edi
c012113c:	5d                   	pop    %ebp
c012113d:	c3                   	ret    

c012113e <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c012113e:	55                   	push   %ebp
c012113f:	89 e5                	mov    %esp,%ebp
c0121141:	57                   	push   %edi
c0121142:	56                   	push   %esi
c0121143:	53                   	push   %ebx
c0121144:	83 ec 30             	sub    $0x30,%esp
c0121147:	8b 45 08             	mov    0x8(%ebp),%eax
c012114a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c012114d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0121150:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0121153:	8b 45 10             	mov    0x10(%ebp),%eax
c0121156:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c0121159:	8b 45 f0             	mov    -0x10(%ebp),%eax
c012115c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c012115f:	73 42                	jae    c01211a3 <memmove+0x65>
c0121161:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0121164:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0121167:	8b 45 ec             	mov    -0x14(%ebp),%eax
c012116a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c012116d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0121170:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c0121173:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0121176:	c1 e8 02             	shr    $0x2,%eax
c0121179:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c012117b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c012117e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0121181:	89 d7                	mov    %edx,%edi
c0121183:	89 c6                	mov    %eax,%esi
c0121185:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0121187:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c012118a:	83 e1 03             	and    $0x3,%ecx
c012118d:	74 02                	je     c0121191 <memmove+0x53>
c012118f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0121191:	89 f0                	mov    %esi,%eax
c0121193:	89 fa                	mov    %edi,%edx
c0121195:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c0121198:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c012119b:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c012119e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01211a1:	eb 36                	jmp    c01211d9 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c01211a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01211a6:	8d 50 ff             	lea    -0x1(%eax),%edx
c01211a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01211ac:	01 c2                	add    %eax,%edx
c01211ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01211b1:	8d 48 ff             	lea    -0x1(%eax),%ecx
c01211b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01211b7:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c01211ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01211bd:	89 c1                	mov    %eax,%ecx
c01211bf:	89 d8                	mov    %ebx,%eax
c01211c1:	89 d6                	mov    %edx,%esi
c01211c3:	89 c7                	mov    %eax,%edi
c01211c5:	fd                   	std    
c01211c6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c01211c8:	fc                   	cld    
c01211c9:	89 f8                	mov    %edi,%eax
c01211cb:	89 f2                	mov    %esi,%edx
c01211cd:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c01211d0:	89 55 c8             	mov    %edx,-0x38(%ebp)
c01211d3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c01211d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c01211d9:	83 c4 30             	add    $0x30,%esp
c01211dc:	5b                   	pop    %ebx
c01211dd:	5e                   	pop    %esi
c01211de:	5f                   	pop    %edi
c01211df:	5d                   	pop    %ebp
c01211e0:	c3                   	ret    

c01211e1 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c01211e1:	55                   	push   %ebp
c01211e2:	89 e5                	mov    %esp,%ebp
c01211e4:	57                   	push   %edi
c01211e5:	56                   	push   %esi
c01211e6:	83 ec 20             	sub    $0x20,%esp
c01211e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01211ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01211ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c01211f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01211f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01211f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c01211fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01211fe:	c1 e8 02             	shr    $0x2,%eax
c0121201:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c0121203:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0121206:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0121209:	89 d7                	mov    %edx,%edi
c012120b:	89 c6                	mov    %eax,%esi
c012120d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c012120f:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0121212:	83 e1 03             	and    $0x3,%ecx
c0121215:	74 02                	je     c0121219 <memcpy+0x38>
c0121217:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0121219:	89 f0                	mov    %esi,%eax
c012121b:	89 fa                	mov    %edi,%edx
c012121d:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0121220:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0121223:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c0121226:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c0121229:	83 c4 20             	add    $0x20,%esp
c012122c:	5e                   	pop    %esi
c012122d:	5f                   	pop    %edi
c012122e:	5d                   	pop    %ebp
c012122f:	c3                   	ret    

c0121230 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c0121230:	55                   	push   %ebp
c0121231:	89 e5                	mov    %esp,%ebp
c0121233:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c0121236:	8b 45 08             	mov    0x8(%ebp),%eax
c0121239:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c012123c:	8b 45 0c             	mov    0xc(%ebp),%eax
c012123f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c0121242:	eb 30                	jmp    c0121274 <memcmp+0x44>
        if (*s1 != *s2) {
c0121244:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0121247:	0f b6 10             	movzbl (%eax),%edx
c012124a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c012124d:	0f b6 00             	movzbl (%eax),%eax
c0121250:	38 c2                	cmp    %al,%dl
c0121252:	74 18                	je     c012126c <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c0121254:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0121257:	0f b6 00             	movzbl (%eax),%eax
c012125a:	0f b6 d0             	movzbl %al,%edx
c012125d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0121260:	0f b6 00             	movzbl (%eax),%eax
c0121263:	0f b6 c0             	movzbl %al,%eax
c0121266:	29 c2                	sub    %eax,%edx
c0121268:	89 d0                	mov    %edx,%eax
c012126a:	eb 1a                	jmp    c0121286 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c012126c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0121270:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c0121274:	8b 45 10             	mov    0x10(%ebp),%eax
c0121277:	8d 50 ff             	lea    -0x1(%eax),%edx
c012127a:	89 55 10             	mov    %edx,0x10(%ebp)
c012127d:	85 c0                	test   %eax,%eax
c012127f:	75 c3                	jne    c0121244 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c0121281:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0121286:	c9                   	leave  
c0121287:	c3                   	ret    
